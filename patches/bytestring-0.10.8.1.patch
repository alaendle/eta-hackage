From 55447d00c89f1bf0228ce69cb94e95c7a11e4030 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Tue, 25 Apr 2017 21:28:32 +0530
Subject: [PATCH] Patched

---
 Data/ByteString/Builder/Prim/ASCII.hs              |  26 +-
 Data/ByteString/Builder/Prim/Binary.hs             | 123 +++------
 .../Builder/Prim/Internal/UncheckedShifts.hs       |   4 +-
 Data/ByteString/Internal.hs                        |  33 +--
 Data/ByteString/Short/Internal.hs                  |   7 +-
 Data/ByteString/Unsafe.hs                          |   4 +-
 bytestring.cabal                                   |  11 +-
 java/Utils.java                                    | 283 +++++++++++++++++++++
 8 files changed, 366 insertions(+), 125 deletions(-)
 create mode 100644 java/Utils.java

diff --git a/Data/ByteString/Builder/Prim/ASCII.hs b/Data/ByteString/Builder/Prim/ASCII.hs
index 62bd5be..84be510 100644
--- a/Data/ByteString/Builder/Prim/ASCII.hs
+++ b/Data/ByteString/Builder/Prim/ASCII.hs
@@ -104,11 +104,11 @@ char7 = (\c -> fromIntegral $ ord c .&. 0x7f) >$< word8
 -- Signed integers
 ------------------
 
-foreign import ccall unsafe "static _hs_bytestring_int_dec" c_int_dec
-    :: CInt -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.int_dec"
+  c_int_dec :: CInt -> Ptr Word8 -> IO (Ptr Word8)
 
-foreign import ccall unsafe "static _hs_bytestring_long_long_int_dec" c_long_long_int_dec
-    :: CLLong -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.long_long_int_dec"
+  c_long_long_int_dec :: CLLong -> Ptr Word8 -> IO (Ptr Word8)
 
 {-# INLINE encodeIntDecimal #-}
 encodeIntDecimal :: Integral a => Int -> BoundedPrim a
@@ -146,11 +146,11 @@ intDec = caseWordSize_32_64
 -- Unsigned integers
 --------------------
 
-foreign import ccall unsafe "static _hs_bytestring_uint_dec" c_uint_dec
-    :: CUInt -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.uint_dec"
+  c_uint_dec :: CUInt -> Ptr Word8 -> IO (Ptr Word8)
 
-foreign import ccall unsafe "static _hs_bytestring_long_long_uint_dec" c_long_long_uint_dec
-    :: CULLong -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.long_long_uint_dec"
+  c_long_long_uint_dec :: CULLong -> Ptr Word8 -> IO (Ptr Word8)
 
 {-# INLINE encodeWordDecimal #-}
 encodeWordDecimal :: Integral a => Int -> BoundedPrim a
@@ -190,11 +190,11 @@ wordDec = caseWordSize_32_64
 -- without lead
 ---------------
 
-foreign import ccall unsafe "static _hs_bytestring_uint_hex" c_uint_hex
-    :: CUInt -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.uint_hex"
+  c_uint_hex :: CUInt -> Ptr Word8 -> IO (Ptr Word8)
 
-foreign import ccall unsafe "static _hs_bytestring_long_long_uint_hex" c_long_long_uint_hex
-    :: CULLong -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.long_long_uint_hex"
+  c_long_long_uint_hex :: CULLong -> Ptr Word8 -> IO (Ptr Word8)
 
 {-# INLINE encodeWordHex #-}
 encodeWordHex :: forall a. (Storable a, Integral a) => BoundedPrim a
@@ -287,5 +287,3 @@ floatHexFixed = encodeFloatViaWord32F word32HexFixed
 {-# INLINE doubleHexFixed #-}
 doubleHexFixed :: FixedPrim Double
 doubleHexFixed = encodeDoubleViaWord64F word64HexFixed
-
-
diff --git a/Data/ByteString/Builder/Prim/Binary.hs b/Data/ByteString/Builder/Prim/Binary.hs
index af0c0bb..07cd5b9 100644
--- a/Data/ByteString/Builder/Prim/Binary.hs
+++ b/Data/ByteString/Builder/Prim/Binary.hs
@@ -59,8 +59,9 @@ import Data.ByteString.Builder.Prim.Internal.UncheckedShifts
 import Data.ByteString.Builder.Prim.Internal.Floating
 
 import Foreign
+import System.Info (bigEndian)
 
-#include "MachDeps.h"
+#define WORD_SIZE_IN_BITS 32
 
 ------------------------------------------------------------------------------
 -- Binary encoding
@@ -83,50 +84,42 @@ word8 = storableToF
 -- | Encoding 'Word16's in big endian format.
 {-# INLINE word16BE #-}
 word16BE :: FixedPrim Word16
-#ifdef WORDS_BIGENDIAN
-word16BE = word16Host
-#else
-word16BE = fixedPrim 2 $ \w p -> do
-    poke p               (fromIntegral (shiftr_w16 w 8) :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (w)              :: Word8)
-#endif
+word16BE
+  | bigEndian = word16Host
+  | otherwise = fixedPrim 2 $ \w p -> do
+      poke p               (fromIntegral (shiftr_w16 w 8) :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (w)              :: Word8)
 
 -- | Encoding 'Word16's in little endian format.
 {-# INLINE word16LE #-}
 word16LE :: FixedPrim Word16
-#ifdef WORDS_BIGENDIAN
-word16LE = fixedPrim 2 $ \w p -> do
-    poke p               (fromIntegral (w)              :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w16 w 8) :: Word8)
-#else
-word16LE = word16Host
-#endif
+word16LE
+  | bigEndian = fixedPrim 2 $ \w p -> do
+      poke p               (fromIntegral (w)              :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (shiftr_w16 w 8) :: Word8)
+  | otherwise = word16Host
 
 -- | Encoding 'Word32's in big endian format.
 {-# INLINE word32BE #-}
 word32BE :: FixedPrim Word32
-#ifdef WORDS_BIGENDIAN
-word32BE = word32Host
-#else
-word32BE = fixedPrim 4 $ \w p -> do
-    poke p               (fromIntegral (shiftr_w32 w 24) :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 w 16) :: Word8)
-    poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 w  8) :: Word8)
-    poke (p `plusPtr` 3) (fromIntegral (w)               :: Word8)
-#endif
+word32BE
+  | bigEndian = word32Host
+  | otherwise = fixedPrim 4 $ \w p -> do
+      poke p               (fromIntegral (shiftr_w32 w 24) :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 w 16) :: Word8)
+      poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 w  8) :: Word8)
+      poke (p `plusPtr` 3) (fromIntegral (w)               :: Word8)
 
 -- | Encoding 'Word32's in little endian format.
 {-# INLINE word32LE #-}
 word32LE :: FixedPrim Word32
-#ifdef WORDS_BIGENDIAN
-word32LE = fixedPrim 4 $ \w p -> do
-    poke p               (fromIntegral (w)               :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 w  8) :: Word8)
-    poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 w 16) :: Word8)
-    poke (p `plusPtr` 3) (fromIntegral (shiftr_w32 w 24) :: Word8)
-#else
-word32LE = word32Host
-#endif
+word32LE
+  | bigEndian = fixedPrim 4 $ \w p -> do
+      poke p               (fromIntegral (w)               :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 w  8) :: Word8)
+      poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 w 16) :: Word8)
+      poke (p `plusPtr` 3) (fromIntegral (shiftr_w32 w 24) :: Word8)
+  | otherwise = word32Host
 
 -- on a little endian machine:
 -- word32LE w32 = fixedPrim 4 (\w p -> poke (castPtr p) w32)
@@ -134,15 +127,13 @@ word32LE = word32Host
 -- | Encoding 'Word64's in big endian format.
 {-# INLINE word64BE #-}
 word64BE :: FixedPrim Word64
-#ifdef WORDS_BIGENDIAN
-word64BE = word64Host
-#else
-#if WORD_SIZE_IN_BITS < 64
+word64BE
+  | bigEndian = word64Host
+  | otherwise =
 --
 -- To avoid expensive 64 bit shifts on 32 bit machines, we cast to
 -- Word32, and write that
 --
-word64BE =
     fixedPrim 8 $ \w p -> do
         let a = fromIntegral (shiftr_w64 w 32) :: Word32
             b = fromIntegral w                 :: Word32
@@ -154,51 +145,23 @@ word64BE =
         poke (p `plusPtr` 5) (fromIntegral (shiftr_w32 b 16) :: Word8)
         poke (p `plusPtr` 6) (fromIntegral (shiftr_w32 b  8) :: Word8)
         poke (p `plusPtr` 7) (fromIntegral (b)               :: Word8)
-#else
-word64BE = fixedPrim 8 $ \w p -> do
-    poke p               (fromIntegral (shiftr_w64 w 56) :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w64 w 48) :: Word8)
-    poke (p `plusPtr` 2) (fromIntegral (shiftr_w64 w 40) :: Word8)
-    poke (p `plusPtr` 3) (fromIntegral (shiftr_w64 w 32) :: Word8)
-    poke (p `plusPtr` 4) (fromIntegral (shiftr_w64 w 24) :: Word8)
-    poke (p `plusPtr` 5) (fromIntegral (shiftr_w64 w 16) :: Word8)
-    poke (p `plusPtr` 6) (fromIntegral (shiftr_w64 w  8) :: Word8)
-    poke (p `plusPtr` 7) (fromIntegral (w)               :: Word8)
-#endif
-#endif
 
 -- | Encoding 'Word64's in little endian format.
 {-# INLINE word64LE #-}
 word64LE :: FixedPrim Word64
-#ifdef WORDS_BIGENDIAN
-#if WORD_SIZE_IN_BITS < 64
-word64LE =
-    fixedPrim 8 $ \w p -> do
-        let b = fromIntegral (shiftr_w64 w 32) :: Word32
-            a = fromIntegral w                 :: Word32
-        poke (p)             (fromIntegral (a)               :: Word8)
-        poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 a  8) :: Word8)
-        poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 a 16) :: Word8)
-        poke (p `plusPtr` 3) (fromIntegral (shiftr_w32 a 24) :: Word8)
-        poke (p `plusPtr` 4) (fromIntegral (b)               :: Word8)
-        poke (p `plusPtr` 5) (fromIntegral (shiftr_w32 b  8) :: Word8)
-        poke (p `plusPtr` 6) (fromIntegral (shiftr_w32 b 16) :: Word8)
-        poke (p `plusPtr` 7) (fromIntegral (shiftr_w32 b 24) :: Word8)
-#else
-word64LE = fixedPrim 8 $ \w p -> do
-    poke p               (fromIntegral (w)               :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w64 w  8) :: Word8)
-    poke (p `plusPtr` 2) (fromIntegral (shiftr_w64 w 16) :: Word8)
-    poke (p `plusPtr` 3) (fromIntegral (shiftr_w64 w 24) :: Word8)
-    poke (p `plusPtr` 4) (fromIntegral (shiftr_w64 w 32) :: Word8)
-    poke (p `plusPtr` 5) (fromIntegral (shiftr_w64 w 40) :: Word8)
-    poke (p `plusPtr` 6) (fromIntegral (shiftr_w64 w 48) :: Word8)
-    poke (p `plusPtr` 7) (fromIntegral (shiftr_w64 w 56) :: Word8)
-#endif
-#else
-word64LE = word64Host
-#endif
-
+word64LE
+  | bigEndian = fixedPrim 8 $ \w p -> do
+      let b = fromIntegral (shiftr_w64 w 32) :: Word32
+          a = fromIntegral w                 :: Word32
+      poke (p)             (fromIntegral (a)               :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 a  8) :: Word8)
+      poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 a 16) :: Word8)
+      poke (p `plusPtr` 3) (fromIntegral (shiftr_w32 a 24) :: Word8)
+      poke (p `plusPtr` 4) (fromIntegral (b)               :: Word8)
+      poke (p `plusPtr` 5) (fromIntegral (shiftr_w32 b  8) :: Word8)
+      poke (p `plusPtr` 6) (fromIntegral (shiftr_w32 b 16) :: Word8)
+      poke (p `plusPtr` 7) (fromIntegral (shiftr_w32 b 24) :: Word8)
+  | otherwise = word64Host
 
 -- | Encode a single native machine 'Word'. The 'Word's is encoded in host order,
 -- host endian form, for the machine you are on. On a 64 bit machine the 'Word'
@@ -335,5 +298,3 @@ floatHost = storableToF
 {-# INLINE doubleHost #-}
 doubleHost :: FixedPrim Double
 doubleHost = storableToF
-
-
diff --git a/Data/ByteString/Builder/Prim/Internal/UncheckedShifts.hs b/Data/ByteString/Builder/Prim/Internal/UncheckedShifts.hs
index 4cad1d6..88862b9 100644
--- a/Data/ByteString/Builder/Prim/Internal/UncheckedShifts.hs
+++ b/Data/ByteString/Builder/Prim/Internal/UncheckedShifts.hs
@@ -19,7 +19,7 @@
 -- greater than the size in bits of a machine Int#.-
 --
 #if !defined(__HADDOCK__)
-#include "MachDeps.h"
+#define WORD_SIZE_IN_BITS 32
 #endif
 
 module Data.ByteString.Builder.Prim.Internal.UncheckedShifts (
@@ -103,5 +103,3 @@ caseWordSize_32_64 f32 f64 =
     32 -> f32
     64 -> f64
     s  -> error $ "caseWordSize_32_64: unsupported Word bit-size " ++ show s
-
-
diff --git a/Data/ByteString/Internal.hs b/Data/ByteString/Internal.hs
index 2565a49..d0ad12b 100644
--- a/Data/ByteString/Internal.hs
+++ b/Data/ByteString/Internal.hs
@@ -54,7 +54,8 @@ module Data.ByteString.Internal (
 
         -- * Standard C Functions
         c_strlen,               -- :: CString -> IO CInt
-        c_free_finalizer,       -- :: FunPtr (Ptr Word8 -> IO ())
+        -- TODO: Deal with the finalizer
+        -- c_free_finalizer,       -- :: FunPtr (Ptr Word8 -> IO ())
 
         memchr,                 -- :: Ptr Word8 -> Word8 -> CSize -> IO Ptr Word8
         memcmp,                 -- :: Ptr Word8 -> Ptr Word8 -> Int -> IO CInt
@@ -195,12 +196,12 @@ packChars :: [Char] -> ByteString
 packChars cs = unsafePackLenChars (List.length cs) cs
 
 {-# INLINE [0] packChars #-}
-
+{- TODO: Deal with unsafePackAddress
 {-# RULES
 "ByteString packChars/packAddress" forall s .
    packChars (unpackCString# s) = accursedUnutterablePerformIO (unsafePackAddress s)
  #-}
-
+-}
 unsafePackLenBytes :: Int -> [Word8] -> ByteString
 unsafePackLenBytes len xs0 =
     unsafeCreate len $ \p -> go p xs0
@@ -562,32 +563,32 @@ inlinePerformIO = accursedUnutterablePerformIO
 -- Standard C functions
 --
 
-foreign import ccall unsafe "string.h strlen" c_strlen
+foreign import java unsafe "@static eta.bytestring.Utils.strlen" c_strlen
     :: CString -> IO CSize
 
-foreign import ccall unsafe "static stdlib.h &free" c_free_finalizer
-    :: FunPtr (Ptr Word8 -> IO ())
+-- foreign import java unsafe "static stdlib.h &free" c_free_finalizer
+--     :: FunPtr (Ptr Word8 -> IO ())
 
-foreign import ccall unsafe "string.h memchr" c_memchr
+foreign import java unsafe "@static eta.bytestring.Utils.memchr" c_memchr
     :: Ptr Word8 -> CInt -> CSize -> IO (Ptr Word8)
 
 memchr :: Ptr Word8 -> Word8 -> CSize -> IO (Ptr Word8)
 memchr p w s = c_memchr p (fromIntegral w) s
 
-foreign import ccall unsafe "string.h memcmp" c_memcmp
+foreign import java unsafe "@static eta.bytestring.Utils.memcmp" c_memcmp
     :: Ptr Word8 -> Ptr Word8 -> CSize -> IO CInt
 
 memcmp :: Ptr Word8 -> Ptr Word8 -> Int -> IO CInt
 memcmp p q s = c_memcmp p q (fromIntegral s)
 
-foreign import ccall unsafe "string.h memcpy" c_memcpy
+foreign import java unsafe "@static eta.bytestring.Utils.memcpy" c_memcpy
     :: Ptr Word8 -> Ptr Word8 -> CSize -> IO (Ptr Word8)
 
 memcpy :: Ptr Word8 -> Ptr Word8 -> Int -> IO ()
 memcpy p q s = c_memcpy p q (fromIntegral s) >> return ()
 
 {-
-foreign import ccall unsafe "string.h memmove" c_memmove
+foreign import java unsafe "@static eta.bytestring.Utils.memmove" c_memmove
     :: Ptr Word8 -> Ptr Word8 -> CSize -> IO (Ptr Word8)
 
 memmove :: Ptr Word8 -> Ptr Word8 -> CSize -> IO ()
@@ -595,7 +596,7 @@ memmove p q s = do c_memmove p q s
                    return ()
 -}
 
-foreign import ccall unsafe "string.h memset" c_memset
+foreign import java unsafe "@static eta.bytestring.Utils.memset" c_memset
     :: Ptr Word8 -> CInt -> CSize -> IO (Ptr Word8)
 
 memset :: Ptr Word8 -> Word8 -> CSize -> IO (Ptr Word8)
@@ -606,17 +607,17 @@ memset p w s = c_memset p (fromIntegral w) s
 -- Uses our C code
 --
 
-foreign import ccall unsafe "static fpstring.h fps_reverse" c_reverse
+foreign import java unsafe "@static eta.bytestring.Utils.fps_reverse" c_reverse
     :: Ptr Word8 -> Ptr Word8 -> CULong -> IO ()
 
-foreign import ccall unsafe "static fpstring.h fps_intersperse" c_intersperse
+foreign import java unsafe "@static eta.bytestring.Utils.fps_intersperse" c_intersperse
     :: Ptr Word8 -> Ptr Word8 -> CULong -> Word8 -> IO ()
 
-foreign import ccall unsafe "static fpstring.h fps_maximum" c_maximum
+foreign import java unsafe "@static eta.bytestring.Utils.fps_maximum" c_maximum
     :: Ptr Word8 -> CULong -> IO Word8
 
-foreign import ccall unsafe "static fpstring.h fps_minimum" c_minimum
+foreign import java unsafe "@static eta.bytestring.Utils.fps_minimum" c_minimum
     :: Ptr Word8 -> CULong -> IO Word8
 
-foreign import ccall unsafe "static fpstring.h fps_count" c_count
+foreign import java unsafe "@static eta.bytestring.Utils.fps_count" c_count
     :: Ptr Word8 -> CULong -> Word8 -> IO CULong
diff --git a/Data/ByteString/Short/Internal.hs b/Data/ByteString/Short/Internal.hs
index 15308d6..be1a1e2 100644
--- a/Data/ByteString/Short/Internal.hs
+++ b/Data/ByteString/Short/Internal.hs
@@ -15,7 +15,7 @@
 -- Maintainer  : duncan@community.haskell.org
 -- Stability   : stable
 -- Portability : ghc only
--- 
+--
 -- Internal representation of ShortByteString
 --
 module Data.ByteString.Short.Internal (
@@ -185,7 +185,7 @@ length (SBS _ len) = len
 null :: ShortByteString -> Bool
 null sbs = length sbs == 0
 
--- | /O(1)/ 'ShortByteString' index (subscript) operator, starting from 0. 
+-- | /O(1)/ 'ShortByteString' index (subscript) operator, starting from 0.
 index :: ShortByteString -> Int -> Word8
 index sbs i
   | i >= 0 && i < length sbs = unsafeIndex sbs i
@@ -501,7 +501,7 @@ memcmp_ByteArray :: BA -> BA -> Int -> IO CInt
 memcmp_ByteArray (BA# ba1#) (BA# ba2#) len =
   c_memcmp_ByteArray ba1# ba2# (fromIntegral len)
 
-foreign import ccall unsafe "string.h memcmp"
+foreign import java unsafe "@static eta.bytestring.Utils.memcmp"
   c_memcmp_ByteArray :: ByteArray# -> ByteArray# -> CSize -> IO CInt
 
 
@@ -598,4 +598,3 @@ foreign import ccall unsafe "fpstring.h fps_memcpy_offsets"
   memcpy_ByteArray :: MutableByteArray# s -> CLong
                    -> ByteArray# -> CLong -> CSize -> IO ()
 #endif
-
diff --git a/Data/ByteString/Unsafe.hs b/Data/ByteString/Unsafe.hs
index a0a1da8..9250226 100644
--- a/Data/ByteString/Unsafe.hs
+++ b/Data/ByteString/Unsafe.hs
@@ -217,7 +217,7 @@ unsafePackCStringLen (ptr,len) = do
 --
 unsafePackMallocCString :: CString -> IO ByteString
 unsafePackMallocCString cstr = do
-    fp <- newForeignPtr c_free_finalizer (castPtr cstr)
+    fp <- newForeignPtr_ {- c_free_finalizer -} (castPtr cstr)
     len <- c_strlen cstr
     return $! PS fp 0 (fromIntegral len)
 
@@ -234,7 +234,7 @@ unsafePackMallocCString cstr = do
 --
 unsafePackMallocCStringLen :: CStringLen -> IO ByteString
 unsafePackMallocCStringLen (cstr, len) = do
-    fp <- newForeignPtr c_free_finalizer (castPtr cstr)
+    fp <- newForeignPtr_ {- c_free_finalizer -} (castPtr cstr)
     return $! PS fp 0 len
 
 -- ---------------------------------------------------------------------
diff --git a/bytestring.cabal b/bytestring.cabal
index 5890959..931ba5d 100644
--- a/bytestring.cabal
+++ b/bytestring.cabal
@@ -126,11 +126,12 @@ library
                     -fdicts-cheap
                     -fspec-constr-count=6
 
-  c-sources:         cbits/fpstring.c
-                     cbits/itoa.c
-  include-dirs:      include
-  includes:          fpstring.h
-  install-includes:  fpstring.h
+  java-sources: java/Utils.java
+  -- c-sources:         cbits/fpstring.c
+  --                    cbits/itoa.c
+  -- include-dirs:      include
+  -- includes:          fpstring.h
+  -- install-includes:  fpstring.h
 
    -- flags for the decimal integer serialization code
   if impl(ghc >= 6.11)
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..69a327a
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,283 @@
+package eta.bytestring;
+
+import java.io.UnsupportedEncodingException;
+import java.nio.ByteBuffer;
+
+import eta.runtime.io.StgByteArray;
+import eta.runtime.stg.StgClosure;
+import eta.runtime.io.MemoryManager;
+
+/* NOTE: Hard limit on ByteBuffer API: 2^32 - 1 because of reliance on
+         signed integer type everywhere.
+*/
+
+public class Utils {
+    public static final long LONG_MIN = Long.MIN_VALUE;
+    public static final long ONE_MIN = 1 + LONG_MIN;
+    public static final long ZERO_MIN = 0 + LONG_MIN;
+    public static final long UNSIGNED_TEN = ((long) 10) & 0xFFFFFFFF;
+
+    public static int strlen(ByteBuffer b) {
+        b = b.duplicate();
+        int n = 0;
+        while (b.get() != 0) {
+            n++;
+        }
+        return n;
+    }
+
+    /* TODO: Verify the c argument */
+    public static ByteBuffer memchr(ByteBuffer b, int c, int n) {
+        c = (int)((byte) c);
+        b = b.duplicate();
+
+        while (n-- != 0) {
+            if (b.get() == c) {
+                return (ByteBuffer) b.position(b.position() - 1);
+            }
+        }
+        return MemoryManager.nullAddress;
+    }
+
+    public static int memcmp(StgByteArray b1, StgByteArray b2, int n) {
+        return memcmp(b1.buf, b2.buf, n);
+    }
+
+    public static int memcmp(ByteBuffer b1, ByteBuffer b2, int n) {
+        /* TODO: Is the & 0xFF required? */
+        while (n-- != 0) {
+            int a = b1.get() & 0xFF;
+            int b = b2.get() & 0xFF;
+            if (a != b) {
+                return a - b;
+            }
+        }
+        return 0;
+    }
+
+    public static ByteBuffer memcpy(ByteBuffer dest, ByteBuffer src, int size) {
+        src = src.duplicate();
+        ByteBuffer dest2 = dest.duplicate();
+        src.limit(src.position() + size);
+        dest2.put(src);
+        return dest;
+    }
+
+    /* TODO: Verify c_ argument */
+    public static ByteBuffer memset(ByteBuffer b, int c_, int size) {
+        byte c = (byte) c_;
+        ByteBuffer b2 = b.duplicate();
+        while (size-- != 0) {
+            b2.put(c);
+        }
+        return b;
+    }
+
+    public static long fps_count(ByteBuffer bb, long len, int w) {
+        bb = bb.duplicate();
+        long c = 0;
+        len += LONG_MIN;
+        while (len-- != ZERO_MIN) {
+            // The 0xFF is to undo the effect of sign extension
+            if ((((int)bb.get()) & 0xFF) == w) {
+                c++;
+            }
+        }
+        return c;
+    }
+
+    public static int fps_minimum(ByteBuffer bb, long len) {
+        bb = bb.duplicate();
+        int c = 257;
+        len += LONG_MIN;
+        while (len-- != ZERO_MIN) {
+            // The 0xFF is to undo the effect of sign extension
+            int q = ((int)bb.get()) & 0xFF;
+            if (q < c) {
+                c = q;
+            }
+        }
+        return c;
+    }
+
+    public static int fps_maximum(ByteBuffer bb, long len) {
+        bb = bb.duplicate();
+        int c = -1;
+        len += LONG_MIN;
+        while (len-- != ZERO_MIN) {
+            // The 0xFF is to undo the effect of sign extension
+            int q = ((int)bb.get()) & 0xFF;
+            if (q > c) {
+                c = q;
+            }
+        }
+        return c;
+    }
+
+    public static void fps_intersperse(ByteBuffer q, ByteBuffer p, long n, int c_) {
+        p = p.duplicate();
+        q = q.duplicate();
+        byte c = (byte) c_;
+        n += LONG_MIN;
+        while (n > ONE_MIN) {
+            q.put(p.get());
+            q.put(c);
+            n--;
+        }
+        if (n == ONE_MIN) {
+            q.put(p.get());
+        }
+    }
+
+    public static void fps_reverse(ByteBuffer q, ByteBuffer p, long n_) {
+        p = p.duplicate();
+        q = q.duplicate();
+        int n = (int) n_;
+        while (n-- != 0) {
+            q.put(p.get(n));
+        }
+    }
+
+    public static byte[] digits;
+    static {
+        try {
+            digits = "0123456789abcdef".getBytes("UTF-8");
+        } catch(UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static ByteBuffer long_long_uint_hex(long x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        do {
+            ptr.put(digits[(int)x & 0xf]);
+            x >>>= 4;
+        } while (x != 0);
+        int n = ptr.position() - 1;
+        int m = 0;
+        int nfree = n;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ptr.position(nfree);
+    }
+
+    public static ByteBuffer uint_hex(int x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        do {
+            ptr.put(digits[x & 0xf]);
+            x >>>= 4;
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        int m = 0;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ptr.position(nfree);
+    }
+
+    public static ByteBuffer long_long_uint_dec(long x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        do {
+            long x_tmp = x;
+            x = eta.integer.Utils.divideUnsigned(x, 10);
+            ptr.put(digits[(int)(x_tmp - x * 10)]);
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        int m = 0;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ptr.position(nfree);
+    }
+
+    public static ByteBuffer uint_dec(int x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        do {
+            int x_tmp = x;
+            x = (int) ((((long) x) & 0xFFFFFFFFL) / 10L);
+            ptr.put(digits[x_tmp - x * 10]);
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        int m = 0;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ptr.position(nfree);
+    }
+
+    public static ByteBuffer long_long_int_dec(long x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        long x_tmp;
+        int m = 0;
+        if (x < 0) {
+            ptr.put((byte)'-');
+            x_tmp = x;
+            m++;
+            x /= 10;
+            ptr.put(digits[(int)(x * 10 - x_tmp)]);
+            if (x == 0) {
+                return ptr;
+            } else {
+                x = -x;
+            }
+        }
+
+        do {
+            x_tmp = x;
+            x /= 10;
+            ptr.put(digits[(int)(x_tmp - x * 10)]);
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ptr.position(nfree);
+    }
+
+    public static ByteBuffer int_dec(int x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        int x_tmp;
+        int m = 0;
+        if (x < 0) {
+            ptr.put((byte)'-');
+            x_tmp = x;
+            m++;
+            x /= 10;
+            ptr.put(digits[x * 10 - x_tmp]);
+            if (x == 0) {
+                return ptr;
+            } else {
+                x = -x;
+            }
+        }
+
+        do {
+            x_tmp = x;
+            x /= 10;
+            ptr.put(digits[x_tmp - x * 10]);
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ptr.position(nfree);
+    }
+}
-- 
2.7.4 (Apple Git-66)

