From 22fa9aa6272730f5c28a199016c95adc8ad30bbe Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Sat, 6 May 2017 08:21:31 +0530
Subject: [PATCH] Patched

---
 NOTES                                    |     3 +
 singletons.cabal                         |    29 +-
 src/Data/Promotion/Prelude/Base.hs       |    93 +-
 src/Data/Promotion/Prelude/List.hs       |  1196 ++-
 src/Data/Promotion/TH.hs                 |    70 -
 src/Data/Singletons/CustomStar.hs        |   123 -
 src/Data/Singletons/Deriving/Bounded.hs  |    57 -
 src/Data/Singletons/Deriving/Enum.hs     |    51 -
 src/Data/Singletons/Deriving/Infer.hs    |    24 -
 src/Data/Singletons/Deriving/Ord.hs      |    65 -
 src/Data/Singletons/Names.hs             |   264 -
 src/Data/Singletons/Partition.hs         |   111 -
 src/Data/Singletons/Prelude/Base.hs      |   571 +-
 src/Data/Singletons/Prelude/Bool.hs      |   203 +-
 src/Data/Singletons/Prelude/Either.hs    |   422 +-
 src/Data/Singletons/Prelude/Enum.hs      |  2733 ++++++-
 src/Data/Singletons/Prelude/Eq.hs        |   407 +-
 src/Data/Singletons/Prelude/Instances.hs |  1378 +++-
 src/Data/Singletons/Prelude/List.hs      | 11393 +++++++++++++++++++++++++++--
 src/Data/Singletons/Prelude/Maybe.hs     |   520 +-
 src/Data/Singletons/Prelude/Num.hs       |   255 +-
 src/Data/Singletons/Prelude/Ord.hs       |  2493 ++++++-
 src/Data/Singletons/Prelude/Tuple.hs     |   195 +-
 src/Data/Singletons/Promote.hs           |   591 --
 src/Data/Singletons/Promote/Defun.hs     |   196 -
 src/Data/Singletons/Promote/Eq.hs        |    65 -
 src/Data/Singletons/Promote/Monad.hs     |   111 -
 src/Data/Singletons/Promote/Type.hs      |    58 -
 src/Data/Singletons/Single.hs            |   594 --
 src/Data/Singletons/Single/Data.hs       |   148 -
 src/Data/Singletons/Single/Eq.hs         |   119 -
 src/Data/Singletons/Single/Monad.hs      |   224 -
 src/Data/Singletons/Single/Type.hs       |    54 -
 src/Data/Singletons/Syntax.hs            |   136 -
 src/Data/Singletons/TH.hs                |   147 -
 src/Data/Singletons/TypeLits.hs          |     1 +
 src/Data/Singletons/TypeLits/Internal.hs |    25 +-
 src/Data/Singletons/TypeRepStar.hs       |    85 -
 src/Data/Singletons/Util.hs              |   450 --
 39 files changed, 20865 insertions(+), 4795 deletions(-)
 create mode 100644 NOTES
 delete mode 100644 src/Data/Promotion/TH.hs
 delete mode 100644 src/Data/Singletons/CustomStar.hs
 delete mode 100644 src/Data/Singletons/Deriving/Bounded.hs
 delete mode 100644 src/Data/Singletons/Deriving/Enum.hs
 delete mode 100644 src/Data/Singletons/Deriving/Infer.hs
 delete mode 100644 src/Data/Singletons/Deriving/Ord.hs
 delete mode 100644 src/Data/Singletons/Names.hs
 delete mode 100644 src/Data/Singletons/Partition.hs
 delete mode 100644 src/Data/Singletons/Promote.hs
 delete mode 100644 src/Data/Singletons/Promote/Defun.hs
 delete mode 100644 src/Data/Singletons/Promote/Eq.hs
 delete mode 100644 src/Data/Singletons/Promote/Monad.hs
 delete mode 100644 src/Data/Singletons/Promote/Type.hs
 delete mode 100644 src/Data/Singletons/Single.hs
 delete mode 100644 src/Data/Singletons/Single/Data.hs
 delete mode 100644 src/Data/Singletons/Single/Eq.hs
 delete mode 100644 src/Data/Singletons/Single/Monad.hs
 delete mode 100644 src/Data/Singletons/Single/Type.hs
 delete mode 100644 src/Data/Singletons/Syntax.hs
 delete mode 100644 src/Data/Singletons/TH.hs
 delete mode 100644 src/Data/Singletons/TypeRepStar.hs
 delete mode 100644 src/Data/Singletons/Util.hs

diff --git a/NOTES b/NOTES
new file mode 100644
index 0000000..60a9caa
--- /dev/null
+++ b/NOTES
@@ -0,0 +1,3 @@
+- Data.Singletons.Prelude.Enum is hitting compiler bugs for SEnum
+- Data.Singletons.Prelude.Num is hitting compiler bugs for SNum
+- Data.Singletons.Prelude.Ord is hitting compiler bugs for SNum
\ No newline at end of file
diff --git a/singletons.cabal b/singletons.cabal
index 575839a..bfac3a4 100644
--- a/singletons.cabal
+++ b/singletons.cabal
@@ -46,16 +46,12 @@ library
                       mtl >= 2.1.2,
                       template-haskell,
                       containers >= 0.5,
-                      th-desugar >= 1.5.4.1 && < 1.6,
                       syb >= 0.4
   default-language:   Haskell2010
   other-extensions:   TemplateHaskell
         -- TemplateHaskell must be listed in cabal file to work with
         -- ghc7.8
   exposed-modules:    Data.Singletons,
-                      Data.Singletons.CustomStar,
-                      Data.Singletons.TypeRepStar,
-                      Data.Singletons.TH,
                       Data.Singletons.Prelude,
                       Data.Singletons.Prelude.Base,
                       Data.Singletons.Prelude.Bool,
@@ -68,7 +64,6 @@ library
                       Data.Singletons.Prelude.Num
                       Data.Singletons.Prelude.Tuple,
                       Data.Promotion.Prelude,
-                      Data.Promotion.TH,
                       Data.Promotion.Prelude.Base,
                       Data.Promotion.Prelude.Bool,
                       Data.Promotion.Prelude.Either,
@@ -83,28 +78,10 @@ library
                       Data.Singletons.Decide,
                       Data.Singletons.SuppressUnusedWarnings
 
-  other-modules:      Data.Singletons.Deriving.Infer,
-                      Data.Singletons.Deriving.Bounded,
-                      Data.Singletons.Deriving.Enum,
-                      Data.Singletons.Deriving.Ord,
-                      Data.Singletons.Promote,
-                      Data.Singletons.Promote.Monad,
-                      Data.Singletons.Promote.Eq,
-                      Data.Singletons.Promote.Type,
-                      Data.Singletons.Promote.Defun,
-                      Data.Singletons.Util,
-                      Data.Singletons.Partition,
-                      Data.Singletons.Prelude.Instances,
-                      Data.Singletons.Names,
-                      Data.Singletons.Single.Monad,
-                      Data.Singletons.Single.Type,
-                      Data.Singletons.Single.Eq,
-                      Data.Singletons.Single.Data,
-                      Data.Singletons.Single,
-                      Data.Singletons.TypeLits.Internal,
-                      Data.Singletons.Syntax
+  other-modules:      Data.Singletons.Prelude.Instances,
+                      Data.Singletons.TypeLits.Internal
 
-  ghc-options:        -Wall
+  ghc-options:        -Wall -ddump-splices -dsuppress-all
 
 test-suite singletons-test-suite
   type:               exitcode-stdio-1.0
diff --git a/src/Data/Promotion/Prelude/Base.hs b/src/Data/Promotion/Prelude/Base.hs
index 6ea6a30..210dfde 100644
--- a/src/Data/Promotion/Prelude/Base.hs
+++ b/src/Data/Promotion/Prelude/Base.hs
@@ -42,14 +42,89 @@ module Data.Promotion.Prelude.Base (
   SeqSym0, SeqSym1, SeqSym2
   ) where
 
-import Data.Singletons.TH
+import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.Prelude.Base
 
-$(promoteOnly [d|
-  -- Does not singletoznize. See #30
-  until                   :: (a -> Bool) -> (a -> a) -> a -> a
-  until p f = go
-    where
-      go x | p x          = x
-           | otherwise    = go (f x)
- |])
+type family Case_1627546615_aEKQ p_aEKo
+                                  f_aEKp
+                                  x_aEKO
+                                  arg_1627546569_aEKL
+                                  a_1627546586_aEKq
+                                  t_aEKR where
+  Case_1627546615_aEKQ p_aEKo f_aEKp x_aEKO arg_1627546569_aEKL a_1627546586_aEKq 'True = x_aEKO
+  Case_1627546615_aEKQ p_aEKo f_aEKp x_aEKO arg_1627546569_aEKL a_1627546586_aEKq 'False = Apply (Let1627546591GoSym3 p_aEKo f_aEKp a_1627546586_aEKq) (Apply f_aEKp x_aEKO)
+type family Case_1627546612_aEKN p_aEKo
+                                  f_aEKp
+                                  arg_1627546569_aEKL
+                                  a_1627546586_aEKq
+                                  t_aEKS where
+  Case_1627546612_aEKN p_aEKo f_aEKp arg_1627546569_aEKL a_1627546586_aEKq x_aEKO = Case_1627546615_aEKQ p_aEKo f_aEKp x_aEKO arg_1627546569_aEKL a_1627546586_aEKq (Apply p_aEKo x_aEKO)
+type Let1627546591GoSym4 t_aEKs t_aEKt t_aEKu t_aEKv =
+    Let1627546591Go t_aEKs t_aEKt t_aEKu t_aEKv
+instance SuppressUnusedWarnings Let1627546591GoSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627546591GoSym3KindInference ())
+data Let1627546591GoSym3 l_aEKG l_aEKH l_aEKI l_aEKF
+  = forall arg_aEKJ. KindOf (Apply (Let1627546591GoSym3 l_aEKG l_aEKH l_aEKI) arg_aEKJ) ~ KindOf (Let1627546591GoSym4 l_aEKG l_aEKH l_aEKI arg_aEKJ) =>
+    Let1627546591GoSym3KindInference
+type instance Apply (Let1627546591GoSym3 l_aEKG l_aEKH l_aEKI) l_aEKF = Let1627546591GoSym4 l_aEKG l_aEKH l_aEKI l_aEKF
+instance SuppressUnusedWarnings Let1627546591GoSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627546591GoSym2KindInference ())
+data Let1627546591GoSym2 l_aEKC l_aEKD l_aEKB
+  = forall arg_aEKE. KindOf (Apply (Let1627546591GoSym2 l_aEKC l_aEKD) arg_aEKE) ~ KindOf (Let1627546591GoSym3 l_aEKC l_aEKD arg_aEKE) =>
+    Let1627546591GoSym2KindInference
+type instance Apply (Let1627546591GoSym2 l_aEKC l_aEKD) l_aEKB = Let1627546591GoSym3 l_aEKC l_aEKD l_aEKB
+instance SuppressUnusedWarnings Let1627546591GoSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627546591GoSym1KindInference ())
+data Let1627546591GoSym1 l_aEKz l_aEKy
+  = forall arg_aEKA. KindOf (Apply (Let1627546591GoSym1 l_aEKz) arg_aEKA) ~ KindOf (Let1627546591GoSym2 l_aEKz arg_aEKA) =>
+    Let1627546591GoSym1KindInference
+type instance Apply (Let1627546591GoSym1 l_aEKz) l_aEKy = Let1627546591GoSym2 l_aEKz l_aEKy
+instance SuppressUnusedWarnings Let1627546591GoSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627546591GoSym0KindInference ())
+data Let1627546591GoSym0 l_aEKw
+  = forall arg_aEKx. KindOf (Apply Let1627546591GoSym0 arg_aEKx) ~ KindOf (Let1627546591GoSym1 arg_aEKx) =>
+    Let1627546591GoSym0KindInference
+type instance Apply Let1627546591GoSym0 l_aEKw = Let1627546591GoSym1 l_aEKw
+type family Let1627546591Go p_aEKo
+                            f_aEKp
+                            a_1627546586_aEKq
+                            a_aEKK where
+  Let1627546591Go p_aEKo f_aEKp a_1627546586_aEKq arg_1627546569_aEKL = Case_1627546612_aEKN p_aEKo f_aEKp arg_1627546569_aEKL a_1627546586_aEKq arg_1627546569_aEKL
+type UntilSym3 (t_aEK7 :: TyFun a_aEK0 Bool -> *)
+                (t_aEK8 :: TyFun a_aEK0 a_aEK0 -> *)
+                (t_aEK9 :: a_aEK0) =
+    Until t_aEK7 t_aEK8 t_aEK9
+instance SuppressUnusedWarnings UntilSym2 where
+  suppressUnusedWarnings _ = snd ((,) UntilSym2KindInference ())
+data UntilSym2 (l_aEKg :: TyFun a_aEK0 Bool -> *)
+                (l_aEKh :: TyFun a_aEK0 a_aEK0 -> *)
+                (l_aEKf :: TyFun a_aEK0 a_aEK0)
+  = forall arg_aEKi. KindOf (Apply (UntilSym2 l_aEKg l_aEKh) arg_aEKi) ~ KindOf (UntilSym3 l_aEKg l_aEKh arg_aEKi) =>
+    UntilSym2KindInference
+type instance Apply (UntilSym2 l_aEKg l_aEKh) l_aEKf = UntilSym3 l_aEKg l_aEKh l_aEKf
+instance SuppressUnusedWarnings UntilSym1 where
+  suppressUnusedWarnings _ = snd ((,) UntilSym1KindInference ())
+data UntilSym1 (l_aEKd :: TyFun a_aEK0 Bool -> *)
+                (l_aEKc :: TyFun (TyFun a_aEK0 a_aEK0 -> *) (TyFun a_aEK0 a_aEK0
+                                                            -> *))
+  = forall arg_aEKe. KindOf (Apply (UntilSym1 l_aEKd) arg_aEKe) ~ KindOf (UntilSym2 l_aEKd arg_aEKe) =>
+    UntilSym1KindInference
+type instance Apply (UntilSym1 l_aEKd) l_aEKc = UntilSym2 l_aEKd l_aEKc
+instance SuppressUnusedWarnings UntilSym0 where
+  suppressUnusedWarnings _ = snd ((,) UntilSym0KindInference ())
+data UntilSym0 (l_aEKa :: TyFun (TyFun a_aEK0 Bool
+                                  -> *) (TyFun (TyFun a_aEK0 a_aEK0 -> *) (TyFun a_aEK0 a_aEK0
+                                                                          -> *)
+                                        -> *))
+  = forall arg_aEKb. KindOf (Apply UntilSym0 arg_aEKb) ~ KindOf (UntilSym1 arg_aEKb) =>
+    UntilSym0KindInference
+type instance Apply UntilSym0 l_aEKa = UntilSym1 l_aEKa
+type family Until (a_aEKj :: TyFun a_aEK0 Bool -> *)
+                  (a_aEKk :: TyFun a_aEK0 a_aEK0 -> *)
+                  (a_aEKl :: a_aEK0) :: a_aEK0 where
+  Until p_aEKo f_aEKp a_1627546586_aEKq = Apply (Let1627546591GoSym3 p_aEKo f_aEKp a_1627546586_aEKq) a_1627546586_aEKq
diff --git a/src/Data/Promotion/Prelude/List.hs b/src/Data/Promotion/Prelude/List.hs
index 5b193d3..02e0abf 100644
--- a/src/Data/Promotion/Prelude/List.hs
+++ b/src/Data/Promotion/Prelude/List.hs
@@ -228,76 +228,1126 @@ import Data.Singletons.Prelude.Base
 import Data.Singletons.Prelude.Eq
 import Data.Singletons.Prelude.List
 import Data.Singletons.Prelude.Maybe
-import Data.Singletons.TH
-
-$(promoteOnly [d|
-
-  -- Overlapping patterns don't singletonize
-  stripPrefix :: Eq a => [a] -> [a] -> Maybe [a]
-  stripPrefix [] ys = Just ys
-  stripPrefix (x:xs) (y:ys)
-   | x == y = stripPrefix xs ys
-  stripPrefix _ _ = Nothing
-
-  -- To singletonize these we would need to rewrite all patterns
-  -- as non-overlapping. This means 2^7 equations for zipWith7.
-
-  zip4                    :: [a] -> [b] -> [c] -> [d] -> [(a,b,c,d)]
-  zip4                    =  zipWith4 (,,,)
-
-  zip5                    :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a,b,c,d,e)]
-  zip5                    =  zipWith5 (,,,,)
-
-  zip6                    :: [a] -> [b] -> [c] -> [d] -> [e] -> [f] ->
-                              [(a,b,c,d,e,f)]
-  zip6                    =  zipWith6 (,,,,,)
-
-  zip7                    :: [a] -> [b] -> [c] -> [d] -> [e] -> [f] ->
-                              [g] -> [(a,b,c,d,e,f,g)]
-  zip7                    =  zipWith7 (,,,,,,)
-
-  zipWith4                :: (a->b->c->d->e) -> [a]->[b]->[c]->[d]->[e]
-  zipWith4 z (a:as) (b:bs) (c:cs) (d:ds)
-                          =  z a b c d : zipWith4 z as bs cs ds
-  zipWith4 _ _ _ _ _      =  []
-
-  zipWith5                :: (a->b->c->d->e->f) ->
-                             [a]->[b]->[c]->[d]->[e]->[f]
-  zipWith5 z (a:as) (b:bs) (c:cs) (d:ds) (e:es)
-                          =  z a b c d e : zipWith5 z as bs cs ds es
-  zipWith5 _ _ _ _ _ _    = []
-
-  zipWith6                :: (a->b->c->d->e->f->g) ->
-                             [a]->[b]->[c]->[d]->[e]->[f]->[g]
-  zipWith6 z (a:as) (b:bs) (c:cs) (d:ds) (e:es) (f:fs)
-                          =  z a b c d e f : zipWith6 z as bs cs ds es fs
-  zipWith6 _ _ _ _ _ _ _  = []
-
-  zipWith7                :: (a->b->c->d->e->f->g->h) ->
-                             [a]->[b]->[c]->[d]->[e]->[f]->[g]->[h]
-  zipWith7 z (a:as) (b:bs) (c:cs) (d:ds) (e:es) (f:fs) (g:gs)
-                     =  z a b c d e f g : zipWith7 z as bs cs ds es fs gs
-  zipWith7 _ _ _ _ _ _ _ _ = []
-
--- These functions use Integral or Num typeclass instead of Int.
---
---  genericLength, genericTake, genericDrop, genericSplitAt, genericIndex
---  genericReplicate
---
--- We provide aliases below to improve compatibility
-
-  genericTake :: (Integral i) => i -> [a] -> [a]
-  genericTake = take
-
-  genericDrop :: (Integral i) => i -> [a] -> [a]
-  genericDrop = drop
-
-  genericSplitAt :: (Integral i) => i -> [a] -> ([a], [a])
-  genericSplitAt = splitAt
-
-  genericIndex :: (Integral i) => [a] -> i -> a
-  genericIndex = (!!)
-
-  genericReplicate :: (Integral i) => i -> a -> [a]
-  genericReplicate = replicate
- |])
+import Data.Singletons.Prelude.Tuple
+import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
+
+type family Case_1627899426_a28xl x_a28xe
+                                  xs_a28xf
+                                  y_a28xg
+                                  ys_a28xh
+                                  arg_1627898803_a28xa
+                                  arg_1627898805_a28xb
+                                  t_a28xs where
+  Case_1627899426_a28xl x_a28xe xs_a28xf y_a28xg ys_a28xh arg_1627898803_a28xa arg_1627898805_a28xb '(_z_1627899428_a28xo,
+                                                                                                      _z_1627899431_a28xr) = NothingSym0
+type family Case_1627899424_a28xj x_a28xe
+                                  xs_a28xf
+                                  y_a28xg
+                                  ys_a28xh
+                                  arg_1627898803_a28xa
+                                  arg_1627898805_a28xb
+                                  t_a28xt where
+  Case_1627899424_a28xj x_a28xe xs_a28xf y_a28xg ys_a28xh arg_1627898803_a28xa arg_1627898805_a28xb 'True = Apply (Apply StripPrefixSym0 xs_a28xf) ys_a28xh
+  Case_1627899424_a28xj x_a28xe xs_a28xf y_a28xg ys_a28xh arg_1627898803_a28xa arg_1627898805_a28xb 'False = Case_1627899426_a28xl x_a28xe xs_a28xf y_a28xg ys_a28xh arg_1627898803_a28xa arg_1627898805_a28xb (Apply (Apply Tuple2Sym0 arg_1627898803_a28xa) arg_1627898805_a28xb)
+type family Case_1627899418_a28xd arg_1627898803_a28xa
+                                  arg_1627898805_a28xb
+                                  t_a28xA where
+  Case_1627899418_a28xd arg_1627898803_a28xa arg_1627898805_a28xb '((x_a28xe ': xs_a28xf),
+                                                                    (y_a28xg ': ys_a28xh)) = Case_1627899424_a28xj x_a28xe xs_a28xf y_a28xg ys_a28xh arg_1627898803_a28xa arg_1627898805_a28xb (Apply (Apply (:==$) x_a28xe) y_a28xg)
+  Case_1627899418_a28xd arg_1627898803_a28xa arg_1627898805_a28xb '(_z_1627899436_a28xw,
+                                                                    _z_1627899439_a28xz) = NothingSym0
+type GenericReplicateSym2 (t_a28nD :: i_a28nf)
+                          (t_a28nE :: a_a28ng) =
+    GenericReplicate t_a28nD t_a28nE
+instance SuppressUnusedWarnings GenericReplicateSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericReplicateSym1KindInference ())
+data GenericReplicateSym1 (l_a28nI :: i_a28nf)
+                          (l_a28nH :: TyFun a_a28ng [a_a28ng])
+  = forall arg_a28nJ. KindOf (Apply (GenericReplicateSym1 l_a28nI) arg_a28nJ) ~ KindOf (GenericReplicateSym2 l_a28nI arg_a28nJ) =>
+    GenericReplicateSym1KindInference
+type instance Apply (GenericReplicateSym1 l_a28nI) l_a28nH = GenericReplicateSym2 l_a28nI l_a28nH
+instance SuppressUnusedWarnings GenericReplicateSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericReplicateSym0KindInference ())
+data GenericReplicateSym0 (l_a28nF :: TyFun i_a28nf (TyFun a_a28ng [a_a28ng]
+                                                      -> *))
+  = forall arg_a28nG. KindOf (Apply GenericReplicateSym0 arg_a28nG) ~ KindOf (GenericReplicateSym1 arg_a28nG) =>
+    GenericReplicateSym0KindInference
+type instance Apply GenericReplicateSym0 l_a28nF = GenericReplicateSym1 l_a28nF
+type GenericIndexSym2 (t_a28nS :: [a_a28nd]) (t_a28nT :: i_a28ne) =
+    GenericIndex t_a28nS t_a28nT
+instance SuppressUnusedWarnings GenericIndexSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericIndexSym1KindInference ())
+data GenericIndexSym1 (l_a28nX :: [a_a28nd])
+                      (l_a28nW :: TyFun i_a28ne a_a28nd)
+  = forall arg_a28nY. KindOf (Apply (GenericIndexSym1 l_a28nX) arg_a28nY) ~ KindOf (GenericIndexSym2 l_a28nX arg_a28nY) =>
+    GenericIndexSym1KindInference
+type instance Apply (GenericIndexSym1 l_a28nX) l_a28nW = GenericIndexSym2 l_a28nX l_a28nW
+instance SuppressUnusedWarnings GenericIndexSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericIndexSym0KindInference ())
+data GenericIndexSym0 (l_a28nU :: TyFun [a_a28nd] (TyFun i_a28ne a_a28nd
+                                                    -> *))
+  = forall arg_a28nV. KindOf (Apply GenericIndexSym0 arg_a28nV) ~ KindOf (GenericIndexSym1 arg_a28nV) =>
+    GenericIndexSym0KindInference
+type instance Apply GenericIndexSym0 l_a28nU = GenericIndexSym1 l_a28nU
+type GenericSplitAtSym2 (t_a28o7 :: i_a28nb)
+                        (t_a28o8 :: [a_a28nc]) =
+    GenericSplitAt t_a28o7 t_a28o8
+instance SuppressUnusedWarnings GenericSplitAtSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericSplitAtSym1KindInference ())
+data GenericSplitAtSym1 (l_a28oc :: i_a28nb)
+                        (l_a28ob :: TyFun [a_a28nc] ([a_a28nc], [a_a28nc]))
+  = forall arg_a28od. KindOf (Apply (GenericSplitAtSym1 l_a28oc) arg_a28od) ~ KindOf (GenericSplitAtSym2 l_a28oc arg_a28od) =>
+    GenericSplitAtSym1KindInference
+type instance Apply (GenericSplitAtSym1 l_a28oc) l_a28ob = GenericSplitAtSym2 l_a28oc l_a28ob
+instance SuppressUnusedWarnings GenericSplitAtSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericSplitAtSym0KindInference ())
+data GenericSplitAtSym0 (l_a28o9 :: TyFun i_a28nb (TyFun [a_a28nc] ([a_a28nc],
+                                                                    [a_a28nc])
+                                                    -> *))
+  = forall arg_a28oa. KindOf (Apply GenericSplitAtSym0 arg_a28oa) ~ KindOf (GenericSplitAtSym1 arg_a28oa) =>
+    GenericSplitAtSym0KindInference
+type instance Apply GenericSplitAtSym0 l_a28o9 = GenericSplitAtSym1 l_a28o9
+type GenericDropSym2 (t_a28om :: i_a28n9) (t_a28on :: [a_a28na]) =
+    GenericDrop t_a28om t_a28on
+instance SuppressUnusedWarnings GenericDropSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericDropSym1KindInference ())
+data GenericDropSym1 (l_a28or :: i_a28n9)
+                      (l_a28oq :: TyFun [a_a28na] [a_a28na])
+  = forall arg_a28os. KindOf (Apply (GenericDropSym1 l_a28or) arg_a28os) ~ KindOf (GenericDropSym2 l_a28or arg_a28os) =>
+    GenericDropSym1KindInference
+type instance Apply (GenericDropSym1 l_a28or) l_a28oq = GenericDropSym2 l_a28or l_a28oq
+instance SuppressUnusedWarnings GenericDropSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericDropSym0KindInference ())
+data GenericDropSym0 (l_a28oo :: TyFun i_a28n9 (TyFun [a_a28na] [a_a28na]
+                                                -> *))
+  = forall arg_a28op. KindOf (Apply GenericDropSym0 arg_a28op) ~ KindOf (GenericDropSym1 arg_a28op) =>
+    GenericDropSym0KindInference
+type instance Apply GenericDropSym0 l_a28oo = GenericDropSym1 l_a28oo
+type GenericTakeSym2 (t_a28oB :: i_a28n7) (t_a28oC :: [a_a28n8]) =
+    GenericTake t_a28oB t_a28oC
+instance SuppressUnusedWarnings GenericTakeSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericTakeSym1KindInference ())
+data GenericTakeSym1 (l_a28oG :: i_a28n7)
+                      (l_a28oF :: TyFun [a_a28n8] [a_a28n8])
+  = forall arg_a28oH. KindOf (Apply (GenericTakeSym1 l_a28oG) arg_a28oH) ~ KindOf (GenericTakeSym2 l_a28oG arg_a28oH) =>
+    GenericTakeSym1KindInference
+type instance Apply (GenericTakeSym1 l_a28oG) l_a28oF = GenericTakeSym2 l_a28oG l_a28oF
+instance SuppressUnusedWarnings GenericTakeSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericTakeSym0KindInference ())
+data GenericTakeSym0 (l_a28oD :: TyFun i_a28n7 (TyFun [a_a28n8] [a_a28n8]
+                                                -> *))
+  = forall arg_a28oE. KindOf (Apply GenericTakeSym0 arg_a28oE) ~ KindOf (GenericTakeSym1 arg_a28oE) =>
+    GenericTakeSym0KindInference
+type instance Apply GenericTakeSym0 l_a28oD = GenericTakeSym1 l_a28oD
+type ZipWith7Sym8 (t_a28oM :: TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                        -> *)
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (t_a28oN :: [a_a28mK])
+                  (t_a28oO :: [b_a28mL])
+                  (t_a28oP :: [c_a28mM])
+                  (t_a28oQ :: [d_a28mN])
+                  (t_a28oR :: [e_a28mO])
+                  (t_a28oS :: [f_a28mP])
+                  (t_a28oT :: [g_a28mQ]) =
+    ZipWith7 t_a28oM t_a28oN t_a28oO t_a28oP t_a28oQ t_a28oR t_a28oS t_a28oT
+instance SuppressUnusedWarnings ZipWith7Sym7 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith7Sym7KindInference ())
+data ZipWith7Sym7 (l_a28pu :: TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                        -> *)
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28pv :: [a_a28mK])
+                  (l_a28pw :: [b_a28mL])
+                  (l_a28px :: [c_a28mM])
+                  (l_a28py :: [d_a28mN])
+                  (l_a28pz :: [e_a28mO])
+                  (l_a28pA :: [f_a28mP])
+                  (l_a28pt :: TyFun [g_a28mQ] [h_a28mR])
+  = forall arg_a28pB. KindOf (Apply (ZipWith7Sym7 l_a28pu l_a28pv l_a28pw l_a28px l_a28py l_a28pz l_a28pA) arg_a28pB) ~ KindOf (ZipWith7Sym8 l_a28pu l_a28pv l_a28pw l_a28px l_a28py l_a28pz l_a28pA arg_a28pB) =>
+    ZipWith7Sym7KindInference
+type instance Apply (ZipWith7Sym7 l_a28pu l_a28pv l_a28pw l_a28px l_a28py l_a28pz l_a28pA) l_a28pt = ZipWith7Sym8 l_a28pu l_a28pv l_a28pw l_a28px l_a28py l_a28pz l_a28pA l_a28pt
+instance SuppressUnusedWarnings ZipWith7Sym6 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith7Sym6KindInference ())
+data ZipWith7Sym6 (l_a28pm :: TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                        -> *)
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28pn :: [a_a28mK])
+                  (l_a28po :: [b_a28mL])
+                  (l_a28pp :: [c_a28mM])
+                  (l_a28pq :: [d_a28mN])
+                  (l_a28pr :: [e_a28mO])
+                  (l_a28pl :: TyFun [f_a28mP] (TyFun [g_a28mQ] [h_a28mR] -> *))
+  = forall arg_a28ps. KindOf (Apply (ZipWith7Sym6 l_a28pm l_a28pn l_a28po l_a28pp l_a28pq l_a28pr) arg_a28ps) ~ KindOf (ZipWith7Sym7 l_a28pm l_a28pn l_a28po l_a28pp l_a28pq l_a28pr arg_a28ps) =>
+    ZipWith7Sym6KindInference
+type instance Apply (ZipWith7Sym6 l_a28pm l_a28pn l_a28po l_a28pp l_a28pq l_a28pr) l_a28pl = ZipWith7Sym7 l_a28pm l_a28pn l_a28po l_a28pp l_a28pq l_a28pr l_a28pl
+instance SuppressUnusedWarnings ZipWith7Sym5 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith7Sym5KindInference ())
+data ZipWith7Sym5 (l_a28pf :: TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                        -> *)
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28pg :: [a_a28mK])
+                  (l_a28ph :: [b_a28mL])
+                  (l_a28pi :: [c_a28mM])
+                  (l_a28pj :: [d_a28mN])
+                  (l_a28pe :: TyFun [e_a28mO] (TyFun [f_a28mP] (TyFun [g_a28mQ] [h_a28mR]
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28pk. KindOf (Apply (ZipWith7Sym5 l_a28pf l_a28pg l_a28ph l_a28pi l_a28pj) arg_a28pk) ~ KindOf (ZipWith7Sym6 l_a28pf l_a28pg l_a28ph l_a28pi l_a28pj arg_a28pk) =>
+    ZipWith7Sym5KindInference
+type instance Apply (ZipWith7Sym5 l_a28pf l_a28pg l_a28ph l_a28pi l_a28pj) l_a28pe = ZipWith7Sym6 l_a28pf l_a28pg l_a28ph l_a28pi l_a28pj l_a28pe
+instance SuppressUnusedWarnings ZipWith7Sym4 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith7Sym4KindInference ())
+data ZipWith7Sym4 (l_a28p9 :: TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                        -> *)
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28pa :: [a_a28mK])
+                  (l_a28pb :: [b_a28mL])
+                  (l_a28pc :: [c_a28mM])
+                  (l_a28p8 :: TyFun [d_a28mN] (TyFun [e_a28mO] (TyFun [f_a28mP] (TyFun [g_a28mQ] [h_a28mR]
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28pd. KindOf (Apply (ZipWith7Sym4 l_a28p9 l_a28pa l_a28pb l_a28pc) arg_a28pd) ~ KindOf (ZipWith7Sym5 l_a28p9 l_a28pa l_a28pb l_a28pc arg_a28pd) =>
+    ZipWith7Sym4KindInference
+type instance Apply (ZipWith7Sym4 l_a28p9 l_a28pa l_a28pb l_a28pc) l_a28p8 = ZipWith7Sym5 l_a28p9 l_a28pa l_a28pb l_a28pc l_a28p8
+instance SuppressUnusedWarnings ZipWith7Sym3 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith7Sym3KindInference ())
+data ZipWith7Sym3 (l_a28p4 :: TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                        -> *)
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28p5 :: [a_a28mK])
+                  (l_a28p6 :: [b_a28mL])
+                  (l_a28p3 :: TyFun [c_a28mM] (TyFun [d_a28mN] (TyFun [e_a28mO] (TyFun [f_a28mP] (TyFun [g_a28mQ] [h_a28mR]
+                                                                                                  -> *)
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28p7. KindOf (Apply (ZipWith7Sym3 l_a28p4 l_a28p5 l_a28p6) arg_a28p7) ~ KindOf (ZipWith7Sym4 l_a28p4 l_a28p5 l_a28p6 arg_a28p7) =>
+    ZipWith7Sym3KindInference
+type instance Apply (ZipWith7Sym3 l_a28p4 l_a28p5 l_a28p6) l_a28p3 = ZipWith7Sym4 l_a28p4 l_a28p5 l_a28p6 l_a28p3
+instance SuppressUnusedWarnings ZipWith7Sym2 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith7Sym2KindInference ())
+data ZipWith7Sym2 (l_a28p0 :: TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                        -> *)
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28p1 :: [a_a28mK])
+                  (l_a28oZ :: TyFun [b_a28mL] (TyFun [c_a28mM] (TyFun [d_a28mN] (TyFun [e_a28mO] (TyFun [f_a28mP] (TyFun [g_a28mQ] [h_a28mR]
+                                                                                                                    -> *)
+                                                                                                  -> *)
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28p2. KindOf (Apply (ZipWith7Sym2 l_a28p0 l_a28p1) arg_a28p2) ~ KindOf (ZipWith7Sym3 l_a28p0 l_a28p1 arg_a28p2) =>
+    ZipWith7Sym2KindInference
+type instance Apply (ZipWith7Sym2 l_a28p0 l_a28p1) l_a28oZ = ZipWith7Sym3 l_a28p0 l_a28p1 l_a28oZ
+instance SuppressUnusedWarnings ZipWith7Sym1 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith7Sym1KindInference ())
+data ZipWith7Sym1 (l_a28oX :: TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                        -> *)
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28oW :: TyFun [a_a28mK] (TyFun [b_a28mL] (TyFun [c_a28mM] (TyFun [d_a28mN] (TyFun [e_a28mO] (TyFun [f_a28mP] (TyFun [g_a28mQ] [h_a28mR]
+                                                                                                                                    -> *)
+                                                                                                                    -> *)
+                                                                                                  -> *)
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28oY. KindOf (Apply (ZipWith7Sym1 l_a28oX) arg_a28oY) ~ KindOf (ZipWith7Sym2 l_a28oX arg_a28oY) =>
+    ZipWith7Sym1KindInference
+type instance Apply (ZipWith7Sym1 l_a28oX) l_a28oW = ZipWith7Sym2 l_a28oX l_a28oW
+instance SuppressUnusedWarnings ZipWith7Sym0 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith7Sym0KindInference ())
+data ZipWith7Sym0 (l_a28oU :: TyFun (TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                                -> *)
+                                                                                                                -> *)
+                                                                                                  -> *)
+                                                                                  -> *)
+                                                                    -> *)
+                                                    -> *)
+                                      -> *) (TyFun [a_a28mK] (TyFun [b_a28mL] (TyFun [c_a28mM] (TyFun [d_a28mN] (TyFun [e_a28mO] (TyFun [f_a28mP] (TyFun [g_a28mQ] [h_a28mR]
+                                                                                                                                                  -> *)
+                                                                                                                                  -> *)
+                                                                                                                -> *)
+                                                                                                -> *)
+                                                                              -> *)
+                                                              -> *)
+                                            -> *))
+  = forall arg_a28oV. KindOf (Apply ZipWith7Sym0 arg_a28oV) ~ KindOf (ZipWith7Sym1 arg_a28oV) =>
+    ZipWith7Sym0KindInference
+type instance Apply ZipWith7Sym0 l_a28oU = ZipWith7Sym1 l_a28oU
+type ZipWith6Sym7 (t_a28qn :: TyFun a_a28mq (TyFun b_a28mr (TyFun c_a28ms (TyFun d_a28mt (TyFun e_a28mu (TyFun f_a28mv g_a28mw
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (t_a28qo :: [a_a28mq])
+                  (t_a28qp :: [b_a28mr])
+                  (t_a28qq :: [c_a28ms])
+                  (t_a28qr :: [d_a28mt])
+                  (t_a28qs :: [e_a28mu])
+                  (t_a28qt :: [f_a28mv]) =
+    ZipWith6 t_a28qn t_a28qo t_a28qp t_a28qq t_a28qr t_a28qs t_a28qt
+instance SuppressUnusedWarnings ZipWith6Sym6 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith6Sym6KindInference ())
+data ZipWith6Sym6 (l_a28qW :: TyFun a_a28mq (TyFun b_a28mr (TyFun c_a28ms (TyFun d_a28mt (TyFun e_a28mu (TyFun f_a28mv g_a28mw
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28qX :: [a_a28mq])
+                  (l_a28qY :: [b_a28mr])
+                  (l_a28qZ :: [c_a28ms])
+                  (l_a28r0 :: [d_a28mt])
+                  (l_a28r1 :: [e_a28mu])
+                  (l_a28qV :: TyFun [f_a28mv] [g_a28mw])
+  = forall arg_a28r2. KindOf (Apply (ZipWith6Sym6 l_a28qW l_a28qX l_a28qY l_a28qZ l_a28r0 l_a28r1) arg_a28r2) ~ KindOf (ZipWith6Sym7 l_a28qW l_a28qX l_a28qY l_a28qZ l_a28r0 l_a28r1 arg_a28r2) =>
+    ZipWith6Sym6KindInference
+type instance Apply (ZipWith6Sym6 l_a28qW l_a28qX l_a28qY l_a28qZ l_a28r0 l_a28r1) l_a28qV = ZipWith6Sym7 l_a28qW l_a28qX l_a28qY l_a28qZ l_a28r0 l_a28r1 l_a28qV
+instance SuppressUnusedWarnings ZipWith6Sym5 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith6Sym5KindInference ())
+data ZipWith6Sym5 (l_a28qP :: TyFun a_a28mq (TyFun b_a28mr (TyFun c_a28ms (TyFun d_a28mt (TyFun e_a28mu (TyFun f_a28mv g_a28mw
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28qQ :: [a_a28mq])
+                  (l_a28qR :: [b_a28mr])
+                  (l_a28qS :: [c_a28ms])
+                  (l_a28qT :: [d_a28mt])
+                  (l_a28qO :: TyFun [e_a28mu] (TyFun [f_a28mv] [g_a28mw] -> *))
+  = forall arg_a28qU. KindOf (Apply (ZipWith6Sym5 l_a28qP l_a28qQ l_a28qR l_a28qS l_a28qT) arg_a28qU) ~ KindOf (ZipWith6Sym6 l_a28qP l_a28qQ l_a28qR l_a28qS l_a28qT arg_a28qU) =>
+    ZipWith6Sym5KindInference
+type instance Apply (ZipWith6Sym5 l_a28qP l_a28qQ l_a28qR l_a28qS l_a28qT) l_a28qO = ZipWith6Sym6 l_a28qP l_a28qQ l_a28qR l_a28qS l_a28qT l_a28qO
+instance SuppressUnusedWarnings ZipWith6Sym4 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith6Sym4KindInference ())
+data ZipWith6Sym4 (l_a28qJ :: TyFun a_a28mq (TyFun b_a28mr (TyFun c_a28ms (TyFun d_a28mt (TyFun e_a28mu (TyFun f_a28mv g_a28mw
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28qK :: [a_a28mq])
+                  (l_a28qL :: [b_a28mr])
+                  (l_a28qM :: [c_a28ms])
+                  (l_a28qI :: TyFun [d_a28mt] (TyFun [e_a28mu] (TyFun [f_a28mv] [g_a28mw]
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28qN. KindOf (Apply (ZipWith6Sym4 l_a28qJ l_a28qK l_a28qL l_a28qM) arg_a28qN) ~ KindOf (ZipWith6Sym5 l_a28qJ l_a28qK l_a28qL l_a28qM arg_a28qN) =>
+    ZipWith6Sym4KindInference
+type instance Apply (ZipWith6Sym4 l_a28qJ l_a28qK l_a28qL l_a28qM) l_a28qI = ZipWith6Sym5 l_a28qJ l_a28qK l_a28qL l_a28qM l_a28qI
+instance SuppressUnusedWarnings ZipWith6Sym3 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith6Sym3KindInference ())
+data ZipWith6Sym3 (l_a28qE :: TyFun a_a28mq (TyFun b_a28mr (TyFun c_a28ms (TyFun d_a28mt (TyFun e_a28mu (TyFun f_a28mv g_a28mw
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28qF :: [a_a28mq])
+                  (l_a28qG :: [b_a28mr])
+                  (l_a28qD :: TyFun [c_a28ms] (TyFun [d_a28mt] (TyFun [e_a28mu] (TyFun [f_a28mv] [g_a28mw]
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28qH. KindOf (Apply (ZipWith6Sym3 l_a28qE l_a28qF l_a28qG) arg_a28qH) ~ KindOf (ZipWith6Sym4 l_a28qE l_a28qF l_a28qG arg_a28qH) =>
+    ZipWith6Sym3KindInference
+type instance Apply (ZipWith6Sym3 l_a28qE l_a28qF l_a28qG) l_a28qD = ZipWith6Sym4 l_a28qE l_a28qF l_a28qG l_a28qD
+instance SuppressUnusedWarnings ZipWith6Sym2 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith6Sym2KindInference ())
+data ZipWith6Sym2 (l_a28qA :: TyFun a_a28mq (TyFun b_a28mr (TyFun c_a28ms (TyFun d_a28mt (TyFun e_a28mu (TyFun f_a28mv g_a28mw
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28qB :: [a_a28mq])
+                  (l_a28qz :: TyFun [b_a28mr] (TyFun [c_a28ms] (TyFun [d_a28mt] (TyFun [e_a28mu] (TyFun [f_a28mv] [g_a28mw]
+                                                                                                  -> *)
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28qC. KindOf (Apply (ZipWith6Sym2 l_a28qA l_a28qB) arg_a28qC) ~ KindOf (ZipWith6Sym3 l_a28qA l_a28qB arg_a28qC) =>
+    ZipWith6Sym2KindInference
+type instance Apply (ZipWith6Sym2 l_a28qA l_a28qB) l_a28qz = ZipWith6Sym3 l_a28qA l_a28qB l_a28qz
+instance SuppressUnusedWarnings ZipWith6Sym1 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith6Sym1KindInference ())
+data ZipWith6Sym1 (l_a28qx :: TyFun a_a28mq (TyFun b_a28mr (TyFun c_a28ms (TyFun d_a28mt (TyFun e_a28mu (TyFun f_a28mv g_a28mw
+                                                                                                          -> *)
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28qw :: TyFun [a_a28mq] (TyFun [b_a28mr] (TyFun [c_a28ms] (TyFun [d_a28mt] (TyFun [e_a28mu] (TyFun [f_a28mv] [g_a28mw]
+                                                                                                                    -> *)
+                                                                                                  -> *)
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28qy. KindOf (Apply (ZipWith6Sym1 l_a28qx) arg_a28qy) ~ KindOf (ZipWith6Sym2 l_a28qx arg_a28qy) =>
+    ZipWith6Sym1KindInference
+type instance Apply (ZipWith6Sym1 l_a28qx) l_a28qw = ZipWith6Sym2 l_a28qx l_a28qw
+instance SuppressUnusedWarnings ZipWith6Sym0 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith6Sym0KindInference ())
+data ZipWith6Sym0 (l_a28qu :: TyFun (TyFun a_a28mq (TyFun b_a28mr (TyFun c_a28ms (TyFun d_a28mt (TyFun e_a28mu (TyFun f_a28mv g_a28mw
+                                                                                                                -> *)
+                                                                                                  -> *)
+                                                                                  -> *)
+                                                                    -> *)
+                                                    -> *)
+                                      -> *) (TyFun [a_a28mq] (TyFun [b_a28mr] (TyFun [c_a28ms] (TyFun [d_a28mt] (TyFun [e_a28mu] (TyFun [f_a28mv] [g_a28mw]
+                                                                                                                                  -> *)
+                                                                                                                -> *)
+                                                                                                -> *)
+                                                                              -> *)
+                                                              -> *)
+                                            -> *))
+  = forall arg_a28qv. KindOf (Apply ZipWith6Sym0 arg_a28qv) ~ KindOf (ZipWith6Sym1 arg_a28qv) =>
+    ZipWith6Sym0KindInference
+type instance Apply ZipWith6Sym0 l_a28qu = ZipWith6Sym1 l_a28qu
+type ZipWith5Sym6 (t_a28rI :: TyFun a_a28m9 (TyFun b_a28ma (TyFun c_a28mb (TyFun d_a28mc (TyFun e_a28md f_a28me
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (t_a28rJ :: [a_a28m9])
+                  (t_a28rK :: [b_a28ma])
+                  (t_a28rL :: [c_a28mb])
+                  (t_a28rM :: [d_a28mc])
+                  (t_a28rN :: [e_a28md]) =
+    ZipWith5 t_a28rI t_a28rJ t_a28rK t_a28rL t_a28rM t_a28rN
+instance SuppressUnusedWarnings ZipWith5Sym5 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith5Sym5KindInference ())
+data ZipWith5Sym5 (l_a28s9 :: TyFun a_a28m9 (TyFun b_a28ma (TyFun c_a28mb (TyFun d_a28mc (TyFun e_a28md f_a28me
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28sa :: [a_a28m9])
+                  (l_a28sb :: [b_a28ma])
+                  (l_a28sc :: [c_a28mb])
+                  (l_a28sd :: [d_a28mc])
+                  (l_a28s8 :: TyFun [e_a28md] [f_a28me])
+  = forall arg_a28se. KindOf (Apply (ZipWith5Sym5 l_a28s9 l_a28sa l_a28sb l_a28sc l_a28sd) arg_a28se) ~ KindOf (ZipWith5Sym6 l_a28s9 l_a28sa l_a28sb l_a28sc l_a28sd arg_a28se) =>
+    ZipWith5Sym5KindInference
+type instance Apply (ZipWith5Sym5 l_a28s9 l_a28sa l_a28sb l_a28sc l_a28sd) l_a28s8 = ZipWith5Sym6 l_a28s9 l_a28sa l_a28sb l_a28sc l_a28sd l_a28s8
+instance SuppressUnusedWarnings ZipWith5Sym4 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith5Sym4KindInference ())
+data ZipWith5Sym4 (l_a28s3 :: TyFun a_a28m9 (TyFun b_a28ma (TyFun c_a28mb (TyFun d_a28mc (TyFun e_a28md f_a28me
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28s4 :: [a_a28m9])
+                  (l_a28s5 :: [b_a28ma])
+                  (l_a28s6 :: [c_a28mb])
+                  (l_a28s2 :: TyFun [d_a28mc] (TyFun [e_a28md] [f_a28me] -> *))
+  = forall arg_a28s7. KindOf (Apply (ZipWith5Sym4 l_a28s3 l_a28s4 l_a28s5 l_a28s6) arg_a28s7) ~ KindOf (ZipWith5Sym5 l_a28s3 l_a28s4 l_a28s5 l_a28s6 arg_a28s7) =>
+    ZipWith5Sym4KindInference
+type instance Apply (ZipWith5Sym4 l_a28s3 l_a28s4 l_a28s5 l_a28s6) l_a28s2 = ZipWith5Sym5 l_a28s3 l_a28s4 l_a28s5 l_a28s6 l_a28s2
+instance SuppressUnusedWarnings ZipWith5Sym3 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith5Sym3KindInference ())
+data ZipWith5Sym3 (l_a28rY :: TyFun a_a28m9 (TyFun b_a28ma (TyFun c_a28mb (TyFun d_a28mc (TyFun e_a28md f_a28me
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28rZ :: [a_a28m9])
+                  (l_a28s0 :: [b_a28ma])
+                  (l_a28rX :: TyFun [c_a28mb] (TyFun [d_a28mc] (TyFun [e_a28md] [f_a28me]
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28s1. KindOf (Apply (ZipWith5Sym3 l_a28rY l_a28rZ l_a28s0) arg_a28s1) ~ KindOf (ZipWith5Sym4 l_a28rY l_a28rZ l_a28s0 arg_a28s1) =>
+    ZipWith5Sym3KindInference
+type instance Apply (ZipWith5Sym3 l_a28rY l_a28rZ l_a28s0) l_a28rX = ZipWith5Sym4 l_a28rY l_a28rZ l_a28s0 l_a28rX
+instance SuppressUnusedWarnings ZipWith5Sym2 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith5Sym2KindInference ())
+data ZipWith5Sym2 (l_a28rU :: TyFun a_a28m9 (TyFun b_a28ma (TyFun c_a28mb (TyFun d_a28mc (TyFun e_a28md f_a28me
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28rV :: [a_a28m9])
+                  (l_a28rT :: TyFun [b_a28ma] (TyFun [c_a28mb] (TyFun [d_a28mc] (TyFun [e_a28md] [f_a28me]
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28rW. KindOf (Apply (ZipWith5Sym2 l_a28rU l_a28rV) arg_a28rW) ~ KindOf (ZipWith5Sym3 l_a28rU l_a28rV arg_a28rW) =>
+    ZipWith5Sym2KindInference
+type instance Apply (ZipWith5Sym2 l_a28rU l_a28rV) l_a28rT = ZipWith5Sym3 l_a28rU l_a28rV l_a28rT
+instance SuppressUnusedWarnings ZipWith5Sym1 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith5Sym1KindInference ())
+data ZipWith5Sym1 (l_a28rR :: TyFun a_a28m9 (TyFun b_a28ma (TyFun c_a28mb (TyFun d_a28mc (TyFun e_a28md f_a28me
+                                                                                          -> *)
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28rQ :: TyFun [a_a28m9] (TyFun [b_a28ma] (TyFun [c_a28mb] (TyFun [d_a28mc] (TyFun [e_a28md] [f_a28me]
+                                                                                                  -> *)
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28rS. KindOf (Apply (ZipWith5Sym1 l_a28rR) arg_a28rS) ~ KindOf (ZipWith5Sym2 l_a28rR arg_a28rS) =>
+    ZipWith5Sym1KindInference
+type instance Apply (ZipWith5Sym1 l_a28rR) l_a28rQ = ZipWith5Sym2 l_a28rR l_a28rQ
+instance SuppressUnusedWarnings ZipWith5Sym0 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith5Sym0KindInference ())
+data ZipWith5Sym0 (l_a28rO :: TyFun (TyFun a_a28m9 (TyFun b_a28ma (TyFun c_a28mb (TyFun d_a28mc (TyFun e_a28md f_a28me
+                                                                                                  -> *)
+                                                                                  -> *)
+                                                                    -> *)
+                                                    -> *)
+                                      -> *) (TyFun [a_a28m9] (TyFun [b_a28ma] (TyFun [c_a28mb] (TyFun [d_a28mc] (TyFun [e_a28md] [f_a28me]
+                                                                                                                -> *)
+                                                                                                -> *)
+                                                                              -> *)
+                                                              -> *)
+                                            -> *))
+  = forall arg_a28rP. KindOf (Apply ZipWith5Sym0 arg_a28rP) ~ KindOf (ZipWith5Sym1 arg_a28rP) =>
+    ZipWith5Sym0KindInference
+type instance Apply ZipWith5Sym0 l_a28rO = ZipWith5Sym1 l_a28rO
+type ZipWith4Sym5 (t_a28sO :: TyFun a_a28lV (TyFun b_a28lW (TyFun c_a28lX (TyFun d_a28lY e_a28lZ
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (t_a28sP :: [a_a28lV])
+                  (t_a28sQ :: [b_a28lW])
+                  (t_a28sR :: [c_a28lX])
+                  (t_a28sS :: [d_a28lY]) =
+    ZipWith4 t_a28sO t_a28sP t_a28sQ t_a28sR t_a28sS
+instance SuppressUnusedWarnings ZipWith4Sym4 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith4Sym4KindInference ())
+data ZipWith4Sym4 (l_a28t8 :: TyFun a_a28lV (TyFun b_a28lW (TyFun c_a28lX (TyFun d_a28lY e_a28lZ
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28t9 :: [a_a28lV])
+                  (l_a28ta :: [b_a28lW])
+                  (l_a28tb :: [c_a28lX])
+                  (l_a28t7 :: TyFun [d_a28lY] [e_a28lZ])
+  = forall arg_a28tc. KindOf (Apply (ZipWith4Sym4 l_a28t8 l_a28t9 l_a28ta l_a28tb) arg_a28tc) ~ KindOf (ZipWith4Sym5 l_a28t8 l_a28t9 l_a28ta l_a28tb arg_a28tc) =>
+    ZipWith4Sym4KindInference
+type instance Apply (ZipWith4Sym4 l_a28t8 l_a28t9 l_a28ta l_a28tb) l_a28t7 = ZipWith4Sym5 l_a28t8 l_a28t9 l_a28ta l_a28tb l_a28t7
+instance SuppressUnusedWarnings ZipWith4Sym3 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith4Sym3KindInference ())
+data ZipWith4Sym3 (l_a28t3 :: TyFun a_a28lV (TyFun b_a28lW (TyFun c_a28lX (TyFun d_a28lY e_a28lZ
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28t4 :: [a_a28lV])
+                  (l_a28t5 :: [b_a28lW])
+                  (l_a28t2 :: TyFun [c_a28lX] (TyFun [d_a28lY] [e_a28lZ] -> *))
+  = forall arg_a28t6. KindOf (Apply (ZipWith4Sym3 l_a28t3 l_a28t4 l_a28t5) arg_a28t6) ~ KindOf (ZipWith4Sym4 l_a28t3 l_a28t4 l_a28t5 arg_a28t6) =>
+    ZipWith4Sym3KindInference
+type instance Apply (ZipWith4Sym3 l_a28t3 l_a28t4 l_a28t5) l_a28t2 = ZipWith4Sym4 l_a28t3 l_a28t4 l_a28t5 l_a28t2
+instance SuppressUnusedWarnings ZipWith4Sym2 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith4Sym2KindInference ())
+data ZipWith4Sym2 (l_a28sZ :: TyFun a_a28lV (TyFun b_a28lW (TyFun c_a28lX (TyFun d_a28lY e_a28lZ
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28t0 :: [a_a28lV])
+                  (l_a28sY :: TyFun [b_a28lW] (TyFun [c_a28lX] (TyFun [d_a28lY] [e_a28lZ]
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28t1. KindOf (Apply (ZipWith4Sym2 l_a28sZ l_a28t0) arg_a28t1) ~ KindOf (ZipWith4Sym3 l_a28sZ l_a28t0 arg_a28t1) =>
+    ZipWith4Sym2KindInference
+type instance Apply (ZipWith4Sym2 l_a28sZ l_a28t0) l_a28sY = ZipWith4Sym3 l_a28sZ l_a28t0 l_a28sY
+instance SuppressUnusedWarnings ZipWith4Sym1 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith4Sym1KindInference ())
+data ZipWith4Sym1 (l_a28sW :: TyFun a_a28lV (TyFun b_a28lW (TyFun c_a28lX (TyFun d_a28lY e_a28lZ
+                                                                            -> *)
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a28sV :: TyFun [a_a28lV] (TyFun [b_a28lW] (TyFun [c_a28lX] (TyFun [d_a28lY] [e_a28lZ]
+                                                                                  -> *)
+                                                                -> *)
+                                                -> *))
+  = forall arg_a28sX. KindOf (Apply (ZipWith4Sym1 l_a28sW) arg_a28sX) ~ KindOf (ZipWith4Sym2 l_a28sW arg_a28sX) =>
+    ZipWith4Sym1KindInference
+type instance Apply (ZipWith4Sym1 l_a28sW) l_a28sV = ZipWith4Sym2 l_a28sW l_a28sV
+instance SuppressUnusedWarnings ZipWith4Sym0 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith4Sym0KindInference ())
+data ZipWith4Sym0 (l_a28sT :: TyFun (TyFun a_a28lV (TyFun b_a28lW (TyFun c_a28lX (TyFun d_a28lY e_a28lZ
+                                                                                  -> *)
+                                                                    -> *)
+                                                    -> *)
+                                      -> *) (TyFun [a_a28lV] (TyFun [b_a28lW] (TyFun [c_a28lX] (TyFun [d_a28lY] [e_a28lZ]
+                                                                                                -> *)
+                                                                              -> *)
+                                                              -> *)
+                                            -> *))
+  = forall arg_a28sU. KindOf (Apply ZipWith4Sym0 arg_a28sU) ~ KindOf (ZipWith4Sym1 arg_a28sU) =>
+    ZipWith4Sym0KindInference
+type instance Apply ZipWith4Sym0 l_a28sT = ZipWith4Sym1 l_a28sT
+type Zip7Sym7 (t_a28tU :: [a_a28lO])
+              (t_a28tV :: [b_a28lP])
+              (t_a28tW :: [c_a28lQ])
+              (t_a28tX :: [d_a28lR])
+              (t_a28tY :: [e_a28lS])
+              (t_a28tZ :: [f_a28lT])
+              (t_a28u0 :: [g_a28lU]) =
+    Zip7 t_a28tU t_a28tV t_a28tW t_a28tX t_a28tY t_a28tZ t_a28u0
+instance SuppressUnusedWarnings Zip7Sym6 where
+  suppressUnusedWarnings _ = snd ((,) Zip7Sym6KindInference ())
+data Zip7Sym6 (l_a28ut :: [a_a28lO])
+              (l_a28uu :: [b_a28lP])
+              (l_a28uv :: [c_a28lQ])
+              (l_a28uw :: [d_a28lR])
+              (l_a28ux :: [e_a28lS])
+              (l_a28uy :: [f_a28lT])
+              (l_a28us :: TyFun [g_a28lU] [(a_a28lO,
+                                            b_a28lP,
+                                            c_a28lQ,
+                                            d_a28lR,
+                                            e_a28lS,
+                                            f_a28lT,
+                                            g_a28lU)])
+  = forall arg_a28uz. KindOf (Apply (Zip7Sym6 l_a28ut l_a28uu l_a28uv l_a28uw l_a28ux l_a28uy) arg_a28uz) ~ KindOf (Zip7Sym7 l_a28ut l_a28uu l_a28uv l_a28uw l_a28ux l_a28uy arg_a28uz) =>
+    Zip7Sym6KindInference
+type instance Apply (Zip7Sym6 l_a28ut l_a28uu l_a28uv l_a28uw l_a28ux l_a28uy) l_a28us = Zip7Sym7 l_a28ut l_a28uu l_a28uv l_a28uw l_a28ux l_a28uy l_a28us
+instance SuppressUnusedWarnings Zip7Sym5 where
+  suppressUnusedWarnings _ = snd ((,) Zip7Sym5KindInference ())
+data Zip7Sym5 (l_a28um :: [a_a28lO])
+              (l_a28un :: [b_a28lP])
+              (l_a28uo :: [c_a28lQ])
+              (l_a28up :: [d_a28lR])
+              (l_a28uq :: [e_a28lS])
+              (l_a28ul :: TyFun [f_a28lT] (TyFun [g_a28lU] [(a_a28lO,
+                                                              b_a28lP,
+                                                              c_a28lQ,
+                                                              d_a28lR,
+                                                              e_a28lS,
+                                                              f_a28lT,
+                                                              g_a28lU)]
+                                            -> *))
+  = forall arg_a28ur. KindOf (Apply (Zip7Sym5 l_a28um l_a28un l_a28uo l_a28up l_a28uq) arg_a28ur) ~ KindOf (Zip7Sym6 l_a28um l_a28un l_a28uo l_a28up l_a28uq arg_a28ur) =>
+    Zip7Sym5KindInference
+type instance Apply (Zip7Sym5 l_a28um l_a28un l_a28uo l_a28up l_a28uq) l_a28ul = Zip7Sym6 l_a28um l_a28un l_a28uo l_a28up l_a28uq l_a28ul
+instance SuppressUnusedWarnings Zip7Sym4 where
+  suppressUnusedWarnings _ = snd ((,) Zip7Sym4KindInference ())
+data Zip7Sym4 (l_a28ug :: [a_a28lO])
+              (l_a28uh :: [b_a28lP])
+              (l_a28ui :: [c_a28lQ])
+              (l_a28uj :: [d_a28lR])
+              (l_a28uf :: TyFun [e_a28lS] (TyFun [f_a28lT] (TyFun [g_a28lU] [(a_a28lO,
+                                                                              b_a28lP,
+                                                                              c_a28lQ,
+                                                                              d_a28lR,
+                                                                              e_a28lS,
+                                                                              f_a28lT,
+                                                                              g_a28lU)]
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28uk. KindOf (Apply (Zip7Sym4 l_a28ug l_a28uh l_a28ui l_a28uj) arg_a28uk) ~ KindOf (Zip7Sym5 l_a28ug l_a28uh l_a28ui l_a28uj arg_a28uk) =>
+    Zip7Sym4KindInference
+type instance Apply (Zip7Sym4 l_a28ug l_a28uh l_a28ui l_a28uj) l_a28uf = Zip7Sym5 l_a28ug l_a28uh l_a28ui l_a28uj l_a28uf
+instance SuppressUnusedWarnings Zip7Sym3 where
+  suppressUnusedWarnings _ = snd ((,) Zip7Sym3KindInference ())
+data Zip7Sym3 (l_a28ub :: [a_a28lO])
+              (l_a28uc :: [b_a28lP])
+              (l_a28ud :: [c_a28lQ])
+              (l_a28ua :: TyFun [d_a28lR] (TyFun [e_a28lS] (TyFun [f_a28lT] (TyFun [g_a28lU] [(a_a28lO,
+                                                                                                b_a28lP,
+                                                                                                c_a28lQ,
+                                                                                                d_a28lR,
+                                                                                                e_a28lS,
+                                                                                                f_a28lT,
+                                                                                                g_a28lU)]
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28ue. KindOf (Apply (Zip7Sym3 l_a28ub l_a28uc l_a28ud) arg_a28ue) ~ KindOf (Zip7Sym4 l_a28ub l_a28uc l_a28ud arg_a28ue) =>
+    Zip7Sym3KindInference
+type instance Apply (Zip7Sym3 l_a28ub l_a28uc l_a28ud) l_a28ua = Zip7Sym4 l_a28ub l_a28uc l_a28ud l_a28ua
+instance SuppressUnusedWarnings Zip7Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Zip7Sym2KindInference ())
+data Zip7Sym2 (l_a28u7 :: [a_a28lO])
+              (l_a28u8 :: [b_a28lP])
+              (l_a28u6 :: TyFun [c_a28lQ] (TyFun [d_a28lR] (TyFun [e_a28lS] (TyFun [f_a28lT] (TyFun [g_a28lU] [(a_a28lO,
+                                                                                                                b_a28lP,
+                                                                                                                c_a28lQ,
+                                                                                                                d_a28lR,
+                                                                                                                e_a28lS,
+                                                                                                                f_a28lT,
+                                                                                                                g_a28lU)]
+                                                                                              -> *)
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28u9. KindOf (Apply (Zip7Sym2 l_a28u7 l_a28u8) arg_a28u9) ~ KindOf (Zip7Sym3 l_a28u7 l_a28u8 arg_a28u9) =>
+    Zip7Sym2KindInference
+type instance Apply (Zip7Sym2 l_a28u7 l_a28u8) l_a28u6 = Zip7Sym3 l_a28u7 l_a28u8 l_a28u6
+instance SuppressUnusedWarnings Zip7Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Zip7Sym1KindInference ())
+data Zip7Sym1 (l_a28u4 :: [a_a28lO])
+              (l_a28u3 :: TyFun [b_a28lP] (TyFun [c_a28lQ] (TyFun [d_a28lR] (TyFun [e_a28lS] (TyFun [f_a28lT] (TyFun [g_a28lU] [(a_a28lO,
+                                                                                                                                  b_a28lP,
+                                                                                                                                  c_a28lQ,
+                                                                                                                                  d_a28lR,
+                                                                                                                                  e_a28lS,
+                                                                                                                                  f_a28lT,
+                                                                                                                                  g_a28lU)]
+                                                                                                                -> *)
+                                                                                              -> *)
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28u5. KindOf (Apply (Zip7Sym1 l_a28u4) arg_a28u5) ~ KindOf (Zip7Sym2 l_a28u4 arg_a28u5) =>
+    Zip7Sym1KindInference
+type instance Apply (Zip7Sym1 l_a28u4) l_a28u3 = Zip7Sym2 l_a28u4 l_a28u3
+instance SuppressUnusedWarnings Zip7Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Zip7Sym0KindInference ())
+data Zip7Sym0 (l_a28u1 :: TyFun [a_a28lO] (TyFun [b_a28lP] (TyFun [c_a28lQ] (TyFun [d_a28lR] (TyFun [e_a28lS] (TyFun [f_a28lT] (TyFun [g_a28lU] [(a_a28lO,
+                                                                                                                                                  b_a28lP,
+                                                                                                                                                  c_a28lQ,
+                                                                                                                                                  d_a28lR,
+                                                                                                                                                  e_a28lS,
+                                                                                                                                                  f_a28lT,
+                                                                                                                                                  g_a28lU)]
+                                                                                                                                -> *)
+                                                                                                                -> *)
+                                                                                              -> *)
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28u2. KindOf (Apply Zip7Sym0 arg_a28u2) ~ KindOf (Zip7Sym1 arg_a28u2) =>
+    Zip7Sym0KindInference
+type instance Apply Zip7Sym0 l_a28u1 = Zip7Sym1 l_a28u1
+type Zip6Sym6 (t_a28v0 :: [a_a28lI])
+              (t_a28v1 :: [b_a28lJ])
+              (t_a28v2 :: [c_a28lK])
+              (t_a28v3 :: [d_a28lL])
+              (t_a28v4 :: [e_a28lM])
+              (t_a28v5 :: [f_a28lN]) =
+    Zip6 t_a28v0 t_a28v1 t_a28v2 t_a28v3 t_a28v4 t_a28v5
+instance SuppressUnusedWarnings Zip6Sym5 where
+  suppressUnusedWarnings _ = snd ((,) Zip6Sym5KindInference ())
+data Zip6Sym5 (l_a28vr :: [a_a28lI])
+              (l_a28vs :: [b_a28lJ])
+              (l_a28vt :: [c_a28lK])
+              (l_a28vu :: [d_a28lL])
+              (l_a28vv :: [e_a28lM])
+              (l_a28vq :: TyFun [f_a28lN] [(a_a28lI,
+                                            b_a28lJ,
+                                            c_a28lK,
+                                            d_a28lL,
+                                            e_a28lM,
+                                            f_a28lN)])
+  = forall arg_a28vw. KindOf (Apply (Zip6Sym5 l_a28vr l_a28vs l_a28vt l_a28vu l_a28vv) arg_a28vw) ~ KindOf (Zip6Sym6 l_a28vr l_a28vs l_a28vt l_a28vu l_a28vv arg_a28vw) =>
+    Zip6Sym5KindInference
+type instance Apply (Zip6Sym5 l_a28vr l_a28vs l_a28vt l_a28vu l_a28vv) l_a28vq = Zip6Sym6 l_a28vr l_a28vs l_a28vt l_a28vu l_a28vv l_a28vq
+instance SuppressUnusedWarnings Zip6Sym4 where
+  suppressUnusedWarnings _ = snd ((,) Zip6Sym4KindInference ())
+data Zip6Sym4 (l_a28vl :: [a_a28lI])
+              (l_a28vm :: [b_a28lJ])
+              (l_a28vn :: [c_a28lK])
+              (l_a28vo :: [d_a28lL])
+              (l_a28vk :: TyFun [e_a28lM] (TyFun [f_a28lN] [(a_a28lI,
+                                                              b_a28lJ,
+                                                              c_a28lK,
+                                                              d_a28lL,
+                                                              e_a28lM,
+                                                              f_a28lN)]
+                                            -> *))
+  = forall arg_a28vp. KindOf (Apply (Zip6Sym4 l_a28vl l_a28vm l_a28vn l_a28vo) arg_a28vp) ~ KindOf (Zip6Sym5 l_a28vl l_a28vm l_a28vn l_a28vo arg_a28vp) =>
+    Zip6Sym4KindInference
+type instance Apply (Zip6Sym4 l_a28vl l_a28vm l_a28vn l_a28vo) l_a28vk = Zip6Sym5 l_a28vl l_a28vm l_a28vn l_a28vo l_a28vk
+instance SuppressUnusedWarnings Zip6Sym3 where
+  suppressUnusedWarnings _ = snd ((,) Zip6Sym3KindInference ())
+data Zip6Sym3 (l_a28vg :: [a_a28lI])
+              (l_a28vh :: [b_a28lJ])
+              (l_a28vi :: [c_a28lK])
+              (l_a28vf :: TyFun [d_a28lL] (TyFun [e_a28lM] (TyFun [f_a28lN] [(a_a28lI,
+                                                                              b_a28lJ,
+                                                                              c_a28lK,
+                                                                              d_a28lL,
+                                                                              e_a28lM,
+                                                                              f_a28lN)]
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28vj. KindOf (Apply (Zip6Sym3 l_a28vg l_a28vh l_a28vi) arg_a28vj) ~ KindOf (Zip6Sym4 l_a28vg l_a28vh l_a28vi arg_a28vj) =>
+    Zip6Sym3KindInference
+type instance Apply (Zip6Sym3 l_a28vg l_a28vh l_a28vi) l_a28vf = Zip6Sym4 l_a28vg l_a28vh l_a28vi l_a28vf
+instance SuppressUnusedWarnings Zip6Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Zip6Sym2KindInference ())
+data Zip6Sym2 (l_a28vc :: [a_a28lI])
+              (l_a28vd :: [b_a28lJ])
+              (l_a28vb :: TyFun [c_a28lK] (TyFun [d_a28lL] (TyFun [e_a28lM] (TyFun [f_a28lN] [(a_a28lI,
+                                                                                                b_a28lJ,
+                                                                                                c_a28lK,
+                                                                                                d_a28lL,
+                                                                                                e_a28lM,
+                                                                                                f_a28lN)]
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28ve. KindOf (Apply (Zip6Sym2 l_a28vc l_a28vd) arg_a28ve) ~ KindOf (Zip6Sym3 l_a28vc l_a28vd arg_a28ve) =>
+    Zip6Sym2KindInference
+type instance Apply (Zip6Sym2 l_a28vc l_a28vd) l_a28vb = Zip6Sym3 l_a28vc l_a28vd l_a28vb
+instance SuppressUnusedWarnings Zip6Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Zip6Sym1KindInference ())
+data Zip6Sym1 (l_a28v9 :: [a_a28lI])
+              (l_a28v8 :: TyFun [b_a28lJ] (TyFun [c_a28lK] (TyFun [d_a28lL] (TyFun [e_a28lM] (TyFun [f_a28lN] [(a_a28lI,
+                                                                                                                b_a28lJ,
+                                                                                                                c_a28lK,
+                                                                                                                d_a28lL,
+                                                                                                                e_a28lM,
+                                                                                                                f_a28lN)]
+                                                                                              -> *)
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28va. KindOf (Apply (Zip6Sym1 l_a28v9) arg_a28va) ~ KindOf (Zip6Sym2 l_a28v9 arg_a28va) =>
+    Zip6Sym1KindInference
+type instance Apply (Zip6Sym1 l_a28v9) l_a28v8 = Zip6Sym2 l_a28v9 l_a28v8
+instance SuppressUnusedWarnings Zip6Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Zip6Sym0KindInference ())
+data Zip6Sym0 (l_a28v6 :: TyFun [a_a28lI] (TyFun [b_a28lJ] (TyFun [c_a28lK] (TyFun [d_a28lL] (TyFun [e_a28lM] (TyFun [f_a28lN] [(a_a28lI,
+                                                                                                                                  b_a28lJ,
+                                                                                                                                  c_a28lK,
+                                                                                                                                  d_a28lL,
+                                                                                                                                  e_a28lM,
+                                                                                                                                  f_a28lN)]
+                                                                                                                -> *)
+                                                                                              -> *)
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28v7. KindOf (Apply Zip6Sym0 arg_a28v7) ~ KindOf (Zip6Sym1 arg_a28v7) =>
+    Zip6Sym0KindInference
+type instance Apply Zip6Sym0 l_a28v6 = Zip6Sym1 l_a28v6
+type Zip5Sym5 (t_a28vT :: [a_a28lD])
+              (t_a28vU :: [b_a28lE])
+              (t_a28vV :: [c_a28lF])
+              (t_a28vW :: [d_a28lG])
+              (t_a28vX :: [e_a28lH]) =
+    Zip5 t_a28vT t_a28vU t_a28vV t_a28vW t_a28vX
+instance SuppressUnusedWarnings Zip5Sym4 where
+  suppressUnusedWarnings _ = snd ((,) Zip5Sym4KindInference ())
+data Zip5Sym4 (l_a28wd :: [a_a28lD])
+              (l_a28we :: [b_a28lE])
+              (l_a28wf :: [c_a28lF])
+              (l_a28wg :: [d_a28lG])
+              (l_a28wc :: TyFun [e_a28lH] [(a_a28lD,
+                                            b_a28lE,
+                                            c_a28lF,
+                                            d_a28lG,
+                                            e_a28lH)])
+  = forall arg_a28wh. KindOf (Apply (Zip5Sym4 l_a28wd l_a28we l_a28wf l_a28wg) arg_a28wh) ~ KindOf (Zip5Sym5 l_a28wd l_a28we l_a28wf l_a28wg arg_a28wh) =>
+    Zip5Sym4KindInference
+type instance Apply (Zip5Sym4 l_a28wd l_a28we l_a28wf l_a28wg) l_a28wc = Zip5Sym5 l_a28wd l_a28we l_a28wf l_a28wg l_a28wc
+instance SuppressUnusedWarnings Zip5Sym3 where
+  suppressUnusedWarnings _ = snd ((,) Zip5Sym3KindInference ())
+data Zip5Sym3 (l_a28w8 :: [a_a28lD])
+              (l_a28w9 :: [b_a28lE])
+              (l_a28wa :: [c_a28lF])
+              (l_a28w7 :: TyFun [d_a28lG] (TyFun [e_a28lH] [(a_a28lD,
+                                                              b_a28lE,
+                                                              c_a28lF,
+                                                              d_a28lG,
+                                                              e_a28lH)]
+                                            -> *))
+  = forall arg_a28wb. KindOf (Apply (Zip5Sym3 l_a28w8 l_a28w9 l_a28wa) arg_a28wb) ~ KindOf (Zip5Sym4 l_a28w8 l_a28w9 l_a28wa arg_a28wb) =>
+    Zip5Sym3KindInference
+type instance Apply (Zip5Sym3 l_a28w8 l_a28w9 l_a28wa) l_a28w7 = Zip5Sym4 l_a28w8 l_a28w9 l_a28wa l_a28w7
+instance SuppressUnusedWarnings Zip5Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Zip5Sym2KindInference ())
+data Zip5Sym2 (l_a28w4 :: [a_a28lD])
+              (l_a28w5 :: [b_a28lE])
+              (l_a28w3 :: TyFun [c_a28lF] (TyFun [d_a28lG] (TyFun [e_a28lH] [(a_a28lD,
+                                                                              b_a28lE,
+                                                                              c_a28lF,
+                                                                              d_a28lG,
+                                                                              e_a28lH)]
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28w6. KindOf (Apply (Zip5Sym2 l_a28w4 l_a28w5) arg_a28w6) ~ KindOf (Zip5Sym3 l_a28w4 l_a28w5 arg_a28w6) =>
+    Zip5Sym2KindInference
+type instance Apply (Zip5Sym2 l_a28w4 l_a28w5) l_a28w3 = Zip5Sym3 l_a28w4 l_a28w5 l_a28w3
+instance SuppressUnusedWarnings Zip5Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Zip5Sym1KindInference ())
+data Zip5Sym1 (l_a28w1 :: [a_a28lD])
+              (l_a28w0 :: TyFun [b_a28lE] (TyFun [c_a28lF] (TyFun [d_a28lG] (TyFun [e_a28lH] [(a_a28lD,
+                                                                                                b_a28lE,
+                                                                                                c_a28lF,
+                                                                                                d_a28lG,
+                                                                                                e_a28lH)]
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28w2. KindOf (Apply (Zip5Sym1 l_a28w1) arg_a28w2) ~ KindOf (Zip5Sym2 l_a28w1 arg_a28w2) =>
+    Zip5Sym1KindInference
+type instance Apply (Zip5Sym1 l_a28w1) l_a28w0 = Zip5Sym2 l_a28w1 l_a28w0
+instance SuppressUnusedWarnings Zip5Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Zip5Sym0KindInference ())
+data Zip5Sym0 (l_a28vY :: TyFun [a_a28lD] (TyFun [b_a28lE] (TyFun [c_a28lF] (TyFun [d_a28lG] (TyFun [e_a28lH] [(a_a28lD,
+                                                                                                                b_a28lE,
+                                                                                                                c_a28lF,
+                                                                                                                d_a28lG,
+                                                                                                                e_a28lH)]
+                                                                                              -> *)
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28vZ. KindOf (Apply Zip5Sym0 arg_a28vZ) ~ KindOf (Zip5Sym1 arg_a28vZ) =>
+    Zip5Sym0KindInference
+type instance Apply Zip5Sym0 l_a28vY = Zip5Sym1 l_a28vY
+type Zip4Sym4 (t_a28wA :: [a_a28lz])
+              (t_a28wB :: [b_a28lA])
+              (t_a28wC :: [c_a28lB])
+              (t_a28wD :: [d_a28lC]) =
+    Zip4 t_a28wA t_a28wB t_a28wC t_a28wD
+instance SuppressUnusedWarnings Zip4Sym3 where
+  suppressUnusedWarnings _ = snd ((,) Zip4Sym3KindInference ())
+data Zip4Sym3 (l_a28wO :: [a_a28lz])
+              (l_a28wP :: [b_a28lA])
+              (l_a28wQ :: [c_a28lB])
+              (l_a28wN :: TyFun [d_a28lC] [(a_a28lz, b_a28lA, c_a28lB, d_a28lC)])
+  = forall arg_a28wR. KindOf (Apply (Zip4Sym3 l_a28wO l_a28wP l_a28wQ) arg_a28wR) ~ KindOf (Zip4Sym4 l_a28wO l_a28wP l_a28wQ arg_a28wR) =>
+    Zip4Sym3KindInference
+type instance Apply (Zip4Sym3 l_a28wO l_a28wP l_a28wQ) l_a28wN = Zip4Sym4 l_a28wO l_a28wP l_a28wQ l_a28wN
+instance SuppressUnusedWarnings Zip4Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Zip4Sym2KindInference ())
+data Zip4Sym2 (l_a28wK :: [a_a28lz])
+              (l_a28wL :: [b_a28lA])
+              (l_a28wJ :: TyFun [c_a28lB] (TyFun [d_a28lC] [(a_a28lz,
+                                                              b_a28lA,
+                                                              c_a28lB,
+                                                              d_a28lC)]
+                                            -> *))
+  = forall arg_a28wM. KindOf (Apply (Zip4Sym2 l_a28wK l_a28wL) arg_a28wM) ~ KindOf (Zip4Sym3 l_a28wK l_a28wL arg_a28wM) =>
+    Zip4Sym2KindInference
+type instance Apply (Zip4Sym2 l_a28wK l_a28wL) l_a28wJ = Zip4Sym3 l_a28wK l_a28wL l_a28wJ
+instance SuppressUnusedWarnings Zip4Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Zip4Sym1KindInference ())
+data Zip4Sym1 (l_a28wH :: [a_a28lz])
+              (l_a28wG :: TyFun [b_a28lA] (TyFun [c_a28lB] (TyFun [d_a28lC] [(a_a28lz,
+                                                                              b_a28lA,
+                                                                              c_a28lB,
+                                                                              d_a28lC)]
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28wI. KindOf (Apply (Zip4Sym1 l_a28wH) arg_a28wI) ~ KindOf (Zip4Sym2 l_a28wH arg_a28wI) =>
+    Zip4Sym1KindInference
+type instance Apply (Zip4Sym1 l_a28wH) l_a28wG = Zip4Sym2 l_a28wH l_a28wG
+instance SuppressUnusedWarnings Zip4Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Zip4Sym0KindInference ())
+data Zip4Sym0 (l_a28wE :: TyFun [a_a28lz] (TyFun [b_a28lA] (TyFun [c_a28lB] (TyFun [d_a28lC] [(a_a28lz,
+                                                                                                b_a28lA,
+                                                                                                c_a28lB,
+                                                                                                d_a28lC)]
+                                                                              -> *)
+                                                            -> *)
+                                            -> *))
+  = forall arg_a28wF. KindOf (Apply Zip4Sym0 arg_a28wF) ~ KindOf (Zip4Sym1 arg_a28wF) =>
+    Zip4Sym0KindInference
+type instance Apply Zip4Sym0 l_a28wE = Zip4Sym1 l_a28wE
+type StripPrefixSym2 (t_a28x0 :: [a_a28lt])
+                      (t_a28x1 :: [a_a28lt]) =
+    StripPrefix t_a28x0 t_a28x1
+instance SuppressUnusedWarnings StripPrefixSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) StripPrefixSym1KindInference ())
+data StripPrefixSym1 (l_a28x5 :: [a_a28lt])
+                      (l_a28x4 :: TyFun [a_a28lt] (Maybe [a_a28lt]))
+  = forall arg_a28x6. KindOf (Apply (StripPrefixSym1 l_a28x5) arg_a28x6) ~ KindOf (StripPrefixSym2 l_a28x5 arg_a28x6) =>
+    StripPrefixSym1KindInference
+type instance Apply (StripPrefixSym1 l_a28x5) l_a28x4 = StripPrefixSym2 l_a28x5 l_a28x4
+instance SuppressUnusedWarnings StripPrefixSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) StripPrefixSym0KindInference ())
+data StripPrefixSym0 (l_a28x2 :: TyFun [a_a28lt] (TyFun [a_a28lt] (Maybe [a_a28lt])
+                                                  -> *))
+  = forall arg_a28x3. KindOf (Apply StripPrefixSym0 arg_a28x3) ~ KindOf (StripPrefixSym1 arg_a28x3) =>
+    StripPrefixSym0KindInference
+type instance Apply StripPrefixSym0 l_a28x2 = StripPrefixSym1 l_a28x2
+type family GenericReplicate (a_a28nK :: i_a28nf)
+                              (a_a28nL :: a_a28ng) :: [a_a28ng] where
+  GenericReplicate a_1627898821_a28nM a_1627898823_a28nN = Apply (Apply ReplicateSym0 a_1627898821_a28nM) a_1627898823_a28nN
+type family GenericIndex (a_a28nZ :: [a_a28nd])
+                          (a_a28o0 :: i_a28ne) :: a_a28nd where
+  GenericIndex a_1627898836_a28o1 a_1627898838_a28o2 = Apply (Apply (:!!$) a_1627898836_a28o1) a_1627898838_a28o2
+type family GenericSplitAt (a_a28oe :: i_a28nb)
+                            (a_a28of :: [a_a28nc]) :: ([a_a28nc], [a_a28nc]) where
+  GenericSplitAt a_1627898851_a28og a_1627898853_a28oh = Apply (Apply SplitAtSym0 a_1627898851_a28og) a_1627898853_a28oh
+type family GenericDrop (a_a28ot :: i_a28n9)
+                        (a_a28ou :: [a_a28na]) :: [a_a28na] where
+  GenericDrop a_1627898866_a28ov a_1627898868_a28ow = Apply (Apply DropSym0 a_1627898866_a28ov) a_1627898868_a28ow
+type family GenericTake (a_a28oI :: i_a28n7)
+                        (a_a28oJ :: [a_a28n8]) :: [a_a28n8] where
+  GenericTake a_1627898881_a28oK a_1627898883_a28oL = Apply (Apply TakeSym0 a_1627898881_a28oK) a_1627898883_a28oL
+type family ZipWith7 (a_a28pC :: TyFun a_a28mK (TyFun b_a28mL (TyFun c_a28mM (TyFun d_a28mN (TyFun e_a28mO (TyFun f_a28mP (TyFun g_a28mQ h_a28mR
+                                                                                                                            -> *)
+                                                                                                            -> *)
+                                                                                              -> *)
+                                                                              -> *)
+                                                                -> *)
+                                                -> *)
+                                  -> *)
+                      (a_a28pD :: [a_a28mK])
+                      (a_a28pE :: [b_a28mL])
+                      (a_a28pF :: [c_a28mM])
+                      (a_a28pG :: [d_a28mN])
+                      (a_a28pH :: [e_a28mO])
+                      (a_a28pI :: [f_a28mP])
+                      (a_a28pJ :: [g_a28mQ]) :: [h_a28mR] where
+  ZipWith7 z_a28pK (a_a28pL ': as_a28pM) (b_a28pN ': bs_a28pO) (c_a28pP ': cs_a28pQ) (d_a28pR ': ds_a28pS) (e_a28pT ': es_a28pU) (f_a28pV ': fs_a28pW) (g_a28pX ': gs_a28pY) = Apply (Apply (:$) (Apply (Apply (Apply (Apply (Apply (Apply (Apply z_a28pK a_a28pL) b_a28pN) c_a28pP) d_a28pR) e_a28pT) f_a28pV) g_a28pX)) (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply ZipWith7Sym0 z_a28pK) as_a28pM) bs_a28pO) cs_a28pQ) ds_a28pS) es_a28pU) fs_a28pW) gs_a28pY)
+  ZipWith7 _z_1627898971_a28q1 _z_1627898974_a28q4 _z_1627898977_a28q7 _z_1627898980_a28qa _z_1627898983_a28qd _z_1627898986_a28qg _z_1627898989_a28qj _z_1627898992_a28qm = '[]
+type family ZipWith6 (a_a28r3 :: TyFun a_a28mq (TyFun b_a28mr (TyFun c_a28ms (TyFun d_a28mt (TyFun e_a28mu (TyFun f_a28mv g_a28mw
+                                                                                                            -> *)
+                                                                                              -> *)
+                                                                              -> *)
+                                                                -> *)
+                                                -> *)
+                                  -> *)
+                      (a_a28r4 :: [a_a28mq])
+                      (a_a28r5 :: [b_a28mr])
+                      (a_a28r6 :: [c_a28ms])
+                      (a_a28r7 :: [d_a28mt])
+                      (a_a28r8 :: [e_a28mu])
+                      (a_a28r9 :: [f_a28mv]) :: [g_a28mw] where
+  ZipWith6 z_a28ra (a_a28rb ': as_a28rc) (b_a28rd ': bs_a28re) (c_a28rf ': cs_a28rg) (d_a28rh ': ds_a28ri) (e_a28rj ': es_a28rk) (f_a28rl ': fs_a28rm) = Apply (Apply (:$) (Apply (Apply (Apply (Apply (Apply (Apply z_a28ra a_a28rb) b_a28rd) c_a28rf) d_a28rh) e_a28rj) f_a28rl)) (Apply (Apply (Apply (Apply (Apply (Apply (Apply ZipWith6Sym0 z_a28ra) as_a28rc) bs_a28re) cs_a28rg) ds_a28ri) es_a28rk) fs_a28rm)
+  ZipWith6 _z_1627899057_a28rp _z_1627899060_a28rs _z_1627899063_a28rv _z_1627899066_a28ry _z_1627899069_a28rB _z_1627899072_a28rE _z_1627899075_a28rH = '[]
+type family ZipWith5 (a_a28sf :: TyFun a_a28m9 (TyFun b_a28ma (TyFun c_a28mb (TyFun d_a28mc (TyFun e_a28md f_a28me
+                                                                                              -> *)
+                                                                              -> *)
+                                                                -> *)
+                                                -> *)
+                                  -> *)
+                      (a_a28sg :: [a_a28m9])
+                      (a_a28sh :: [b_a28ma])
+                      (a_a28si :: [c_a28mb])
+                      (a_a28sj :: [d_a28mc])
+                      (a_a28sk :: [e_a28md]) :: [f_a28me] where
+  ZipWith5 z_a28sl (a_a28sm ': as_a28sn) (b_a28so ': bs_a28sp) (c_a28sq ': cs_a28sr) (d_a28ss ': ds_a28st) (e_a28su ': es_a28sv) = Apply (Apply (:$) (Apply (Apply (Apply (Apply (Apply z_a28sl a_a28sm) b_a28so) c_a28sq) d_a28ss) e_a28su)) (Apply (Apply (Apply (Apply (Apply (Apply ZipWith5Sym0 z_a28sl) as_a28sn) bs_a28sp) cs_a28sr) ds_a28st) es_a28sv)
+  ZipWith5 _z_1627899128_a28sy _z_1627899131_a28sB _z_1627899134_a28sE _z_1627899137_a28sH _z_1627899140_a28sK _z_1627899143_a28sN = '[]
+type family ZipWith4 (a_a28td :: TyFun a_a28lV (TyFun b_a28lW (TyFun c_a28lX (TyFun d_a28lY e_a28lZ
+                                                                              -> *)
+                                                                -> *)
+                                                -> *)
+                                  -> *)
+                      (a_a28te :: [a_a28lV])
+                      (a_a28tf :: [b_a28lW])
+                      (a_a28tg :: [c_a28lX])
+                      (a_a28th :: [d_a28lY]) :: [e_a28lZ] where
+  ZipWith4 z_a28ti (a_a28tj ': as_a28tk) (b_a28tl ': bs_a28tm) (c_a28tn ': cs_a28to) (d_a28tp ': ds_a28tq) = Apply (Apply (:$) (Apply (Apply (Apply (Apply z_a28ti a_a28tj) b_a28tl) c_a28tn) d_a28tp)) (Apply (Apply (Apply (Apply (Apply ZipWith4Sym0 z_a28ti) as_a28tk) bs_a28tm) cs_a28to) ds_a28tq)
+  ZipWith4 _z_1627899185_a28tt _z_1627899188_a28tw _z_1627899191_a28tz _z_1627899194_a28tC _z_1627899197_a28tF = '[]
+type family Zip7 (a_a28uA :: [a_a28lO])
+                  (a_a28uB :: [b_a28lP])
+                  (a_a28uC :: [c_a28lQ])
+                  (a_a28uD :: [d_a28lR])
+                  (a_a28uE :: [e_a28lS])
+                  (a_a28uF :: [f_a28lT])
+                  (a_a28uG :: [g_a28lU]) :: [(a_a28lO,
+                                              b_a28lP,
+                                              c_a28lQ,
+                                              d_a28lR,
+                                              e_a28lS,
+                                              f_a28lT,
+                                              g_a28lU)] where
+  Zip7 a_1627899200_a28uH a_1627899202_a28uI a_1627899204_a28uJ a_1627899206_a28uK a_1627899208_a28uL a_1627899210_a28uM a_1627899212_a28uN = Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply ZipWith7Sym0 Tuple7Sym0) a_1627899200_a28uH) a_1627899202_a28uI) a_1627899204_a28uJ) a_1627899206_a28uK) a_1627899208_a28uL) a_1627899210_a28uM) a_1627899212_a28uN
+type family Zip6 (a_a28vx :: [a_a28lI])
+                  (a_a28vy :: [b_a28lJ])
+                  (a_a28vz :: [c_a28lK])
+                  (a_a28vA :: [d_a28lL])
+                  (a_a28vB :: [e_a28lM])
+                  (a_a28vC :: [f_a28lN]) :: [(a_a28lI,
+                                              b_a28lJ,
+                                              c_a28lK,
+                                              d_a28lL,
+                                              e_a28lM,
+                                              f_a28lN)] where
+  Zip6 a_1627899270_a28vD a_1627899272_a28vE a_1627899274_a28vF a_1627899276_a28vG a_1627899278_a28vH a_1627899280_a28vI = Apply (Apply (Apply (Apply (Apply (Apply (Apply ZipWith6Sym0 Tuple6Sym0) a_1627899270_a28vD) a_1627899272_a28vE) a_1627899274_a28vF) a_1627899276_a28vG) a_1627899278_a28vH) a_1627899280_a28vI
+type family Zip5 (a_a28wi :: [a_a28lD])
+                  (a_a28wj :: [b_a28lE])
+                  (a_a28wk :: [c_a28lF])
+                  (a_a28wl :: [d_a28lG])
+                  (a_a28wm :: [e_a28lH]) :: [(a_a28lD,
+                                              b_a28lE,
+                                              c_a28lF,
+                                              d_a28lG,
+                                              e_a28lH)] where
+  Zip5 a_1627899327_a28wn a_1627899329_a28wo a_1627899331_a28wp a_1627899333_a28wq a_1627899335_a28wr = Apply (Apply (Apply (Apply (Apply (Apply ZipWith5Sym0 Tuple5Sym0) a_1627899327_a28wn) a_1627899329_a28wo) a_1627899331_a28wp) a_1627899333_a28wq) a_1627899335_a28wr
+type family Zip4 (a_a28wS :: [a_a28lz])
+                  (a_a28wT :: [b_a28lA])
+                  (a_a28wU :: [c_a28lB])
+                  (a_a28wV :: [d_a28lC]) :: [(a_a28lz,
+                                              b_a28lA,
+                                              c_a28lB,
+                                              d_a28lC)] where
+  Zip4 a_1627899372_a28wW a_1627899374_a28wX a_1627899376_a28wY a_1627899378_a28wZ = Apply (Apply (Apply (Apply (Apply ZipWith4Sym0 Tuple4Sym0) a_1627899372_a28wW) a_1627899374_a28wX) a_1627899376_a28wY) a_1627899378_a28wZ
+type family StripPrefix (a_a28x7 :: [a_a28lt])
+                        (a_a28x8 :: [a_a28lt]) :: Maybe [a_a28lt] where
+  StripPrefix '[] ys_a28x9 = Apply JustSym0 ys_a28x9
+  StripPrefix arg_1627898803_a28xa arg_1627898805_a28xb = Case_1627899418_a28xd arg_1627898803_a28xa arg_1627898805_a28xb (Apply (Apply Tuple2Sym0 arg_1627898803_a28xa) arg_1627898805_a28xb)
diff --git a/src/Data/Promotion/TH.hs b/src/Data/Promotion/TH.hs
deleted file mode 100644
index e83f80f..0000000
--- a/src/Data/Promotion/TH.hs
+++ /dev/null
@@ -1,70 +0,0 @@
-{-# LANGUAGE ExplicitNamespaces #-}
-
------------------------------------------------------------------------------
--- |
--- Module      :  Data.Promotion.TH
--- Copyright   :  (C) 2013 Richard Eisenberg
--- License     :  BSD-style (see LICENSE)
--- Maintainer  :  Richard Eisenberg (eir@cis.upenn.edu)
--- Stability   :  experimental
--- Portability :  non-portable
---
--- This module contains everything you need to promote your own functions via
--- Template Haskell.
---
-----------------------------------------------------------------------------
-
-module Data.Promotion.TH (
-  -- * Primary Template Haskell generation functions
-  promote, promoteOnly, genDefunSymbols, genPromotions,
-
-  -- ** Functions to generate @Eq@ instances
-  promoteEqInstances, promoteEqInstance,
-
-  -- ** Functions to generate @Ord@ instances
-  promoteOrdInstances, promoteOrdInstance,
-
-  -- ** Functions to generate @Bounded@ instances
-  promoteBoundedInstances, promoteBoundedInstance,
-
-  -- ** Functions to generate @Enum@ instances
-  promoteEnumInstances, promoteEnumInstance,
-
-  -- ** defunctionalization
-  TyFun, Apply, type (@@),
-
-  -- * Auxiliary definitions
-  -- | These definitions might be mentioned in code generated by Template Haskell,
-  -- so they must be in scope.
-
-  PEq(..), If, (:&&),
-  POrd(..),
-  Any,
-  Proxy(..), KProxy(..), ThenCmp, Foldl,
-
-  Error, ErrorSym0,
-  TrueSym0, FalseSym0,
-  LTSym0, EQSym0, GTSym0,
-  Tuple0Sym0,
-  Tuple2Sym0, Tuple2Sym1, Tuple2Sym2,
-  Tuple3Sym0, Tuple3Sym1, Tuple3Sym2, Tuple3Sym3,
-  Tuple4Sym0, Tuple4Sym1, Tuple4Sym2, Tuple4Sym3, Tuple4Sym4,
-  Tuple5Sym0, Tuple5Sym1, Tuple5Sym2, Tuple5Sym3, Tuple5Sym4, Tuple5Sym5,
-  Tuple6Sym0, Tuple6Sym1, Tuple6Sym2, Tuple6Sym3, Tuple6Sym4, Tuple6Sym5, Tuple6Sym6,
-  Tuple7Sym0, Tuple7Sym1, Tuple7Sym2, Tuple7Sym3, Tuple7Sym4, Tuple7Sym5, Tuple7Sym6, Tuple7Sym7,
-  ThenCmpSym0, FoldlSym0,
-
-  SuppressUnusedWarnings(..)
-
- ) where
-
-import Data.Proxy
-import Data.Singletons
-import Data.Singletons.Promote
-import Data.Singletons.Prelude.Instances
-import Data.Singletons.Prelude.Bool
-import Data.Singletons.Prelude.Eq
-import Data.Singletons.Prelude.Ord
-import Data.Singletons.TypeLits
-import Data.Singletons.SuppressUnusedWarnings
-import GHC.Exts
diff --git a/src/Data/Singletons/CustomStar.hs b/src/Data/Singletons/CustomStar.hs
deleted file mode 100644
index a6e64ed..0000000
--- a/src/Data/Singletons/CustomStar.hs
+++ /dev/null
@@ -1,123 +0,0 @@
-{-# LANGUAGE DataKinds, TypeFamilies, KindSignatures, TemplateHaskell, CPP #-}
-
------------------------------------------------------------------------------
--- |
--- Module      :  Data.Singletons.CustomStar
--- Copyright   :  (C) 2013 Richard Eisenberg
--- License     :  BSD-style (see LICENSE)
--- Maintainer  :  Richard Eisenberg (eir@cis.upenn.edu)
--- Stability   :  experimental
--- Portability :  non-portable
---
--- This file implements 'singletonStar', which generates a datatype @Rep@ and associated
--- singleton from a list of types. The promoted version of @Rep@ is kind @*@ and the
--- Haskell types themselves. This is still very experimental, so expect unusual
--- results!
---
-----------------------------------------------------------------------------
-
-module Data.Singletons.CustomStar (
-  singletonStar,
-
-  module Data.Singletons.Prelude.Eq,
-  module Data.Singletons.Prelude.Bool
-  ) where
-
-import Language.Haskell.TH
-import Data.Singletons.Util
-import Data.Singletons.Deriving.Ord
-import Data.Singletons.Promote
-import Data.Singletons.Promote.Monad
-import Data.Singletons.Single.Monad
-import Data.Singletons.Single.Data
-import Data.Singletons.Single
-import Data.Singletons.Syntax
-import Data.Singletons.Names
-import Control.Monad
-import Data.Maybe
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Prelude.Eq
-import Data.Singletons.Prelude.Bool
-
--- | Produce a representation and singleton for the collection of types given.
---
--- A datatype @Rep@ is created, with one constructor per type in the declared
--- universe. When this type is promoted by the singletons library, the
--- constructors become full types in @*@, not just promoted data constructors.
---
--- For example,
---
--- > $(singletonStar [''Nat, ''Bool, ''Maybe])
---
--- generates the following:
---
--- > data Rep = Nat | Bool | Maybe Rep deriving (Eq, Show, Read)
---
--- and its singleton. However, because @Rep@ is promoted to @*@, the singleton
--- is perhaps slightly unexpected:
---
--- > data instance Sing (a :: *) where
--- >   SNat :: Sing Nat
--- >   SBool :: Sing Bool
--- >   SMaybe :: SingRep a => Sing a -> Sing (Maybe a)
---
--- The unexpected part is that @Nat@, @Bool@, and @Maybe@ above are the real @Nat@,
--- @Bool@, and @Maybe@, not just promoted data constructors.
---
--- Please note that this function is /very/ experimental. Use at your own risk.
-singletonStar :: DsMonad q
-              => [Name]        -- ^ A list of Template Haskell @Name@s for types
-              -> q [Dec]
-singletonStar names = do
-  kinds <- mapM getKind names
-  ctors <- zipWithM (mkCtor True) names kinds
-  let repDecl = DDataD Data [] repName [] ctors
-                       [''Eq, ''Show, ''Read]
-  fakeCtors <- zipWithM (mkCtor False) names kinds
-  let dataDecl = DataDecl Data repName [] fakeCtors [''Show, ''Read , ''Eq]
-  ordInst <- mkOrdInstance (DConT repName) fakeCtors
-  (pOrdInst, promDecls) <- promoteM [] $ do promoteDataDec dataDecl
-                                            promoteInstanceDec mempty ordInst
-  singletonDecls <- singDecsM [] $ do decs1 <- singDataD dataDecl
-                                      dec2  <- singInstD pOrdInst
-                                      return (dec2 : decs1)
-  return $ decsToTH $ repDecl :
-                      promDecls ++
-                      singletonDecls
-  where -- get the kinds of the arguments to the tycon with the given name
-        getKind :: DsMonad q => Name -> q [DKind]
-        getKind name = do
-          info <- reifyWithWarning name
-          dinfo <- dsInfo info
-          case dinfo of
-            DTyConI (DDataD _ (_:_) _ _ _ _) _ ->
-               fail "Cannot make a representation of a constrainted data type"
-            DTyConI (DDataD _ [] _ tvbs _ _) _ ->
-               return $ map (fromMaybe DStarK . extractTvbKind) tvbs
-            DTyConI (DTySynD _ tvbs _) _ ->
-               return $ map (fromMaybe DStarK . extractTvbKind) tvbs
-            DPrimTyConI _ n _ ->
-               return $ replicate n DStarK
-            _ -> fail $ "Invalid thing for representation: " ++ (show name)
-
-        -- first parameter is whether this is a real ctor (with a fresh name)
-        -- or a fake ctor (when the name is actually a Haskell type)
-        mkCtor :: DsMonad q => Bool -> Name -> [DKind] -> q DCon
-        mkCtor real name args = do
-          (types, vars) <- evalForPair $ mapM kindToType args
-          dataName <- if real then mkDataName (nameBase name) else return name
-          return $ DCon (map DPlainTV vars) [] dataName $
-                   DNormalC (map (\ty -> (NotStrict, ty)) types)
-
-        -- demote a kind back to a type, accumulating any unbound parameters
-        kindToType :: DsMonad q => DKind -> QWithAux [Name] q DType
-        kindToType (DForallK _ _) = fail "Explicit forall encountered in kind"
-        kindToType (DVarK n) = do
-          addElement n
-          return $ DVarT n
-        kindToType (DConK n args) = foldType (DConT n) <$> mapM kindToType args
-        kindToType (DArrowK k1 k2) = do
-          t1 <- kindToType k1
-          t2 <- kindToType k2
-          return $ DAppT (DAppT DArrowT t1) t2
-        kindToType DStarK = return $ DConT repName
diff --git a/src/Data/Singletons/Deriving/Bounded.hs b/src/Data/Singletons/Deriving/Bounded.hs
deleted file mode 100644
index 6487477..0000000
--- a/src/Data/Singletons/Deriving/Bounded.hs
+++ /dev/null
@@ -1,57 +0,0 @@
------------------------------------------------------------------------------
--- |
--- Module      :  Data.Singletons.Deriving.Bounded
--- Copyright   :  (C) 2015 Richard Eisenberg
--- License     :  BSD-style (see LICENSE)
--- Maintainer  :  Richard Eisenberg (eir@cis.upenn.edu
--- Stability   :  experimental
--- Portability :  non-portable
---
--- Implements deriving of Bounded instances
---
-----------------------------------------------------------------------------
-
-module Data.Singletons.Deriving.Bounded where
-
-import Language.Haskell.TH.Syntax
-import Language.Haskell.TH.Ppr
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Names
-import Data.Singletons.Util
-import Data.Singletons.Syntax
-import Data.Singletons.Deriving.Infer
-import Control.Monad
-
--- monadic only for failure and parallelism with other functions
--- that make instances
-mkBoundedInstance :: Quasi q => DType -> [DCon] -> q UInstDecl
-mkBoundedInstance ty cons = do
-  -- We can derive instance of Bounded if datatype is an enumeration (all
-  -- constructors must be nullary) or has only one constructor. See Section 11
-  -- of Haskell 2010 Language Report.
-  -- Note that order of conditions below is important.
-  when (null cons
-       || (any (\(DCon _ _ _ f) -> not . null . tysOfConFields $ f) cons
-            && (not . null . tail $ cons))) $
-       fail ("Can't derive Bounded instance for "
-             ++ pprint (typeToTH ty) ++ ".")
-  -- at this point we know that either we have a datatype that has only one
-  -- constructor or a datatype where each constructor is nullary
-  let (DCon _ _ minName fields) = head cons
-      (DCon _ _ maxName _)      = last cons
-      fieldsCount   = length $ tysOfConFields fields
-      (minRHS, maxRHS) = case fieldsCount of
-        0 -> (DConE minName, DConE maxName)
-        _ ->
-          let minEqnRHS = foldExp (DConE minName)
-                                  (replicate fieldsCount (DVarE minBoundName))
-              maxEqnRHS = foldExp (DConE maxName)
-                                  (replicate fieldsCount (DVarE maxBoundName))
-          in (minEqnRHS, maxEqnRHS)
-
-      mk_rhs rhs = UFunction [DClause [] rhs]
-  return $ InstDecl { id_cxt = inferConstraints (DConPr boundedName) cons
-                    , id_name = boundedName
-                    , id_arg_tys = [ty]
-                    , id_meths = [ (minBoundName, mk_rhs minRHS)
-                                 , (maxBoundName, mk_rhs maxRHS) ] }
diff --git a/src/Data/Singletons/Deriving/Enum.hs b/src/Data/Singletons/Deriving/Enum.hs
deleted file mode 100644
index 3eebafe..0000000
--- a/src/Data/Singletons/Deriving/Enum.hs
+++ /dev/null
@@ -1,51 +0,0 @@
------------------------------------------------------------------------------
--- |
--- Module      :  Data.Singletons.Deriving.Enum
--- Copyright   :  (C) 2015 Richard Eisenberg
--- License     :  BSD-style (see LICENSE)
--- Maintainer  :  Richard Eisenberg (eir@cis.upenn.edu)
--- Stability   :  experimental
--- Portability :  non-portable
---
--- Implements deriving of Enum instances
---
-----------------------------------------------------------------------------
-
-module Data.Singletons.Deriving.Enum ( mkEnumInstance ) where
-
-import Language.Haskell.TH.Syntax
-import Language.Haskell.TH.Ppr
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Syntax
-import Data.Singletons.Util
-import Data.Singletons.Names
-import Control.Monad
-
--- monadic for failure only
-mkEnumInstance :: Quasi q => DType -> [DCon] -> q UInstDecl
-mkEnumInstance ty cons = do
-  when (null cons ||
-        any (\(DCon tvbs cxt _ f) -> or [ not $ null $ tysOfConFields f
-                                        , not $ null tvbs
-                                        , not $ null cxt ]) cons) $
-    fail ("Can't derive Enum instance for " ++ pprint (typeToTH ty) ++ ".")
-  n <- qNewName "n"
-  let to_enum = UFunction [DClause [DVarPa n] (to_enum_rhs cons [0..])]
-      to_enum_rhs [] _ = DVarE errorName `DAppE` DLitE (StringL "toEnum: bad argument")
-      to_enum_rhs (DCon _ _ name _ : rest) (num:nums) =
-        DCaseE (DVarE equalsName `DAppE` DVarE n `DAppE` DLitE (IntegerL num))
-          [ DMatch (DConPa trueName []) (DConE name)
-          , DMatch (DConPa falseName []) (to_enum_rhs rest nums) ]
-      to_enum_rhs _ _ = error "Internal error: exhausted infinite list in to_enum_rhs"
-
-      from_enum = UFunction (zipWith (\i con -> DClause [DConPa (extractName con) []]
-                                                        (DLitE (IntegerL i)))
-                                     [0..] cons)
-  return (InstDecl { id_cxt     = []
-                   , id_name    = singletonsEnumName
-                      -- need to use singletons's Enum class to get the types
-                      -- to use Nat instead of Int
-
-                   , id_arg_tys = [ty]
-                   , id_meths   = [ (singletonsToEnumName, to_enum)
-                                  , (singletonsFromEnumName, from_enum) ] })
diff --git a/src/Data/Singletons/Deriving/Infer.hs b/src/Data/Singletons/Deriving/Infer.hs
deleted file mode 100644
index 0f0e7d3..0000000
--- a/src/Data/Singletons/Deriving/Infer.hs
+++ /dev/null
@@ -1,24 +0,0 @@
------------------------------------------------------------------------------
--- |
--- Module      :  Data.Singletons.Deriving.Infer
--- Copyright   :  (C) 2015 Richard Eisenberg
--- License     :  BSD-style (see LICENSE)
--- Maintainer  :  Richard Eisenberg (eir@cis.upenn.edu
--- Stability   :  experimental
--- Portability :  non-portable
---
--- Infers constraints for a `deriving` class
---
-----------------------------------------------------------------------------
-
-module Data.Singletons.Deriving.Infer ( inferConstraints ) where
-
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Util
-import Data.List
-import Data.Generics.Twins
-
-inferConstraints :: DPred -> [DCon] -> DCxt
-inferConstraints pr = nubBy geq . concatMap infer_ct
-  where
-    infer_ct (DCon _ _ _ fields) = map (pr `DAppPr`) (tysOfConFields fields)
diff --git a/src/Data/Singletons/Deriving/Ord.hs b/src/Data/Singletons/Deriving/Ord.hs
deleted file mode 100644
index 7f3150d..0000000
--- a/src/Data/Singletons/Deriving/Ord.hs
+++ /dev/null
@@ -1,65 +0,0 @@
------------------------------------------------------------------------------
--- |
--- Module      :  Data.Singletons.Deriving.Ord
--- Copyright   :  (C) 2015 Richard Eisenberg
--- License     :  BSD-style (see LICENSE)
--- Maintainer  :  Richard Eisenberg (eir@cis.upenn.edu
--- Stability   :  experimental
--- Portability :  non-portable
---
--- Implements deriving of Ord instances
---
-----------------------------------------------------------------------------
-
-module Data.Singletons.Deriving.Ord ( mkOrdInstance ) where
-
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Names
-import Data.Singletons.Util
-import Language.Haskell.TH.Syntax
-import Data.Singletons.Deriving.Infer
-import Data.Singletons.Syntax
-
--- | Make a *non-singleton* Ord instance
-mkOrdInstance :: Quasi q => DType -> [DCon] -> q UInstDecl
-mkOrdInstance ty cons = do
-  let constraints = inferConstraints (DConPr ordName) cons
-  compare_eq_clauses <- mapM mk_equal_clause cons
-  let compare_noneq_clauses = map (uncurry mk_nonequal_clause)
-                                  [ (con1, con2)
-                                  | con1 <- zip cons [1..]
-                                  , con2 <- zip cons [1..]
-                                  , extractName (fst con1) /=
-                                    extractName (fst con2) ]
-  return (InstDecl { id_cxt = constraints
-                   , id_name = ordName
-                   , id_arg_tys = [ty]
-                   , id_meths = [( compareName
-                                 , UFunction (compare_eq_clauses ++
-                                              compare_noneq_clauses) )] })
-
-mk_equal_clause :: Quasi q => DCon -> q DClause
-mk_equal_clause (DCon _tvbs _cxt name fields) = do
-  let tys = tysOfConFields fields
-  a_names <- mapM (const $ newUniqueName "a") tys
-  b_names <- mapM (const $ newUniqueName "b") tys
-  let pat1 = DConPa name (map DVarPa a_names)
-      pat2 = DConPa name (map DVarPa b_names)
-  return $ DClause [pat1, pat2] (DVarE foldlName `DAppE`
-                                 DVarE thenCmpName `DAppE`
-                                 DConE cmpEQName `DAppE`
-                                 mkListE (zipWith
-                                          (\a b -> DVarE compareName `DAppE` DVarE a
-                                                                     `DAppE` DVarE b)
-                                          a_names b_names))
-
-mk_nonequal_clause :: (DCon, Int) -> (DCon, Int) -> DClause
-mk_nonequal_clause (DCon _tvbs1 _cxt1 name1 fields1, n1)
-                   (DCon _tvbs2 _cxt2 name2 fields2, n2) =
-  DClause [pat1, pat2] (case n1 `compare` n2 of
-                          LT -> DConE cmpLTName
-                          EQ -> DConE cmpEQName
-                          GT -> DConE cmpGTName)
-  where
-    pat1 = DConPa name1 (map (const DWildPa) (tysOfConFields fields1))
-    pat2 = DConPa name2 (map (const DWildPa) (tysOfConFields fields2))
diff --git a/src/Data/Singletons/Names.hs b/src/Data/Singletons/Names.hs
deleted file mode 100644
index 04938e0..0000000
--- a/src/Data/Singletons/Names.hs
+++ /dev/null
@@ -1,264 +0,0 @@
-{- Data/Singletons/Names.hs
-
-(c) Richard Eisenberg 2014
-eir@cis.upenn.edu
-
-Defining names and manipulations on names for use in promotion and singling.
--}
-
-{-# LANGUAGE TemplateHaskell #-}
-
-module Data.Singletons.Names where
-
-import Data.Singletons
-import Data.Singletons.SuppressUnusedWarnings
-import Data.Singletons.Decide
-import Language.Haskell.TH.Syntax
-import Language.Haskell.TH.Desugar
-import GHC.TypeLits ( Nat, Symbol )
-import GHC.Exts ( Any )
-import Data.Typeable ( TypeRep )
-import Data.Singletons.Util
-import Data.Proxy ( Proxy(..) )
-import Control.Monad
-
-anyTypeName, boolName, andName, tyEqName, compareName, minBoundName,
-  maxBoundName, repName,
-  nilName, consName, listName, tyFunName,
-  applyName, natName, symbolName, undefinedName, typeRepName, stringName,
-  eqName, ordName, boundedName, orderingName,
-  singFamilyName, singIName, singMethName, demoteRepName,
-  singKindClassName, sEqClassName, sEqMethName, sconsName, snilName,
-  sIfName, kProxyDataName, kProxyTypeName, proxyTypeName, proxyDataName,
-  someSingTypeName, someSingDataName,
-  sListName, sDecideClassName, sDecideMethName,
-  provedName, disprovedName, reflName, toSingName, fromSingName,
-  equalityName, applySingName, suppressClassName, suppressMethodName,
-  thenCmpName,
-  kindOfName, tyFromIntegerName, tyNegateName, sFromIntegerName,
-  sNegateName, errorName, foldlName, cmpEQName, cmpLTName, cmpGTName,
-  singletonsToEnumName, singletonsFromEnumName, enumName, singletonsEnumName,
-  equalsName :: Name
-anyTypeName = ''Any
-boolName = ''Bool
-andName = '(&&)
-compareName = 'compare
-minBoundName = 'minBound
-maxBoundName = 'maxBound
-tyEqName = mk_name_tc "Data.Singletons.Prelude.Eq" ":=="
-repName = mkName "Rep"   -- this is actually defined in client code!
-nilName = '[]
-consName = '(:)
-listName = ''[]
-tyFunName = ''TyFun
-applyName = ''Apply
-symbolName = ''Symbol
-natName = ''Nat
-undefinedName = 'undefined
-typeRepName = ''TypeRep
-stringName = ''String
-eqName = ''Eq
-ordName = ''Ord
-boundedName = ''Bounded
-orderingName = ''Ordering
-singFamilyName = ''Sing
-singIName = ''SingI
-singMethName = 'sing
-toSingName = 'toSing
-fromSingName = 'fromSing
-demoteRepName = ''DemoteRep
-singKindClassName = ''SingKind
-sEqClassName = mk_name_tc "Data.Singletons.Prelude.Eq" "SEq"
-sEqMethName = mk_name_v "Data.Singletons.Prelude.Eq" "%:=="
-sIfName = mk_name_v "Data.Singletons.Prelude.Bool" "sIf"
-sconsName = mk_name_d "Data.Singletons.Prelude.Instances" "SCons"
-snilName = mk_name_d "Data.Singletons.Prelude.Instances" "SNil"
-kProxyDataName = 'KProxy
-kProxyTypeName = ''KProxy
-someSingTypeName = ''SomeSing
-someSingDataName = 'SomeSing
-proxyTypeName = ''Proxy
-proxyDataName = 'Proxy
-sListName = mk_name_tc "Data.Singletons.Prelude.Instances" "SList"
-sDecideClassName = ''SDecide
-sDecideMethName = '(%~)
-provedName = 'Proved
-disprovedName = 'Disproved
-reflName = 'Refl
-equalityName = ''(~)
-applySingName = 'applySing
-suppressClassName = ''SuppressUnusedWarnings
-suppressMethodName = 'suppressUnusedWarnings
-thenCmpName = mk_name_v "Data.Singletons.Prelude.Ord" "thenCmp"
-kindOfName = ''KindOf
-tyFromIntegerName = mk_name_tc "Data.Singletons.Prelude.Num" "FromInteger"
-tyNegateName = mk_name_tc "Data.Singletons.Prelude.Num" "Negate"
-sFromIntegerName = mk_name_v "Data.Singletons.Prelude.Num" "sFromInteger"
-sNegateName = mk_name_v "Data.Singletons.Prelude.Num" "sNegate"
-errorName = 'error
-foldlName = 'foldl
-cmpEQName = 'EQ
-cmpLTName = 'LT
-cmpGTName = 'GT
-singletonsToEnumName = mk_name_v "Data.Singletons.Prelude.Enum" "toEnum"
-singletonsFromEnumName = mk_name_v "Data.Singletons.Prelude.Enum" "fromEnum"
-enumName = ''Enum
-singletonsEnumName = mk_name_tc "Data.Singletons.Prelude.Enum" "Enum"
-equalsName = '(==)
-
-singPkg :: String
-singPkg = $( (LitE . StringL . loc_package) `liftM` location )
-
-mk_name_tc :: String -> String -> Name
-mk_name_tc = mkNameG_tc singPkg
-
-mk_name_d :: String -> String -> Name
-mk_name_d = mkNameG_d singPkg
-
-mk_name_v :: String -> String -> Name
-mk_name_v = mkNameG_v singPkg
-
-mkTupleTypeName :: Int -> Name
-mkTupleTypeName n = mk_name_tc "Data.Singletons.Prelude.Instances" $
-                    "STuple" ++ (show n)
-
-mkTupleDataName :: Int -> Name
-mkTupleDataName n = mk_name_d "Data.Singletons.Prelude.Instances" $
-                    "STuple" ++ (show n)
-
--- used when a value name appears in a pattern context
--- works only for proper variables (lower-case names)
-promoteValNameLhs :: Name -> Name
-promoteValNameLhs = upcase
-
--- like promoteValNameLhs, but adds a prefix to the promoted name
-promoteValNameLhsPrefix :: (String, String) -> Name -> Name
-promoteValNameLhsPrefix pres n = mkName $ toUpcaseStr pres n
-
--- used when a value name appears in an expression context
--- works for both variables and datacons
-promoteValRhs :: Name -> DType
-promoteValRhs name
-  | name == nilName
-  = DConT nilName   -- workaround for #21
-
-  | otherwise
-  = DConT $ promoteTySym name 0
-
--- generates type-level symbol for a given name. Int parameter represents
--- saturation: 0 - no parameters passed to the symbol, 1 - one parameter
--- passed to the symbol, and so on. Works on both promoted and unpromoted
--- names.
-promoteTySym :: Name -> Int -> Name
-promoteTySym name sat
-    | name == undefinedName
-    = anyTypeName
-
-    | name == nilName
-    = mkName $ "NilSym" ++ (show sat)
-
-       -- treat unboxed tuples like tuples
-    | Just degree <- tupleNameDegree_maybe name `mplus`
-                     unboxedTupleNameDegree_maybe name
-    = mk_name_tc "Data.Singletons.Prelude.Instances" $
-                 "Tuple" ++ show degree ++ "Sym" ++ (show sat)
-
-    | otherwise
-    = let capped = toUpcaseStr noPrefix name in
-      if isHsLetter (head capped)
-      then mkName (capped ++ "Sym" ++ (show sat))
-      else mkName (capped ++ (replicate (sat + 1) '$'))
-
-promoteClassName :: Name -> Name
-promoteClassName = prefixUCName "P" "#"
-
--- produce the silly type class used to store the type variables for
--- a class
-classTvsName :: Name -> Name
-classTvsName = suffixName "TyVars" "^^^"
-
-mkTyName :: Quasi q => Name -> q Name
-mkTyName tmName = do
-  let nameStr  = nameBase tmName
-      symbolic = not (isHsLetter (head nameStr))
-  qNewName (if symbolic then "ty" else nameStr)
-
-falseTySym :: DType
-falseTySym = promoteValRhs falseName
-
-trueTySym :: DType
-trueTySym = promoteValRhs trueName
-
-boolKi :: DKind
-boolKi = DConK boolName []
-
-andTySym :: DType
-andTySym = promoteValRhs andName
-
--- Singletons
-
-singDataConName :: Name -> Name
-singDataConName nm
-  | nm == nilName                                  = snilName
-  | nm == consName                                 = sconsName
-  | Just degree <- tupleNameDegree_maybe nm        = mkTupleDataName degree
-  | Just degree <- unboxedTupleNameDegree_maybe nm = mkTupleDataName degree
-  | otherwise                                      = prefixUCName "S" ":%" nm
-
-singTyConName :: Name -> Name
-singTyConName name
-  | name == listName                                 = sListName
-  | Just degree <- tupleNameDegree_maybe name        = mkTupleTypeName degree
-  | Just degree <- unboxedTupleNameDegree_maybe name = mkTupleTypeName degree
-  | otherwise                                        = prefixUCName "S" ":%" name
-
-singClassName :: Name -> Name
-singClassName = singTyConName
-
-singValName :: Name -> Name
-singValName n
-  | n == undefinedName       = undefinedName
-     -- avoid unused variable warnings
-  | head (nameBase n) == '_' = (prefixLCName "_s" "%") $ n
-  | otherwise                = (prefixLCName "s" "%") $ upcase n
-
-kindParam :: DKind -> DType
-kindParam k = DSigT (DConT kProxyDataName) (DConK kProxyTypeName [k])
-
-proxyFor :: DType -> DExp
-proxyFor ty = DSigE (DConE proxyDataName) (DAppT (DConT proxyTypeName) ty)
-
-singFamily :: DType
-singFamily = DConT singFamilyName
-
-singKindConstraint :: DKind -> DPred
-singKindConstraint k = DAppPr (DConPr singKindClassName) (kindParam k)
-
-demote :: DType
-demote = DConT demoteRepName
-
-apply :: DType -> DType -> DType
-apply t1 t2 = DAppT (DAppT (DConT applyName) t1) t2
-
-mkListE :: [DExp] -> DExp
-mkListE =
-  foldr (\h t -> DConE consName `DAppE` h `DAppE` t) (DConE nilName)
-
--- apply a type to a list of types using Apply type family
--- This is defined here, not in Utils, to avoid cyclic dependencies
-foldApply :: DType -> [DType] -> DType
-foldApply = foldl apply
-
--- make and equality predicate
-mkEqPred :: DType -> DType -> DPred
-mkEqPred ty1 ty2 = foldl DAppPr (DConPr equalityName) [ty1, ty2]
-
--- create a bunch of kproxy vars, and constrain them all to be 'KProxy
-mkKProxies :: Quasi q
-           => [Name]   -- for the kinds of the kproxies
-           -> q ([DTyVarBndr], DCxt)
-mkKProxies ns = do
-  kproxies <- mapM (const $ qNewName "kproxy") ns
-  return ( zipWith (\kp kv -> DKindedTV kp (DConK kProxyTypeName [DVarK kv]))
-                   kproxies ns
-         , map (\kp -> mkEqPred (DVarT kp) (DConT kProxyDataName)) kproxies )
diff --git a/src/Data/Singletons/Partition.hs b/src/Data/Singletons/Partition.hs
deleted file mode 100644
index 472da44..0000000
--- a/src/Data/Singletons/Partition.hs
+++ /dev/null
@@ -1,111 +0,0 @@
------------------------------------------------------------------------------
--- |
--- Module      :  Data.Singletons.Partition
--- Copyright   :  (C) 2015 Richard Eisenberg
--- License     :  BSD-style (see LICENSE)
--- Maintainer  :  Richard Eisenberg (eir@cis.upenn.edu
--- Stability   :  experimental
--- Portability :  non-portable
---
--- Partitions a list of declarations into its bits
---
-----------------------------------------------------------------------------
-
-module Data.Singletons.Partition where
-
-import Prelude hiding ( exp )
-import Data.Singletons.Syntax
-import Data.Singletons.Deriving.Ord
-import Data.Singletons.Deriving.Bounded
-import Data.Singletons.Deriving.Enum
-import Data.Singletons.Names
-import Language.Haskell.TH.Syntax
-import Language.Haskell.TH.Ppr
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Util
-
-import Data.Monoid
-import Control.Monad
-import Data.Maybe
-
-data PartitionedDecs =
-  PDecs { pd_let_decs :: [DLetDec]
-        , pd_class_decs :: [UClassDecl]
-        , pd_instance_decs :: [UInstDecl]
-        , pd_data_decs :: [DataDecl]
-        }
-
-instance Monoid PartitionedDecs where
-  mempty = PDecs [] [] [] []
-  mappend (PDecs a1 b1 c1 d1) (PDecs a2 b2 c2 d2) =
-    PDecs (a1 <> a2) (b1 <> b2) (c1 <> c2) (d1 <> d2)
-
--- | Split up a @[DDec]@ into its pieces, extracting 'Ord' instances
--- from deriving clauses
-partitionDecs :: Quasi m => [DDec] -> m PartitionedDecs
-partitionDecs = concatMapM partitionDec
-
-partitionDec :: Quasi m => DDec -> m PartitionedDecs
-partitionDec (DLetDec letdec) = return $ mempty { pd_let_decs = [letdec] }
-
-partitionDec (DDataD nd _cxt name tvbs cons derivings) = do
-  (derivings', derived_instances) <- partitionWithM part_derivings derivings
-  return $ mempty { pd_data_decs = [DataDecl nd name tvbs cons derivings']
-                  , pd_instance_decs = derived_instances }
-  where
-    ty = foldType (DConT name) (map tvbToType tvbs)
-    part_derivings :: Quasi m => Name -> m (Either Name UInstDecl)
-    part_derivings deriv_name
-      | deriv_name == ordName
-      = Right <$> mkOrdInstance ty cons
-      | deriv_name == boundedName
-      = Right <$> mkBoundedInstance ty cons
-      | deriv_name == enumName
-      = Right <$> mkEnumInstance ty cons
-      | otherwise
-      = return (Left deriv_name)
-
-partitionDec (DClassD cxt name tvbs fds decs) = do
-  env <- concatMapM partitionClassDec decs
-  return $ mempty { pd_class_decs = [ClassDecl { cd_cxt  = cxt
-                                               , cd_name = name
-                                               , cd_tvbs = tvbs
-                                               , cd_fds  = fds
-                                               , cd_lde  = env }] }
-partitionDec (DInstanceD cxt ty decs) = do
-  defns <- liftM catMaybes $ mapM partitionInstanceDec decs
-  (name, tys) <- split_app_tys [] ty
-  return $ mempty { pd_instance_decs = [InstDecl { id_cxt = cxt
-                                                 , id_name = name
-                                                 , id_arg_tys = tys
-                                                 , id_meths = defns }] }
-  where
-    split_app_tys acc (DAppT t1 t2) = split_app_tys (t2:acc) t1
-    split_app_tys acc (DConT name)  = return (name, acc)
-    split_app_tys acc (DSigT t _)   = split_app_tys acc t
-    split_app_tys _ _ = fail $ "Illegal instance head: " ++ show ty
-partitionDec (DRoleAnnotD {}) = return mempty  -- ignore these
-partitionDec (DPragmaD {}) = return mempty
-partitionDec dec =
-  fail $ "Declaration cannot be promoted: " ++ pprint (decToTH dec)
-
-partitionClassDec :: Monad m => DDec -> m ULetDecEnv
-partitionClassDec (DLetDec (DSigD name ty)) = return $ typeBinding name ty
-partitionClassDec (DLetDec (DValD (DVarPa name) exp)) =
-  return $ valueBinding name (UValue exp)
-partitionClassDec (DLetDec (DFunD name clauses)) =
-  return $ valueBinding name (UFunction clauses)
-partitionClassDec (DLetDec (DInfixD fixity name)) =
-  return $ infixDecl fixity name
-partitionClassDec (DPragmaD {}) = return mempty
-partitionClassDec _ =
-  fail "Only method declarations can be promoted within a class."
-
-partitionInstanceDec :: Monad m => DDec -> m (Maybe (Name, ULetDecRHS))
-partitionInstanceDec (DLetDec (DValD (DVarPa name) exp)) =
-  return $ Just (name, UValue exp)
-partitionInstanceDec (DLetDec (DFunD name clauses)) =
-  return $ Just (name, UFunction clauses)
-partitionInstanceDec (DPragmaD {}) = return Nothing
-partitionInstanceDec _ =
-  fail "Only method bodies can be promoted within an instance."
diff --git a/src/Data/Singletons/Prelude/Base.hs b/src/Data/Singletons/Prelude/Base.hs
index 3adb4b8..08e248b 100644
--- a/src/Data/Singletons/Prelude/Base.hs
+++ b/src/Data/Singletons/Prelude/Base.hs
@@ -44,52 +44,545 @@ module Data.Singletons.Prelude.Base (
   ) where
 
 import Data.Singletons.Prelude.Instances
-import Data.Singletons.Single
 import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
+import Data.Proxy
 import Data.Singletons.Prelude.Bool
 
 -- Promoted and singletonized versions of "otherwise" are imported and
 -- re-exported from Data.Singletons.Prelude.Bool. This is done to avoid cyclic
 -- module dependencies.
 
-$(singletonsOnly [d|
-  foldr                   :: (a -> b -> b) -> b -> [a] -> b
-  foldr k z = go
-            where
-              go []     = z
-              go (y:ys) = y `k` go ys
-
-  map                     :: (a -> b) -> [a] -> [b]
-  map _ []                = []
-  map f (x:xs)            = f x : map f xs
-
-  (++)                    :: [a] -> [a] -> [a]
-  (++) []     ys          = ys
-  (++) (x:xs) ys          = x : xs ++ ys
-  infixr 5 ++
-
-  id                      :: a -> a
-  id x                    =  x
-
-  const                   :: a -> b -> a
-  const x _               =  x
-
-  (.)    :: (b -> c) -> (a -> b) -> a -> c
-  (.) f g = \x -> f (g x)
-  infixr 9 .
-
-  flip                    :: (a -> b -> c) -> b -> a -> c
-  flip f x y              =  f y x
-
-  asTypeOf                :: a -> a -> a
-  asTypeOf                =  const
-
-  -- This is not part of GHC.Base, but we need to emulate seq and this is a good
-  -- place to do it.
-  seq :: a -> b -> b
-  seq _ x = x
-  infixr 0 `seq`
- |])
+type family Lambda_1627891452_a26sJ f_a26sF
+                                    g_a26sG
+                                    a_1627891447_a26sH
+                                    t_a26sL where
+  Lambda_1627891452_a26sJ f_a26sF g_a26sG a_1627891447_a26sH x_a26sK = Apply f_a26sF (Apply g_a26sG x_a26sK)
+type Lambda_1627891452Sym4 t_a26sM t_a26sN t_a26sO t_a26sP =
+    Lambda_1627891452_a26sJ t_a26sM t_a26sN t_a26sO t_a26sP
+instance SuppressUnusedWarnings Lambda_1627891452Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627891452Sym3KindInference ())
+data Lambda_1627891452Sym3 l_a26t0 l_a26t1 l_a26t2 l_a26sZ
+  = forall arg_a26t3. KindOf (Apply (Lambda_1627891452Sym3 l_a26t0 l_a26t1 l_a26t2) arg_a26t3) ~ KindOf (Lambda_1627891452Sym4 l_a26t0 l_a26t1 l_a26t2 arg_a26t3) =>
+    Lambda_1627891452Sym3KindInference
+type instance Apply (Lambda_1627891452Sym3 l_a26t0 l_a26t1 l_a26t2) l_a26sZ = Lambda_1627891452Sym4 l_a26t0 l_a26t1 l_a26t2 l_a26sZ
+instance SuppressUnusedWarnings Lambda_1627891452Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627891452Sym2KindInference ())
+data Lambda_1627891452Sym2 l_a26sW l_a26sX l_a26sV
+  = forall arg_a26sY. KindOf (Apply (Lambda_1627891452Sym2 l_a26sW l_a26sX) arg_a26sY) ~ KindOf (Lambda_1627891452Sym3 l_a26sW l_a26sX arg_a26sY) =>
+    Lambda_1627891452Sym2KindInference
+type instance Apply (Lambda_1627891452Sym2 l_a26sW l_a26sX) l_a26sV = Lambda_1627891452Sym3 l_a26sW l_a26sX l_a26sV
+instance SuppressUnusedWarnings Lambda_1627891452Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627891452Sym1KindInference ())
+data Lambda_1627891452Sym1 l_a26sT l_a26sS
+  = forall arg_a26sU. KindOf (Apply (Lambda_1627891452Sym1 l_a26sT) arg_a26sU) ~ KindOf (Lambda_1627891452Sym2 l_a26sT arg_a26sU) =>
+    Lambda_1627891452Sym1KindInference
+type instance Apply (Lambda_1627891452Sym1 l_a26sT) l_a26sS = Lambda_1627891452Sym2 l_a26sT l_a26sS
+instance SuppressUnusedWarnings Lambda_1627891452Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627891452Sym0KindInference ())
+data Lambda_1627891452Sym0 l_a26sQ
+  = forall arg_a26sR. KindOf (Apply Lambda_1627891452Sym0 arg_a26sR) ~ KindOf (Lambda_1627891452Sym1 arg_a26sR) =>
+    Lambda_1627891452Sym0KindInference
+type instance Apply Lambda_1627891452Sym0 l_a26sQ = Lambda_1627891452Sym1 l_a26sQ
+type Let1627891555GoSym4 t_a26uo t_a26up t_a26uq t_a26ur =
+    Let1627891555Go t_a26uo t_a26up t_a26uq t_a26ur
+instance SuppressUnusedWarnings Let1627891555GoSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627891555GoSym3KindInference ())
+data Let1627891555GoSym3 l_a26uC l_a26uD l_a26uE l_a26uB
+  = forall arg_a26uF. KindOf (Apply (Let1627891555GoSym3 l_a26uC l_a26uD l_a26uE) arg_a26uF) ~ KindOf (Let1627891555GoSym4 l_a26uC l_a26uD l_a26uE arg_a26uF) =>
+    Let1627891555GoSym3KindInference
+type instance Apply (Let1627891555GoSym3 l_a26uC l_a26uD l_a26uE) l_a26uB = Let1627891555GoSym4 l_a26uC l_a26uD l_a26uE l_a26uB
+instance SuppressUnusedWarnings Let1627891555GoSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627891555GoSym2KindInference ())
+data Let1627891555GoSym2 l_a26uy l_a26uz l_a26ux
+  = forall arg_a26uA. KindOf (Apply (Let1627891555GoSym2 l_a26uy l_a26uz) arg_a26uA) ~ KindOf (Let1627891555GoSym3 l_a26uy l_a26uz arg_a26uA) =>
+    Let1627891555GoSym2KindInference
+type instance Apply (Let1627891555GoSym2 l_a26uy l_a26uz) l_a26ux = Let1627891555GoSym3 l_a26uy l_a26uz l_a26ux
+instance SuppressUnusedWarnings Let1627891555GoSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627891555GoSym1KindInference ())
+data Let1627891555GoSym1 l_a26uv l_a26uu
+  = forall arg_a26uw. KindOf (Apply (Let1627891555GoSym1 l_a26uv) arg_a26uw) ~ KindOf (Let1627891555GoSym2 l_a26uv arg_a26uw) =>
+    Let1627891555GoSym1KindInference
+type instance Apply (Let1627891555GoSym1 l_a26uv) l_a26uu = Let1627891555GoSym2 l_a26uv l_a26uu
+instance SuppressUnusedWarnings Let1627891555GoSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627891555GoSym0KindInference ())
+data Let1627891555GoSym0 l_a26us
+  = forall arg_a26ut. KindOf (Apply Let1627891555GoSym0 arg_a26ut) ~ KindOf (Let1627891555GoSym1 arg_a26ut) =>
+    Let1627891555GoSym0KindInference
+type instance Apply Let1627891555GoSym0 l_a26us = Let1627891555GoSym1 l_a26us
+type family Let1627891555Go k_a26uk
+                            z_a26ul
+                            a_1627891550_a26um
+                            a_a26uG where
+  Let1627891555Go k_a26uk z_a26ul a_1627891550_a26um '[] = z_a26ul
+  Let1627891555Go k_a26uk z_a26ul a_1627891550_a26um (y_a26uH ': ys_a26uI) = Apply (Apply k_a26uk y_a26uH) (Apply (Let1627891555GoSym3 k_a26uk z_a26ul a_1627891550_a26um) ys_a26uI)
+type SeqSym2 (t_a26rT :: a_a26rQ) (t_a26rU :: b_a26rR) =
+    Seq t_a26rT t_a26rU
+instance SuppressUnusedWarnings SeqSym1 where
+  suppressUnusedWarnings _ = snd ((,) SeqSym1KindInference ())
+data SeqSym1 (l_a26rY :: a_a26rQ)
+              (l_a26rX :: TyFun b_a26rR b_a26rR)
+  = forall arg_a26rZ. KindOf (Apply (SeqSym1 l_a26rY) arg_a26rZ) ~ KindOf (SeqSym2 l_a26rY arg_a26rZ) =>
+    SeqSym1KindInference
+type instance Apply (SeqSym1 l_a26rY) l_a26rX = SeqSym2 l_a26rY l_a26rX
+instance SuppressUnusedWarnings SeqSym0 where
+  suppressUnusedWarnings _ = snd ((,) SeqSym0KindInference ())
+data SeqSym0 (l_a26rV :: TyFun a_a26rQ (TyFun b_a26rR b_a26rR
+                                        -> *))
+  = forall arg_a26rW. KindOf (Apply SeqSym0 arg_a26rW) ~ KindOf (SeqSym1 arg_a26rW) =>
+    SeqSym0KindInference
+type instance Apply SeqSym0 l_a26rV = SeqSym1 l_a26rV
+type FlipSym3 (t_a26s6 :: TyFun a_a26rJ (TyFun b_a26rK c_a26rL
+                                          -> *)
+                          -> *)
+              (t_a26s7 :: b_a26rK)
+              (t_a26s8 :: a_a26rJ) =
+    Flip t_a26s6 t_a26s7 t_a26s8
+instance SuppressUnusedWarnings FlipSym2 where
+  suppressUnusedWarnings _ = snd ((,) FlipSym2KindInference ())
+data FlipSym2 (l_a26sf :: TyFun a_a26rJ (TyFun b_a26rK c_a26rL
+                                          -> *)
+                          -> *)
+              (l_a26sg :: b_a26rK)
+              (l_a26se :: TyFun a_a26rJ c_a26rL)
+  = forall arg_a26sh. KindOf (Apply (FlipSym2 l_a26sf l_a26sg) arg_a26sh) ~ KindOf (FlipSym3 l_a26sf l_a26sg arg_a26sh) =>
+    FlipSym2KindInference
+type instance Apply (FlipSym2 l_a26sf l_a26sg) l_a26se = FlipSym3 l_a26sf l_a26sg l_a26se
+instance SuppressUnusedWarnings FlipSym1 where
+  suppressUnusedWarnings _ = snd ((,) FlipSym1KindInference ())
+data FlipSym1 (l_a26sc :: TyFun a_a26rJ (TyFun b_a26rK c_a26rL
+                                          -> *)
+                          -> *)
+              (l_a26sb :: TyFun b_a26rK (TyFun a_a26rJ c_a26rL -> *))
+  = forall arg_a26sd. KindOf (Apply (FlipSym1 l_a26sc) arg_a26sd) ~ KindOf (FlipSym2 l_a26sc arg_a26sd) =>
+    FlipSym1KindInference
+type instance Apply (FlipSym1 l_a26sc) l_a26sb = FlipSym2 l_a26sc l_a26sb
+instance SuppressUnusedWarnings FlipSym0 where
+  suppressUnusedWarnings _ = snd ((,) FlipSym0KindInference ())
+data FlipSym0 (l_a26s9 :: TyFun (TyFun a_a26rJ (TyFun b_a26rK c_a26rL
+                                                -> *)
+                                  -> *) (TyFun b_a26rK (TyFun a_a26rJ c_a26rL -> *) -> *))
+  = forall arg_a26sa. KindOf (Apply FlipSym0 arg_a26sa) ~ KindOf (FlipSym1 arg_a26sa) =>
+    FlipSym0KindInference
+type instance Apply FlipSym0 l_a26s9 = FlipSym1 l_a26s9
+type (:.$$$$) (t_a26so :: TyFun b_a26rD c_a26rE -> *)
+              (t_a26sp :: TyFun a_a26rF b_a26rD -> *)
+              (t_a26sq :: a_a26rF) =
+    (:.) t_a26so t_a26sp t_a26sq
+instance SuppressUnusedWarnings (:.$$$) where
+  suppressUnusedWarnings _ = snd ((,) (:.$$$###) ())
+data (:.$$$) (l_a26sx :: TyFun b_a26rD c_a26rE -> *)
+              (l_a26sy :: TyFun a_a26rF b_a26rD -> *)
+              (l_a26sw :: TyFun a_a26rF c_a26rE)
+  = forall arg_a26sz. KindOf (Apply ((:.$$$) l_a26sx l_a26sy) arg_a26sz) ~ KindOf ((:.$$$$) l_a26sx l_a26sy arg_a26sz) =>
+    (:.$$$###)
+type instance Apply ((:.$$$) l_a26sx l_a26sy) l_a26sw = (:.$$$$) l_a26sx l_a26sy l_a26sw
+instance SuppressUnusedWarnings (:.$$) where
+  suppressUnusedWarnings _ = snd ((,) (:.$$###) ())
+data (:.$$) (l_a26su :: TyFun b_a26rD c_a26rE -> *)
+            (l_a26st :: TyFun (TyFun a_a26rF b_a26rD
+                                -> *) (TyFun a_a26rF c_a26rE -> *))
+  = forall arg_a26sv. KindOf (Apply ((:.$$) l_a26su) arg_a26sv) ~ KindOf ((:.$$$) l_a26su arg_a26sv) =>
+    (:.$$###)
+type instance Apply ((:.$$) l_a26su) l_a26st = (:.$$$) l_a26su l_a26st
+instance SuppressUnusedWarnings (:.$) where
+  suppressUnusedWarnings _ = snd ((,) (:.$###) ())
+data (:.$) (l_a26sr :: TyFun (TyFun b_a26rD c_a26rE
+                              -> *) (TyFun (TyFun a_a26rF b_a26rD -> *) (TyFun a_a26rF c_a26rE
+                                                                          -> *)
+                                      -> *))
+  = forall arg_a26ss. KindOf (Apply (:.$) arg_a26ss) ~ KindOf ((:.$$) arg_a26ss) =>
+    (:.$###)
+type instance Apply (:.$) l_a26sr = (:.$$) l_a26sr
+type ConstSym2 (t_a26t4 :: a_a26rA) (t_a26t5 :: b_a26rB) =
+    Const t_a26t4 t_a26t5
+instance SuppressUnusedWarnings ConstSym1 where
+  suppressUnusedWarnings _ = snd ((,) ConstSym1KindInference ())
+data ConstSym1 (l_a26t9 :: a_a26rA)
+                (l_a26t8 :: TyFun b_a26rB a_a26rA)
+  = forall arg_a26ta. KindOf (Apply (ConstSym1 l_a26t9) arg_a26ta) ~ KindOf (ConstSym2 l_a26t9 arg_a26ta) =>
+    ConstSym1KindInference
+type instance Apply (ConstSym1 l_a26t9) l_a26t8 = ConstSym2 l_a26t9 l_a26t8
+instance SuppressUnusedWarnings ConstSym0 where
+  suppressUnusedWarnings _ = snd ((,) ConstSym0KindInference ())
+data ConstSym0 (l_a26t6 :: TyFun a_a26rA (TyFun b_a26rB a_a26rA
+                                          -> *))
+  = forall arg_a26t7. KindOf (Apply ConstSym0 arg_a26t7) ~ KindOf (ConstSym1 arg_a26t7) =>
+    ConstSym0KindInference
+type instance Apply ConstSym0 l_a26t6 = ConstSym1 l_a26t6
+type AsTypeOfSym2 (t_a26tl :: a_a26rP) (t_a26tm :: a_a26rP) =
+    AsTypeOf t_a26tl t_a26tm
+instance SuppressUnusedWarnings AsTypeOfSym1 where
+  suppressUnusedWarnings _ = snd ((,) AsTypeOfSym1KindInference ())
+data AsTypeOfSym1 (l_a26tq :: a_a26rP)
+                  (l_a26tp :: TyFun a_a26rP a_a26rP)
+  = forall arg_a26tr. KindOf (Apply (AsTypeOfSym1 l_a26tq) arg_a26tr) ~ KindOf (AsTypeOfSym2 l_a26tq arg_a26tr) =>
+    AsTypeOfSym1KindInference
+type instance Apply (AsTypeOfSym1 l_a26tq) l_a26tp = AsTypeOfSym2 l_a26tq l_a26tp
+instance SuppressUnusedWarnings AsTypeOfSym0 where
+  suppressUnusedWarnings _ = snd ((,) AsTypeOfSym0KindInference ())
+data AsTypeOfSym0 (l_a26tn :: TyFun a_a26rP (TyFun a_a26rP a_a26rP
+                                              -> *))
+  = forall arg_a26to. KindOf (Apply AsTypeOfSym0 arg_a26to) ~ KindOf (AsTypeOfSym1 arg_a26to) =>
+    AsTypeOfSym0KindInference
+type instance Apply AsTypeOfSym0 l_a26tn = AsTypeOfSym1 l_a26tn
+type IdSym1 (t_a26tw :: a_a26ry) = Id t_a26tw
+instance SuppressUnusedWarnings IdSym0 where
+  suppressUnusedWarnings _ = snd ((,) IdSym0KindInference ())
+data IdSym0 (l_a26tx :: TyFun a_a26ry a_a26ry)
+  = forall arg_a26ty. KindOf (Apply IdSym0 arg_a26ty) ~ KindOf (IdSym1 arg_a26ty) =>
+    IdSym0KindInference
+type instance Apply IdSym0 l_a26tx = IdSym1 l_a26tx
+type (:++$$$) (t_a26tB :: [a_a26rt]) (t_a26tC :: [a_a26rt]) =
+    (:++) t_a26tB t_a26tC
+instance SuppressUnusedWarnings (:++$$) where
+  suppressUnusedWarnings _ = snd ((,) (:++$$###) ())
+data (:++$$) (l_a26tG :: [a_a26rt])
+              (l_a26tF :: TyFun [a_a26rt] [a_a26rt])
+  = forall arg_a26tH. KindOf (Apply ((:++$$) l_a26tG) arg_a26tH) ~ KindOf ((:++$$$) l_a26tG arg_a26tH) =>
+    (:++$$###)
+type instance Apply ((:++$$) l_a26tG) l_a26tF = (:++$$$) l_a26tG l_a26tF
+instance SuppressUnusedWarnings (:++$) where
+  suppressUnusedWarnings _ = snd ((,) (:++$###) ())
+data (:++$) (l_a26tD :: TyFun [a_a26rt] (TyFun [a_a26rt] [a_a26rt]
+                                          -> *))
+  = forall arg_a26tE. KindOf (Apply (:++$) arg_a26tE) ~ KindOf ((:++$$) arg_a26tE) =>
+    (:++$###)
+type instance Apply (:++$) l_a26tD = (:++$$) l_a26tD
+type MapSym2 (t_a26tO :: TyFun a_a26ro b_a26rp -> *)
+              (t_a26tP :: [a_a26ro]) =
+    Map t_a26tO t_a26tP
+instance SuppressUnusedWarnings MapSym1 where
+  suppressUnusedWarnings _ = snd ((,) MapSym1KindInference ())
+data MapSym1 (l_a26tT :: TyFun a_a26ro b_a26rp -> *)
+              (l_a26tS :: TyFun [a_a26ro] [b_a26rp])
+  = forall arg_a26tU. KindOf (Apply (MapSym1 l_a26tT) arg_a26tU) ~ KindOf (MapSym2 l_a26tT arg_a26tU) =>
+    MapSym1KindInference
+type instance Apply (MapSym1 l_a26tT) l_a26tS = MapSym2 l_a26tT l_a26tS
+instance SuppressUnusedWarnings MapSym0 where
+  suppressUnusedWarnings _ = snd ((,) MapSym0KindInference ())
+data MapSym0 (l_a26tQ :: TyFun (TyFun a_a26ro b_a26rp
+                                -> *) (TyFun [a_a26ro] [b_a26rp] -> *))
+  = forall arg_a26tR. KindOf (Apply MapSym0 arg_a26tR) ~ KindOf (MapSym1 arg_a26tR) =>
+    MapSym0KindInference
+type instance Apply MapSym0 l_a26tQ = MapSym1 l_a26tQ
+type FoldrSym3 (t_a26u3 :: TyFun a_a26rh (TyFun b_a26ri b_a26ri
+                                          -> *)
+                            -> *)
+                (t_a26u4 :: b_a26ri)
+                (t_a26u5 :: [a_a26rh]) =
+    Foldr t_a26u3 t_a26u4 t_a26u5
+instance SuppressUnusedWarnings FoldrSym2 where
+  suppressUnusedWarnings _ = snd ((,) FoldrSym2KindInference ())
+data FoldrSym2 (l_a26uc :: TyFun a_a26rh (TyFun b_a26ri b_a26ri
+                                          -> *)
+                            -> *)
+                (l_a26ud :: b_a26ri)
+                (l_a26ub :: TyFun [a_a26rh] b_a26ri)
+  = forall arg_a26ue. KindOf (Apply (FoldrSym2 l_a26uc l_a26ud) arg_a26ue) ~ KindOf (FoldrSym3 l_a26uc l_a26ud arg_a26ue) =>
+    FoldrSym2KindInference
+type instance Apply (FoldrSym2 l_a26uc l_a26ud) l_a26ub = FoldrSym3 l_a26uc l_a26ud l_a26ub
+instance SuppressUnusedWarnings FoldrSym1 where
+  suppressUnusedWarnings _ = snd ((,) FoldrSym1KindInference ())
+data FoldrSym1 (l_a26u9 :: TyFun a_a26rh (TyFun b_a26ri b_a26ri
+                                          -> *)
+                            -> *)
+                (l_a26u8 :: TyFun b_a26ri (TyFun [a_a26rh] b_a26ri -> *))
+  = forall arg_a26ua. KindOf (Apply (FoldrSym1 l_a26u9) arg_a26ua) ~ KindOf (FoldrSym2 l_a26u9 arg_a26ua) =>
+    FoldrSym1KindInference
+type instance Apply (FoldrSym1 l_a26u9) l_a26u8 = FoldrSym2 l_a26u9 l_a26u8
+instance SuppressUnusedWarnings FoldrSym0 where
+  suppressUnusedWarnings _ = snd ((,) FoldrSym0KindInference ())
+data FoldrSym0 (l_a26u6 :: TyFun (TyFun a_a26rh (TyFun b_a26ri b_a26ri
+                                                  -> *)
+                                  -> *) (TyFun b_a26ri (TyFun [a_a26rh] b_a26ri -> *) -> *))
+  = forall arg_a26u7. KindOf (Apply FoldrSym0 arg_a26u7) ~ KindOf (FoldrSym1 arg_a26u7) =>
+    FoldrSym0KindInference
+type instance Apply FoldrSym0 l_a26u6 = FoldrSym1 l_a26u6
+type family Seq (a_a26s0 :: a_a26rQ)
+                (a_a26s1 :: b_a26rR) :: b_a26rR where
+  Seq _z_1627891410_a26s4 x_a26s5 = x_a26s5
+type family Flip (a_a26si :: TyFun a_a26rJ (TyFun b_a26rK c_a26rL
+                                            -> *)
+                              -> *)
+                  (a_a26sj :: b_a26rK)
+                  (a_a26sk :: a_a26rJ) :: c_a26rL where
+  Flip f_a26sl x_a26sm y_a26sn = Apply (Apply f_a26sl y_a26sn) x_a26sm
+type family (:.) (a_a26sA :: TyFun b_a26rD c_a26rE -> *)
+                  (a_a26sB :: TyFun a_a26rF b_a26rD -> *)
+                  (a_a26sC :: a_a26rF) :: c_a26rE where
+  (:.) f_a26sF g_a26sG a_1627891447_a26sH = Apply (Apply (Apply (Apply Lambda_1627891452Sym0 f_a26sF) g_a26sG) a_1627891447_a26sH) a_1627891447_a26sH
+type family Const (a_a26tb :: a_a26rA)
+                  (a_a26tc :: b_a26rB) :: a_a26rA where
+  Const x_a26td _z_1627891484_a26tg = x_a26td
+type family AsTypeOf (a_a26ts :: a_a26rP)
+                      (a_a26tt :: a_a26rP) :: a_a26rP where
+  AsTypeOf a_1627891487_a26tu a_1627891489_a26tv = Apply (Apply ConstSym0 a_1627891487_a26tu) a_1627891489_a26tv
+type family Id (a_a26tz :: a_a26ry) :: a_a26ry where
+  Id x_a26tA = x_a26tA
+type family (:++) (a_a26tI :: [a_a26rt])
+                  (a_a26tJ :: [a_a26rt]) :: [a_a26rt] where
+  (:++) '[] ys_a26tK = ys_a26tK
+  (:++) (x_a26tL ': xs_a26tM) ys_a26tN = Apply (Apply (:$) x_a26tL) (Apply (Apply (:++$) xs_a26tM) ys_a26tN)
+type family Map (a_a26tV :: TyFun a_a26ro b_a26rp -> *)
+                (a_a26tW :: [a_a26ro]) :: [b_a26rp] where
+  Map _z_1627891529_a26tZ '[] = '[]
+  Map f_a26u0 (x_a26u1 ': xs_a26u2) = Apply (Apply (:$) (Apply f_a26u0 x_a26u1)) (Apply (Apply MapSym0 f_a26u0) xs_a26u2)
+type family Foldr (a_a26uf :: TyFun a_a26rh (TyFun b_a26ri b_a26ri
+                                              -> *)
+                              -> *)
+                  (a_a26ug :: b_a26ri)
+                  (a_a26uh :: [a_a26rh]) :: b_a26ri where
+  Foldr k_a26uk z_a26ul a_1627891550_a26um = Apply (Let1627891555GoSym3 k_a26uk z_a26ul a_1627891550_a26um) a_1627891550_a26um
+infixr 0 `Seq`
+infixr 9 :.
+infixr 5 :++
+infixr 0 `sSeq`
+infixr 9 %:.
+infixr 5 %:++
+sSeq ::
+  forall (t_a26uJ :: a_a26rQ) (t_a26uK :: b_a26rR).
+  Sing t_a26uJ
+  -> Sing t_a26uK
+      -> Sing (Apply (Apply SeqSym0 t_a26uJ) t_a26uK :: b_a26rR)
+sFlip ::
+  forall (t_a26uL :: TyFun a_a26rJ (TyFun b_a26rK c_a26rL -> *) -> *)
+          (t_a26uM :: b_a26rK)
+          (t_a26uN :: a_a26rJ).
+  Sing t_a26uL
+  -> Sing t_a26uM
+      -> Sing t_a26uN
+        -> Sing (Apply (Apply (Apply FlipSym0 t_a26uL) t_a26uM) t_a26uN :: c_a26rL)
+(%:.) ::
+  forall (t_a26uO :: TyFun b_a26rD c_a26rE -> *)
+          (t_a26uP :: TyFun a_a26rF b_a26rD -> *)
+          (t_a26uQ :: a_a26rF).
+  Sing t_a26uO
+  -> Sing t_a26uP
+      -> Sing t_a26uQ
+        -> Sing (Apply (Apply (Apply (:.$) t_a26uO) t_a26uP) t_a26uQ :: c_a26rE)
+sConst ::
+  forall (t_a26uR :: a_a26rA) (t_a26uS :: b_a26rB).
+  Sing t_a26uR
+  -> Sing t_a26uS
+      -> Sing (Apply (Apply ConstSym0 t_a26uR) t_a26uS :: a_a26rA)
+sAsTypeOf ::
+  forall (t_a26uT :: a_a26rP) (t_a26uU :: a_a26rP).
+  Sing t_a26uT
+  -> Sing t_a26uU
+      -> Sing (Apply (Apply AsTypeOfSym0 t_a26uT) t_a26uU :: a_a26rP)
+sId ::
+  forall (t_a26uV :: a_a26ry).
+  Sing t_a26uV -> Sing (Apply IdSym0 t_a26uV :: a_a26ry)
+(%:++) ::
+  forall (t_a26uW :: [a_a26rt]) (t_a26uX :: [a_a26rt]).
+  Sing t_a26uW
+  -> Sing t_a26uX
+      -> Sing (Apply (Apply (:++$) t_a26uW) t_a26uX :: [a_a26rt])
+sMap ::
+  forall (t_a26uY :: TyFun a_a26ro b_a26rp -> *)
+          (t_a26uZ :: [a_a26ro]).
+  Sing t_a26uY
+  -> Sing t_a26uZ
+      -> Sing (Apply (Apply MapSym0 t_a26uY) t_a26uZ :: [b_a26rp])
+sFoldr ::
+  forall (t_a26v0 :: TyFun a_a26rh (TyFun b_a26ri b_a26ri -> *) -> *)
+          (t_a26v1 :: b_a26ri)
+          (t_a26v2 :: [a_a26rh]).
+  Sing t_a26v0
+  -> Sing t_a26v1
+      -> Sing t_a26v2
+        -> Sing (Apply (Apply (Apply FoldrSym0 t_a26v0) t_a26v1) t_a26v2 :: b_a26ri)
+sSeq _s_z_1627891410 sX
+  = let
+      lambda_a26v3 ::
+        forall _z_1627891410_a26s4 x_a26s5. (t_a26uJ ~ _z_1627891410_a26s4,
+                                              t_a26uK ~ x_a26s5) =>
+        Sing _z_1627891410_a26s4
+        -> Sing x_a26s5
+            -> Sing (Apply (Apply SeqSym0 _z_1627891410_a26s4) x_a26s5 :: b_a26rR)
+      lambda_a26v3 _z_1627891410_a26v4 x_a26v5 = x_a26v5
+    in lambda_a26v3 _s_z_1627891410 sX
+sFlip sF sX sY
+  = let
+      lambda_a26v6 ::
+        forall f_a26sl x_a26sm y_a26sn. (t_a26uL ~ f_a26sl,
+                                          t_a26uM ~ x_a26sm,
+                                          t_a26uN ~ y_a26sn) =>
+        Sing f_a26sl
+        -> Sing x_a26sm
+            -> Sing y_a26sn
+              -> Sing (Apply (Apply (Apply FlipSym0 f_a26sl) x_a26sm) y_a26sn :: c_a26rL)
+      lambda_a26v6 f_a26v7 x_a26v8 y_a26v9
+        = applySing (applySing f_a26v7 y_a26v9) x_a26v8
+    in lambda_a26v6 sF sX sY
+(%:.) sF sG sA_1627891447
+  = let
+      lambda_a26va ::
+        forall f_a26sF g_a26sG a_1627891447_a26sH. (t_a26uO ~ f_a26sF,
+                                                    t_a26uP ~ g_a26sG,
+                                                    t_a26uQ ~ a_1627891447_a26sH) =>
+        Sing f_a26sF
+        -> Sing g_a26sG
+            -> Sing a_1627891447_a26sH
+              -> Sing (Apply (Apply (Apply (:.$) f_a26sF) g_a26sG) a_1627891447_a26sH :: c_a26rE)
+      lambda_a26va f_a26vb g_a26vc a_1627891447_a26vd
+        = applySing
+            (singFun1
+                (Proxy ::
+                  Proxy (Apply (Apply (Apply Lambda_1627891452Sym0 f_a26sF) g_a26sG) a_1627891447_a26sH))
+                (\ sX
+                  -> let
+                        lambda_a26ve ::
+                          forall x_a26sK.
+                          Sing x_a26sK
+                          -> Sing (Apply (Apply (Apply (Apply Lambda_1627891452Sym0 f_a26sF) g_a26sG) a_1627891447_a26sH) x_a26sK)
+                        lambda_a26ve x_a26vf
+                          = applySing f_a26vb (applySing g_a26vc x_a26vf)
+                      in lambda_a26ve sX))
+            a_1627891447_a26vd
+    in lambda_a26va sF sG sA_1627891447
+sConst sX _s_z_1627891484
+  = let
+      lambda_a26vg ::
+        forall x_a26td _z_1627891484_a26tg. (t_a26uR ~ x_a26td,
+                                              t_a26uS ~ _z_1627891484_a26tg) =>
+        Sing x_a26td
+        -> Sing _z_1627891484_a26tg
+            -> Sing (Apply (Apply ConstSym0 x_a26td) _z_1627891484_a26tg :: a_a26rA)
+      lambda_a26vg x_a26vh _z_1627891484_a26vi = x_a26vh
+    in lambda_a26vg sX _s_z_1627891484
+sAsTypeOf sA_1627891487 sA_1627891489
+  = let
+      lambda_a26vj ::
+        forall a_1627891487_a26tu
+                a_1627891489_a26tv. (t_a26uT ~ a_1627891487_a26tu,
+                                    t_a26uU ~ a_1627891489_a26tv) =>
+        Sing a_1627891487_a26tu
+        -> Sing a_1627891489_a26tv
+            -> Sing (Apply (Apply AsTypeOfSym0 a_1627891487_a26tu) a_1627891489_a26tv :: a_a26rP)
+      lambda_a26vj a_1627891487_a26vk a_1627891489_a26vl
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy ConstSym0) sConst) a_1627891487_a26vk)
+            a_1627891489_a26vl
+    in lambda_a26vj sA_1627891487 sA_1627891489
+sId sX
+  = let
+      lambda_a26vm ::
+        forall x_a26tA. t_a26uV ~ x_a26tA =>
+        Sing x_a26tA -> Sing (Apply IdSym0 x_a26tA :: a_a26ry)
+      lambda_a26vm x_a26vn = x_a26vn
+    in lambda_a26vm sX
+(%:++) SNil sYs
+  = let
+      lambda_a26vo ::
+        forall ys_a26tK. (t_a26uW ~ '[], t_a26uX ~ ys_a26tK) =>
+        Sing ys_a26tK
+        -> Sing (Apply (Apply (:++$) '[]) ys_a26tK :: [a_a26rt])
+      lambda_a26vo ys_a26vp = ys_a26vp
+    in lambda_a26vo sYs
+(%:++) (SCons sX sXs) sYs
+  = let
+      lambda_a26vq ::
+        forall x_a26tL
+                xs_a26tM
+                ys_a26tN. (t_a26uW ~ Apply (Apply (:$) x_a26tL) xs_a26tM,
+                          t_a26uX ~ ys_a26tN) =>
+        Sing x_a26tL
+        -> Sing xs_a26tM
+            -> Sing ys_a26tN
+              -> Sing (Apply (Apply (:++$) (Apply (Apply (:$) x_a26tL) xs_a26tM)) ys_a26tN :: [a_a26rt])
+      lambda_a26vq x_a26vr xs_a26vs ys_a26vt
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a26vr)
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy (:++$)) (%:++)) xs_a26vs)
+                ys_a26vt)
+    in lambda_a26vq sX sXs sYs
+sMap _s_z_1627891529 SNil
+  = let
+      lambda_a26vu ::
+        forall _z_1627891529_a26tZ. (t_a26uY ~ _z_1627891529_a26tZ,
+                                      t_a26uZ ~ '[]) =>
+        Sing _z_1627891529_a26tZ
+        -> Sing (Apply (Apply MapSym0 _z_1627891529_a26tZ) '[] :: [b_a26rp])
+      lambda_a26vu _z_1627891529_a26vv = SNil
+    in lambda_a26vu _s_z_1627891529
+sMap sF (SCons sX sXs)
+  = let
+      lambda_a26vw ::
+        forall f_a26u0 x_a26u1 xs_a26u2. (t_a26uY ~ f_a26u0,
+                                          t_a26uZ ~ Apply (Apply (:$) x_a26u1) xs_a26u2) =>
+        Sing f_a26u0
+        -> Sing x_a26u1
+            -> Sing xs_a26u2
+              -> Sing (Apply (Apply MapSym0 f_a26u0) (Apply (Apply (:$) x_a26u1) xs_a26u2) :: [b_a26rp])
+      lambda_a26vw f_a26vx x_a26vy xs_a26vz
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:$)) SCons) (applySing f_a26vx x_a26vy))
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy MapSym0) sMap) f_a26vx)
+                xs_a26vz)
+    in lambda_a26vw sF sX sXs
+sFoldr sK sZ sA_1627891550
+  = let
+      lambda_a26vA ::
+        forall k_a26uk z_a26ul a_1627891550_a26um. (t_a26v0 ~ k_a26uk,
+                                                    t_a26v1 ~ z_a26ul,
+                                                    t_a26v2 ~ a_1627891550_a26um) =>
+        Sing k_a26uk
+        -> Sing z_a26ul
+            -> Sing a_1627891550_a26um
+              -> Sing (Apply (Apply (Apply FoldrSym0 k_a26uk) z_a26ul) a_1627891550_a26um :: b_a26ri)
+      lambda_a26vA k_a26vB z_a26vC a_1627891550_a26vD
+        = applySing
+            (let
+                sGo ::
+                  forall arg_a26vE.
+                  Sing arg_a26vE
+                  -> Sing (Apply (Let1627891555GoSym3 k_a26uk z_a26ul a_1627891550_a26um) arg_a26vE)
+                sGo SNil
+                  = let
+                      lambda_a26vF ::
+                        arg_a26vE ~ '[] =>
+                        Sing (Apply (Let1627891555GoSym3 k_a26uk z_a26ul a_1627891550_a26um) '[])
+                      lambda_a26vF = z_a26vC
+                    in lambda_a26vF
+                sGo (SCons sY sYs)
+                  = let
+                      lambda_a26vG ::
+                        forall y_a26uH
+                              ys_a26uI. arg_a26vE ~ Apply (Apply (:$) y_a26uH) ys_a26uI =>
+                        Sing y_a26uH
+                        -> Sing ys_a26uI
+                          -> Sing (Apply (Let1627891555GoSym3 k_a26uk z_a26ul a_1627891550_a26um) (Apply (Apply (:$) y_a26uH) ys_a26uI))
+                      lambda_a26vG y_a26vH ys_a26vI
+                        = applySing
+                            (applySing k_a26vB y_a26vH)
+                            (applySing
+                              (singFun1
+                                  (Proxy ::
+                                    Proxy (Let1627891555GoSym3 k_a26uk z_a26ul a_1627891550_a26um))
+                                  sGo)
+                              ys_a26vI)
+                    in lambda_a26vG sY sYs
+              in
+                singFun1
+                  (Proxy ::
+                    Proxy (Let1627891555GoSym3 k_a26uk z_a26ul a_1627891550_a26um))
+                  sGo)
+            a_1627891550_a26vD
+    in lambda_a26vA sK sZ sA_1627891550
 
 -- ($) is a special case, because its kind-inference data constructors
 -- clash with (:). See #29.
diff --git a/src/Data/Singletons/Prelude/Bool.hs b/src/Data/Singletons/Prelude/Bool.hs
index 9e9c457..7c597eb 100644
--- a/src/Data/Singletons/Prelude/Bool.hs
+++ b/src/Data/Singletons/Prelude/Bool.hs
@@ -55,34 +55,187 @@ module Data.Singletons.Prelude.Bool (
   ) where
 
 import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.Prelude.Instances
-import Data.Singletons.Single
 import Data.Type.Bool ( If )
 
-$(singletons [d|
-  bool_ :: a -> a -> Bool -> a
-  bool_ fls _tru False = fls
-  bool_ _fls tru True  = tru
- |])
-
-$(singletonsOnly [d|
-  (&&) :: Bool -> Bool -> Bool
-  False && _ = False
-  True  && x = x
-  infixr 3 &&
-
-  (||) :: Bool -> Bool -> Bool
-  False || x = x
-  True  || _ = True
-  infixr 2 ||
-
-  not :: Bool -> Bool
-  not False = True
-  not True = False
-
-  otherwise               :: Bool
-  otherwise               =  True
-  |])
+bool_ ::
+  forall a_a1Got. a_a1Got -> a_a1Got -> Bool -> a_a1Got
+bool_ fls_a1Gou _tru_a1Gov False = fls_a1Gou
+bool_ _fls_a1Gow tru_a1Gox True = tru_a1Gox
+type Bool_Sym3 (t_a1Goy :: a_a1Got)
+                (t_a1Goz :: a_a1Got)
+                (t_a1GoA :: Bool) =
+    Bool_ t_a1Goy t_a1Goz t_a1GoA
+instance SuppressUnusedWarnings Bool_Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Bool_Sym2KindInference ())
+data Bool_Sym2 (l_a1GoH :: a_a1Got)
+                (l_a1GoI :: a_a1Got)
+                (l_a1GoG :: TyFun Bool a_a1Got)
+  = forall arg_a1GoJ. KindOf (Apply (Bool_Sym2 l_a1GoH l_a1GoI) arg_a1GoJ) ~ KindOf (Bool_Sym3 l_a1GoH l_a1GoI arg_a1GoJ) =>
+    Bool_Sym2KindInference
+type instance Apply (Bool_Sym2 l_a1GoH l_a1GoI) l_a1GoG = Bool_Sym3 l_a1GoH l_a1GoI l_a1GoG
+instance SuppressUnusedWarnings Bool_Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Bool_Sym1KindInference ())
+data Bool_Sym1 (l_a1GoE :: a_a1Got)
+                (l_a1GoD :: TyFun a_a1Got (TyFun Bool a_a1Got -> *))
+  = forall arg_a1GoF. KindOf (Apply (Bool_Sym1 l_a1GoE) arg_a1GoF) ~ KindOf (Bool_Sym2 l_a1GoE arg_a1GoF) =>
+    Bool_Sym1KindInference
+type instance Apply (Bool_Sym1 l_a1GoE) l_a1GoD = Bool_Sym2 l_a1GoE l_a1GoD
+instance SuppressUnusedWarnings Bool_Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Bool_Sym0KindInference ())
+data Bool_Sym0 (l_a1GoB :: TyFun a_a1Got (TyFun a_a1Got (TyFun Bool a_a1Got
+                                                          -> *)
+                                          -> *))
+  = forall arg_a1GoC. KindOf (Apply Bool_Sym0 arg_a1GoC) ~ KindOf (Bool_Sym1 arg_a1GoC) =>
+    Bool_Sym0KindInference
+type instance Apply Bool_Sym0 l_a1GoB = Bool_Sym1 l_a1GoB
+type family Bool_ (a_a1GoK :: a_a1Got)
+                  (a_a1GoL :: a_a1Got)
+                  (a_a1GoM :: Bool) :: a_a1Got where
+  Bool_ fls_a1GoN _tru_a1GoO 'False = fls_a1GoN
+  Bool_ _fls_a1GoP tru_a1GoQ 'True = tru_a1GoQ
+sBool_ ::
+  forall (t_a1GoR :: a_a1Got) (t_a1GoS :: a_a1Got) (t_a1GoT :: Bool).
+  Sing t_a1GoR
+  -> Sing t_a1GoS
+      -> Sing t_a1GoT
+        -> Sing (Apply (Apply (Apply Bool_Sym0 t_a1GoR) t_a1GoS) t_a1GoT :: a_a1Got)
+sBool_ sFls _s_tru SFalse
+  = let
+      lambda_a1GoU ::
+        forall fls_a1GoN _tru_a1GoO. (t_a1GoR ~ fls_a1GoN,
+                                      t_a1GoS ~ _tru_a1GoO,
+                                      t_a1GoT ~ FalseSym0) =>
+        Sing fls_a1GoN
+        -> Sing _tru_a1GoO
+            -> Sing (Apply (Apply (Apply Bool_Sym0 fls_a1GoN) _tru_a1GoO) FalseSym0 :: a_a1Got)
+      lambda_a1GoU fls_a1GoV _tru_a1GoW = fls_a1GoV
+    in lambda_a1GoU sFls _s_tru
+sBool_ _s_fls sTru STrue
+  = let
+      lambda_a1GoX ::
+        forall _fls_a1GoP tru_a1GoQ. (t_a1GoR ~ _fls_a1GoP,
+                                      t_a1GoS ~ tru_a1GoQ,
+                                      t_a1GoT ~ TrueSym0) =>
+        Sing _fls_a1GoP
+        -> Sing tru_a1GoQ
+            -> Sing (Apply (Apply (Apply Bool_Sym0 _fls_a1GoP) tru_a1GoQ) TrueSym0 :: a_a1Got)
+      lambda_a1GoX _fls_a1GoY tru_a1GoZ = tru_a1GoZ
+    in lambda_a1GoX _s_fls sTru
+
+type OtherwiseSym0 = Otherwise
+type NotSym1 (t_a1GAR :: Bool) = Not t_a1GAR
+instance SuppressUnusedWarnings NotSym0 where
+  suppressUnusedWarnings _ = snd ((,) NotSym0KindInference ())
+data NotSym0 (l_a1GAS :: TyFun Bool Bool)
+  = forall arg_a1GAT. KindOf (Apply NotSym0 arg_a1GAT) ~ KindOf (NotSym1 arg_a1GAT) =>
+    NotSym0KindInference
+type instance Apply NotSym0 l_a1GAS = NotSym1 l_a1GAS
+type (:||$$$) (t_a1GAV :: Bool) (t_a1GAW :: Bool) =
+    (:||) t_a1GAV t_a1GAW
+instance SuppressUnusedWarnings (:||$$) where
+  suppressUnusedWarnings _ = snd ((,) (:||$$###) ())
+data (:||$$) (l_a1GB0 :: Bool) (l_a1GAZ :: TyFun Bool Bool)
+  = forall arg_a1GB1. KindOf (Apply ((:||$$) l_a1GB0) arg_a1GB1) ~ KindOf ((:||$$$) l_a1GB0 arg_a1GB1) =>
+    (:||$$###)
+type instance Apply ((:||$$) l_a1GB0) l_a1GAZ = (:||$$$) l_a1GB0 l_a1GAZ
+instance SuppressUnusedWarnings (:||$) where
+  suppressUnusedWarnings _ = snd ((,) (:||$###) ())
+data (:||$) (l_a1GAX :: TyFun Bool (TyFun Bool Bool -> *))
+  = forall arg_a1GAY. KindOf (Apply (:||$) arg_a1GAY) ~ KindOf ((:||$$) arg_a1GAY) =>
+    (:||$###)
+type instance Apply (:||$) l_a1GAX = (:||$$) l_a1GAX
+type (:&&$$$) (t_a1GB8 :: Bool) (t_a1GB9 :: Bool) =
+    (:&&) t_a1GB8 t_a1GB9
+instance SuppressUnusedWarnings (:&&$$) where
+  suppressUnusedWarnings _ = snd ((,) (:&&$$###) ())
+data (:&&$$) (l_a1GBd :: Bool) (l_a1GBc :: TyFun Bool Bool)
+  = forall arg_a1GBe. KindOf (Apply ((:&&$$) l_a1GBd) arg_a1GBe) ~ KindOf ((:&&$$$) l_a1GBd arg_a1GBe) =>
+    (:&&$$###)
+type instance Apply ((:&&$$) l_a1GBd) l_a1GBc = (:&&$$$) l_a1GBd l_a1GBc
+instance SuppressUnusedWarnings (:&&$) where
+  suppressUnusedWarnings _ = snd ((,) (:&&$###) ())
+data (:&&$) (l_a1GBa :: TyFun Bool (TyFun Bool Bool -> *))
+  = forall arg_a1GBb. KindOf (Apply (:&&$) arg_a1GBb) ~ KindOf ((:&&$$) arg_a1GBb) =>
+    (:&&$###)
+type instance Apply (:&&$) l_a1GBa = (:&&$$) l_a1GBa
+type family Otherwise :: Bool where
+  Otherwise = TrueSym0
+type family Not (a_a1GAU :: Bool) :: Bool where
+  Not 'False = TrueSym0
+  Not 'True = FalseSym0
+type family (:||) (a_a1GB2 :: Bool) (a_a1GB3 :: Bool) :: Bool where
+  (:||) 'False x_a1GB4 = x_a1GB4
+  (:||) 'True _z_1627792027_a1GB7 = TrueSym0
+type family (:&&) (a_a1GBf :: Bool) (a_a1GBg :: Bool) :: Bool where
+  (:&&) 'False _z_1627792039_a1GBj = FalseSym0
+  (:&&) 'True x_a1GBk = x_a1GBk
+infixr 2 :||
+infixr 3 :&&
+infixr 2 %:||
+infixr 3 %:&&
+sOtherwise :: Sing (OtherwiseSym0 :: Bool)
+sNot ::
+  forall (t_a1GBl :: Bool).
+  Sing t_a1GBl -> Sing (Apply NotSym0 t_a1GBl :: Bool)
+(%:||) ::
+  forall (t_a1GBm :: Bool) (t_a1GBn :: Bool).
+  Sing t_a1GBm
+  -> Sing t_a1GBn
+      -> Sing (Apply (Apply (:||$) t_a1GBm) t_a1GBn :: Bool)
+(%:&&) ::
+  forall (t_a1GBo :: Bool) (t_a1GBp :: Bool).
+  Sing t_a1GBo
+  -> Sing t_a1GBp
+      -> Sing (Apply (Apply (:&&$) t_a1GBo) t_a1GBp :: Bool)
+sOtherwise = STrue
+sNot SFalse
+  = let
+      lambda_a1GBq ::
+        t_a1GBl ~ FalseSym0 => Sing (Apply NotSym0 FalseSym0 :: Bool)
+      lambda_a1GBq = STrue
+    in lambda_a1GBq
+sNot STrue
+  = let
+      lambda_a1GBr ::
+        t_a1GBl ~ TrueSym0 => Sing (Apply NotSym0 TrueSym0 :: Bool)
+      lambda_a1GBr = SFalse
+    in lambda_a1GBr
+(%:||) SFalse sX
+  = let
+      lambda_a1GBs ::
+        forall x_a1GB4. (t_a1GBm ~ FalseSym0, t_a1GBn ~ x_a1GB4) =>
+        Sing x_a1GB4
+        -> Sing (Apply (Apply (:||$) FalseSym0) x_a1GB4 :: Bool)
+      lambda_a1GBs x_a1GBt = x_a1GBt
+    in lambda_a1GBs sX
+(%:||) STrue _s_z_1627792027
+  = let
+      lambda_a1GBu ::
+        forall _z_1627792027_a1GB7. (t_a1GBm ~ TrueSym0,
+                                      t_a1GBn ~ _z_1627792027_a1GB7) =>
+        Sing _z_1627792027_a1GB7
+        -> Sing (Apply (Apply (:||$) TrueSym0) _z_1627792027_a1GB7 :: Bool)
+      lambda_a1GBu _z_1627792027_a1GBv = STrue
+    in lambda_a1GBu _s_z_1627792027
+(%:&&) SFalse _s_z_1627792039
+  = let
+      lambda_a1GBw ::
+        forall _z_1627792039_a1GBj. (t_a1GBo ~ FalseSym0,
+                                      t_a1GBp ~ _z_1627792039_a1GBj) =>
+        Sing _z_1627792039_a1GBj
+        -> Sing (Apply (Apply (:&&$) FalseSym0) _z_1627792039_a1GBj :: Bool)
+      lambda_a1GBw _z_1627792039_a1GBx = SFalse
+    in lambda_a1GBw _s_z_1627792039
+(%:&&) STrue sX
+  = let
+      lambda_a1GBy ::
+        forall x_a1GBk. (t_a1GBo ~ TrueSym0, t_a1GBp ~ x_a1GBk) =>
+        Sing x_a1GBk
+        -> Sing (Apply (Apply (:&&$) TrueSym0) x_a1GBk :: Bool)
+      lambda_a1GBy x_a1GBz = x_a1GBz
+    in lambda_a1GBy sX
 
 -- | Conditional over singletons
 sIf :: Sing a -> Sing b -> Sing c -> Sing (If a b c)
diff --git a/src/Data/Singletons/Prelude/Either.hs b/src/Data/Singletons/Prelude/Either.hs
index a8bf97f..b1ad62e 100644
--- a/src/Data/Singletons/Prelude/Either.hs
+++ b/src/Data/Singletons/Prelude/Either.hs
@@ -1,5 +1,5 @@
 {-# LANGUAGE TemplateHaskell, ScopedTypeVariables, TypeFamilies, GADTs,
-             DataKinds, PolyKinds, RankNTypes, UndecidableInstances #-}
+             DataKinds, PolyKinds, RankNTypes, UndecidableInstances, TypeOperators #-}
 
 -----------------------------------------------------------------------------
 -- |
@@ -51,62 +51,376 @@ module Data.Singletons.Prelude.Either (
   IsLeftSym0, IsLeftSym1, IsRightSym0, IsRightSym1
   ) where
 
+import Data.Proxy
+import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.Prelude.Instances
-import Data.Singletons.TH
 import Data.Singletons.Prelude.Base
 
 -- NB: The haddock comments are disabled because TH can't deal with them.
 
-$(singletons [d|
-  -- Renamed to avoid name clash
-  -- -| Case analysis for the 'Either' type.
-  -- If the value is @'Left' a@, apply the first function to @a@;
-  -- if it is @'Right' b@, apply the second function to @b@.
-  either_                  :: (a -> c) -> (b -> c) -> Either a b -> c
-  either_ f _ (Left x)     =  f x
-  either_ _ g (Right y)    =  g y
- |])
+either_ ::
+  forall a_aFDw c_aFDx b_aFDy.
+  (a_aFDw -> c_aFDx)
+  -> (b_aFDy -> c_aFDx) -> Either a_aFDw b_aFDy -> c_aFDx
+either_ f_aFDz _ (Left x_aFDA) = f_aFDz x_aFDA
+either_ _ g_aFDB (Right y_aFDC) = g_aFDB y_aFDC
+type Either_Sym3 (t_aFDD :: TyFun a_aFDw c_aFDx -> *)
+                  (t_aFDE :: TyFun b_aFDy c_aFDx -> *)
+                  (t_aFDF :: Either a_aFDw b_aFDy) =
+    Either_ t_aFDD t_aFDE t_aFDF
+instance SuppressUnusedWarnings Either_Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Either_Sym2KindInference ())
+data Either_Sym2 (l_aFDM :: TyFun a_aFDw c_aFDx -> *)
+                  (l_aFDN :: TyFun b_aFDy c_aFDx -> *)
+                  (l_aFDL :: TyFun (Either a_aFDw b_aFDy) c_aFDx)
+  = forall arg_aFDO. KindOf (Apply (Either_Sym2 l_aFDM l_aFDN) arg_aFDO) ~ KindOf (Either_Sym3 l_aFDM l_aFDN arg_aFDO) =>
+    Either_Sym2KindInference
+type instance Apply (Either_Sym2 l_aFDM l_aFDN) l_aFDL = Either_Sym3 l_aFDM l_aFDN l_aFDL
+instance SuppressUnusedWarnings Either_Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Either_Sym1KindInference ())
+data Either_Sym1 (l_aFDJ :: TyFun a_aFDw c_aFDx -> *)
+                  (l_aFDI :: TyFun (TyFun b_aFDy c_aFDx
+                                    -> *) (TyFun (Either a_aFDw b_aFDy) c_aFDx -> *))
+  = forall arg_aFDK. KindOf (Apply (Either_Sym1 l_aFDJ) arg_aFDK) ~ KindOf (Either_Sym2 l_aFDJ arg_aFDK) =>
+    Either_Sym1KindInference
+type instance Apply (Either_Sym1 l_aFDJ) l_aFDI = Either_Sym2 l_aFDJ l_aFDI
+instance SuppressUnusedWarnings Either_Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Either_Sym0KindInference ())
+data Either_Sym0 (l_aFDG :: TyFun (TyFun a_aFDw c_aFDx
+                                    -> *) (TyFun (TyFun b_aFDy c_aFDx
+                                                  -> *) (TyFun (Either a_aFDw b_aFDy) c_aFDx
+                                                        -> *)
+                                          -> *))
+  = forall arg_aFDH. KindOf (Apply Either_Sym0 arg_aFDH) ~ KindOf (Either_Sym1 arg_aFDH) =>
+    Either_Sym0KindInference
+type instance Apply Either_Sym0 l_aFDG = Either_Sym1 l_aFDG
+type family Either_ (a_aFDP :: TyFun a_aFDw c_aFDx -> *)
+                    (a_aFDQ :: TyFun b_aFDy c_aFDx -> *)
+                    (a_aFDR :: Either a_aFDw b_aFDy) :: c_aFDx where
+  Either_ f_aFDS _z_1627550029_aFDV ('Left x_aFDW) = Apply f_aFDS x_aFDW
+  Either_ _z_1627550033_aFDZ g_aFE0 ('Right y_aFE1) = Apply g_aFE0 y_aFE1
+sEither_ ::
+  forall (t_aFE2 :: TyFun a_aFDw c_aFDx -> *)
+          (t_aFE3 :: TyFun b_aFDy c_aFDx -> *)
+          (t_aFE4 :: Either a_aFDw b_aFDy).
+  Sing t_aFE2
+  -> Sing t_aFE3
+      -> Sing t_aFE4
+        -> Sing (Apply (Apply (Apply Either_Sym0 t_aFE2) t_aFE3) t_aFE4 :: c_aFDx)
+sEither_ sF _s_z_1627550029 (SLeft sX)
+  = let
+      lambda_aFE5 ::
+        forall f_aFDS _z_1627550029_aFDV x_aFDW. (t_aFE2 ~ f_aFDS,
+                                                  t_aFE3 ~ _z_1627550029_aFDV,
+                                                  t_aFE4 ~ Apply LeftSym0 x_aFDW) =>
+        Sing f_aFDS
+        -> Sing _z_1627550029_aFDV
+            -> Sing x_aFDW
+              -> Sing (Apply (Apply (Apply Either_Sym0 f_aFDS) _z_1627550029_aFDV) (Apply LeftSym0 x_aFDW) :: c_aFDx)
+      lambda_aFE5 f_aFE6 _z_1627550029_aFE7 x_aFE8
+        = applySing f_aFE6 x_aFE8
+    in lambda_aFE5 sF _s_z_1627550029 sX
+sEither_ _s_z_1627550033 sG (SRight sY)
+  = let
+      lambda_aFE9 ::
+        forall _z_1627550033_aFDZ
+                g_aFE0
+                y_aFE1. (t_aFE2 ~ _z_1627550033_aFDZ,
+                        t_aFE3 ~ g_aFE0,
+                        t_aFE4 ~ Apply RightSym0 y_aFE1) =>
+        Sing _z_1627550033_aFDZ
+        -> Sing g_aFE0
+            -> Sing y_aFE1
+              -> Sing (Apply (Apply (Apply Either_Sym0 _z_1627550033_aFDZ) g_aFE0) (Apply RightSym0 y_aFE1) :: c_aFDx)
+      lambda_aFE9 _z_1627550033_aFEa g_aFEb y_aFEc
+        = applySing g_aFEb y_aFEc
+    in lambda_aFE9 _s_z_1627550033 sG sY
 
-$(singletonsOnly [d|
-  -- -| Extracts from a list of 'Either' all the 'Left' elements
-  -- All the 'Left' elements are extracted in order.
-
-  -- Modified to avoid list comprehensions
-  lefts   :: [Either a b] -> [a]
-  lefts []             = []
-  lefts (Left x  : xs) = x : lefts xs
-  lefts (Right _ : xs) = lefts xs
-
-  -- -| Extracts from a list of 'Either' all the 'Right' elements
-  -- All the 'Right' elements are extracted in order.
-
-  -- Modified to avoid list comprehensions
-  rights   :: [Either a b] -> [b]
-  rights []             = []
-  rights (Left _  : xs) = rights xs
-  rights (Right x : xs) = x : rights xs
-
-  -- -| Partitions a list of 'Either' into two lists
-  -- All the 'Left' elements are extracted, in order, to the first
-  -- component of the output.  Similarly the 'Right' elements are extracted
-  -- to the second component of the output.
-  partitionEithers :: [Either a b] -> ([a],[b])
-  partitionEithers = foldr (either_ left right) ([],[])
-   where
-    left  a (l, r) = (a:l, r)
-    right a (l, r) = (l, a:r)
-
-  -- -| Return `True` if the given value is a `Left`-value, `False` otherwise.
-  --
-  -- /Since: 4.7.0.0/
-  isLeft :: Either a b -> Bool
-  isLeft (Left  _) = True
-  isLeft (Right _) = False
-
-  -- -| Return `True` if the given value is a `Right`-value, `False` otherwise.
-  --
-  -- /Since: 4.7.0.0/
-  isRight :: Either a b -> Bool
-  isRight (Left  _) = False
-  isRight (Right _) = True
-  |])
+type Let1627551534RightSym3 t_aG2b t_aG2c t_aG2d =
+    Let1627551534Right t_aG2b t_aG2c t_aG2d
+instance SuppressUnusedWarnings Let1627551534RightSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627551534RightSym2KindInference ())
+data Let1627551534RightSym2 l_aG2k l_aG2l l_aG2j
+  = forall arg_aG2m. KindOf (Apply (Let1627551534RightSym2 l_aG2k l_aG2l) arg_aG2m) ~ KindOf (Let1627551534RightSym3 l_aG2k l_aG2l arg_aG2m) =>
+    Let1627551534RightSym2KindInference
+type instance Apply (Let1627551534RightSym2 l_aG2k l_aG2l) l_aG2j = Let1627551534RightSym3 l_aG2k l_aG2l l_aG2j
+instance SuppressUnusedWarnings Let1627551534RightSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627551534RightSym1KindInference ())
+data Let1627551534RightSym1 l_aG2h l_aG2g
+  = forall arg_aG2i. KindOf (Apply (Let1627551534RightSym1 l_aG2h) arg_aG2i) ~ KindOf (Let1627551534RightSym2 l_aG2h arg_aG2i) =>
+    Let1627551534RightSym1KindInference
+type instance Apply (Let1627551534RightSym1 l_aG2h) l_aG2g = Let1627551534RightSym2 l_aG2h l_aG2g
+instance SuppressUnusedWarnings Let1627551534RightSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627551534RightSym0KindInference ())
+data Let1627551534RightSym0 l_aG2e
+  = forall arg_aG2f. KindOf (Apply Let1627551534RightSym0 arg_aG2f) ~ KindOf (Let1627551534RightSym1 arg_aG2f) =>
+    Let1627551534RightSym0KindInference
+type instance Apply Let1627551534RightSym0 l_aG2e = Let1627551534RightSym1 l_aG2e
+type Let1627551534LeftSym3 t_aG2s t_aG2t t_aG2u =
+    Let1627551534Left t_aG2s t_aG2t t_aG2u
+instance SuppressUnusedWarnings Let1627551534LeftSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627551534LeftSym2KindInference ())
+data Let1627551534LeftSym2 l_aG2B l_aG2C l_aG2A
+  = forall arg_aG2D. KindOf (Apply (Let1627551534LeftSym2 l_aG2B l_aG2C) arg_aG2D) ~ KindOf (Let1627551534LeftSym3 l_aG2B l_aG2C arg_aG2D) =>
+    Let1627551534LeftSym2KindInference
+type instance Apply (Let1627551534LeftSym2 l_aG2B l_aG2C) l_aG2A = Let1627551534LeftSym3 l_aG2B l_aG2C l_aG2A
+instance SuppressUnusedWarnings Let1627551534LeftSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627551534LeftSym1KindInference ())
+data Let1627551534LeftSym1 l_aG2y l_aG2x
+  = forall arg_aG2z. KindOf (Apply (Let1627551534LeftSym1 l_aG2y) arg_aG2z) ~ KindOf (Let1627551534LeftSym2 l_aG2y arg_aG2z) =>
+    Let1627551534LeftSym1KindInference
+type instance Apply (Let1627551534LeftSym1 l_aG2y) l_aG2x = Let1627551534LeftSym2 l_aG2y l_aG2x
+instance SuppressUnusedWarnings Let1627551534LeftSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627551534LeftSym0KindInference ())
+data Let1627551534LeftSym0 l_aG2v
+  = forall arg_aG2w. KindOf (Apply Let1627551534LeftSym0 arg_aG2w) ~ KindOf (Let1627551534LeftSym1 arg_aG2w) =>
+    Let1627551534LeftSym0KindInference
+type instance Apply Let1627551534LeftSym0 l_aG2v = Let1627551534LeftSym1 l_aG2v
+type family Let1627551534Right a_1627551527_aG29
+                                a_aG2n
+                                a_aG2o where
+  Let1627551534Right a_1627551527_aG29 a_aG2p '(l_aG2q,
+                                                r_aG2r) = Apply (Apply Tuple2Sym0 l_aG2q) (Apply (Apply (:$) a_aG2p) r_aG2r)
+type family Let1627551534Left a_1627551527_aG29 a_aG2E a_aG2F where
+  Let1627551534Left a_1627551527_aG29 a_aG2G '(l_aG2H,
+                                                r_aG2I) = Apply (Apply Tuple2Sym0 (Apply (Apply (:$) a_aG2G) l_aG2H)) r_aG2I
+type IsRightSym1 (t_aG1J :: Either a_aG1H b_aG1I) = IsRight t_aG1J
+instance SuppressUnusedWarnings IsRightSym0 where
+  suppressUnusedWarnings _ = snd ((,) IsRightSym0KindInference ())
+data IsRightSym0 (l_aG1K :: TyFun (Either a_aG1H b_aG1I) Bool)
+  = forall arg_aG1L. KindOf (Apply IsRightSym0 arg_aG1L) ~ KindOf (IsRightSym1 arg_aG1L) =>
+    IsRightSym0KindInference
+type instance Apply IsRightSym0 l_aG1K = IsRightSym1 l_aG1K
+type IsLeftSym1 (t_aG1T :: Either a_aG1F b_aG1G) = IsLeft t_aG1T
+instance SuppressUnusedWarnings IsLeftSym0 where
+  suppressUnusedWarnings _ = snd ((,) IsLeftSym0KindInference ())
+data IsLeftSym0 (l_aG1U :: TyFun (Either a_aG1F b_aG1G) Bool)
+  = forall arg_aG1V. KindOf (Apply IsLeftSym0 arg_aG1V) ~ KindOf (IsLeftSym1 arg_aG1V) =>
+    IsLeftSym0KindInference
+type instance Apply IsLeftSym0 l_aG1U = IsLeftSym1 l_aG1U
+type PartitionEithersSym1 (t_aG25 :: [Either a_aG1v b_aG1w]) =
+    PartitionEithers t_aG25
+instance SuppressUnusedWarnings PartitionEithersSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) PartitionEithersSym0KindInference ())
+data PartitionEithersSym0 (l_aG26 :: TyFun [Either a_aG1v b_aG1w] ([a_aG1v],
+                                                                    [b_aG1w]))
+  = forall arg_aG27. KindOf (Apply PartitionEithersSym0 arg_aG27) ~ KindOf (PartitionEithersSym1 arg_aG27) =>
+    PartitionEithersSym0KindInference
+type instance Apply PartitionEithersSym0 l_aG26 = PartitionEithersSym1 l_aG26
+type RightsSym1 (t_aG2J :: [Either a_aG1q b_aG1r]) = Rights t_aG2J
+instance SuppressUnusedWarnings RightsSym0 where
+  suppressUnusedWarnings _ = snd ((,) RightsSym0KindInference ())
+data RightsSym0 (l_aG2K :: TyFun [Either a_aG1q b_aG1r] [b_aG1r])
+  = forall arg_aG2L. KindOf (Apply RightsSym0 arg_aG2L) ~ KindOf (RightsSym1 arg_aG2L) =>
+    RightsSym0KindInference
+type instance Apply RightsSym0 l_aG2K = RightsSym1 l_aG2K
+type LeftsSym1 (t_aG2T :: [Either a_aG1l b_aG1m]) = Lefts t_aG2T
+instance SuppressUnusedWarnings LeftsSym0 where
+  suppressUnusedWarnings _ = snd ((,) LeftsSym0KindInference ())
+data LeftsSym0 (l_aG2U :: TyFun [Either a_aG1l b_aG1m] [a_aG1l])
+  = forall arg_aG2V. KindOf (Apply LeftsSym0 arg_aG2V) ~ KindOf (LeftsSym1 arg_aG2V) =>
+    LeftsSym0KindInference
+type instance Apply LeftsSym0 l_aG2U = LeftsSym1 l_aG2U
+type family IsRight (a_aG1M :: Either a_aG1H b_aG1I) :: Bool where
+  IsRight ('Left _z_1627551511_aG1P) = FalseSym0
+  IsRight ('Right _z_1627551514_aG1S) = TrueSym0
+type family IsLeft (a_aG1W :: Either a_aG1F b_aG1G) :: Bool where
+  IsLeft ('Left _z_1627551521_aG1Z) = TrueSym0
+  IsLeft ('Right _z_1627551524_aG22) = FalseSym0
+type family PartitionEithers (a_aG28 :: [Either a_aG1v b_aG1w]) :: ([a_aG1v],
+                                                                    [b_aG1w]) where
+  PartitionEithers a_1627551527_aG29 = Apply (Apply (Apply FoldrSym0 (Apply (Apply Either_Sym0 (Let1627551534LeftSym1 a_1627551527_aG29)) (Let1627551534RightSym1 a_1627551527_aG29))) (Apply (Apply Tuple2Sym0 '[]) '[])) a_1627551527_aG29
+type family Rights (a_aG2M :: [Either a_aG1q b_aG1r]) :: [b_aG1r] where
+  Rights '[] = '[]
+  Rights (('Left _z_1627551573_aG2P) ': xs_aG2Q) = Apply RightsSym0 xs_aG2Q
+  Rights (('Right x_aG2R) ': xs_aG2S) = Apply (Apply (:$) x_aG2R) (Apply RightsSym0 xs_aG2S)
+type family Lefts (a_aG2W :: [Either a_aG1l b_aG1m]) :: [a_aG1l] where
+  Lefts '[] = '[]
+  Lefts (('Left x_aG2X) ': xs_aG2Y) = Apply (Apply (:$) x_aG2X) (Apply LeftsSym0 xs_aG2Y)
+  Lefts (('Right _z_1627551585_aG31) ': xs_aG32) = Apply LeftsSym0 xs_aG32
+sIsRight ::
+  forall (t_aG33 :: Either a_aG1H b_aG1I).
+  Sing t_aG33 -> Sing (Apply IsRightSym0 t_aG33 :: Bool)
+sIsLeft ::
+  forall (t_aG34 :: Either a_aG1F b_aG1G).
+  Sing t_aG34 -> Sing (Apply IsLeftSym0 t_aG34 :: Bool)
+sPartitionEithers ::
+  forall (t_aG35 :: [Either a_aG1v b_aG1w]).
+  Sing t_aG35
+  -> Sing (Apply PartitionEithersSym0 t_aG35 :: ([a_aG1v], [b_aG1w]))
+sRights ::
+  forall (t_aG36 :: [Either a_aG1q b_aG1r]).
+  Sing t_aG36 -> Sing (Apply RightsSym0 t_aG36 :: [b_aG1r])
+sLefts ::
+  forall (t_aG37 :: [Either a_aG1l b_aG1m]).
+  Sing t_aG37 -> Sing (Apply LeftsSym0 t_aG37 :: [a_aG1l])
+sIsRight (SLeft _s_z_1627551511)
+  = let
+      lambda_aG38 ::
+        forall _z_1627551511_aG1P. t_aG33 ~ Apply LeftSym0 _z_1627551511_aG1P =>
+        Sing _z_1627551511_aG1P
+        -> Sing (Apply IsRightSym0 (Apply LeftSym0 _z_1627551511_aG1P) :: Bool)
+      lambda_aG38 _z_1627551511_aG39 = SFalse
+    in lambda_aG38 _s_z_1627551511
+sIsRight (SRight _s_z_1627551514)
+  = let
+      lambda_aG3a ::
+        forall _z_1627551514_aG1S. t_aG33 ~ Apply RightSym0 _z_1627551514_aG1S =>
+        Sing _z_1627551514_aG1S
+        -> Sing (Apply IsRightSym0 (Apply RightSym0 _z_1627551514_aG1S) :: Bool)
+      lambda_aG3a _z_1627551514_aG3b = STrue
+    in lambda_aG3a _s_z_1627551514
+sIsLeft (SLeft _s_z_1627551521)
+  = let
+      lambda_aG3c ::
+        forall _z_1627551521_aG1Z. t_aG34 ~ Apply LeftSym0 _z_1627551521_aG1Z =>
+        Sing _z_1627551521_aG1Z
+        -> Sing (Apply IsLeftSym0 (Apply LeftSym0 _z_1627551521_aG1Z) :: Bool)
+      lambda_aG3c _z_1627551521_aG3d = STrue
+    in lambda_aG3c _s_z_1627551521
+sIsLeft (SRight _s_z_1627551524)
+  = let
+      lambda_aG3e ::
+        forall _z_1627551524_aG22. t_aG34 ~ Apply RightSym0 _z_1627551524_aG22 =>
+        Sing _z_1627551524_aG22
+        -> Sing (Apply IsLeftSym0 (Apply RightSym0 _z_1627551524_aG22) :: Bool)
+      lambda_aG3e _z_1627551524_aG3f = SFalse
+    in lambda_aG3e _s_z_1627551524
+sPartitionEithers sA_1627551527
+  = let
+      lambda_aG3g ::
+        forall a_1627551527_aG29. t_aG35 ~ a_1627551527_aG29 =>
+        Sing a_1627551527_aG29
+        -> Sing (Apply PartitionEithersSym0 a_1627551527_aG29 :: ([a_aG1v],
+                                                                  [b_aG1w]))
+      lambda_aG3g a_1627551527_aG3h
+        = applySing
+            (let
+                sRight ::
+                  forall arg_aG3i arg_aG3j.
+                  Sing arg_aG3i
+                  -> Sing arg_aG3j
+                    -> Sing (Apply (Apply (Let1627551534RightSym1 a_1627551527_aG29) arg_aG3i) arg_aG3j)
+                sLeft ::
+                  forall arg_aG3k arg_aG3l.
+                  Sing arg_aG3k
+                  -> Sing arg_aG3l
+                    -> Sing (Apply (Apply (Let1627551534LeftSym1 a_1627551527_aG29) arg_aG3k) arg_aG3l)
+                sRight sA (STuple2 sL sR)
+                  = let
+                      lambda_aG3m ::
+                        forall a_aG2p l_aG2q r_aG2r. (arg_aG3i ~ a_aG2p,
+                                                      arg_aG3j ~ Apply (Apply Tuple2Sym0 l_aG2q) r_aG2r) =>
+                        Sing a_aG2p
+                        -> Sing l_aG2q
+                          -> Sing r_aG2r
+                              -> Sing (Apply (Apply (Let1627551534RightSym1 a_1627551527_aG29) a_aG2p) (Apply (Apply Tuple2Sym0 l_aG2q) r_aG2r))
+                      lambda_aG3m a_aG3n l_aG3o r_aG3p
+                        = applySing
+                            (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) l_aG3o)
+                            (applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) a_aG3n) r_aG3p)
+                    in lambda_aG3m sA sL sR
+                sLeft sA (STuple2 sL sR)
+                  = let
+                      lambda_aG3q ::
+                        forall a_aG2G l_aG2H r_aG2I. (arg_aG3k ~ a_aG2G,
+                                                      arg_aG3l ~ Apply (Apply Tuple2Sym0 l_aG2H) r_aG2I) =>
+                        Sing a_aG2G
+                        -> Sing l_aG2H
+                          -> Sing r_aG2I
+                              -> Sing (Apply (Apply (Let1627551534LeftSym1 a_1627551527_aG29) a_aG2G) (Apply (Apply Tuple2Sym0 l_aG2H) r_aG2I))
+                      lambda_aG3q a_aG3r l_aG3s r_aG3t
+                        = applySing
+                            (applySing
+                              (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                              (applySing
+                                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) a_aG3r)
+                                  l_aG3s))
+                            r_aG3t
+                    in lambda_aG3q sA sL sR
+              in
+                applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                    (applySing
+                        (applySing
+                          (singFun3 (Proxy :: Proxy Either_Sym0) sEither_)
+                          (singFun2
+                              (Proxy :: Proxy (Let1627551534LeftSym1 a_1627551527_aG29)) sLeft))
+                        (singFun2
+                          (Proxy :: Proxy (Let1627551534RightSym1 a_1627551527_aG29))
+                          sRight)))
+                  (applySing
+                    (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) SNil)
+                    SNil))
+            a_1627551527_aG3h
+    in lambda_aG3g sA_1627551527
+sRights SNil
+  = let
+      lambda_aG3C ::
+        t_aG36 ~ '[] => Sing (Apply RightsSym0 '[] :: [b_aG1r])
+      lambda_aG3C = SNil
+    in lambda_aG3C
+sRights (SCons (SLeft _s_z_1627551573) sXs)
+  = let
+      lambda_aG3D ::
+        forall _z_1627551573_aG2P
+                xs_aG2Q. t_aG36 ~ Apply (Apply (:$) (Apply LeftSym0 _z_1627551573_aG2P)) xs_aG2Q =>
+        Sing _z_1627551573_aG2P
+        -> Sing xs_aG2Q
+            -> Sing (Apply RightsSym0 (Apply (Apply (:$) (Apply LeftSym0 _z_1627551573_aG2P)) xs_aG2Q) :: [b_aG1r])
+      lambda_aG3D _z_1627551573_aG3E xs_aG3F
+        = applySing (singFun1 (Proxy :: Proxy RightsSym0) sRights) xs_aG3F
+    in lambda_aG3D _s_z_1627551573 sXs
+sRights (SCons (SRight sX) sXs)
+  = let
+      lambda_aG3G ::
+        forall x_aG2R
+                xs_aG2S. t_aG36 ~ Apply (Apply (:$) (Apply RightSym0 x_aG2R)) xs_aG2S =>
+        Sing x_aG2R
+        -> Sing xs_aG2S
+            -> Sing (Apply RightsSym0 (Apply (Apply (:$) (Apply RightSym0 x_aG2R)) xs_aG2S) :: [b_aG1r])
+      lambda_aG3G x_aG3H xs_aG3I
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_aG3H)
+            (applySing (singFun1 (Proxy :: Proxy RightsSym0) sRights) xs_aG3I)
+    in lambda_aG3G sX sXs
+sLefts SNil
+  = let
+      lambda_aG3J ::
+        t_aG37 ~ '[] => Sing (Apply LeftsSym0 '[] :: [a_aG1l])
+      lambda_aG3J = SNil
+    in lambda_aG3J
+sLefts (SCons (SLeft sX) sXs)
+  = let
+      lambda_aG3K ::
+        forall x_aG2X
+                xs_aG2Y. t_aG37 ~ Apply (Apply (:$) (Apply LeftSym0 x_aG2X)) xs_aG2Y =>
+        Sing x_aG2X
+        -> Sing xs_aG2Y
+            -> Sing (Apply LeftsSym0 (Apply (Apply (:$) (Apply LeftSym0 x_aG2X)) xs_aG2Y) :: [a_aG1l])
+      lambda_aG3K x_aG3L xs_aG3M
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_aG3L)
+            (applySing (singFun1 (Proxy :: Proxy LeftsSym0) sLefts) xs_aG3M)
+    in lambda_aG3K sX sXs
+sLefts (SCons (SRight _s_z_1627551585) sXs)
+  = let
+      lambda_aG3N ::
+        forall _z_1627551585_aG31
+                xs_aG32. t_aG37 ~ Apply (Apply (:$) (Apply RightSym0 _z_1627551585_aG31)) xs_aG32 =>
+        Sing _z_1627551585_aG31
+        -> Sing xs_aG32
+            -> Sing (Apply LeftsSym0 (Apply (Apply (:$) (Apply RightSym0 _z_1627551585_aG31)) xs_aG32) :: [a_aG1l])
+      lambda_aG3N _z_1627551585_aG3O xs_aG3P
+        = applySing (singFun1 (Proxy :: Proxy LeftsSym0) sLefts) xs_aG3P
+    in lambda_aG3N _s_z_1627551585 sXs
diff --git a/src/Data/Singletons/Prelude/Enum.hs b/src/Data/Singletons/Prelude/Enum.hs
index e20c98d..197f6b6 100644
--- a/src/Data/Singletons/Prelude/Enum.hs
+++ b/src/Data/Singletons/Prelude/Enum.hs
@@ -34,8 +34,9 @@ module Data.Singletons.Prelude.Enum (
 
   ) where
 
-import Data.Singletons.Single
-import Data.Singletons.Util
+import Data.Proxy
+import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.Prelude.Num
 import Data.Singletons.Prelude.Base
 import Data.Singletons.Prelude.Ord
@@ -43,95 +44,2645 @@ import Data.Singletons.Prelude.Eq
 import Data.Singletons.Prelude.Instances
 import Data.Singletons.TypeLits
 
-$(singletonsOnly [d|
-  class Bounded a where
-    minBound, maxBound :: a
-  |])
+type MinBoundSym0 = MinBound
+type MaxBoundSym0 = MaxBound
+class kproxy_aemv ~ 'KProxy => PBounded (kproxy_aemv :: KProxy a_aemu) where
+  type family MinBound :: a_aemu
+  type family MaxBound :: a_aemu
+class kproxy_aemw ~ 'KProxy => SBounded (kproxy_aemw :: KProxy a_aemu) where
+  sMinBound :: Sing (MinBoundSym0 :: a_aemu)
+  sMaxBound :: Sing (MaxBoundSym0 :: a_aemu)
 
-$(singBoundedInstances boundedBasicTypes)
+type family MinBound_1627445291_aeoA :: (a_12, b_13) where
+  MinBound_1627445291_aeoA = Apply (Apply Tuple2Sym0 MinBoundSym0) MinBoundSym0
+type MinBound_1627445291Sym0 = MinBound_1627445291_aeoA
+type family MaxBound_1627445293_aeoC :: (a_12, b_13) where
+  MaxBound_1627445293_aeoC = Apply (Apply Tuple2Sym0 MaxBoundSym0) MaxBoundSym0
+type MaxBound_1627445293Sym0 = MaxBound_1627445293_aeoC
+instance PBounded ('KProxy :: KProxy (a_12, b_13)) where
+  type MinBound = MinBound_1627445291Sym0
+  type MaxBound = MaxBound_1627445293Sym0
+instance (SBounded ('KProxy :: KProxy a_12),
+          SBounded ('KProxy :: KProxy b_13)) =>
+          SBounded ('KProxy :: KProxy (a_12, b_13)) where
+  sMinBound :: Sing (MinBoundSym0 :: (a_12, b_13))
+  sMaxBound :: Sing (MaxBoundSym0 :: (a_12, b_13))
+  sMinBound
+    = let
+        lambda_aeoD :: Sing (MinBoundSym0 :: (a_12, b_13))
+        lambda_aeoD
+          = applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) sMinBound)
+              sMinBound
+      in lambda_aeoD
+  sMaxBound
+    = let
+        lambda_aeoY :: Sing (MaxBoundSym0 :: (a_12, b_13))
+        lambda_aeoY
+          = applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) sMaxBound)
+              sMaxBound
+      in lambda_aeoY
+type family MinBound_1627445317_aep0 :: (a_12, b_13, c_14) where
+  MinBound_1627445317_aep0 = Apply (Apply (Apply Tuple3Sym0 MinBoundSym0) MinBoundSym0) MinBoundSym0
+type MinBound_1627445317Sym0 = MinBound_1627445317_aep0
+type family MaxBound_1627445319_aep2 :: (a_12, b_13, c_14) where
+  MaxBound_1627445319_aep2 = Apply (Apply (Apply Tuple3Sym0 MaxBoundSym0) MaxBoundSym0) MaxBoundSym0
+type MaxBound_1627445319Sym0 = MaxBound_1627445319_aep2
+instance PBounded ('KProxy :: KProxy (a_12, b_13, c_14)) where
+  type MinBound = MinBound_1627445317Sym0
+  type MaxBound = MaxBound_1627445319Sym0
+instance (SBounded ('KProxy :: KProxy a_12),
+          SBounded ('KProxy :: KProxy b_13),
+          SBounded ('KProxy :: KProxy c_14)) =>
+          SBounded ('KProxy :: KProxy (a_12, b_13, c_14)) where
+  sMinBound :: Sing (MinBoundSym0 :: (a_12, b_13, c_14))
+  sMaxBound :: Sing (MaxBoundSym0 :: (a_12, b_13, c_14))
+  sMinBound
+    = let
+        lambda_aep3 :: Sing (MinBoundSym0 :: (a_12, b_13, c_14))
+        lambda_aep3
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy Tuple3Sym0) STuple3) sMinBound)
+                  sMinBound)
+              sMinBound
+      in lambda_aep3
+  sMaxBound
+    = let
+        lambda_aepm :: Sing (MaxBoundSym0 :: (a_12, b_13, c_14))
+        lambda_aepm
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy Tuple3Sym0) STuple3) sMaxBound)
+                  sMaxBound)
+              sMaxBound
+      in lambda_aepm
+type family MinBound_1627445341_aepo :: (a_12,
+                                          b_13,
+                                          c_14,
+                                          d_15) where
+  MinBound_1627445341_aepo = Apply (Apply (Apply (Apply Tuple4Sym0 MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0
+type MinBound_1627445341Sym0 = MinBound_1627445341_aepo
+type family MaxBound_1627445343_aepq :: (a_12,
+                                          b_13,
+                                          c_14,
+                                          d_15) where
+  MaxBound_1627445343_aepq = Apply (Apply (Apply (Apply Tuple4Sym0 MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0
+type MaxBound_1627445343Sym0 = MaxBound_1627445343_aepq
+instance PBounded ('KProxy :: KProxy (a_12, b_13, c_14, d_15)) where
+  type MinBound = MinBound_1627445341Sym0
+  type MaxBound = MaxBound_1627445343Sym0
+instance (SBounded ('KProxy :: KProxy a_12),
+          SBounded ('KProxy :: KProxy b_13),
+          SBounded ('KProxy :: KProxy c_14),
+          SBounded ('KProxy :: KProxy d_15)) =>
+          SBounded ('KProxy :: KProxy (a_12, b_13, c_14, d_15)) where
+  sMinBound :: Sing (MinBoundSym0 :: (a_12, b_13, c_14, d_15))
+  sMaxBound :: Sing (MaxBoundSym0 :: (a_12, b_13, c_14, d_15))
+  sMinBound
+    = let
+        lambda_aepr :: Sing (MinBoundSym0 :: (a_12, b_13, c_14, d_15))
+        lambda_aepr
+          = applySing
+              (applySing
+                  (applySing
+                    (applySing
+                        (singFun4 (Proxy :: Proxy Tuple4Sym0) STuple4) sMinBound)
+                    sMinBound)
+                  sMinBound)
+              sMinBound
+      in lambda_aepr
+  sMaxBound
+    = let
+        lambda_aepO :: Sing (MaxBoundSym0 :: (a_12, b_13, c_14, d_15))
+        lambda_aepO
+          = applySing
+              (applySing
+                  (applySing
+                    (applySing
+                        (singFun4 (Proxy :: Proxy Tuple4Sym0) STuple4) sMaxBound)
+                    sMaxBound)
+                  sMaxBound)
+              sMaxBound
+      in lambda_aepO
+type family MinBound_1627445369_aepQ :: (a_12,
+                                          b_13,
+                                          c_14,
+                                          d_15,
+                                          e_16) where
+  MinBound_1627445369_aepQ = Apply (Apply (Apply (Apply (Apply Tuple5Sym0 MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0
+type MinBound_1627445369Sym0 = MinBound_1627445369_aepQ
+type family MaxBound_1627445371_aepS :: (a_12,
+                                          b_13,
+                                          c_14,
+                                          d_15,
+                                          e_16) where
+  MaxBound_1627445371_aepS = Apply (Apply (Apply (Apply (Apply Tuple5Sym0 MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0
+type MaxBound_1627445371Sym0 = MaxBound_1627445371_aepS
+instance PBounded ('KProxy :: KProxy (a_12,
+                                      b_13,
+                                      c_14,
+                                      d_15,
+                                      e_16)) where
+  type MinBound = MinBound_1627445369Sym0
+  type MaxBound = MaxBound_1627445371Sym0
+instance (SBounded ('KProxy :: KProxy a_12),
+          SBounded ('KProxy :: KProxy b_13),
+          SBounded ('KProxy :: KProxy c_14),
+          SBounded ('KProxy :: KProxy d_15),
+          SBounded ('KProxy :: KProxy e_16)) =>
+          SBounded ('KProxy :: KProxy (a_12, b_13, c_14, d_15, e_16)) where
+  sMinBound :: Sing (MinBoundSym0 :: (a_12, b_13, c_14, d_15, e_16))
+  sMaxBound :: Sing (MaxBoundSym0 :: (a_12, b_13, c_14, d_15, e_16))
+  sMinBound
+    = let
+        lambda_aepT ::
+          Sing (MinBoundSym0 :: (a_12, b_13, c_14, d_15, e_16))
+        lambda_aepT
+          = applySing
+              (applySing
+                  (applySing
+                    (applySing
+                        (applySing
+                          (singFun5 (Proxy :: Proxy Tuple5Sym0) STuple5) sMinBound)
+                        sMinBound)
+                    sMinBound)
+                  sMinBound)
+              sMinBound
+      in lambda_aepT
+  sMaxBound
+    = let
+        lambda_aeqk ::
+          Sing (MaxBoundSym0 :: (a_12, b_13, c_14, d_15, e_16))
+        lambda_aeqk
+          = applySing
+              (applySing
+                  (applySing
+                    (applySing
+                        (applySing
+                          (singFun5 (Proxy :: Proxy Tuple5Sym0) STuple5) sMaxBound)
+                        sMaxBound)
+                    sMaxBound)
+                  sMaxBound)
+              sMaxBound
+      in lambda_aeqk
+type family MinBound_1627445401_aeqm :: (a_12,
+                                          b_13,
+                                          c_14,
+                                          d_15,
+                                          e_16,
+                                          f_17) where
+  MinBound_1627445401_aeqm = Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0
+type MinBound_1627445401Sym0 = MinBound_1627445401_aeqm
+type family MaxBound_1627445403_aeqo :: (a_12,
+                                          b_13,
+                                          c_14,
+                                          d_15,
+                                          e_16,
+                                          f_17) where
+  MaxBound_1627445403_aeqo = Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0
+type MaxBound_1627445403Sym0 = MaxBound_1627445403_aeqo
+instance PBounded ('KProxy :: KProxy (a_12,
+                                      b_13,
+                                      c_14,
+                                      d_15,
+                                      e_16,
+                                      f_17)) where
+  type MinBound = MinBound_1627445401Sym0
+  type MaxBound = MaxBound_1627445403Sym0
+instance (SBounded ('KProxy :: KProxy a_12),
+          SBounded ('KProxy :: KProxy b_13),
+          SBounded ('KProxy :: KProxy c_14),
+          SBounded ('KProxy :: KProxy d_15),
+          SBounded ('KProxy :: KProxy e_16),
+          SBounded ('KProxy :: KProxy f_17)) =>
+          SBounded ('KProxy :: KProxy (a_12,
+                                      b_13,
+                                      c_14,
+                                      d_15,
+                                      e_16,
+                                      f_17)) where
+  sMinBound ::
+    Sing (MinBoundSym0 :: (a_12, b_13, c_14, d_15, e_16, f_17))
+  sMaxBound ::
+    Sing (MaxBoundSym0 :: (a_12, b_13, c_14, d_15, e_16, f_17))
+  sMinBound
+    = let
+        lambda_aeqp ::
+          Sing (MinBoundSym0 :: (a_12, b_13, c_14, d_15, e_16, f_17))
+        lambda_aeqp
+          = applySing
+              (applySing
+                  (applySing
+                    (applySing
+                        (applySing
+                          (applySing
+                              (singFun6 (Proxy :: Proxy Tuple6Sym0) STuple6) sMinBound)
+                          sMinBound)
+                        sMinBound)
+                    sMinBound)
+                  sMinBound)
+              sMinBound
+      in lambda_aeqp
+  sMaxBound
+    = let
+        lambda_aeqU ::
+          Sing (MaxBoundSym0 :: (a_12, b_13, c_14, d_15, e_16, f_17))
+        lambda_aeqU
+          = applySing
+              (applySing
+                  (applySing
+                    (applySing
+                        (applySing
+                          (applySing
+                              (singFun6 (Proxy :: Proxy Tuple6Sym0) STuple6) sMaxBound)
+                          sMaxBound)
+                        sMaxBound)
+                    sMaxBound)
+                  sMaxBound)
+              sMaxBound
+      in lambda_aeqU
+type family MinBound_1627445437_aeqW :: (a_12,
+                                          b_13,
+                                          c_14,
+                                          d_15,
+                                          e_16,
+                                          f_17,
+                                          g_18) where
+  MinBound_1627445437_aeqW = Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0) MinBoundSym0
+type MinBound_1627445437Sym0 = MinBound_1627445437_aeqW
+type family MaxBound_1627445439_aeqY :: (a_12,
+                                          b_13,
+                                          c_14,
+                                          d_15,
+                                          e_16,
+                                          f_17,
+                                          g_18) where
+  MaxBound_1627445439_aeqY = Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0) MaxBoundSym0
+type MaxBound_1627445439Sym0 = MaxBound_1627445439_aeqY
+instance PBounded ('KProxy :: KProxy (a_12,
+                                      b_13,
+                                      c_14,
+                                      d_15,
+                                      e_16,
+                                      f_17,
+                                      g_18)) where
+  type MinBound = MinBound_1627445437Sym0
+  type MaxBound = MaxBound_1627445439Sym0
+instance (SBounded ('KProxy :: KProxy a_12),
+          SBounded ('KProxy :: KProxy b_13),
+          SBounded ('KProxy :: KProxy c_14),
+          SBounded ('KProxy :: KProxy d_15),
+          SBounded ('KProxy :: KProxy e_16),
+          SBounded ('KProxy :: KProxy f_17),
+          SBounded ('KProxy :: KProxy g_18)) =>
+          SBounded ('KProxy :: KProxy (a_12,
+                                      b_13,
+                                      c_14,
+                                      d_15,
+                                      e_16,
+                                      f_17,
+                                      g_18)) where
+  sMinBound ::
+    Sing (MinBoundSym0 :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18))
+  sMaxBound ::
+    Sing (MaxBoundSym0 :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18))
+  sMinBound
+    = let
+        lambda_aeqZ ::
+          Sing (MinBoundSym0 :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18))
+        lambda_aeqZ
+          = applySing
+              (applySing
+                  (applySing
+                    (applySing
+                        (applySing
+                          (applySing
+                              (applySing
+                                (singFun7 (Proxy :: Proxy Tuple7Sym0) STuple7) sMinBound)
+                              sMinBound)
+                          sMinBound)
+                        sMinBound)
+                    sMinBound)
+                  sMinBound)
+              sMinBound
+      in lambda_aeqZ
+  sMaxBound
+    = let
+        lambda_aery ::
+          Sing (MaxBoundSym0 :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18))
+        lambda_aery
+          = applySing
+              (applySing
+                  (applySing
+                    (applySing
+                        (applySing
+                          (applySing
+                              (applySing
+                                (singFun7 (Proxy :: Proxy Tuple7Sym0) STuple7) sMaxBound)
+                              sMaxBound)
+                          sMaxBound)
+                        sMaxBound)
+                    sMaxBound)
+                  sMaxBound)
+              sMaxBound
+      in lambda_aery
+type family MinBound_1627445477_aerA :: Bool where
+  MinBound_1627445477_aerA = FalseSym0
+type MinBound_1627445477Sym0 = MinBound_1627445477_aerA
+type family MaxBound_1627445479_aerC :: Bool where
+  MaxBound_1627445479_aerC = TrueSym0
+type MaxBound_1627445479Sym0 = MaxBound_1627445479_aerC
+instance PBounded ('KProxy :: KProxy Bool) where
+  type MinBound = MinBound_1627445477Sym0
+  type MaxBound = MaxBound_1627445479Sym0
+instance SBounded ('KProxy :: KProxy Bool) where
+  sMinBound :: Sing (MinBoundSym0 :: Bool)
+  sMaxBound :: Sing (MaxBoundSym0 :: Bool)
+  sMinBound
+    = let
+        lambda_aerD :: Sing (MinBoundSym0 :: Bool)
+        lambda_aerD = SFalse
+      in lambda_aerD
+  sMaxBound
+    = let
+        lambda_aerP :: Sing (MaxBoundSym0 :: Bool)
+        lambda_aerP = STrue
+      in lambda_aerP
+type family MinBound_1627445494_aerR :: Ordering where
+  MinBound_1627445494_aerR = LTSym0
+type MinBound_1627445494Sym0 = MinBound_1627445494_aerR
+type family MaxBound_1627445496_aerT :: Ordering where
+  MaxBound_1627445496_aerT = GTSym0
+type MaxBound_1627445496Sym0 = MaxBound_1627445496_aerT
+instance PBounded ('KProxy :: KProxy Ordering) where
+  type MinBound = MinBound_1627445494Sym0
+  type MaxBound = MaxBound_1627445496Sym0
+instance SBounded ('KProxy :: KProxy Ordering) where
+  sMinBound :: Sing (MinBoundSym0 :: Ordering)
+  sMaxBound :: Sing (MaxBoundSym0 :: Ordering)
+  sMinBound
+    = let
+        lambda_aerU :: Sing (MinBoundSym0 :: Ordering)
+        lambda_aerU = SLT
+      in lambda_aerU
+  sMaxBound
+    = let
+        lambda_aesb :: Sing (MaxBoundSym0 :: Ordering)
+        lambda_aesb = SGT
+      in lambda_aesb
+type family MinBound_1627445516_aesd :: () where
+  MinBound_1627445516_aesd = Tuple0Sym0
+type MinBound_1627445516Sym0 = MinBound_1627445516_aesd
+type family MaxBound_1627445518_aesf :: () where
+  MaxBound_1627445518_aesf = Tuple0Sym0
+type MaxBound_1627445518Sym0 = MaxBound_1627445518_aesf
+instance PBounded ('KProxy :: KProxy ()) where
+  type MinBound = MinBound_1627445516Sym0
+  type MaxBound = MaxBound_1627445518Sym0
+instance SBounded ('KProxy :: KProxy ()) where
+  sMinBound :: Sing (MinBoundSym0 :: ())
+  sMaxBound :: Sing (MaxBoundSym0 :: ())
+  sMinBound
+    = let
+        lambda_aesg :: Sing (MinBoundSym0 :: ())
+        lambda_aesg = STuple0
+      in lambda_aesg
+  sMaxBound
+    = let
+        lambda_aesn :: Sing (MaxBoundSym0 :: ())
+        lambda_aesn = STuple0
+      in lambda_aesn
 
-$(singletonsOnly [d|
-  class  Enum a   where
-      -- | the successor of a value.  For numeric types, 'succ' adds 1.
-      succ                :: a -> a
-      -- | the predecessor of a value.  For numeric types, 'pred' subtracts 1.
-      pred                :: a -> a
-      -- | Convert from a 'Nat'.
-      toEnum              :: Nat -> a
-      -- | Convert to a 'Nat'.
-      fromEnum            :: a -> Nat
+type Let1627452229Scrutinee_1627452200Sym6 t_agcu
+                                            t_agcv
+                                            t_agcw
+                                            t_agcx
+                                            t_agcy
+                                            t_agcz =
+    Let1627452229Scrutinee_1627452200 t_agcu t_agcv t_agcw t_agcx t_agcy t_agcz
+instance SuppressUnusedWarnings Let1627452229Scrutinee_1627452200Sym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452229Scrutinee_1627452200Sym5KindInference ())
+data Let1627452229Scrutinee_1627452200Sym5 l_agcV
+                                            l_agcW
+                                            l_agcX
+                                            l_agcY
+                                            l_agcZ
+                                            l_agcU
+  = forall arg_agd0. KindOf (Apply (Let1627452229Scrutinee_1627452200Sym5 l_agcV l_agcW l_agcX l_agcY l_agcZ) arg_agd0) ~ KindOf (Let1627452229Scrutinee_1627452200Sym6 l_agcV l_agcW l_agcX l_agcY l_agcZ arg_agd0) =>
+    Let1627452229Scrutinee_1627452200Sym5KindInference
+type instance Apply (Let1627452229Scrutinee_1627452200Sym5 l_agcV l_agcW l_agcX l_agcY l_agcZ) l_agcU = Let1627452229Scrutinee_1627452200Sym6 l_agcV l_agcW l_agcX l_agcY l_agcZ l_agcU
+instance SuppressUnusedWarnings Let1627452229Scrutinee_1627452200Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452229Scrutinee_1627452200Sym4KindInference ())
+data Let1627452229Scrutinee_1627452200Sym4 l_agcP
+                                            l_agcQ
+                                            l_agcR
+                                            l_agcS
+                                            l_agcO
+  = forall arg_agcT. KindOf (Apply (Let1627452229Scrutinee_1627452200Sym4 l_agcP l_agcQ l_agcR l_agcS) arg_agcT) ~ KindOf (Let1627452229Scrutinee_1627452200Sym5 l_agcP l_agcQ l_agcR l_agcS arg_agcT) =>
+    Let1627452229Scrutinee_1627452200Sym4KindInference
+type instance Apply (Let1627452229Scrutinee_1627452200Sym4 l_agcP l_agcQ l_agcR l_agcS) l_agcO = Let1627452229Scrutinee_1627452200Sym5 l_agcP l_agcQ l_agcR l_agcS l_agcO
+instance SuppressUnusedWarnings Let1627452229Scrutinee_1627452200Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452229Scrutinee_1627452200Sym3KindInference ())
+data Let1627452229Scrutinee_1627452200Sym3 l_agcK
+                                            l_agcL
+                                            l_agcM
+                                            l_agcJ
+  = forall arg_agcN. KindOf (Apply (Let1627452229Scrutinee_1627452200Sym3 l_agcK l_agcL l_agcM) arg_agcN) ~ KindOf (Let1627452229Scrutinee_1627452200Sym4 l_agcK l_agcL l_agcM arg_agcN) =>
+    Let1627452229Scrutinee_1627452200Sym3KindInference
+type instance Apply (Let1627452229Scrutinee_1627452200Sym3 l_agcK l_agcL l_agcM) l_agcJ = Let1627452229Scrutinee_1627452200Sym4 l_agcK l_agcL l_agcM l_agcJ
+instance SuppressUnusedWarnings Let1627452229Scrutinee_1627452200Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452229Scrutinee_1627452200Sym2KindInference ())
+data Let1627452229Scrutinee_1627452200Sym2 l_agcG l_agcH l_agcF
+  = forall arg_agcI. KindOf (Apply (Let1627452229Scrutinee_1627452200Sym2 l_agcG l_agcH) arg_agcI) ~ KindOf (Let1627452229Scrutinee_1627452200Sym3 l_agcG l_agcH arg_agcI) =>
+    Let1627452229Scrutinee_1627452200Sym2KindInference
+type instance Apply (Let1627452229Scrutinee_1627452200Sym2 l_agcG l_agcH) l_agcF = Let1627452229Scrutinee_1627452200Sym3 l_agcG l_agcH l_agcF
+instance SuppressUnusedWarnings Let1627452229Scrutinee_1627452200Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452229Scrutinee_1627452200Sym1KindInference ())
+data Let1627452229Scrutinee_1627452200Sym1 l_agcD l_agcC
+  = forall arg_agcE. KindOf (Apply (Let1627452229Scrutinee_1627452200Sym1 l_agcD) arg_agcE) ~ KindOf (Let1627452229Scrutinee_1627452200Sym2 l_agcD arg_agcE) =>
+    Let1627452229Scrutinee_1627452200Sym1KindInference
+type instance Apply (Let1627452229Scrutinee_1627452200Sym1 l_agcD) l_agcC = Let1627452229Scrutinee_1627452200Sym2 l_agcD l_agcC
+instance SuppressUnusedWarnings Let1627452229Scrutinee_1627452200Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452229Scrutinee_1627452200Sym0KindInference ())
+data Let1627452229Scrutinee_1627452200Sym0 l_agcA
+  = forall arg_agcB. KindOf (Apply Let1627452229Scrutinee_1627452200Sym0 arg_agcB) ~ KindOf (Let1627452229Scrutinee_1627452200Sym1 arg_agcB) =>
+    Let1627452229Scrutinee_1627452200Sym0KindInference
+type instance Apply Let1627452229Scrutinee_1627452200Sym0 l_agcA = Let1627452229Scrutinee_1627452200Sym1 l_agcA
+type family Let1627452229Scrutinee_1627452200 x1_agco
+                                              x2_agcp
+                                              y_agcq
+                                              arg_1627452194_agcj
+                                              arg_1627452196_agck
+                                              arg_1627452198_agcl where
+  Let1627452229Scrutinee_1627452200 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl = Apply (Apply (:>$) y_agcq) x1_agco
+type family Case_1627452263_agd2 x1_agco
+                                  x2_agcp
+                                  y_agcq
+                                  arg_1627452194_agcj
+                                  arg_1627452196_agck
+                                  arg_1627452198_agcl
+                                  t_agd3 where
+  Case_1627452263_agd2 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl 'True = '[]
+  Case_1627452263_agd2 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl 'False = Apply (Apply (:$) x1_agco) '[]
+type family Case_1627452380_ageV x1_agco
+                                  x2_agcp
+                                  y_agcq
+                                  x_ageT
+                                  arg_1627452194_agcj
+                                  arg_1627452196_agck
+                                  arg_1627452198_agcl
+                                  arg_1627452202_ageQ
+                                  t_ageW where
+  Case_1627452380_ageV x1_agco x2_agcp y_agcq x_ageT arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ 'True = Apply (Apply (:$) x_ageT) '[]
+  Case_1627452380_ageV x1_agco x2_agcp y_agcq x_ageT arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ 'False = Apply (Apply (:$) x_ageT) (Apply (Let1627452266Go_dnSym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl) (Apply (Apply (:+$) x_ageT) (Let1627452266DeltaSym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl)))
+type family Case_1627452377_ageS x1_agco
+                                  x2_agcp
+                                  y_agcq
+                                  arg_1627452194_agcj
+                                  arg_1627452196_agck
+                                  arg_1627452198_agcl
+                                  arg_1627452202_ageQ
+                                  t_ageX where
+  Case_1627452377_ageS x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ x_ageT = Case_1627452380_ageV x1_agco x2_agcp y_agcq x_ageT arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ (Apply (Apply (:<$) x_ageT) (Let1627452266Y'Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl))
+type Let1627452266DeltaSym6 t_agd5
+                            t_agd6
+                            t_agd7
+                            t_agd8
+                            t_agd9
+                            t_agda =
+    Let1627452266Delta t_agd5 t_agd6 t_agd7 t_agd8 t_agd9 t_agda
+instance SuppressUnusedWarnings Let1627452266DeltaSym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266DeltaSym5KindInference ())
+data Let1627452266DeltaSym5 l_agdw
+                            l_agdx
+                            l_agdy
+                            l_agdz
+                            l_agdA
+                            l_agdv
+  = forall arg_agdB. KindOf (Apply (Let1627452266DeltaSym5 l_agdw l_agdx l_agdy l_agdz l_agdA) arg_agdB) ~ KindOf (Let1627452266DeltaSym6 l_agdw l_agdx l_agdy l_agdz l_agdA arg_agdB) =>
+    Let1627452266DeltaSym5KindInference
+type instance Apply (Let1627452266DeltaSym5 l_agdw l_agdx l_agdy l_agdz l_agdA) l_agdv = Let1627452266DeltaSym6 l_agdw l_agdx l_agdy l_agdz l_agdA l_agdv
+instance SuppressUnusedWarnings Let1627452266DeltaSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266DeltaSym4KindInference ())
+data Let1627452266DeltaSym4 l_agdq l_agdr l_agds l_agdt l_agdp
+  = forall arg_agdu. KindOf (Apply (Let1627452266DeltaSym4 l_agdq l_agdr l_agds l_agdt) arg_agdu) ~ KindOf (Let1627452266DeltaSym5 l_agdq l_agdr l_agds l_agdt arg_agdu) =>
+    Let1627452266DeltaSym4KindInference
+type instance Apply (Let1627452266DeltaSym4 l_agdq l_agdr l_agds l_agdt) l_agdp = Let1627452266DeltaSym5 l_agdq l_agdr l_agds l_agdt l_agdp
+instance SuppressUnusedWarnings Let1627452266DeltaSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266DeltaSym3KindInference ())
+data Let1627452266DeltaSym3 l_agdl l_agdm l_agdn l_agdk
+  = forall arg_agdo. KindOf (Apply (Let1627452266DeltaSym3 l_agdl l_agdm l_agdn) arg_agdo) ~ KindOf (Let1627452266DeltaSym4 l_agdl l_agdm l_agdn arg_agdo) =>
+    Let1627452266DeltaSym3KindInference
+type instance Apply (Let1627452266DeltaSym3 l_agdl l_agdm l_agdn) l_agdk = Let1627452266DeltaSym4 l_agdl l_agdm l_agdn l_agdk
+instance SuppressUnusedWarnings Let1627452266DeltaSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266DeltaSym2KindInference ())
+data Let1627452266DeltaSym2 l_agdh l_agdi l_agdg
+  = forall arg_agdj. KindOf (Apply (Let1627452266DeltaSym2 l_agdh l_agdi) arg_agdj) ~ KindOf (Let1627452266DeltaSym3 l_agdh l_agdi arg_agdj) =>
+    Let1627452266DeltaSym2KindInference
+type instance Apply (Let1627452266DeltaSym2 l_agdh l_agdi) l_agdg = Let1627452266DeltaSym3 l_agdh l_agdi l_agdg
+instance SuppressUnusedWarnings Let1627452266DeltaSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266DeltaSym1KindInference ())
+data Let1627452266DeltaSym1 l_agde l_agdd
+  = forall arg_agdf. KindOf (Apply (Let1627452266DeltaSym1 l_agde) arg_agdf) ~ KindOf (Let1627452266DeltaSym2 l_agde arg_agdf) =>
+    Let1627452266DeltaSym1KindInference
+type instance Apply (Let1627452266DeltaSym1 l_agde) l_agdd = Let1627452266DeltaSym2 l_agde l_agdd
+instance SuppressUnusedWarnings Let1627452266DeltaSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266DeltaSym0KindInference ())
+data Let1627452266DeltaSym0 l_agdb
+  = forall arg_agdc. KindOf (Apply Let1627452266DeltaSym0 arg_agdc) ~ KindOf (Let1627452266DeltaSym1 arg_agdc) =>
+    Let1627452266DeltaSym0KindInference
+type instance Apply Let1627452266DeltaSym0 l_agdb = Let1627452266DeltaSym1 l_agdb
+type Let1627452266Y'Sym6 t_agdC
+                          t_agdD
+                          t_agdE
+                          t_agdF
+                          t_agdG
+                          t_agdH =
+    Let1627452266Y' t_agdC t_agdD t_agdE t_agdF t_agdG t_agdH
+instance SuppressUnusedWarnings Let1627452266Y'Sym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Y'Sym5KindInference ())
+data Let1627452266Y'Sym5 l_age3 l_age4 l_age5 l_age6 l_age7 l_age2
+  = forall arg_age8. KindOf (Apply (Let1627452266Y'Sym5 l_age3 l_age4 l_age5 l_age6 l_age7) arg_age8) ~ KindOf (Let1627452266Y'Sym6 l_age3 l_age4 l_age5 l_age6 l_age7 arg_age8) =>
+    Let1627452266Y'Sym5KindInference
+type instance Apply (Let1627452266Y'Sym5 l_age3 l_age4 l_age5 l_age6 l_age7) l_age2 = Let1627452266Y'Sym6 l_age3 l_age4 l_age5 l_age6 l_age7 l_age2
+instance SuppressUnusedWarnings Let1627452266Y'Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Y'Sym4KindInference ())
+data Let1627452266Y'Sym4 l_agdX l_agdY l_agdZ l_age0 l_agdW
+  = forall arg_age1. KindOf (Apply (Let1627452266Y'Sym4 l_agdX l_agdY l_agdZ l_age0) arg_age1) ~ KindOf (Let1627452266Y'Sym5 l_agdX l_agdY l_agdZ l_age0 arg_age1) =>
+    Let1627452266Y'Sym4KindInference
+type instance Apply (Let1627452266Y'Sym4 l_agdX l_agdY l_agdZ l_age0) l_agdW = Let1627452266Y'Sym5 l_agdX l_agdY l_agdZ l_age0 l_agdW
+instance SuppressUnusedWarnings Let1627452266Y'Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Y'Sym3KindInference ())
+data Let1627452266Y'Sym3 l_agdS l_agdT l_agdU l_agdR
+  = forall arg_agdV. KindOf (Apply (Let1627452266Y'Sym3 l_agdS l_agdT l_agdU) arg_agdV) ~ KindOf (Let1627452266Y'Sym4 l_agdS l_agdT l_agdU arg_agdV) =>
+    Let1627452266Y'Sym3KindInference
+type instance Apply (Let1627452266Y'Sym3 l_agdS l_agdT l_agdU) l_agdR = Let1627452266Y'Sym4 l_agdS l_agdT l_agdU l_agdR
+instance SuppressUnusedWarnings Let1627452266Y'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Y'Sym2KindInference ())
+data Let1627452266Y'Sym2 l_agdO l_agdP l_agdN
+  = forall arg_agdQ. KindOf (Apply (Let1627452266Y'Sym2 l_agdO l_agdP) arg_agdQ) ~ KindOf (Let1627452266Y'Sym3 l_agdO l_agdP arg_agdQ) =>
+    Let1627452266Y'Sym2KindInference
+type instance Apply (Let1627452266Y'Sym2 l_agdO l_agdP) l_agdN = Let1627452266Y'Sym3 l_agdO l_agdP l_agdN
+instance SuppressUnusedWarnings Let1627452266Y'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Y'Sym1KindInference ())
+data Let1627452266Y'Sym1 l_agdL l_agdK
+  = forall arg_agdM. KindOf (Apply (Let1627452266Y'Sym1 l_agdL) arg_agdM) ~ KindOf (Let1627452266Y'Sym2 l_agdL arg_agdM) =>
+    Let1627452266Y'Sym1KindInference
+type instance Apply (Let1627452266Y'Sym1 l_agdL) l_agdK = Let1627452266Y'Sym2 l_agdL l_agdK
+instance SuppressUnusedWarnings Let1627452266Y'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Y'Sym0KindInference ())
+data Let1627452266Y'Sym0 l_agdI
+  = forall arg_agdJ. KindOf (Apply Let1627452266Y'Sym0 arg_agdJ) ~ KindOf (Let1627452266Y'Sym1 arg_agdJ) =>
+    Let1627452266Y'Sym0KindInference
+type instance Apply Let1627452266Y'Sym0 l_agdI = Let1627452266Y'Sym1 l_agdI
+type Let1627452266Go_dnSym7 t_age9
+                            t_agea
+                            t_ageb
+                            t_agec
+                            t_aged
+                            t_agee
+                            t_agef =
+    Let1627452266Go_dn t_age9 t_agea t_ageb t_agec t_aged t_agee t_agef
+instance SuppressUnusedWarnings Let1627452266Go_dnSym6 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Go_dnSym6KindInference ())
+data Let1627452266Go_dnSym6 l_ageI
+                            l_ageJ
+                            l_ageK
+                            l_ageL
+                            l_ageM
+                            l_ageN
+                            l_ageH
+  = forall arg_ageO. KindOf (Apply (Let1627452266Go_dnSym6 l_ageI l_ageJ l_ageK l_ageL l_ageM l_ageN) arg_ageO) ~ KindOf (Let1627452266Go_dnSym7 l_ageI l_ageJ l_ageK l_ageL l_ageM l_ageN arg_ageO) =>
+    Let1627452266Go_dnSym6KindInference
+type instance Apply (Let1627452266Go_dnSym6 l_ageI l_ageJ l_ageK l_ageL l_ageM l_ageN) l_ageH = Let1627452266Go_dnSym7 l_ageI l_ageJ l_ageK l_ageL l_ageM l_ageN l_ageH
+instance SuppressUnusedWarnings Let1627452266Go_dnSym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Go_dnSym5KindInference ())
+data Let1627452266Go_dnSym5 l_ageB
+                            l_ageC
+                            l_ageD
+                            l_ageE
+                            l_ageF
+                            l_ageA
+  = forall arg_ageG. KindOf (Apply (Let1627452266Go_dnSym5 l_ageB l_ageC l_ageD l_ageE l_ageF) arg_ageG) ~ KindOf (Let1627452266Go_dnSym6 l_ageB l_ageC l_ageD l_ageE l_ageF arg_ageG) =>
+    Let1627452266Go_dnSym5KindInference
+type instance Apply (Let1627452266Go_dnSym5 l_ageB l_ageC l_ageD l_ageE l_ageF) l_ageA = Let1627452266Go_dnSym6 l_ageB l_ageC l_ageD l_ageE l_ageF l_ageA
+instance SuppressUnusedWarnings Let1627452266Go_dnSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Go_dnSym4KindInference ())
+data Let1627452266Go_dnSym4 l_agev l_agew l_agex l_agey l_ageu
+  = forall arg_agez. KindOf (Apply (Let1627452266Go_dnSym4 l_agev l_agew l_agex l_agey) arg_agez) ~ KindOf (Let1627452266Go_dnSym5 l_agev l_agew l_agex l_agey arg_agez) =>
+    Let1627452266Go_dnSym4KindInference
+type instance Apply (Let1627452266Go_dnSym4 l_agev l_agew l_agex l_agey) l_ageu = Let1627452266Go_dnSym5 l_agev l_agew l_agex l_agey l_ageu
+instance SuppressUnusedWarnings Let1627452266Go_dnSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Go_dnSym3KindInference ())
+data Let1627452266Go_dnSym3 l_ageq l_ager l_ages l_agep
+  = forall arg_aget. KindOf (Apply (Let1627452266Go_dnSym3 l_ageq l_ager l_ages) arg_aget) ~ KindOf (Let1627452266Go_dnSym4 l_ageq l_ager l_ages arg_aget) =>
+    Let1627452266Go_dnSym3KindInference
+type instance Apply (Let1627452266Go_dnSym3 l_ageq l_ager l_ages) l_agep = Let1627452266Go_dnSym4 l_ageq l_ager l_ages l_agep
+instance SuppressUnusedWarnings Let1627452266Go_dnSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Go_dnSym2KindInference ())
+data Let1627452266Go_dnSym2 l_agem l_agen l_agel
+  = forall arg_ageo. KindOf (Apply (Let1627452266Go_dnSym2 l_agem l_agen) arg_ageo) ~ KindOf (Let1627452266Go_dnSym3 l_agem l_agen arg_ageo) =>
+    Let1627452266Go_dnSym2KindInference
+type instance Apply (Let1627452266Go_dnSym2 l_agem l_agen) l_agel = Let1627452266Go_dnSym3 l_agem l_agen l_agel
+instance SuppressUnusedWarnings Let1627452266Go_dnSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Go_dnSym1KindInference ())
+data Let1627452266Go_dnSym1 l_agej l_agei
+  = forall arg_agek. KindOf (Apply (Let1627452266Go_dnSym1 l_agej) arg_agek) ~ KindOf (Let1627452266Go_dnSym2 l_agej arg_agek) =>
+    Let1627452266Go_dnSym1KindInference
+type instance Apply (Let1627452266Go_dnSym1 l_agej) l_agei = Let1627452266Go_dnSym2 l_agej l_agei
+instance SuppressUnusedWarnings Let1627452266Go_dnSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452266Go_dnSym0KindInference ())
+data Let1627452266Go_dnSym0 l_ageg
+  = forall arg_ageh. KindOf (Apply Let1627452266Go_dnSym0 arg_ageh) ~ KindOf (Let1627452266Go_dnSym1 arg_ageh) =>
+    Let1627452266Go_dnSym0KindInference
+type instance Apply Let1627452266Go_dnSym0 l_ageg = Let1627452266Go_dnSym1 l_ageg
+type family Let1627452266Delta x1_agco
+                                x2_agcp
+                                y_agcq
+                                arg_1627452194_agcj
+                                arg_1627452196_agck
+                                arg_1627452198_agcl where
+  Let1627452266Delta x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl = Apply (Apply (:-$) x2_agcp) x1_agco
+type family Let1627452266Y' x1_agco
+                            x2_agcp
+                            y_agcq
+                            arg_1627452194_agcj
+                            arg_1627452196_agck
+                            arg_1627452198_agcl where
+  Let1627452266Y' x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl = Apply (Apply (:-$) y_agcq) (Let1627452266DeltaSym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl)
+type family Let1627452266Go_dn x1_agco
+                                x2_agcp
+                                y_agcq
+                                arg_1627452194_agcj
+                                arg_1627452196_agck
+                                arg_1627452198_agcl
+                                a_ageP where
+  Let1627452266Go_dn x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ = Case_1627452377_ageS x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ arg_1627452202_ageQ
+type family Case_1627452227_agcs x1_agco
+                                  x2_agcp
+                                  y_agcq
+                                  arg_1627452194_agcj
+                                  arg_1627452196_agck
+                                  arg_1627452198_agcl
+                                  t_ageY where
+  Case_1627452227_agcs x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl 'True = Case_1627452263_agd2 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl (Let1627452229Scrutinee_1627452200Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl)
+  Case_1627452227_agcs x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl 'False = Apply (Apply (:$) x1_agco) (Apply (Let1627452266Go_dnSym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl) x2_agcp)
+type family Case_1627452222_agcn arg_1627452194_agcj
+                                  arg_1627452196_agck
+                                  arg_1627452198_agcl
+                                  t_ageZ where
+  Case_1627452222_agcn arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl '(x1_agco,
+                                                                                      x2_agcp,
+                                                                                      y_agcq) = Case_1627452227_agcs x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl (Apply (Apply (:>$) y_agcq) x2_agcp)
+type Let1627452411Scrutinee_1627452190Sym6 t_agfq
+                                            t_agfr
+                                            t_agfs
+                                            t_agft
+                                            t_agfu
+                                            t_agfv =
+    Let1627452411Scrutinee_1627452190 t_agfq t_agfr t_agfs t_agft t_agfu t_agfv
+instance SuppressUnusedWarnings Let1627452411Scrutinee_1627452190Sym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452411Scrutinee_1627452190Sym5KindInference ())
+data Let1627452411Scrutinee_1627452190Sym5 l_agfR
+                                            l_agfS
+                                            l_agfT
+                                            l_agfU
+                                            l_agfV
+                                            l_agfQ
+  = forall arg_agfW. KindOf (Apply (Let1627452411Scrutinee_1627452190Sym5 l_agfR l_agfS l_agfT l_agfU l_agfV) arg_agfW) ~ KindOf (Let1627452411Scrutinee_1627452190Sym6 l_agfR l_agfS l_agfT l_agfU l_agfV arg_agfW) =>
+    Let1627452411Scrutinee_1627452190Sym5KindInference
+type instance Apply (Let1627452411Scrutinee_1627452190Sym5 l_agfR l_agfS l_agfT l_agfU l_agfV) l_agfQ = Let1627452411Scrutinee_1627452190Sym6 l_agfR l_agfS l_agfT l_agfU l_agfV l_agfQ
+instance SuppressUnusedWarnings Let1627452411Scrutinee_1627452190Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452411Scrutinee_1627452190Sym4KindInference ())
+data Let1627452411Scrutinee_1627452190Sym4 l_agfL
+                                            l_agfM
+                                            l_agfN
+                                            l_agfO
+                                            l_agfK
+  = forall arg_agfP. KindOf (Apply (Let1627452411Scrutinee_1627452190Sym4 l_agfL l_agfM l_agfN l_agfO) arg_agfP) ~ KindOf (Let1627452411Scrutinee_1627452190Sym5 l_agfL l_agfM l_agfN l_agfO arg_agfP) =>
+    Let1627452411Scrutinee_1627452190Sym4KindInference
+type instance Apply (Let1627452411Scrutinee_1627452190Sym4 l_agfL l_agfM l_agfN l_agfO) l_agfK = Let1627452411Scrutinee_1627452190Sym5 l_agfL l_agfM l_agfN l_agfO l_agfK
+instance SuppressUnusedWarnings Let1627452411Scrutinee_1627452190Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452411Scrutinee_1627452190Sym3KindInference ())
+data Let1627452411Scrutinee_1627452190Sym3 l_agfG
+                                            l_agfH
+                                            l_agfI
+                                            l_agfF
+  = forall arg_agfJ. KindOf (Apply (Let1627452411Scrutinee_1627452190Sym3 l_agfG l_agfH l_agfI) arg_agfJ) ~ KindOf (Let1627452411Scrutinee_1627452190Sym4 l_agfG l_agfH l_agfI arg_agfJ) =>
+    Let1627452411Scrutinee_1627452190Sym3KindInference
+type instance Apply (Let1627452411Scrutinee_1627452190Sym3 l_agfG l_agfH l_agfI) l_agfF = Let1627452411Scrutinee_1627452190Sym4 l_agfG l_agfH l_agfI l_agfF
+instance SuppressUnusedWarnings Let1627452411Scrutinee_1627452190Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452411Scrutinee_1627452190Sym2KindInference ())
+data Let1627452411Scrutinee_1627452190Sym2 l_agfC l_agfD l_agfB
+  = forall arg_agfE. KindOf (Apply (Let1627452411Scrutinee_1627452190Sym2 l_agfC l_agfD) arg_agfE) ~ KindOf (Let1627452411Scrutinee_1627452190Sym3 l_agfC l_agfD arg_agfE) =>
+    Let1627452411Scrutinee_1627452190Sym2KindInference
+type instance Apply (Let1627452411Scrutinee_1627452190Sym2 l_agfC l_agfD) l_agfB = Let1627452411Scrutinee_1627452190Sym3 l_agfC l_agfD l_agfB
+instance SuppressUnusedWarnings Let1627452411Scrutinee_1627452190Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452411Scrutinee_1627452190Sym1KindInference ())
+data Let1627452411Scrutinee_1627452190Sym1 l_agfz l_agfy
+  = forall arg_agfA. KindOf (Apply (Let1627452411Scrutinee_1627452190Sym1 l_agfz) arg_agfA) ~ KindOf (Let1627452411Scrutinee_1627452190Sym2 l_agfz arg_agfA) =>
+    Let1627452411Scrutinee_1627452190Sym1KindInference
+type instance Apply (Let1627452411Scrutinee_1627452190Sym1 l_agfz) l_agfy = Let1627452411Scrutinee_1627452190Sym2 l_agfz l_agfy
+instance SuppressUnusedWarnings Let1627452411Scrutinee_1627452190Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452411Scrutinee_1627452190Sym0KindInference ())
+data Let1627452411Scrutinee_1627452190Sym0 l_agfw
+  = forall arg_agfx. KindOf (Apply Let1627452411Scrutinee_1627452190Sym0 arg_agfx) ~ KindOf (Let1627452411Scrutinee_1627452190Sym1 arg_agfx) =>
+    Let1627452411Scrutinee_1627452190Sym0KindInference
+type instance Apply Let1627452411Scrutinee_1627452190Sym0 l_agfw = Let1627452411Scrutinee_1627452190Sym1 l_agfw
+type family Let1627452411Scrutinee_1627452190 x1_agfk
+                                              x2_agfl
+                                              y_agfm
+                                              arg_1627452184_agff
+                                              arg_1627452186_agfg
+                                              arg_1627452188_agfh where
+  Let1627452411Scrutinee_1627452190 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh = Apply (Apply (:<$) y_agfm) x1_agfk
+type family Case_1627452445_agfY x1_agfk
+                                  x2_agfl
+                                  y_agfm
+                                  arg_1627452184_agff
+                                  arg_1627452186_agfg
+                                  arg_1627452188_agfh
+                                  t_agfZ where
+  Case_1627452445_agfY x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh 'True = '[]
+  Case_1627452445_agfY x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh 'False = Apply (Apply (:$) x1_agfk) '[]
+type family Case_1627452562_aghR x1_agfk
+                                  x2_agfl
+                                  y_agfm
+                                  x_aghP
+                                  arg_1627452184_agff
+                                  arg_1627452186_agfg
+                                  arg_1627452188_agfh
+                                  arg_1627452192_aghM
+                                  t_aghS where
+  Case_1627452562_aghR x1_agfk x2_agfl y_agfm x_aghP arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM 'True = Apply (Apply (:$) x_aghP) '[]
+  Case_1627452562_aghR x1_agfk x2_agfl y_agfm x_aghP arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM 'False = Apply (Apply (:$) x_aghP) (Apply (Let1627452448Go_upSym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh) (Apply (Apply (:+$) x_aghP) (Let1627452448DeltaSym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh)))
+type family Case_1627452559_aghO x1_agfk
+                                  x2_agfl
+                                  y_agfm
+                                  arg_1627452184_agff
+                                  arg_1627452186_agfg
+                                  arg_1627452188_agfh
+                                  arg_1627452192_aghM
+                                  t_aghT where
+  Case_1627452559_aghO x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM x_aghP = Case_1627452562_aghR x1_agfk x2_agfl y_agfm x_aghP arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM (Apply (Apply (:>$) x_aghP) (Let1627452448Y'Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh))
+type Let1627452448DeltaSym6 t_agg1
+                            t_agg2
+                            t_agg3
+                            t_agg4
+                            t_agg5
+                            t_agg6 =
+    Let1627452448Delta t_agg1 t_agg2 t_agg3 t_agg4 t_agg5 t_agg6
+instance SuppressUnusedWarnings Let1627452448DeltaSym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448DeltaSym5KindInference ())
+data Let1627452448DeltaSym5 l_aggs
+                            l_aggt
+                            l_aggu
+                            l_aggv
+                            l_aggw
+                            l_aggr
+  = forall arg_aggx. KindOf (Apply (Let1627452448DeltaSym5 l_aggs l_aggt l_aggu l_aggv l_aggw) arg_aggx) ~ KindOf (Let1627452448DeltaSym6 l_aggs l_aggt l_aggu l_aggv l_aggw arg_aggx) =>
+    Let1627452448DeltaSym5KindInference
+type instance Apply (Let1627452448DeltaSym5 l_aggs l_aggt l_aggu l_aggv l_aggw) l_aggr = Let1627452448DeltaSym6 l_aggs l_aggt l_aggu l_aggv l_aggw l_aggr
+instance SuppressUnusedWarnings Let1627452448DeltaSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448DeltaSym4KindInference ())
+data Let1627452448DeltaSym4 l_aggm l_aggn l_aggo l_aggp l_aggl
+  = forall arg_aggq. KindOf (Apply (Let1627452448DeltaSym4 l_aggm l_aggn l_aggo l_aggp) arg_aggq) ~ KindOf (Let1627452448DeltaSym5 l_aggm l_aggn l_aggo l_aggp arg_aggq) =>
+    Let1627452448DeltaSym4KindInference
+type instance Apply (Let1627452448DeltaSym4 l_aggm l_aggn l_aggo l_aggp) l_aggl = Let1627452448DeltaSym5 l_aggm l_aggn l_aggo l_aggp l_aggl
+instance SuppressUnusedWarnings Let1627452448DeltaSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448DeltaSym3KindInference ())
+data Let1627452448DeltaSym3 l_aggh l_aggi l_aggj l_aggg
+  = forall arg_aggk. KindOf (Apply (Let1627452448DeltaSym3 l_aggh l_aggi l_aggj) arg_aggk) ~ KindOf (Let1627452448DeltaSym4 l_aggh l_aggi l_aggj arg_aggk) =>
+    Let1627452448DeltaSym3KindInference
+type instance Apply (Let1627452448DeltaSym3 l_aggh l_aggi l_aggj) l_aggg = Let1627452448DeltaSym4 l_aggh l_aggi l_aggj l_aggg
+instance SuppressUnusedWarnings Let1627452448DeltaSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448DeltaSym2KindInference ())
+data Let1627452448DeltaSym2 l_aggd l_agge l_aggc
+  = forall arg_aggf. KindOf (Apply (Let1627452448DeltaSym2 l_aggd l_agge) arg_aggf) ~ KindOf (Let1627452448DeltaSym3 l_aggd l_agge arg_aggf) =>
+    Let1627452448DeltaSym2KindInference
+type instance Apply (Let1627452448DeltaSym2 l_aggd l_agge) l_aggc = Let1627452448DeltaSym3 l_aggd l_agge l_aggc
+instance SuppressUnusedWarnings Let1627452448DeltaSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448DeltaSym1KindInference ())
+data Let1627452448DeltaSym1 l_agga l_agg9
+  = forall arg_aggb. KindOf (Apply (Let1627452448DeltaSym1 l_agga) arg_aggb) ~ KindOf (Let1627452448DeltaSym2 l_agga arg_aggb) =>
+    Let1627452448DeltaSym1KindInference
+type instance Apply (Let1627452448DeltaSym1 l_agga) l_agg9 = Let1627452448DeltaSym2 l_agga l_agg9
+instance SuppressUnusedWarnings Let1627452448DeltaSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448DeltaSym0KindInference ())
+data Let1627452448DeltaSym0 l_agg7
+  = forall arg_agg8. KindOf (Apply Let1627452448DeltaSym0 arg_agg8) ~ KindOf (Let1627452448DeltaSym1 arg_agg8) =>
+    Let1627452448DeltaSym0KindInference
+type instance Apply Let1627452448DeltaSym0 l_agg7 = Let1627452448DeltaSym1 l_agg7
+type Let1627452448Y'Sym6 t_aggy
+                          t_aggz
+                          t_aggA
+                          t_aggB
+                          t_aggC
+                          t_aggD =
+    Let1627452448Y' t_aggy t_aggz t_aggA t_aggB t_aggC t_aggD
+instance SuppressUnusedWarnings Let1627452448Y'Sym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Y'Sym5KindInference ())
+data Let1627452448Y'Sym5 l_aggZ l_agh0 l_agh1 l_agh2 l_agh3 l_aggY
+  = forall arg_agh4. KindOf (Apply (Let1627452448Y'Sym5 l_aggZ l_agh0 l_agh1 l_agh2 l_agh3) arg_agh4) ~ KindOf (Let1627452448Y'Sym6 l_aggZ l_agh0 l_agh1 l_agh2 l_agh3 arg_agh4) =>
+    Let1627452448Y'Sym5KindInference
+type instance Apply (Let1627452448Y'Sym5 l_aggZ l_agh0 l_agh1 l_agh2 l_agh3) l_aggY = Let1627452448Y'Sym6 l_aggZ l_agh0 l_agh1 l_agh2 l_agh3 l_aggY
+instance SuppressUnusedWarnings Let1627452448Y'Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Y'Sym4KindInference ())
+data Let1627452448Y'Sym4 l_aggT l_aggU l_aggV l_aggW l_aggS
+  = forall arg_aggX. KindOf (Apply (Let1627452448Y'Sym4 l_aggT l_aggU l_aggV l_aggW) arg_aggX) ~ KindOf (Let1627452448Y'Sym5 l_aggT l_aggU l_aggV l_aggW arg_aggX) =>
+    Let1627452448Y'Sym4KindInference
+type instance Apply (Let1627452448Y'Sym4 l_aggT l_aggU l_aggV l_aggW) l_aggS = Let1627452448Y'Sym5 l_aggT l_aggU l_aggV l_aggW l_aggS
+instance SuppressUnusedWarnings Let1627452448Y'Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Y'Sym3KindInference ())
+data Let1627452448Y'Sym3 l_aggO l_aggP l_aggQ l_aggN
+  = forall arg_aggR. KindOf (Apply (Let1627452448Y'Sym3 l_aggO l_aggP l_aggQ) arg_aggR) ~ KindOf (Let1627452448Y'Sym4 l_aggO l_aggP l_aggQ arg_aggR) =>
+    Let1627452448Y'Sym3KindInference
+type instance Apply (Let1627452448Y'Sym3 l_aggO l_aggP l_aggQ) l_aggN = Let1627452448Y'Sym4 l_aggO l_aggP l_aggQ l_aggN
+instance SuppressUnusedWarnings Let1627452448Y'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Y'Sym2KindInference ())
+data Let1627452448Y'Sym2 l_aggK l_aggL l_aggJ
+  = forall arg_aggM. KindOf (Apply (Let1627452448Y'Sym2 l_aggK l_aggL) arg_aggM) ~ KindOf (Let1627452448Y'Sym3 l_aggK l_aggL arg_aggM) =>
+    Let1627452448Y'Sym2KindInference
+type instance Apply (Let1627452448Y'Sym2 l_aggK l_aggL) l_aggJ = Let1627452448Y'Sym3 l_aggK l_aggL l_aggJ
+instance SuppressUnusedWarnings Let1627452448Y'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Y'Sym1KindInference ())
+data Let1627452448Y'Sym1 l_aggH l_aggG
+  = forall arg_aggI. KindOf (Apply (Let1627452448Y'Sym1 l_aggH) arg_aggI) ~ KindOf (Let1627452448Y'Sym2 l_aggH arg_aggI) =>
+    Let1627452448Y'Sym1KindInference
+type instance Apply (Let1627452448Y'Sym1 l_aggH) l_aggG = Let1627452448Y'Sym2 l_aggH l_aggG
+instance SuppressUnusedWarnings Let1627452448Y'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Y'Sym0KindInference ())
+data Let1627452448Y'Sym0 l_aggE
+  = forall arg_aggF. KindOf (Apply Let1627452448Y'Sym0 arg_aggF) ~ KindOf (Let1627452448Y'Sym1 arg_aggF) =>
+    Let1627452448Y'Sym0KindInference
+type instance Apply Let1627452448Y'Sym0 l_aggE = Let1627452448Y'Sym1 l_aggE
+type Let1627452448Go_upSym7 t_agh5
+                            t_agh6
+                            t_agh7
+                            t_agh8
+                            t_agh9
+                            t_agha
+                            t_aghb =
+    Let1627452448Go_up t_agh5 t_agh6 t_agh7 t_agh8 t_agh9 t_agha t_aghb
+instance SuppressUnusedWarnings Let1627452448Go_upSym6 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Go_upSym6KindInference ())
+data Let1627452448Go_upSym6 l_aghE
+                            l_aghF
+                            l_aghG
+                            l_aghH
+                            l_aghI
+                            l_aghJ
+                            l_aghD
+  = forall arg_aghK. KindOf (Apply (Let1627452448Go_upSym6 l_aghE l_aghF l_aghG l_aghH l_aghI l_aghJ) arg_aghK) ~ KindOf (Let1627452448Go_upSym7 l_aghE l_aghF l_aghG l_aghH l_aghI l_aghJ arg_aghK) =>
+    Let1627452448Go_upSym6KindInference
+type instance Apply (Let1627452448Go_upSym6 l_aghE l_aghF l_aghG l_aghH l_aghI l_aghJ) l_aghD = Let1627452448Go_upSym7 l_aghE l_aghF l_aghG l_aghH l_aghI l_aghJ l_aghD
+instance SuppressUnusedWarnings Let1627452448Go_upSym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Go_upSym5KindInference ())
+data Let1627452448Go_upSym5 l_aghx
+                            l_aghy
+                            l_aghz
+                            l_aghA
+                            l_aghB
+                            l_aghw
+  = forall arg_aghC. KindOf (Apply (Let1627452448Go_upSym5 l_aghx l_aghy l_aghz l_aghA l_aghB) arg_aghC) ~ KindOf (Let1627452448Go_upSym6 l_aghx l_aghy l_aghz l_aghA l_aghB arg_aghC) =>
+    Let1627452448Go_upSym5KindInference
+type instance Apply (Let1627452448Go_upSym5 l_aghx l_aghy l_aghz l_aghA l_aghB) l_aghw = Let1627452448Go_upSym6 l_aghx l_aghy l_aghz l_aghA l_aghB l_aghw
+instance SuppressUnusedWarnings Let1627452448Go_upSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Go_upSym4KindInference ())
+data Let1627452448Go_upSym4 l_aghr l_aghs l_aght l_aghu l_aghq
+  = forall arg_aghv. KindOf (Apply (Let1627452448Go_upSym4 l_aghr l_aghs l_aght l_aghu) arg_aghv) ~ KindOf (Let1627452448Go_upSym5 l_aghr l_aghs l_aght l_aghu arg_aghv) =>
+    Let1627452448Go_upSym4KindInference
+type instance Apply (Let1627452448Go_upSym4 l_aghr l_aghs l_aght l_aghu) l_aghq = Let1627452448Go_upSym5 l_aghr l_aghs l_aght l_aghu l_aghq
+instance SuppressUnusedWarnings Let1627452448Go_upSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Go_upSym3KindInference ())
+data Let1627452448Go_upSym3 l_aghm l_aghn l_agho l_aghl
+  = forall arg_aghp. KindOf (Apply (Let1627452448Go_upSym3 l_aghm l_aghn l_agho) arg_aghp) ~ KindOf (Let1627452448Go_upSym4 l_aghm l_aghn l_agho arg_aghp) =>
+    Let1627452448Go_upSym3KindInference
+type instance Apply (Let1627452448Go_upSym3 l_aghm l_aghn l_agho) l_aghl = Let1627452448Go_upSym4 l_aghm l_aghn l_agho l_aghl
+instance SuppressUnusedWarnings Let1627452448Go_upSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Go_upSym2KindInference ())
+data Let1627452448Go_upSym2 l_aghi l_aghj l_aghh
+  = forall arg_aghk. KindOf (Apply (Let1627452448Go_upSym2 l_aghi l_aghj) arg_aghk) ~ KindOf (Let1627452448Go_upSym3 l_aghi l_aghj arg_aghk) =>
+    Let1627452448Go_upSym2KindInference
+type instance Apply (Let1627452448Go_upSym2 l_aghi l_aghj) l_aghh = Let1627452448Go_upSym3 l_aghi l_aghj l_aghh
+instance SuppressUnusedWarnings Let1627452448Go_upSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Go_upSym1KindInference ())
+data Let1627452448Go_upSym1 l_aghf l_aghe
+  = forall arg_aghg. KindOf (Apply (Let1627452448Go_upSym1 l_aghf) arg_aghg) ~ KindOf (Let1627452448Go_upSym2 l_aghf arg_aghg) =>
+    Let1627452448Go_upSym1KindInference
+type instance Apply (Let1627452448Go_upSym1 l_aghf) l_aghe = Let1627452448Go_upSym2 l_aghf l_aghe
+instance SuppressUnusedWarnings Let1627452448Go_upSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452448Go_upSym0KindInference ())
+data Let1627452448Go_upSym0 l_aghc
+  = forall arg_aghd. KindOf (Apply Let1627452448Go_upSym0 arg_aghd) ~ KindOf (Let1627452448Go_upSym1 arg_aghd) =>
+    Let1627452448Go_upSym0KindInference
+type instance Apply Let1627452448Go_upSym0 l_aghc = Let1627452448Go_upSym1 l_aghc
+type family Let1627452448Delta x1_agfk
+                                x2_agfl
+                                y_agfm
+                                arg_1627452184_agff
+                                arg_1627452186_agfg
+                                arg_1627452188_agfh where
+  Let1627452448Delta x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh = Apply (Apply (:-$) x2_agfl) x1_agfk
+type family Let1627452448Y' x1_agfk
+                            x2_agfl
+                            y_agfm
+                            arg_1627452184_agff
+                            arg_1627452186_agfg
+                            arg_1627452188_agfh where
+  Let1627452448Y' x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh = Apply (Apply (:-$) y_agfm) (Let1627452448DeltaSym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh)
+type family Let1627452448Go_up x1_agfk
+                                x2_agfl
+                                y_agfm
+                                arg_1627452184_agff
+                                arg_1627452186_agfg
+                                arg_1627452188_agfh
+                                a_aghL where
+  Let1627452448Go_up x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM = Case_1627452559_aghO x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM arg_1627452192_aghM
+type family Case_1627452409_agfo x1_agfk
+                                  x2_agfl
+                                  y_agfm
+                                  arg_1627452184_agff
+                                  arg_1627452186_agfg
+                                  arg_1627452188_agfh
+                                  t_aghU where
+  Case_1627452409_agfo x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh 'True = Case_1627452445_agfY x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh (Let1627452411Scrutinee_1627452190Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh)
+  Case_1627452409_agfo x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh 'False = Apply (Apply (:$) x1_agfk) (Apply (Let1627452448Go_upSym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh) x2_agfl)
+type family Case_1627452404_agfj arg_1627452184_agff
+                                  arg_1627452186_agfg
+                                  arg_1627452188_agfh
+                                  t_aghV where
+  Case_1627452404_agfj arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh '(x1_agfk,
+                                                                                      x2_agfl,
+                                                                                      y_agfm) = Case_1627452409_agfo x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh (Apply (Apply (:<$) y_agfm) x2_agfl)
+type family Case_1627452591_agik x1_agig
+                                  x2_agih
+                                  y_agii
+                                  arg_1627452178_agib
+                                  arg_1627452180_agic
+                                  arg_1627452182_agid
+                                  t_agil where
+  Case_1627452591_agik x1_agig x2_agih y_agii arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid 'True = Apply (Apply (Apply EfdtNatUpSym0 x1_agig) x2_agih) y_agii
+  Case_1627452591_agik x1_agig x2_agih y_agii arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid 'False = Apply (Apply (Apply EfdtNatDnSym0 x1_agig) x2_agih) y_agii
+type family Case_1627452586_agif arg_1627452178_agib
+                                  arg_1627452180_agic
+                                  arg_1627452182_agid
+                                  t_agim where
+  Case_1627452586_agif arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid '(x1_agig,
+                                                                                      x2_agih,
+                                                                                      y_agii) = Case_1627452591_agik x1_agig x2_agih y_agii arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid (Apply (Apply (:>=$) x2_agih) x1_agig)
+type Let1627452638Scrutinee_1627452176Sym5 t_agj5
+                                            t_agj6
+                                            t_agj7
+                                            t_agj8
+                                            t_agj9 =
+    Let1627452638Scrutinee_1627452176 t_agj5 t_agj6 t_agj7 t_agj8 t_agj9
+instance SuppressUnusedWarnings Let1627452638Scrutinee_1627452176Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452638Scrutinee_1627452176Sym4KindInference ())
+data Let1627452638Scrutinee_1627452176Sym4 l_agjp
+                                            l_agjq
+                                            l_agjr
+                                            l_agjs
+                                            l_agjo
+  = forall arg_agjt. KindOf (Apply (Let1627452638Scrutinee_1627452176Sym4 l_agjp l_agjq l_agjr l_agjs) arg_agjt) ~ KindOf (Let1627452638Scrutinee_1627452176Sym5 l_agjp l_agjq l_agjr l_agjs arg_agjt) =>
+    Let1627452638Scrutinee_1627452176Sym4KindInference
+type instance Apply (Let1627452638Scrutinee_1627452176Sym4 l_agjp l_agjq l_agjr l_agjs) l_agjo = Let1627452638Scrutinee_1627452176Sym5 l_agjp l_agjq l_agjr l_agjs l_agjo
+instance SuppressUnusedWarnings Let1627452638Scrutinee_1627452176Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452638Scrutinee_1627452176Sym3KindInference ())
+data Let1627452638Scrutinee_1627452176Sym3 l_agjk
+                                            l_agjl
+                                            l_agjm
+                                            l_agjj
+  = forall arg_agjn. KindOf (Apply (Let1627452638Scrutinee_1627452176Sym3 l_agjk l_agjl l_agjm) arg_agjn) ~ KindOf (Let1627452638Scrutinee_1627452176Sym4 l_agjk l_agjl l_agjm arg_agjn) =>
+    Let1627452638Scrutinee_1627452176Sym3KindInference
+type instance Apply (Let1627452638Scrutinee_1627452176Sym3 l_agjk l_agjl l_agjm) l_agjj = Let1627452638Scrutinee_1627452176Sym4 l_agjk l_agjl l_agjm l_agjj
+instance SuppressUnusedWarnings Let1627452638Scrutinee_1627452176Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452638Scrutinee_1627452176Sym2KindInference ())
+data Let1627452638Scrutinee_1627452176Sym2 l_agjg l_agjh l_agjf
+  = forall arg_agji. KindOf (Apply (Let1627452638Scrutinee_1627452176Sym2 l_agjg l_agjh) arg_agji) ~ KindOf (Let1627452638Scrutinee_1627452176Sym3 l_agjg l_agjh arg_agji) =>
+    Let1627452638Scrutinee_1627452176Sym2KindInference
+type instance Apply (Let1627452638Scrutinee_1627452176Sym2 l_agjg l_agjh) l_agjf = Let1627452638Scrutinee_1627452176Sym3 l_agjg l_agjh l_agjf
+instance SuppressUnusedWarnings Let1627452638Scrutinee_1627452176Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452638Scrutinee_1627452176Sym1KindInference ())
+data Let1627452638Scrutinee_1627452176Sym1 l_agjd l_agjc
+  = forall arg_agje. KindOf (Apply (Let1627452638Scrutinee_1627452176Sym1 l_agjd) arg_agje) ~ KindOf (Let1627452638Scrutinee_1627452176Sym2 l_agjd arg_agje) =>
+    Let1627452638Scrutinee_1627452176Sym1KindInference
+type instance Apply (Let1627452638Scrutinee_1627452176Sym1 l_agjd) l_agjc = Let1627452638Scrutinee_1627452176Sym2 l_agjd l_agjc
+instance SuppressUnusedWarnings Let1627452638Scrutinee_1627452176Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452638Scrutinee_1627452176Sym0KindInference ())
+data Let1627452638Scrutinee_1627452176Sym0 l_agja
+  = forall arg_agjb. KindOf (Apply Let1627452638Scrutinee_1627452176Sym0 arg_agjb) ~ KindOf (Let1627452638Scrutinee_1627452176Sym1 arg_agjb) =>
+    Let1627452638Scrutinee_1627452176Sym0KindInference
+type instance Apply Let1627452638Scrutinee_1627452176Sym0 l_agja = Let1627452638Scrutinee_1627452176Sym1 l_agja
+type family Let1627452638Scrutinee_1627452176 x0_agiA
+                                              y_agiB
+                                              x_agj3
+                                              arg_1627452172_agiw
+                                              arg_1627452174_agix where
+  Let1627452638Scrutinee_1627452176 x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix = Apply (Apply (:==$) x_agj3) y_agiB
+type family Case_1627452664_agjv x0_agiA
+                                  y_agiB
+                                  x_agj3
+                                  arg_1627452172_agiw
+                                  arg_1627452174_agix
+                                  t_agjw where
+  Case_1627452664_agjv x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix 'True = '[]
+  Case_1627452664_agjv x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix 'False = Apply (Let1627452610GoSym4 x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix) (Apply (Apply (:+$) x_agj3) (FromInteger 1))
+type Let1627452610GoSym5 t_agiD t_agiE t_agiF t_agiG t_agiH =
+    Let1627452610Go t_agiD t_agiE t_agiF t_agiG t_agiH
+instance SuppressUnusedWarnings Let1627452610GoSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452610GoSym4KindInference ())
+data Let1627452610GoSym4 l_agiX l_agiY l_agiZ l_agj0 l_agiW
+  = forall arg_agj1. KindOf (Apply (Let1627452610GoSym4 l_agiX l_agiY l_agiZ l_agj0) arg_agj1) ~ KindOf (Let1627452610GoSym5 l_agiX l_agiY l_agiZ l_agj0 arg_agj1) =>
+    Let1627452610GoSym4KindInference
+type instance Apply (Let1627452610GoSym4 l_agiX l_agiY l_agiZ l_agj0) l_agiW = Let1627452610GoSym5 l_agiX l_agiY l_agiZ l_agj0 l_agiW
+instance SuppressUnusedWarnings Let1627452610GoSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452610GoSym3KindInference ())
+data Let1627452610GoSym3 l_agiS l_agiT l_agiU l_agiR
+  = forall arg_agiV. KindOf (Apply (Let1627452610GoSym3 l_agiS l_agiT l_agiU) arg_agiV) ~ KindOf (Let1627452610GoSym4 l_agiS l_agiT l_agiU arg_agiV) =>
+    Let1627452610GoSym3KindInference
+type instance Apply (Let1627452610GoSym3 l_agiS l_agiT l_agiU) l_agiR = Let1627452610GoSym4 l_agiS l_agiT l_agiU l_agiR
+instance SuppressUnusedWarnings Let1627452610GoSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452610GoSym2KindInference ())
+data Let1627452610GoSym2 l_agiO l_agiP l_agiN
+  = forall arg_agiQ. KindOf (Apply (Let1627452610GoSym2 l_agiO l_agiP) arg_agiQ) ~ KindOf (Let1627452610GoSym3 l_agiO l_agiP arg_agiQ) =>
+    Let1627452610GoSym2KindInference
+type instance Apply (Let1627452610GoSym2 l_agiO l_agiP) l_agiN = Let1627452610GoSym3 l_agiO l_agiP l_agiN
+instance SuppressUnusedWarnings Let1627452610GoSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452610GoSym1KindInference ())
+data Let1627452610GoSym1 l_agiL l_agiK
+  = forall arg_agiM. KindOf (Apply (Let1627452610GoSym1 l_agiL) arg_agiM) ~ KindOf (Let1627452610GoSym2 l_agiL arg_agiM) =>
+    Let1627452610GoSym1KindInference
+type instance Apply (Let1627452610GoSym1 l_agiL) l_agiK = Let1627452610GoSym2 l_agiL l_agiK
+instance SuppressUnusedWarnings Let1627452610GoSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627452610GoSym0KindInference ())
+data Let1627452610GoSym0 l_agiI
+  = forall arg_agiJ. KindOf (Apply Let1627452610GoSym0 arg_agiJ) ~ KindOf (Let1627452610GoSym1 arg_agiJ) =>
+    Let1627452610GoSym0KindInference
+type instance Apply Let1627452610GoSym0 l_agiI = Let1627452610GoSym1 l_agiI
+type family Let1627452610Go x0_agiA
+                            y_agiB
+                            arg_1627452172_agiw
+                            arg_1627452174_agix
+                            a_agj2 where
+  Let1627452610Go x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix x_agj3 = Apply (Apply (:$) x_agj3) (Case_1627452664_agjv x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix (Let1627452638Scrutinee_1627452176Sym5 x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix))
+type family Case_1627452667_agjy x0_agiA
+                                  y_agiB
+                                  arg_1627452172_agiw
+                                  arg_1627452174_agix
+                                  t_agjz where
+  Case_1627452667_agjy x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix 'True = '[]
+  Case_1627452667_agjy x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix 'False = Apply (Let1627452610GoSym4 x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix) x0_agiA
+type family Case_1627452606_agiz arg_1627452172_agiw
+                                  arg_1627452174_agix
+                                  t_agjA where
+  Case_1627452606_agiz arg_1627452172_agiw arg_1627452174_agix '(x0_agiA,
+                                                                  y_agiB) = Case_1627452667_agjy x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix (Apply (Apply (:>$) x0_agiA) y_agiB)
+type EfdtNatDnSym3 (t_agc4 :: Nat)
+                    (t_agc5 :: Nat)
+                    (t_agc6 :: Nat) =
+    EfdtNatDn t_agc4 t_agc5 t_agc6
+instance SuppressUnusedWarnings EfdtNatDnSym2 where
+  suppressUnusedWarnings _ = snd ((,) EfdtNatDnSym2KindInference ())
+data EfdtNatDnSym2 (l_agcd :: Nat)
+                    (l_agce :: Nat)
+                    (l_agcc :: TyFun Nat [Nat])
+  = forall arg_agcf. KindOf (Apply (EfdtNatDnSym2 l_agcd l_agce) arg_agcf) ~ KindOf (EfdtNatDnSym3 l_agcd l_agce arg_agcf) =>
+    EfdtNatDnSym2KindInference
+type instance Apply (EfdtNatDnSym2 l_agcd l_agce) l_agcc = EfdtNatDnSym3 l_agcd l_agce l_agcc
+instance SuppressUnusedWarnings EfdtNatDnSym1 where
+  suppressUnusedWarnings _ = snd ((,) EfdtNatDnSym1KindInference ())
+data EfdtNatDnSym1 (l_agca :: Nat)
+                    (l_agc9 :: TyFun Nat (TyFun Nat [Nat] -> *))
+  = forall arg_agcb. KindOf (Apply (EfdtNatDnSym1 l_agca) arg_agcb) ~ KindOf (EfdtNatDnSym2 l_agca arg_agcb) =>
+    EfdtNatDnSym1KindInference
+type instance Apply (EfdtNatDnSym1 l_agca) l_agc9 = EfdtNatDnSym2 l_agca l_agc9
+instance SuppressUnusedWarnings EfdtNatDnSym0 where
+  suppressUnusedWarnings _ = snd ((,) EfdtNatDnSym0KindInference ())
+data EfdtNatDnSym0 (l_agc7 :: TyFun Nat (TyFun Nat (TyFun Nat [Nat]
+                                                    -> *)
+                                          -> *))
+  = forall arg_agc8. KindOf (Apply EfdtNatDnSym0 arg_agc8) ~ KindOf (EfdtNatDnSym1 arg_agc8) =>
+    EfdtNatDnSym0KindInference
+type instance Apply EfdtNatDnSym0 l_agc7 = EfdtNatDnSym1 l_agc7
+type EfdtNatUpSym3 (t_agf0 :: Nat)
+                    (t_agf1 :: Nat)
+                    (t_agf2 :: Nat) =
+    EfdtNatUp t_agf0 t_agf1 t_agf2
+instance SuppressUnusedWarnings EfdtNatUpSym2 where
+  suppressUnusedWarnings _ = snd ((,) EfdtNatUpSym2KindInference ())
+data EfdtNatUpSym2 (l_agf9 :: Nat)
+                    (l_agfa :: Nat)
+                    (l_agf8 :: TyFun Nat [Nat])
+  = forall arg_agfb. KindOf (Apply (EfdtNatUpSym2 l_agf9 l_agfa) arg_agfb) ~ KindOf (EfdtNatUpSym3 l_agf9 l_agfa arg_agfb) =>
+    EfdtNatUpSym2KindInference
+type instance Apply (EfdtNatUpSym2 l_agf9 l_agfa) l_agf8 = EfdtNatUpSym3 l_agf9 l_agfa l_agf8
+instance SuppressUnusedWarnings EfdtNatUpSym1 where
+  suppressUnusedWarnings _ = snd ((,) EfdtNatUpSym1KindInference ())
+data EfdtNatUpSym1 (l_agf6 :: Nat)
+                    (l_agf5 :: TyFun Nat (TyFun Nat [Nat] -> *))
+  = forall arg_agf7. KindOf (Apply (EfdtNatUpSym1 l_agf6) arg_agf7) ~ KindOf (EfdtNatUpSym2 l_agf6 arg_agf7) =>
+    EfdtNatUpSym1KindInference
+type instance Apply (EfdtNatUpSym1 l_agf6) l_agf5 = EfdtNatUpSym2 l_agf6 l_agf5
+instance SuppressUnusedWarnings EfdtNatUpSym0 where
+  suppressUnusedWarnings _ = snd ((,) EfdtNatUpSym0KindInference ())
+data EfdtNatUpSym0 (l_agf3 :: TyFun Nat (TyFun Nat (TyFun Nat [Nat]
+                                                    -> *)
+                                          -> *))
+  = forall arg_agf4. KindOf (Apply EfdtNatUpSym0 arg_agf4) ~ KindOf (EfdtNatUpSym1 arg_agf4) =>
+    EfdtNatUpSym0KindInference
+type instance Apply EfdtNatUpSym0 l_agf3 = EfdtNatUpSym1 l_agf3
+type EfdtNatSym3 (t_aghW :: Nat) (t_aghX :: Nat) (t_aghY :: Nat) =
+    EfdtNat t_aghW t_aghX t_aghY
+instance SuppressUnusedWarnings EfdtNatSym2 where
+  suppressUnusedWarnings _ = snd ((,) EfdtNatSym2KindInference ())
+data EfdtNatSym2 (l_agi5 :: Nat)
+                  (l_agi6 :: Nat)
+                  (l_agi4 :: TyFun Nat [Nat])
+  = forall arg_agi7. KindOf (Apply (EfdtNatSym2 l_agi5 l_agi6) arg_agi7) ~ KindOf (EfdtNatSym3 l_agi5 l_agi6 arg_agi7) =>
+    EfdtNatSym2KindInference
+type instance Apply (EfdtNatSym2 l_agi5 l_agi6) l_agi4 = EfdtNatSym3 l_agi5 l_agi6 l_agi4
+instance SuppressUnusedWarnings EfdtNatSym1 where
+  suppressUnusedWarnings _ = snd ((,) EfdtNatSym1KindInference ())
+data EfdtNatSym1 (l_agi2 :: Nat)
+                  (l_agi1 :: TyFun Nat (TyFun Nat [Nat] -> *))
+  = forall arg_agi3. KindOf (Apply (EfdtNatSym1 l_agi2) arg_agi3) ~ KindOf (EfdtNatSym2 l_agi2 arg_agi3) =>
+    EfdtNatSym1KindInference
+type instance Apply (EfdtNatSym1 l_agi2) l_agi1 = EfdtNatSym2 l_agi2 l_agi1
+instance SuppressUnusedWarnings EfdtNatSym0 where
+  suppressUnusedWarnings _ = snd ((,) EfdtNatSym0KindInference ())
+data EfdtNatSym0 (l_aghZ :: TyFun Nat (TyFun Nat (TyFun Nat [Nat]
+                                                  -> *)
+                                        -> *))
+  = forall arg_agi0. KindOf (Apply EfdtNatSym0 arg_agi0) ~ KindOf (EfdtNatSym1 arg_agi0) =>
+    EfdtNatSym0KindInference
+type instance Apply EfdtNatSym0 l_aghZ = EfdtNatSym1 l_aghZ
+type EftNatSym2 (t_agin :: Nat) (t_agio :: Nat) =
+    EftNat t_agin t_agio
+instance SuppressUnusedWarnings EftNatSym1 where
+  suppressUnusedWarnings _ = snd ((,) EftNatSym1KindInference ())
+data EftNatSym1 (l_agis :: Nat) (l_agir :: TyFun Nat [Nat])
+  = forall arg_agit. KindOf (Apply (EftNatSym1 l_agis) arg_agit) ~ KindOf (EftNatSym2 l_agis arg_agit) =>
+    EftNatSym1KindInference
+type instance Apply (EftNatSym1 l_agis) l_agir = EftNatSym2 l_agis l_agir
+instance SuppressUnusedWarnings EftNatSym0 where
+  suppressUnusedWarnings _ = snd ((,) EftNatSym0KindInference ())
+data EftNatSym0 (l_agip :: TyFun Nat (TyFun Nat [Nat] -> *))
+  = forall arg_agiq. KindOf (Apply EftNatSym0 arg_agiq) ~ KindOf (EftNatSym1 arg_agiq) =>
+    EftNatSym0KindInference
+type instance Apply EftNatSym0 l_agip = EftNatSym1 l_agip
+type family EfdtNatDn (a_agcg :: Nat)
+                      (a_agch :: Nat)
+                      (a_agci :: Nat) :: [Nat] where
+  EfdtNatDn arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl = Case_1627452222_agcn arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl (Apply (Apply (Apply Tuple3Sym0 arg_1627452194_agcj) arg_1627452196_agck) arg_1627452198_agcl)
+type family EfdtNatUp (a_agfc :: Nat)
+                      (a_agfd :: Nat)
+                      (a_agfe :: Nat) :: [Nat] where
+  EfdtNatUp arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh = Case_1627452404_agfj arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh (Apply (Apply (Apply Tuple3Sym0 arg_1627452184_agff) arg_1627452186_agfg) arg_1627452188_agfh)
+type family EfdtNat (a_agi8 :: Nat)
+                    (a_agi9 :: Nat)
+                    (a_agia :: Nat) :: [Nat] where
+  EfdtNat arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid = Case_1627452586_agif arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid (Apply (Apply (Apply Tuple3Sym0 arg_1627452178_agib) arg_1627452180_agic) arg_1627452182_agid)
+type family EftNat (a_agiu :: Nat) (a_agiv :: Nat) :: [Nat] where
+  EftNat arg_1627452172_agiw arg_1627452174_agix = Case_1627452606_agiz arg_1627452172_agiw arg_1627452174_agix (Apply (Apply Tuple2Sym0 arg_1627452172_agiw) arg_1627452174_agix)
+type SuccSym1 (t_agjD :: a_agb3) = Succ t_agjD
+instance SuppressUnusedWarnings SuccSym0 where
+  suppressUnusedWarnings _ = snd ((,) SuccSym0KindInference ())
+data SuccSym0 (l_agjE :: TyFun a_agb3 a_agb3)
+  = forall arg_agjF. KindOf (Apply SuccSym0 arg_agjF) ~ KindOf (SuccSym1 arg_agjF) =>
+    SuccSym0KindInference
+type instance Apply SuccSym0 l_agjE = SuccSym1 l_agjE
+type PredSym1 (t_agjH :: a_agb3) = Pred t_agjH
+instance SuppressUnusedWarnings PredSym0 where
+  suppressUnusedWarnings _ = snd ((,) PredSym0KindInference ())
+data PredSym0 (l_agjI :: TyFun a_agb3 a_agb3)
+  = forall arg_agjJ. KindOf (Apply PredSym0 arg_agjJ) ~ KindOf (PredSym1 arg_agjJ) =>
+    PredSym0KindInference
+type instance Apply PredSym0 l_agjI = PredSym1 l_agjI
+type ToEnumSym1 (t_agjL :: Nat) = ToEnum t_agjL
+instance SuppressUnusedWarnings ToEnumSym0 where
+  suppressUnusedWarnings _ = snd ((,) ToEnumSym0KindInference ())
+data ToEnumSym0 (l_agjM :: TyFun Nat a_agb3)
+  = forall arg_agjN. KindOf (Apply ToEnumSym0 arg_agjN) ~ KindOf (ToEnumSym1 arg_agjN) =>
+    ToEnumSym0KindInference
+type instance Apply ToEnumSym0 l_agjM = ToEnumSym1 l_agjM
+type FromEnumSym1 (t_agjP :: a_agb3) = FromEnum t_agjP
+instance SuppressUnusedWarnings FromEnumSym0 where
+  suppressUnusedWarnings _ = snd ((,) FromEnumSym0KindInference ())
+data FromEnumSym0 (l_agjQ :: TyFun a_agb3 Nat)
+  = forall arg_agjR. KindOf (Apply FromEnumSym0 arg_agjR) ~ KindOf (FromEnumSym1 arg_agjR) =>
+    FromEnumSym0KindInference
+type instance Apply FromEnumSym0 l_agjQ = FromEnumSym1 l_agjQ
+type EnumFromToSym2 (t_agjU :: a_agb3) (t_agjV :: a_agb3) =
+    EnumFromTo t_agjU t_agjV
+instance SuppressUnusedWarnings EnumFromToSym1 where
+  suppressUnusedWarnings _ = snd ((,) EnumFromToSym1KindInference ())
+data EnumFromToSym1 (l_agjZ :: a_agb3)
+                    (l_agjY :: TyFun a_agb3 [a_agb3])
+  = forall arg_agk0. KindOf (Apply (EnumFromToSym1 l_agjZ) arg_agk0) ~ KindOf (EnumFromToSym2 l_agjZ arg_agk0) =>
+    EnumFromToSym1KindInference
+type instance Apply (EnumFromToSym1 l_agjZ) l_agjY = EnumFromToSym2 l_agjZ l_agjY
+instance SuppressUnusedWarnings EnumFromToSym0 where
+  suppressUnusedWarnings _ = snd ((,) EnumFromToSym0KindInference ())
+data EnumFromToSym0 (l_agjW :: TyFun a_agb3 (TyFun a_agb3 [a_agb3]
+                                              -> *))
+  = forall arg_agjX. KindOf (Apply EnumFromToSym0 arg_agjX) ~ KindOf (EnumFromToSym1 arg_agjX) =>
+    EnumFromToSym0KindInference
+type instance Apply EnumFromToSym0 l_agjW = EnumFromToSym1 l_agjW
+type EnumFromThenToSym3 (t_agk4 :: a_agb3)
+                        (t_agk5 :: a_agb3)
+                        (t_agk6 :: a_agb3) =
+    EnumFromThenTo t_agk4 t_agk5 t_agk6
+instance SuppressUnusedWarnings EnumFromThenToSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromThenToSym2KindInference ())
+data EnumFromThenToSym2 (l_agkd :: a_agb3)
+                        (l_agke :: a_agb3)
+                        (l_agkc :: TyFun a_agb3 [a_agb3])
+  = forall arg_agkf. KindOf (Apply (EnumFromThenToSym2 l_agkd l_agke) arg_agkf) ~ KindOf (EnumFromThenToSym3 l_agkd l_agke arg_agkf) =>
+    EnumFromThenToSym2KindInference
+type instance Apply (EnumFromThenToSym2 l_agkd l_agke) l_agkc = EnumFromThenToSym3 l_agkd l_agke l_agkc
+instance SuppressUnusedWarnings EnumFromThenToSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromThenToSym1KindInference ())
+data EnumFromThenToSym1 (l_agka :: a_agb3)
+                        (l_agk9 :: TyFun a_agb3 (TyFun a_agb3 [a_agb3] -> *))
+  = forall arg_agkb. KindOf (Apply (EnumFromThenToSym1 l_agka) arg_agkb) ~ KindOf (EnumFromThenToSym2 l_agka arg_agkb) =>
+    EnumFromThenToSym1KindInference
+type instance Apply (EnumFromThenToSym1 l_agka) l_agk9 = EnumFromThenToSym2 l_agka l_agk9
+instance SuppressUnusedWarnings EnumFromThenToSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromThenToSym0KindInference ())
+data EnumFromThenToSym0 (l_agk7 :: TyFun a_agb3 (TyFun a_agb3 (TyFun a_agb3 [a_agb3]
+                                                                -> *)
+                                                  -> *))
+  = forall arg_agk8. KindOf (Apply EnumFromThenToSym0 arg_agk8) ~ KindOf (EnumFromThenToSym1 arg_agk8) =>
+    EnumFromThenToSym0KindInference
+type instance Apply EnumFromThenToSym0 l_agk7 = EnumFromThenToSym1 l_agk7
+type family Succ_1627452720_agkp (a_agkn :: a_agb3) :: a_agb3 where
+  Succ_1627452720_agkp a_1627452712_agkm = Apply (Apply (Apply (:.$) ToEnumSym0) (Apply (Apply (:.$) (Apply (:+$) (FromInteger 1))) FromEnumSym0)) a_1627452712_agkm
+type Succ_1627452720Sym1 (t_agkq :: a_agb3) =
+    Succ_1627452720_agkp t_agkq
+instance SuppressUnusedWarnings Succ_1627452720Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Succ_1627452720Sym0KindInference ())
+data Succ_1627452720Sym0 (l_agkr :: TyFun a_agb3 a_agb3)
+  = forall arg_agks. KindOf (Apply Succ_1627452720Sym0 arg_agks) ~ KindOf (Succ_1627452720Sym1 arg_agks) =>
+    Succ_1627452720Sym0KindInference
+type instance Apply Succ_1627452720Sym0 l_agkr = Succ_1627452720Sym1 l_agkr
+type family Pred_1627452733_agkC (a_agkA :: a_agb3) :: a_agb3 where
+  Pred_1627452733_agkC a_1627452725_agkz = Apply (Apply (Apply (:.$) ToEnumSym0) (Apply (Apply (:.$) (Apply SubtractSym0 (FromInteger 1))) FromEnumSym0)) a_1627452725_agkz
+type Pred_1627452733Sym1 (t_agkD :: a_agb3) =
+    Pred_1627452733_agkC t_agkD
+instance SuppressUnusedWarnings Pred_1627452733Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Pred_1627452733Sym0KindInference ())
+data Pred_1627452733Sym0 (l_agkE :: TyFun a_agb3 a_agb3)
+  = forall arg_agkF. KindOf (Apply Pred_1627452733Sym0 arg_agkF) ~ KindOf (Pred_1627452733Sym1 arg_agkF) =>
+    Pred_1627452733Sym0KindInference
+type instance Apply Pred_1627452733Sym0 l_agkE = Pred_1627452733Sym1 l_agkE
+type family EnumFromTo_1627452751_agkU (a_agkR :: a_agb3)
+                                        (a_agkS :: a_agb3) :: [a_agb3] where
+  EnumFromTo_1627452751_agkU x_agkP y_agkQ = Apply (Apply MapSym0 ToEnumSym0) (Apply (Apply EnumFromToSym0 (Apply FromEnumSym0 x_agkP)) (Apply FromEnumSym0 y_agkQ))
+type EnumFromTo_1627452751Sym2 (t_agkV :: a_agb3)
+                                (t_agkW :: a_agb3) =
+    EnumFromTo_1627452751_agkU t_agkV t_agkW
+instance SuppressUnusedWarnings EnumFromTo_1627452751Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromTo_1627452751Sym1KindInference ())
+data EnumFromTo_1627452751Sym1 (l_agl0 :: a_agb3)
+                                (l_agkZ :: TyFun a_agb3 [a_agb3])
+  = forall arg_agl1. KindOf (Apply (EnumFromTo_1627452751Sym1 l_agl0) arg_agl1) ~ KindOf (EnumFromTo_1627452751Sym2 l_agl0 arg_agl1) =>
+    EnumFromTo_1627452751Sym1KindInference
+type instance Apply (EnumFromTo_1627452751Sym1 l_agl0) l_agkZ = EnumFromTo_1627452751Sym2 l_agl0 l_agkZ
+instance SuppressUnusedWarnings EnumFromTo_1627452751Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromTo_1627452751Sym0KindInference ())
+data EnumFromTo_1627452751Sym0 (l_agkX :: TyFun a_agb3 (TyFun a_agb3 [a_agb3]
+                                                        -> *))
+  = forall arg_agkY. KindOf (Apply EnumFromTo_1627452751Sym0 arg_agkY) ~ KindOf (EnumFromTo_1627452751Sym1 arg_agkY) =>
+    EnumFromTo_1627452751Sym0KindInference
+type instance Apply EnumFromTo_1627452751Sym0 l_agkX = EnumFromTo_1627452751Sym1 l_agkX
+type family EnumFromThenTo_1627452781_aglo (a_aglk :: a_agb3)
+                                            (a_agll :: a_agb3)
+                                            (a_aglm :: a_agb3) :: [a_agb3] where
+  EnumFromThenTo_1627452781_aglo x1_aglh x2_agli y_aglj = Apply (Apply MapSym0 ToEnumSym0) (Apply (Apply (Apply EnumFromThenToSym0 (Apply FromEnumSym0 x1_aglh)) (Apply FromEnumSym0 x2_agli)) (Apply FromEnumSym0 y_aglj))
+type EnumFromThenTo_1627452781Sym3 (t_aglp :: a_agb3)
+                                    (t_aglq :: a_agb3)
+                                    (t_aglr :: a_agb3) =
+    EnumFromThenTo_1627452781_aglo t_aglp t_aglq t_aglr
+instance SuppressUnusedWarnings EnumFromThenTo_1627452781Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromThenTo_1627452781Sym2KindInference ())
+data EnumFromThenTo_1627452781Sym2 (l_agly :: a_agb3)
+                                    (l_aglz :: a_agb3)
+                                    (l_aglx :: TyFun a_agb3 [a_agb3])
+  = forall arg_aglA. KindOf (Apply (EnumFromThenTo_1627452781Sym2 l_agly l_aglz) arg_aglA) ~ KindOf (EnumFromThenTo_1627452781Sym3 l_agly l_aglz arg_aglA) =>
+    EnumFromThenTo_1627452781Sym2KindInference
+type instance Apply (EnumFromThenTo_1627452781Sym2 l_agly l_aglz) l_aglx = EnumFromThenTo_1627452781Sym3 l_agly l_aglz l_aglx
+instance SuppressUnusedWarnings EnumFromThenTo_1627452781Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromThenTo_1627452781Sym1KindInference ())
+data EnumFromThenTo_1627452781Sym1 (l_aglv :: a_agb3)
+                                    (l_aglu :: TyFun a_agb3 (TyFun a_agb3 [a_agb3] -> *))
+  = forall arg_aglw. KindOf (Apply (EnumFromThenTo_1627452781Sym1 l_aglv) arg_aglw) ~ KindOf (EnumFromThenTo_1627452781Sym2 l_aglv arg_aglw) =>
+    EnumFromThenTo_1627452781Sym1KindInference
+type instance Apply (EnumFromThenTo_1627452781Sym1 l_aglv) l_aglu = EnumFromThenTo_1627452781Sym2 l_aglv l_aglu
+instance SuppressUnusedWarnings EnumFromThenTo_1627452781Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromThenTo_1627452781Sym0KindInference ())
+data EnumFromThenTo_1627452781Sym0 (l_agls :: TyFun a_agb3 (TyFun a_agb3 (TyFun a_agb3 [a_agb3]
+                                                                          -> *)
+                                                            -> *))
+  = forall arg_aglt. KindOf (Apply EnumFromThenTo_1627452781Sym0 arg_aglt) ~ KindOf (EnumFromThenTo_1627452781Sym1 arg_aglt) =>
+    EnumFromThenTo_1627452781Sym0KindInference
+type instance Apply EnumFromThenTo_1627452781Sym0 l_agls = EnumFromThenTo_1627452781Sym1 l_agls
+class kproxy_agjB ~ 'KProxy => PEnum (kproxy_agjB :: KProxy a_agb3) where
+  type family Succ (arg_agjC :: a_agb3) :: a_agb3
+  type family Pred (arg_agjG :: a_agb3) :: a_agb3
+  type family ToEnum (arg_agjK :: Nat) :: a_agb3
+  type family FromEnum (arg_agjO :: a_agb3) :: Nat
+  type family EnumFromTo (arg_agjS :: a_agb3)
+                          (arg_agjT :: a_agb3) :: [a_agb3]
+  type family EnumFromThenTo (arg_agk1 :: a_agb3)
+                              (arg_agk2 :: a_agb3)
+                              (arg_agk3 :: a_agb3) :: [a_agb3]
+  type instance Succ (a_agkn :: a_agb3) = Apply Succ_1627452720Sym0 a_agkn
+  type instance Pred (a_agkA :: a_agb3) = Apply Pred_1627452733Sym0 a_agkA
+  type instance EnumFromTo (a_agkR :: a_agb3)
+              (a_agkS :: a_agb3) = Apply (Apply EnumFromTo_1627452751Sym0 a_agkR) a_agkS
+  type instance EnumFromThenTo (a_aglk :: a_agb3)
+                  (a_agll :: a_agb3)
+                  (a_aglm :: a_agb3) = Apply (Apply (Apply EnumFromThenTo_1627452781Sym0 a_aglk) a_agll) a_aglm
+type family Succ_1627452801_aglI (a_aglG :: Nat) :: Nat where
+  Succ_1627452801_aglI x_aglF = Apply (Apply (:+$) x_aglF) (FromInteger 1)
+type Succ_1627452801Sym1 (t_aglJ :: Nat) =
+    Succ_1627452801_aglI t_aglJ
+instance SuppressUnusedWarnings Succ_1627452801Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Succ_1627452801Sym0KindInference ())
+data Succ_1627452801Sym0 (l_aglK :: TyFun Nat Nat)
+  = forall arg_aglL. KindOf (Apply Succ_1627452801Sym0 arg_aglL) ~ KindOf (Succ_1627452801Sym1 arg_aglL) =>
+    Succ_1627452801Sym0KindInference
+type instance Apply Succ_1627452801Sym0 l_aglK = Succ_1627452801Sym1 l_aglK
+type family Pred_1627452812_aglT (a_aglR :: Nat) :: Nat where
+  Pred_1627452812_aglT x_aglQ = Apply (Apply (:-$) x_aglQ) (FromInteger 1)
+type Pred_1627452812Sym1 (t_aglU :: Nat) =
+    Pred_1627452812_aglT t_aglU
+instance SuppressUnusedWarnings Pred_1627452812Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Pred_1627452812Sym0KindInference ())
+data Pred_1627452812Sym0 (l_aglV :: TyFun Nat Nat)
+  = forall arg_aglW. KindOf (Apply Pred_1627452812Sym0 arg_aglW) ~ KindOf (Pred_1627452812Sym1 arg_aglW) =>
+    Pred_1627452812Sym0KindInference
+type instance Apply Pred_1627452812Sym0 l_aglV = Pred_1627452812Sym1 l_aglV
+type family ToEnum_1627452823_agm4 (a_agm2 :: Nat) :: Nat where
+  ToEnum_1627452823_agm4 x_agm1 = x_agm1
+type ToEnum_1627452823Sym1 (t_agm5 :: Nat) =
+    ToEnum_1627452823_agm4 t_agm5
+instance SuppressUnusedWarnings ToEnum_1627452823Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) ToEnum_1627452823Sym0KindInference ())
+data ToEnum_1627452823Sym0 (l_agm6 :: TyFun Nat Nat)
+  = forall arg_agm7. KindOf (Apply ToEnum_1627452823Sym0 arg_agm7) ~ KindOf (ToEnum_1627452823Sym1 arg_agm7) =>
+    ToEnum_1627452823Sym0KindInference
+type instance Apply ToEnum_1627452823Sym0 l_agm6 = ToEnum_1627452823Sym1 l_agm6
+type family FromEnum_1627452834_agmf (a_agmd :: Nat) :: Nat where
+  FromEnum_1627452834_agmf x_agmc = x_agmc
+type FromEnum_1627452834Sym1 (t_agmg :: Nat) =
+    FromEnum_1627452834_agmf t_agmg
+instance SuppressUnusedWarnings FromEnum_1627452834Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) FromEnum_1627452834Sym0KindInference ())
+data FromEnum_1627452834Sym0 (l_agmh :: TyFun Nat Nat)
+  = forall arg_agmi. KindOf (Apply FromEnum_1627452834Sym0 arg_agmi) ~ KindOf (FromEnum_1627452834Sym1 arg_agmi) =>
+    FromEnum_1627452834Sym0KindInference
+type instance Apply FromEnum_1627452834Sym0 l_agmh = FromEnum_1627452834Sym1 l_agmh
+type family EnumFromTo_1627452856_agmB (a_agmy :: Nat)
+                                        (a_agmz :: Nat) :: [Nat] where
+  EnumFromTo_1627452856_agmB a_1627452839_agmw a_1627452841_agmx = Apply (Apply EftNatSym0 a_1627452839_agmw) a_1627452841_agmx
+type EnumFromTo_1627452856Sym2 (t_agmC :: Nat) (t_agmD :: Nat) =
+    EnumFromTo_1627452856_agmB t_agmC t_agmD
+instance SuppressUnusedWarnings EnumFromTo_1627452856Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromTo_1627452856Sym1KindInference ())
+data EnumFromTo_1627452856Sym1 (l_agmH :: Nat)
+                                (l_agmG :: TyFun Nat [Nat])
+  = forall arg_agmI. KindOf (Apply (EnumFromTo_1627452856Sym1 l_agmH) arg_agmI) ~ KindOf (EnumFromTo_1627452856Sym2 l_agmH arg_agmI) =>
+    EnumFromTo_1627452856Sym1KindInference
+type instance Apply (EnumFromTo_1627452856Sym1 l_agmH) l_agmG = EnumFromTo_1627452856Sym2 l_agmH l_agmG
+instance SuppressUnusedWarnings EnumFromTo_1627452856Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromTo_1627452856Sym0KindInference ())
+data EnumFromTo_1627452856Sym0 (l_agmE :: TyFun Nat (TyFun Nat [Nat]
+                                                      -> *))
+  = forall arg_agmF. KindOf (Apply EnumFromTo_1627452856Sym0 arg_agmF) ~ KindOf (EnumFromTo_1627452856Sym1 arg_agmF) =>
+    EnumFromTo_1627452856Sym0KindInference
+type instance Apply EnumFromTo_1627452856Sym0 l_agmE = EnumFromTo_1627452856Sym1 l_agmE
+type family EnumFromThenTo_1627452892_agnb (a_agn7 :: Nat)
+                                            (a_agn8 :: Nat)
+                                            (a_agn9 :: Nat) :: [Nat] where
+  EnumFromThenTo_1627452892_agnb a_1627452865_agn4 a_1627452867_agn5 a_1627452869_agn6 = Apply (Apply (Apply EfdtNatSym0 a_1627452865_agn4) a_1627452867_agn5) a_1627452869_agn6
+type EnumFromThenTo_1627452892Sym3 (t_agnc :: Nat)
+                                    (t_agnd :: Nat)
+                                    (t_agne :: Nat) =
+    EnumFromThenTo_1627452892_agnb t_agnc t_agnd t_agne
+instance SuppressUnusedWarnings EnumFromThenTo_1627452892Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromThenTo_1627452892Sym2KindInference ())
+data EnumFromThenTo_1627452892Sym2 (l_agnl :: Nat)
+                                    (l_agnm :: Nat)
+                                    (l_agnk :: TyFun Nat [Nat])
+  = forall arg_agnn. KindOf (Apply (EnumFromThenTo_1627452892Sym2 l_agnl l_agnm) arg_agnn) ~ KindOf (EnumFromThenTo_1627452892Sym3 l_agnl l_agnm arg_agnn) =>
+    EnumFromThenTo_1627452892Sym2KindInference
+type instance Apply (EnumFromThenTo_1627452892Sym2 l_agnl l_agnm) l_agnk = EnumFromThenTo_1627452892Sym3 l_agnl l_agnm l_agnk
+instance SuppressUnusedWarnings EnumFromThenTo_1627452892Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromThenTo_1627452892Sym1KindInference ())
+data EnumFromThenTo_1627452892Sym1 (l_agni :: Nat)
+                                    (l_agnh :: TyFun Nat (TyFun Nat [Nat] -> *))
+  = forall arg_agnj. KindOf (Apply (EnumFromThenTo_1627452892Sym1 l_agni) arg_agnj) ~ KindOf (EnumFromThenTo_1627452892Sym2 l_agni arg_agnj) =>
+    EnumFromThenTo_1627452892Sym1KindInference
+type instance Apply (EnumFromThenTo_1627452892Sym1 l_agni) l_agnh = EnumFromThenTo_1627452892Sym2 l_agni l_agnh
+instance SuppressUnusedWarnings EnumFromThenTo_1627452892Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) EnumFromThenTo_1627452892Sym0KindInference ())
+data EnumFromThenTo_1627452892Sym0 (l_agnf :: TyFun Nat (TyFun Nat (TyFun Nat [Nat]
+                                                                    -> *)
+                                                          -> *))
+  = forall arg_agng. KindOf (Apply EnumFromThenTo_1627452892Sym0 arg_agng) ~ KindOf (EnumFromThenTo_1627452892Sym1 arg_agng) =>
+    EnumFromThenTo_1627452892Sym0KindInference
+type instance Apply EnumFromThenTo_1627452892Sym0 l_agnf = EnumFromThenTo_1627452892Sym1 l_agnf
+instance PEnum ('KProxy :: KProxy Nat) where
+  type Succ (a_aglG :: Nat) = Apply Succ_1627452801Sym0 a_aglG
+  type Pred (a_aglR :: Nat) = Apply Pred_1627452812Sym0 a_aglR
+  type ToEnum (a_agm2 :: Nat) = Apply ToEnum_1627452823Sym0 a_agm2
+  type FromEnum (a_agmd :: Nat) = Apply FromEnum_1627452834Sym0 a_agmd
+  type EnumFromTo (a_agmy :: Nat) (a_agmz :: Nat) = Apply (Apply EnumFromTo_1627452856Sym0 a_agmy) a_agmz
+  type EnumFromThenTo (a_agn7 :: Nat) (a_agn8 :: Nat) (a_agn9 :: Nat) = Apply (Apply (Apply EnumFromThenTo_1627452892Sym0 a_agn7) a_agn8) a_agn9
+sEfdtNatDn ::
+  forall (t_agno :: Nat) (t_agnp :: Nat) (t_agnq :: Nat).
+  Sing t_agno
+  -> Sing t_agnp
+      -> Sing t_agnq
+        -> Sing (Apply (Apply (Apply EfdtNatDnSym0 t_agno) t_agnp) t_agnq :: [Nat])
+sEfdtNatUp ::
+  forall (t_agnr :: Nat) (t_agns :: Nat) (t_agnt :: Nat).
+  Sing t_agnr
+  -> Sing t_agns
+      -> Sing t_agnt
+        -> Sing (Apply (Apply (Apply EfdtNatUpSym0 t_agnr) t_agns) t_agnt :: [Nat])
+sEfdtNat ::
+  forall (t_agnu :: Nat) (t_agnv :: Nat) (t_agnw :: Nat).
+  Sing t_agnu
+  -> Sing t_agnv
+      -> Sing t_agnw
+        -> Sing (Apply (Apply (Apply EfdtNatSym0 t_agnu) t_agnv) t_agnw :: [Nat])
+sEftNat ::
+  forall (t_agnx :: Nat) (t_agny :: Nat).
+  Sing t_agnx
+  -> Sing t_agny
+      -> Sing (Apply (Apply EftNatSym0 t_agnx) t_agny :: [Nat])
+sEfdtNatDn sArg_1627452194 sArg_1627452196 sArg_1627452198
+  = let
+      lambda_agnz ::
+        forall arg_1627452194_agcj
+                arg_1627452196_agck
+                arg_1627452198_agcl. (t_agno ~ arg_1627452194_agcj,
+                                      t_agnp ~ arg_1627452196_agck,
+                                      t_agnq ~ arg_1627452198_agcl) =>
+        Sing arg_1627452194_agcj
+        -> Sing arg_1627452196_agck
+            -> Sing arg_1627452198_agcl
+              -> Sing (Apply (Apply (Apply EfdtNatDnSym0 arg_1627452194_agcj) arg_1627452196_agck) arg_1627452198_agcl :: [Nat])
+      lambda_agnz
+        arg_1627452194_agnA
+        arg_1627452196_agnB
+        arg_1627452198_agnC
+        = case
+              applySing
+                (applySing
+                    (applySing
+                      (singFun3 (Proxy :: Proxy Tuple3Sym0) STuple3) arg_1627452194_agnA)
+                    arg_1627452196_agnB)
+                arg_1627452198_agnC
+          of {
+            STuple3 sX1 sX2 sY
+              -> let
+                    lambda_agnD ::
+                      forall x1_agco
+                            x2_agcp
+                            y_agcq. Apply (Apply (Apply Tuple3Sym0 x1_agco) x2_agcp) y_agcq ~ Apply (Apply (Apply Tuple3Sym0 arg_1627452194_agcj) arg_1627452196_agck) arg_1627452198_agcl =>
+                      Sing x1_agco
+                      -> Sing x2_agcp
+                        -> Sing y_agcq
+                            -> Sing (Case_1627452222_agcn arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl (Apply (Apply (Apply Tuple3Sym0 x1_agco) x2_agcp) y_agcq))
+                    lambda_agnD x1_agnE x2_agnF y_agnG
+                      = case
+                            applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:>$)) (%:>)) y_agnG) x2_agnF
+                        of {
+                          STrue
+                            -> let
+                                lambda_ago9 ::
+                                  TrueSym0 ~ Apply (Apply (:>$) y_agcq) x2_agcp =>
+                                  Sing (Case_1627452227_agcs x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl TrueSym0)
+                                lambda_ago9
+                                  = let
+                                      sScrutinee_1627452200 ::
+                                        Sing (Let1627452229Scrutinee_1627452200Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl)
+                                      sScrutinee_1627452200
+                                        = applySing
+                                            (applySing
+                                                (singFun2 (Proxy :: Proxy (:>$)) (%:>)) y_agnG)
+                                            x1_agnE
+                                    in  case sScrutinee_1627452200 of {
+                                          STrue
+                                            -> let
+                                                  lambda_agoa ::
+                                                    TrueSym0 ~ Let1627452229Scrutinee_1627452200Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl =>
+                                                    Sing (Case_1627452263_agd2 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl TrueSym0)
+                                                  lambda_agoa = SNil
+                                                in lambda_agoa;
+                                          SFalse
+                                            -> let
+                                                  lambda_agos ::
+                                                    FalseSym0 ~ Let1627452229Scrutinee_1627452200Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl =>
+                                                    Sing (Case_1627452263_agd2 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl FalseSym0)
+                                                  lambda_agos
+                                                    = applySing
+                                                        (applySing
+                                                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                          x1_agnE)
+                                                        SNil
+                                                in lambda_agos } ::
+                                          Sing (Case_1627452263_agd2 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl (Let1627452229Scrutinee_1627452200Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl))
+                              in lambda_ago9;
+                          SFalse
+                            -> let
+                                lambda_agot ::
+                                  FalseSym0 ~ Apply (Apply (:>$) y_agcq) x2_agcp =>
+                                  Sing (Case_1627452227_agcs x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl FalseSym0)
+                                lambda_agot
+                                  = let
+                                      sDelta ::
+                                        Sing (Let1627452266DeltaSym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl)
+                                      sY' ::
+                                        Sing (Let1627452266Y'Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl)
+                                      sGo_dn ::
+                                        forall arg_agou.
+                                        Sing arg_agou
+                                        -> Sing (Apply (Let1627452266Go_dnSym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl) arg_agou)
+                                      sDelta
+                                        = applySing
+                                            (applySing
+                                                (singFun2 (Proxy :: Proxy (:-$)) (%:-)) x2_agnF)
+                                            x1_agnE
+                                      sY'
+                                        = applySing
+                                            (applySing
+                                                (singFun2 (Proxy :: Proxy (:-$)) (%:-)) y_agnG)
+                                            sDelta
+                                      sGo_dn sArg_1627452202
+                                        = let
+                                            lambda_agoV ::
+                                              forall arg_1627452202_ageQ. arg_agou ~ arg_1627452202_ageQ =>
+                                              Sing arg_1627452202_ageQ
+                                              -> Sing (Apply (Let1627452266Go_dnSym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl) arg_1627452202_ageQ)
+                                            lambda_agoV arg_1627452202_agoW
+                                              = case arg_1627452202_agoW of {
+                                                  sX
+                                                    -> let
+                                                          lambda_agoX ::
+                                                            forall x_ageT. x_ageT ~ arg_1627452202_ageQ =>
+                                                            Sing x_ageT
+                                                            -> Sing (Case_1627452377_ageS x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ x_ageT)
+                                                          lambda_agoX x_agoY
+                                                            = case
+                                                                  applySing
+                                                                    (applySing
+                                                                      (singFun2
+                                                                          (Proxy :: Proxy (:<$))
+                                                                          (%:<))
+                                                                      x_agoY)
+                                                                    sY'
+                                                              of {
+                                                                STrue
+                                                                  -> let
+                                                                      lambda_agp1 ::
+                                                                        TrueSym0 ~ Apply (Apply (:<$) x_ageT) (Let1627452266Y'Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl) =>
+                                                                        Sing (Case_1627452380_ageV x1_agco x2_agcp y_agcq x_ageT arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ TrueSym0)
+                                                                      lambda_agp1
+                                                                        = applySing
+                                                                            (applySing
+                                                                                (singFun2
+                                                                                  (Proxy ::
+                                                                                      Proxy (:$))
+                                                                                  SCons)
+                                                                                x_agoY)
+                                                                            SNil
+                                                                    in lambda_agp1;
+                                                                SFalse
+                                                                  -> let
+                                                                      lambda_agp2 ::
+                                                                        FalseSym0 ~ Apply (Apply (:<$) x_ageT) (Let1627452266Y'Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl) =>
+                                                                        Sing (Case_1627452380_ageV x1_agco x2_agcp y_agcq x_ageT arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ FalseSym0)
+                                                                      lambda_agp2
+                                                                        = applySing
+                                                                            (applySing
+                                                                                (singFun2
+                                                                                  (Proxy ::
+                                                                                      Proxy (:$))
+                                                                                  SCons)
+                                                                                x_agoY)
+                                                                            (applySing
+                                                                                (singFun1
+                                                                                  (Proxy ::
+                                                                                      Proxy (Let1627452266Go_dnSym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl))
+                                                                                  sGo_dn)
+                                                                                (applySing
+                                                                                  (applySing
+                                                                                      (singFun2
+                                                                                        (Proxy ::
+                                                                                            Proxy (:+$))
+                                                                                        (%:+))
+                                                                                      x_agoY)
+                                                                                  sDelta))
+                                                                    in lambda_agp2 } ::
+                                                                Sing (Case_1627452380_ageV x1_agco x2_agcp y_agcq x_ageT arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ (Apply (Apply (:<$) x_ageT) (Let1627452266Y'Sym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl)))
+                                                        in lambda_agoX sX } ::
+                                                  Sing (Case_1627452377_ageS x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl arg_1627452202_ageQ arg_1627452202_ageQ)
+                                          in lambda_agoV sArg_1627452202
+                                    in
+                                      applySing
+                                        (applySing
+                                            (singFun2 (Proxy :: Proxy (:$)) SCons) x1_agnE)
+                                        (applySing
+                                            (singFun1
+                                              (Proxy ::
+                                                  Proxy (Let1627452266Go_dnSym6 x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl))
+                                              sGo_dn)
+                                            x2_agnF)
+                              in lambda_agot } ::
+                          Sing (Case_1627452227_agcs x1_agco x2_agcp y_agcq arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl (Apply (Apply (:>$) y_agcq) x2_agcp))
+                  in lambda_agnD sX1 sX2 sY } ::
+            Sing (Case_1627452222_agcn arg_1627452194_agcj arg_1627452196_agck arg_1627452198_agcl (Apply (Apply (Apply Tuple3Sym0 arg_1627452194_agcj) arg_1627452196_agck) arg_1627452198_agcl))
+    in lambda_agnz sArg_1627452194 sArg_1627452196 sArg_1627452198
+sEfdtNatUp sArg_1627452184 sArg_1627452186 sArg_1627452188
+  = let
+      lambda_agp5 ::
+        forall arg_1627452184_agff
+                arg_1627452186_agfg
+                arg_1627452188_agfh. (t_agnr ~ arg_1627452184_agff,
+                                      t_agns ~ arg_1627452186_agfg,
+                                      t_agnt ~ arg_1627452188_agfh) =>
+        Sing arg_1627452184_agff
+        -> Sing arg_1627452186_agfg
+            -> Sing arg_1627452188_agfh
+              -> Sing (Apply (Apply (Apply EfdtNatUpSym0 arg_1627452184_agff) arg_1627452186_agfg) arg_1627452188_agfh :: [Nat])
+      lambda_agp5
+        arg_1627452184_agp6
+        arg_1627452186_agp7
+        arg_1627452188_agp8
+        = case
+              applySing
+                (applySing
+                    (applySing
+                      (singFun3 (Proxy :: Proxy Tuple3Sym0) STuple3) arg_1627452184_agp6)
+                    arg_1627452186_agp7)
+                arg_1627452188_agp8
+          of {
+            STuple3 sX1 sX2 sY
+              -> let
+                    lambda_agp9 ::
+                      forall x1_agfk
+                            x2_agfl
+                            y_agfm. Apply (Apply (Apply Tuple3Sym0 x1_agfk) x2_agfl) y_agfm ~ Apply (Apply (Apply Tuple3Sym0 arg_1627452184_agff) arg_1627452186_agfg) arg_1627452188_agfh =>
+                      Sing x1_agfk
+                      -> Sing x2_agfl
+                        -> Sing y_agfm
+                            -> Sing (Case_1627452404_agfj arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh (Apply (Apply (Apply Tuple3Sym0 x1_agfk) x2_agfl) y_agfm))
+                    lambda_agp9 x1_agpa x2_agpb y_agpc
+                      = case
+                            applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:<$)) (%:<)) y_agpc) x2_agpb
+                        of {
+                          STrue
+                            -> let
+                                lambda_agpd ::
+                                  TrueSym0 ~ Apply (Apply (:<$) y_agfm) x2_agfl =>
+                                  Sing (Case_1627452409_agfo x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh TrueSym0)
+                                lambda_agpd
+                                  = let
+                                      sScrutinee_1627452190 ::
+                                        Sing (Let1627452411Scrutinee_1627452190Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh)
+                                      sScrutinee_1627452190
+                                        = applySing
+                                            (applySing
+                                                (singFun2 (Proxy :: Proxy (:<$)) (%:<)) y_agpc)
+                                            x1_agpa
+                                    in  case sScrutinee_1627452190 of {
+                                          STrue
+                                            -> let
+                                                  lambda_agpe ::
+                                                    TrueSym0 ~ Let1627452411Scrutinee_1627452190Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh =>
+                                                    Sing (Case_1627452445_agfY x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh TrueSym0)
+                                                  lambda_agpe = SNil
+                                                in lambda_agpe;
+                                          SFalse
+                                            -> let
+                                                  lambda_agpf ::
+                                                    FalseSym0 ~ Let1627452411Scrutinee_1627452190Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh =>
+                                                    Sing (Case_1627452445_agfY x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh FalseSym0)
+                                                  lambda_agpf
+                                                    = applySing
+                                                        (applySing
+                                                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                          x1_agpa)
+                                                        SNil
+                                                in lambda_agpf } ::
+                                          Sing (Case_1627452445_agfY x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh (Let1627452411Scrutinee_1627452190Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh))
+                              in lambda_agpd;
+                          SFalse
+                            -> let
+                                lambda_agpg ::
+                                  FalseSym0 ~ Apply (Apply (:<$) y_agfm) x2_agfl =>
+                                  Sing (Case_1627452409_agfo x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh FalseSym0)
+                                lambda_agpg
+                                  = let
+                                      sDelta ::
+                                        Sing (Let1627452448DeltaSym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh)
+                                      sY' ::
+                                        Sing (Let1627452448Y'Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh)
+                                      sGo_up ::
+                                        forall arg_agph.
+                                        Sing arg_agph
+                                        -> Sing (Apply (Let1627452448Go_upSym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh) arg_agph)
+                                      sDelta
+                                        = applySing
+                                            (applySing
+                                                (singFun2 (Proxy :: Proxy (:-$)) (%:-)) x2_agpb)
+                                            x1_agpa
+                                      sY'
+                                        = applySing
+                                            (applySing
+                                                (singFun2 (Proxy :: Proxy (:-$)) (%:-)) y_agpc)
+                                            sDelta
+                                      sGo_up sArg_1627452192
+                                        = let
+                                            lambda_agpi ::
+                                              forall arg_1627452192_aghM. arg_agph ~ arg_1627452192_aghM =>
+                                              Sing arg_1627452192_aghM
+                                              -> Sing (Apply (Let1627452448Go_upSym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh) arg_1627452192_aghM)
+                                            lambda_agpi arg_1627452192_agpj
+                                              = case arg_1627452192_agpj of {
+                                                  sX
+                                                    -> let
+                                                          lambda_agpk ::
+                                                            forall x_aghP. x_aghP ~ arg_1627452192_aghM =>
+                                                            Sing x_aghP
+                                                            -> Sing (Case_1627452559_aghO x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM x_aghP)
+                                                          lambda_agpk x_agpl
+                                                            = case
+                                                                  applySing
+                                                                    (applySing
+                                                                      (singFun2
+                                                                          (Proxy :: Proxy (:>$))
+                                                                          (%:>))
+                                                                      x_agpl)
+                                                                    sY'
+                                                              of {
+                                                                STrue
+                                                                  -> let
+                                                                      lambda_agpm ::
+                                                                        TrueSym0 ~ Apply (Apply (:>$) x_aghP) (Let1627452448Y'Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh) =>
+                                                                        Sing (Case_1627452562_aghR x1_agfk x2_agfl y_agfm x_aghP arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM TrueSym0)
+                                                                      lambda_agpm
+                                                                        = applySing
+                                                                            (applySing
+                                                                                (singFun2
+                                                                                  (Proxy ::
+                                                                                      Proxy (:$))
+                                                                                  SCons)
+                                                                                x_agpl)
+                                                                            SNil
+                                                                    in lambda_agpm;
+                                                                SFalse
+                                                                  -> let
+                                                                      lambda_agpn ::
+                                                                        FalseSym0 ~ Apply (Apply (:>$) x_aghP) (Let1627452448Y'Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh) =>
+                                                                        Sing (Case_1627452562_aghR x1_agfk x2_agfl y_agfm x_aghP arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM FalseSym0)
+                                                                      lambda_agpn
+                                                                        = applySing
+                                                                            (applySing
+                                                                                (singFun2
+                                                                                  (Proxy ::
+                                                                                      Proxy (:$))
+                                                                                  SCons)
+                                                                                x_agpl)
+                                                                            (applySing
+                                                                                (singFun1
+                                                                                  (Proxy ::
+                                                                                      Proxy (Let1627452448Go_upSym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh))
+                                                                                  sGo_up)
+                                                                                (applySing
+                                                                                  (applySing
+                                                                                      (singFun2
+                                                                                        (Proxy ::
+                                                                                            Proxy (:+$))
+                                                                                        (%:+))
+                                                                                      x_agpl)
+                                                                                  sDelta))
+                                                                    in lambda_agpn } ::
+                                                                Sing (Case_1627452562_aghR x1_agfk x2_agfl y_agfm x_aghP arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM (Apply (Apply (:>$) x_aghP) (Let1627452448Y'Sym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh)))
+                                                        in lambda_agpk sX } ::
+                                                  Sing (Case_1627452559_aghO x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh arg_1627452192_aghM arg_1627452192_aghM)
+                                          in lambda_agpi sArg_1627452192
+                                    in
+                                      applySing
+                                        (applySing
+                                            (singFun2 (Proxy :: Proxy (:$)) SCons) x1_agpa)
+                                        (applySing
+                                            (singFun1
+                                              (Proxy ::
+                                                  Proxy (Let1627452448Go_upSym6 x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh))
+                                              sGo_up)
+                                            x2_agpb)
+                              in lambda_agpg } ::
+                          Sing (Case_1627452409_agfo x1_agfk x2_agfl y_agfm arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh (Apply (Apply (:<$) y_agfm) x2_agfl))
+                  in lambda_agp9 sX1 sX2 sY } ::
+            Sing (Case_1627452404_agfj arg_1627452184_agff arg_1627452186_agfg arg_1627452188_agfh (Apply (Apply (Apply Tuple3Sym0 arg_1627452184_agff) arg_1627452186_agfg) arg_1627452188_agfh))
+    in lambda_agp5 sArg_1627452184 sArg_1627452186 sArg_1627452188
+sEfdtNat sArg_1627452178 sArg_1627452180 sArg_1627452182
+  = let
+      lambda_agpo ::
+        forall arg_1627452178_agib
+                arg_1627452180_agic
+                arg_1627452182_agid. (t_agnu ~ arg_1627452178_agib,
+                                      t_agnv ~ arg_1627452180_agic,
+                                      t_agnw ~ arg_1627452182_agid) =>
+        Sing arg_1627452178_agib
+        -> Sing arg_1627452180_agic
+            -> Sing arg_1627452182_agid
+              -> Sing (Apply (Apply (Apply EfdtNatSym0 arg_1627452178_agib) arg_1627452180_agic) arg_1627452182_agid :: [Nat])
+      lambda_agpo
+        arg_1627452178_agpp
+        arg_1627452180_agpq
+        arg_1627452182_agpr
+        = case
+              applySing
+                (applySing
+                    (applySing
+                      (singFun3 (Proxy :: Proxy Tuple3Sym0) STuple3) arg_1627452178_agpp)
+                    arg_1627452180_agpq)
+                arg_1627452182_agpr
+          of {
+            STuple3 sX1 sX2 sY
+              -> let
+                    lambda_agps ::
+                      forall x1_agig
+                            x2_agih
+                            y_agii. Apply (Apply (Apply Tuple3Sym0 x1_agig) x2_agih) y_agii ~ Apply (Apply (Apply Tuple3Sym0 arg_1627452178_agib) arg_1627452180_agic) arg_1627452182_agid =>
+                      Sing x1_agig
+                      -> Sing x2_agih
+                        -> Sing y_agii
+                            -> Sing (Case_1627452586_agif arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid (Apply (Apply (Apply Tuple3Sym0 x1_agig) x2_agih) y_agii))
+                    lambda_agps x1_agpt x2_agpu y_agpv
+                      = case
+                            applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:>=$)) (%:>=)) x2_agpu)
+                              x1_agpt
+                        of {
+                          STrue
+                            -> let
+                                lambda_agpy ::
+                                  TrueSym0 ~ Apply (Apply (:>=$) x2_agih) x1_agig =>
+                                  Sing (Case_1627452591_agik x1_agig x2_agih y_agii arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid TrueSym0)
+                                lambda_agpy
+                                  = applySing
+                                      (applySing
+                                          (applySing
+                                            (singFun3 (Proxy :: Proxy EfdtNatUpSym0) sEfdtNatUp)
+                                            x1_agpt)
+                                          x2_agpu)
+                                      y_agpv
+                              in lambda_agpy;
+                          SFalse
+                            -> let
+                                lambda_agpz ::
+                                  FalseSym0 ~ Apply (Apply (:>=$) x2_agih) x1_agig =>
+                                  Sing (Case_1627452591_agik x1_agig x2_agih y_agii arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid FalseSym0)
+                                lambda_agpz
+                                  = applySing
+                                      (applySing
+                                          (applySing
+                                            (singFun3 (Proxy :: Proxy EfdtNatDnSym0) sEfdtNatDn)
+                                            x1_agpt)
+                                          x2_agpu)
+                                      y_agpv
+                              in lambda_agpz } ::
+                          Sing (Case_1627452591_agik x1_agig x2_agih y_agii arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid (Apply (Apply (:>=$) x2_agih) x1_agig))
+                  in lambda_agps sX1 sX2 sY } ::
+            Sing (Case_1627452586_agif arg_1627452178_agib arg_1627452180_agic arg_1627452182_agid (Apply (Apply (Apply Tuple3Sym0 arg_1627452178_agib) arg_1627452180_agic) arg_1627452182_agid))
+    in lambda_agpo sArg_1627452178 sArg_1627452180 sArg_1627452182
+sEftNat sArg_1627452172 sArg_1627452174
+  = let
+      lambda_agpA ::
+        forall arg_1627452172_agiw
+                arg_1627452174_agix. (t_agnx ~ arg_1627452172_agiw,
+                                      t_agny ~ arg_1627452174_agix) =>
+        Sing arg_1627452172_agiw
+        -> Sing arg_1627452174_agix
+            -> Sing (Apply (Apply EftNatSym0 arg_1627452172_agiw) arg_1627452174_agix :: [Nat])
+      lambda_agpA arg_1627452172_agpB arg_1627452174_agpC
+        = case
+              applySing
+                (applySing
+                    (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) arg_1627452172_agpB)
+                arg_1627452174_agpC
+          of {
+            STuple2 sX0 sY
+              -> let
+                    lambda_agpD ::
+                      forall x0_agiA
+                            y_agiB. Apply (Apply Tuple2Sym0 x0_agiA) y_agiB ~ Apply (Apply Tuple2Sym0 arg_1627452172_agiw) arg_1627452174_agix =>
+                      Sing x0_agiA
+                      -> Sing y_agiB
+                        -> Sing (Case_1627452606_agiz arg_1627452172_agiw arg_1627452174_agix (Apply (Apply Tuple2Sym0 x0_agiA) y_agiB))
+                    lambda_agpD x0_agpE y_agpF
+                      = let
+                          sGo ::
+                            forall arg_agpG.
+                            Sing arg_agpG
+                            -> Sing (Apply (Let1627452610GoSym4 x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix) arg_agpG)
+                          sGo sX
+                            = let
+                                lambda_agpH ::
+                                  forall x_agj3. arg_agpG ~ x_agj3 =>
+                                  Sing x_agj3
+                                  -> Sing (Apply (Let1627452610GoSym4 x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix) x_agj3)
+                                lambda_agpH x_agpI
+                                  = applySing
+                                      (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_agpI)
+                                      (let
+                                        sScrutinee_1627452176 ::
+                                          Sing (Let1627452638Scrutinee_1627452176Sym5 x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix)
+                                        sScrutinee_1627452176
+                                          = applySing
+                                              (applySing
+                                                  (singFun2 (Proxy :: Proxy (:==$)) (%:==))
+                                                  x_agpI)
+                                              y_agpF
+                                      in  case sScrutinee_1627452176 of {
+                                            STrue
+                                              -> let
+                                                    lambda_agqd ::
+                                                      TrueSym0 ~ Let1627452638Scrutinee_1627452176Sym5 x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix =>
+                                                      Sing (Case_1627452664_agjv x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix TrueSym0)
+                                                    lambda_agqd = SNil
+                                                  in lambda_agqd;
+                                            SFalse
+                                              -> let
+                                                    lambda_agqe ::
+                                                      FalseSym0 ~ Let1627452638Scrutinee_1627452176Sym5 x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix =>
+                                                      Sing (Case_1627452664_agjv x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix FalseSym0)
+                                                    lambda_agqe
+                                                      = applySing
+                                                          (singFun1
+                                                            (Proxy ::
+                                                                Proxy (Let1627452610GoSym4 x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix))
+                                                            sGo)
+                                                          (applySing
+                                                            (applySing
+                                                                (singFun2
+                                                                  (Proxy :: Proxy (:+$)) (%:+))
+                                                                x_agpI)
+                                                            (sFromInteger (sing :: Sing 1)))
+                                                  in lambda_agqe } ::
+                                            Sing (Case_1627452664_agjv x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix (Let1627452638Scrutinee_1627452176Sym5 x0_agiA y_agiB x_agj3 arg_1627452172_agiw arg_1627452174_agix)))
+                              in lambda_agpH sX
+                        in  case
+                                applySing
+                                  (applySing (singFun2 (Proxy :: Proxy (:>$)) (%:>)) x0_agpE)
+                                  y_agpF
+                            of {
+                              STrue
+                                -> let
+                                    lambda_agqf ::
+                                      TrueSym0 ~ Apply (Apply (:>$) x0_agiA) y_agiB =>
+                                      Sing (Case_1627452667_agjy x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix TrueSym0)
+                                    lambda_agqf = SNil
+                                  in lambda_agqf;
+                              SFalse
+                                -> let
+                                    lambda_agqg ::
+                                      FalseSym0 ~ Apply (Apply (:>$) x0_agiA) y_agiB =>
+                                      Sing (Case_1627452667_agjy x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix FalseSym0)
+                                    lambda_agqg
+                                      = applySing
+                                          (singFun1
+                                              (Proxy ::
+                                                Proxy (Let1627452610GoSym4 x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix))
+                                              sGo)
+                                          x0_agpE
+                                  in lambda_agqg } ::
+                              Sing (Case_1627452667_agjy x0_agiA y_agiB arg_1627452172_agiw arg_1627452174_agix (Apply (Apply (:>$) x0_agiA) y_agiB))
+                  in lambda_agpD sX0 sY } ::
+            Sing (Case_1627452606_agiz arg_1627452172_agiw arg_1627452174_agix (Apply (Apply Tuple2Sym0 arg_1627452172_agiw) arg_1627452174_agix))
+    in lambda_agpA sArg_1627452172 sArg_1627452174
+class kproxy_agrc ~ 'KProxy => SEnum (kproxy_agrc :: KProxy a_agb3) where
+  sSucc ::
+    forall (t_agqh :: a_agb3).
+    Sing t_agqh -> Sing (Apply SuccSym0 t_agqh :: a_agb3)
+  sPred ::
+    forall (t_agqi :: a_agb3).
+    Sing t_agqi -> Sing (Apply PredSym0 t_agqi :: a_agb3)
+  sToEnum ::
+    forall (t_agqj :: Nat).
+    Sing t_agqj -> Sing (Apply ToEnumSym0 t_agqj :: a_agb3)
+  sFromEnum ::
+    forall (t_agqk :: a_agb3).
+    Sing t_agqk -> Sing (Apply FromEnumSym0 t_agqk :: Nat)
+  sEnumFromTo ::
+    forall (t_agql :: a_agb3) (t_agqm :: a_agb3).
+    Sing t_agql
+    -> Sing t_agqm
+        -> Sing (Apply (Apply EnumFromToSym0 t_agql) t_agqm :: [a_agb3])
+  sEnumFromThenTo ::
+    forall (t_agqn :: a_agb3) (t_agqo :: a_agb3) (t_agqp :: a_agb3).
+    Sing t_agqn
+    -> Sing t_agqo
+        -> Sing t_agqp
+          -> Sing (Apply (Apply (Apply EnumFromThenToSym0 t_agqn) t_agqo) t_agqp :: [a_agb3])
+  -- default sSucc ::
+  --           forall (t_agqh :: a_agb3). Apply SuccSym0 t_agqh ~ Apply Succ_1627452720Sym0 t_agqh =>
+  --           Sing t_agqh -> Sing (Apply SuccSym0 t_agqh :: a_agb3)
+  -- default sPred ::
+  --           forall (t_agqi :: a_agb3). Apply PredSym0 t_agqi ~ Apply Pred_1627452733Sym0 t_agqi =>
+  --           Sing t_agqi -> Sing (Apply PredSym0 t_agqi :: a_agb3)
+  -- default sEnumFromTo ::
+  --           forall (t_agql :: a_agb3)
+  --                   (t_agqm :: a_agb3). Apply (Apply EnumFromToSym0 t_agql) t_agqm ~ Apply (Apply EnumFromTo_1627452751Sym0 t_agql) t_agqm =>
+  --           Sing t_agql
+  --           -> Sing t_agqm
+  --               -> Sing (Apply (Apply EnumFromToSym0 t_agql) t_agqm :: [a_agb3])
+  -- default sEnumFromThenTo ::
+  --           forall (t_agqn :: a_agb3)
+  --                   (t_agqo :: a_agb3)
+  --                   (t_agqp :: a_agb3). Apply (Apply (Apply EnumFromThenToSym0 t_agqn) t_agqo) t_agqp ~ Apply (Apply (Apply EnumFromThenTo_1627452781Sym0 t_agqn) t_agqo) t_agqp =>
+  --           Sing t_agqn
+  --           -> Sing t_agqo
+  --               -> Sing t_agqp
+  --                 -> Sing (Apply (Apply (Apply EnumFromThenToSym0 t_agqn) t_agqo) t_agqp :: [a_agb3])
+  -- sSucc sA_1627452712
+  --   = let
+  --       lambda_agqq ::
+  --         forall a_1627452712_agkm. t_agqh ~ a_1627452712_agkm =>
+  --         Sing a_1627452712_agkm
+  --         -> Sing (Apply SuccSym0 a_1627452712_agkm :: a_agb3)
+  --       lambda_agqq a_1627452712_agqr
+  --         = applySing
+  --             (applySing
+  --                 (applySing
+  --                   (singFun3 (Proxy :: Proxy (:.$)) (%:.))
+  --                   (singFun1 (Proxy :: Proxy ToEnumSym0) sToEnum))
+  --                 (applySing
+  --                   (applySing
+  --                       (singFun3 (Proxy :: Proxy (:.$)) (%:.))
+  --                       (applySing
+  --                         (singFun2 (Proxy :: Proxy (:+$)) (%:+))
+  --                         (sFromInteger (sing :: Sing 1))))
+  --                   (singFun1 (Proxy :: Proxy FromEnumSym0) sFromEnum)))
+  --             a_1627452712_agqr
+  --     in lambda_agqq sA_1627452712
+  -- sPred sA_1627452725
+  --   = let
+  --       lambda_agqD ::
+  --         forall a_1627452725_agkz. t_agqi ~ a_1627452725_agkz =>
+  --         Sing a_1627452725_agkz
+  --         -> Sing (Apply PredSym0 a_1627452725_agkz :: a_agb3)
+  --       lambda_agqD a_1627452725_agqE
+  --         = applySing
+  --             (applySing
+  --                 (applySing
+  --                   (singFun3 (Proxy :: Proxy (:.$)) (%:.))
+  --                   (singFun1 (Proxy :: Proxy ToEnumSym0) sToEnum))
+  --                 (applySing
+  --                   (applySing
+  --                       (singFun3 (Proxy :: Proxy (:.$)) (%:.))
+  --                       (applySing
+  --                         (singFun2 (Proxy :: Proxy SubtractSym0) sSubtract)
+  --                         (sFromInteger (sing :: Sing 1))))
+  --                   (singFun1 (Proxy :: Proxy FromEnumSym0) sFromEnum)))
+  --             a_1627452725_agqE
+  --     in lambda_agqD sA_1627452725
+  -- sEnumFromTo sX sY
+  --   = let
+  --       lambda_agqL ::
+  --         forall x_agkP y_agkQ. (t_agql ~ x_agkP, t_agqm ~ y_agkQ) =>
+  --         Sing x_agkP
+  --         -> Sing y_agkQ
+  --             -> Sing (Apply (Apply EnumFromToSym0 x_agkP) y_agkQ :: [a_agb3])
+  --       lambda_agqL x_agqM y_agqN
+  --         = applySing
+  --             (applySing
+  --                 (singFun2 (Proxy :: Proxy MapSym0) sMap)
+  --                 (singFun1 (Proxy :: Proxy ToEnumSym0) sToEnum))
+  --             (applySing
+  --                 (applySing
+  --                   (singFun2 (Proxy :: Proxy EnumFromToSym0) sEnumFromTo)
+  --                   (applySing
+  --                       (singFun1 (Proxy :: Proxy FromEnumSym0) sFromEnum) x_agqM))
+  --                 (applySing
+  --                   (singFun1 (Proxy :: Proxy FromEnumSym0) sFromEnum) y_agqN))
+  --     in lambda_agqL sX sY
+  -- sEnumFromThenTo sX1 sX2 sY
+  --   = let
+  --       lambda_agr7 ::
+  --         forall x1_aglh x2_agli y_aglj. (t_agqn ~ x1_aglh,
+  --                                         t_agqo ~ x2_agli,
+  --                                         t_agqp ~ y_aglj) =>
+  --         Sing x1_aglh
+  --         -> Sing x2_agli
+  --             -> Sing y_aglj
+  --               -> Sing (Apply (Apply (Apply EnumFromThenToSym0 x1_aglh) x2_agli) y_aglj :: [a_agb3])
+  --       lambda_agr7 x1_agr8 x2_agr9 y_agra
+  --         = applySing
+  --             (applySing
+  --                 (singFun2 (Proxy :: Proxy MapSym0) sMap)
+  --                 (singFun1 (Proxy :: Proxy ToEnumSym0) sToEnum))
+  --             (applySing
+  --                 (applySing
+  --                   (applySing
+  --                       (singFun3 (Proxy :: Proxy EnumFromThenToSym0) sEnumFromThenTo)
+  --                       (applySing
+  --                         (singFun1 (Proxy :: Proxy FromEnumSym0) sFromEnum) x1_agr8))
+  --                   (applySing
+  --                       (singFun1 (Proxy :: Proxy FromEnumSym0) sFromEnum) x2_agr9))
+  --                 (applySing
+  --                   (singFun1 (Proxy :: Proxy FromEnumSym0) sFromEnum) y_agra))
+  --     in lambda_agr7 sX1 sX2 sY
+instance SEnum ('KProxy :: KProxy Nat) where
+  sSucc ::
+    forall (t_agrd :: Nat).
+    Sing t_agrd -> Sing (Apply SuccSym0 t_agrd :: Nat)
+  sPred ::
+    forall (t_agrg :: Nat).
+    Sing t_agrg -> Sing (Apply PredSym0 t_agrg :: Nat)
+  sToEnum ::
+    forall (t_agrj :: Nat).
+    Sing t_agrj -> Sing (Apply ToEnumSym0 t_agrj :: Nat)
+  sFromEnum ::
+    forall (t_agrm :: Nat).
+    Sing t_agrm -> Sing (Apply FromEnumSym0 t_agrm :: Nat)
+  sEnumFromTo ::
+    forall (t_agrp :: Nat) (t_agrq :: Nat).
+    Sing t_agrp
+    -> Sing t_agrq
+        -> Sing (Apply (Apply EnumFromToSym0 t_agrp) t_agrq :: [Nat])
+  sEnumFromThenTo ::
+    forall (t_agru :: Nat) (t_agrv :: Nat) (t_agrw :: Nat).
+    Sing t_agru
+    -> Sing t_agrv
+        -> Sing t_agrw
+          -> Sing (Apply (Apply (Apply EnumFromThenToSym0 t_agru) t_agrv) t_agrw :: [Nat])
+  sSucc sX
+    = let
+        lambda_agre ::
+          forall x_aglF. t_agrd ~ x_aglF =>
+          Sing x_aglF -> Sing (Apply SuccSym0 x_aglF :: Nat)
+        lambda_agre x_agrf
+          = applySing
+              (applySing (singFun2 (Proxy :: Proxy (:+$)) (%:+)) x_agrf)
+              (sFromInteger (sing :: Sing 1))
+      in lambda_agre sX
+  sPred sX
+    = let
+        lambda_agrh ::
+          forall x_aglQ. t_agrg ~ x_aglQ =>
+          Sing x_aglQ -> Sing (Apply PredSym0 x_aglQ :: Nat)
+        lambda_agrh x_agri
+          = applySing
+              (applySing (singFun2 (Proxy :: Proxy (:-$)) (%:-)) x_agri)
+              (sFromInteger (sing :: Sing 1))
+      in lambda_agrh sX
+  sToEnum sX
+    = let
+        lambda_agrk ::
+          forall x_agm1. t_agrj ~ x_agm1 =>
+          Sing x_agm1 -> Sing (Apply ToEnumSym0 x_agm1 :: Nat)
+        lambda_agrk x_agrl = x_agrl
+      in lambda_agrk sX
+  sFromEnum sX
+    = let
+        lambda_agrn ::
+          forall x_agmc. t_agrm ~ x_agmc =>
+          Sing x_agmc -> Sing (Apply FromEnumSym0 x_agmc :: Nat)
+        lambda_agrn x_agro = x_agro
+      in lambda_agrn sX
+  sEnumFromTo sA_1627452839 sA_1627452841
+    = let
+        lambda_agrr ::
+          forall a_1627452839_agmw
+                  a_1627452841_agmx. (t_agrp ~ a_1627452839_agmw,
+                                      t_agrq ~ a_1627452841_agmx) =>
+          Sing a_1627452839_agmw
+          -> Sing a_1627452841_agmx
+              -> Sing (Apply (Apply EnumFromToSym0 a_1627452839_agmw) a_1627452841_agmx :: [Nat])
+        lambda_agrr a_1627452839_agrs a_1627452841_agrt
+          = applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy EftNatSym0) sEftNat) a_1627452839_agrs)
+              a_1627452841_agrt
+      in lambda_agrr sA_1627452839 sA_1627452841
+  sEnumFromThenTo sA_1627452865 sA_1627452867 sA_1627452869
+    = let
+        lambda_agrx ::
+          forall a_1627452865_agn4
+                  a_1627452867_agn5
+                  a_1627452869_agn6. (t_agru ~ a_1627452865_agn4,
+                                      t_agrv ~ a_1627452867_agn5,
+                                      t_agrw ~ a_1627452869_agn6) =>
+          Sing a_1627452865_agn4
+          -> Sing a_1627452867_agn5
+              -> Sing a_1627452869_agn6
+                -> Sing (Apply (Apply (Apply EnumFromThenToSym0 a_1627452865_agn4) a_1627452867_agn5) a_1627452869_agn6 :: [Nat])
+        lambda_agrx a_1627452865_agry a_1627452867_agrz a_1627452869_agrA
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy EfdtNatSym0) sEfdtNat) a_1627452865_agry)
+                  a_1627452867_agrz)
+              a_1627452869_agrA
+      in lambda_agrx sA_1627452865 sA_1627452867 sA_1627452869
 
-      -- The following use infinite lists, and are not promotable:
-      -- -- | Used in Haskell's translation of @[n..]@.
-      -- enumFrom            :: a -> [a]
-      -- -- | Used in Haskell's translation of @[n,n'..]@.
-      -- enumFromThen        :: a -> a -> [a]
-
-      -- | Used in Haskell's translation of @[n..m]@.
-      enumFromTo          :: a -> a -> [a]
-      -- | Used in Haskell's translation of @[n,n'..m]@.
-      enumFromThenTo      :: a -> a -> a -> [a]
-
-      succ                   = toEnum . (1 +)  . fromEnum
-      pred                   = toEnum . (subtract 1) . fromEnum
-      -- enumFrom x             = map toEnum [fromEnum x ..]
-      -- enumFromThen x y       = map toEnum [fromEnum x, fromEnum y ..]
-      enumFromTo x y         = map toEnum [fromEnum x .. fromEnum y]
-      enumFromThenTo x1 x2 y = map toEnum [fromEnum x1, fromEnum x2 .. fromEnum y]
-
-  -- Nat instance for Enum
-  eftNat :: Nat -> Nat -> [Nat]
-  -- [x1..x2]
-  eftNat x0 y | (x0 > y)  = []
-              | otherwise = go x0
-                 where
-                   go x = x : if (x == y) then [] else go (x + 1)
-
-  efdtNat :: Nat -> Nat -> Nat -> [Nat]
-  -- [x1,x2..y]
-  efdtNat x1 x2 y
-   | x2 >= x1  = efdtNatUp x1 x2 y
-   | otherwise = efdtNatDn x1 x2 y
-
-  -- Requires x2 >= x1
-  efdtNatUp :: Nat -> Nat -> Nat -> [Nat]
-  efdtNatUp x1 x2 y    -- Be careful about overflow!
-   | y < x2    = if y < x1 then [] else [x1]
-   | otherwise = -- Common case: x1 <= x2 <= y
-                 let delta = x2 - x1 -- >= 0
-                     y' = y - delta  -- x1 <= y' <= y; hence y' is representable
-
-                     -- Invariant: x <= y
-                     -- Note that: z <= y' => z + delta won't overflow
-                     -- so we are guaranteed not to overflow if/when we recurse
-                     go_up x | x > y'    = [x]
-                             | otherwise = x : go_up (x + delta)
-                 in x1 : go_up x2
-
-  -- Requires x2 <= x1
-  efdtNatDn :: Nat -> Nat -> Nat -> [Nat]
-  efdtNatDn x1 x2 y    -- Be careful about underflow!
-   | y > x2    = if y > x1 then [] else [x1]
-   | otherwise = -- Common case: x1 >= x2 >= y
-                 let delta = x2 - x1 -- <= 0
-                     y' = y - delta  -- y <= y' <= x1; hence y' is representable
-
-                     -- Invariant: x >= y
-                     -- Note that: z >= y' => z + delta won't underflow
-                     -- so we are guaranteed not to underflow if/when we recurse
-                     go_dn x | x < y'    = [x]
-                             | otherwise = x : go_dn (x + delta)
-     in x1 : go_dn x2
-
-  instance  Enum Nat  where
-      succ x = x + 1
-      pred x = x - 1
-
-      toEnum   x = x
-      fromEnum x = x
-
-      enumFromTo = eftNat
-      enumFromThenTo = efdtNat
-  |])
-
-$(singEnumInstances enumBasicTypes)
+type family Case_1627477700_amPj n_amPf t_amPk where
+  Case_1627477700_amPj n_amPf 'True = TrueSym0
+  Case_1627477700_amPj n_amPf 'False = Apply ErrorSym0 "toEnum: bad argument"
+type family Case_1627477698_amPh n_amPf t_amPl where
+  Case_1627477698_amPh n_amPf 'True = FalseSym0
+  Case_1627477698_amPh n_amPf 'False = Case_1627477700_amPj n_amPf (Apply (Apply (:==$) n_amPf) (FromInteger 1))
+type family ToEnum_1627477705_amPo (a_amPm :: Nat) :: Bool where
+  ToEnum_1627477705_amPo n_amPf = Case_1627477698_amPh n_amPf (Apply (Apply (:==$) n_amPf) (FromInteger 0))
+type ToEnum_1627477705Sym1 (t_amPp :: Nat) =
+    ToEnum_1627477705_amPo t_amPp
+instance SuppressUnusedWarnings ToEnum_1627477705Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) ToEnum_1627477705Sym0KindInference ())
+data ToEnum_1627477705Sym0 (l_amPq :: TyFun Nat Bool)
+  = forall arg_amPr. KindOf (Apply ToEnum_1627477705Sym0 arg_amPr) ~ KindOf (ToEnum_1627477705Sym1 arg_amPr) =>
+    ToEnum_1627477705Sym0KindInference
+type instance Apply ToEnum_1627477705Sym0 l_amPq = ToEnum_1627477705Sym1 l_amPq
+type family FromEnum_1627477715_amPy (a_amPw :: Bool) :: Nat where
+  FromEnum_1627477715_amPy 'False = FromInteger 0
+  FromEnum_1627477715_amPy 'True = FromInteger 1
+type FromEnum_1627477715Sym1 (t_amPz :: Bool) =
+    FromEnum_1627477715_amPy t_amPz
+instance SuppressUnusedWarnings FromEnum_1627477715Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) FromEnum_1627477715Sym0KindInference ())
+data FromEnum_1627477715Sym0 (l_amPA :: TyFun Bool Nat)
+  = forall arg_amPB. KindOf (Apply FromEnum_1627477715Sym0 arg_amPB) ~ KindOf (FromEnum_1627477715Sym1 arg_amPB) =>
+    FromEnum_1627477715Sym0KindInference
+type instance Apply FromEnum_1627477715Sym0 l_amPA = FromEnum_1627477715Sym1 l_amPA
+instance PEnum ('KProxy :: KProxy Bool) where
+  type ToEnum (a_amPm :: Nat) = Apply ToEnum_1627477705Sym0 a_amPm
+  type FromEnum (a_amPw :: Bool) = Apply FromEnum_1627477715Sym0 a_amPw
+instance SEnum ('KProxy :: KProxy Bool) where
+  sToEnum ::
+    forall (t_agqj :: Nat).
+    Sing t_agqj
+    -> Sing (Apply (ToEnumSym0 :: TyFun Nat Bool -> *) t_agqj :: Bool)
+  sFromEnum ::
+    forall (t_agqk :: Bool).
+    Sing t_agqk
+    -> Sing (Apply (FromEnumSym0 :: TyFun Bool Nat -> *) t_agqk :: Nat)
+  sToEnum sN
+    = let
+        lambda_amPC ::
+          forall n_amPf. t_agqj ~ n_amPf =>
+          Sing n_amPf -> Sing (Apply ToEnumSym0 n_amPf :: Bool)
+        lambda_amPC n_amPD
+          = case
+                applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_amPD)
+                  (sFromInteger (sing :: Sing 0))
+            of {
+              STrue
+                -> let
+                      lambda_amPE ::
+                        TrueSym0 ~ Apply (Apply (:==$) n_amPf) (FromInteger 0) =>
+                        Sing (Case_1627477698_amPh n_amPf TrueSym0)
+                      lambda_amPE = SFalse
+                    in lambda_amPE;
+              SFalse
+                -> let
+                      lambda_amPF ::
+                        FalseSym0 ~ Apply (Apply (:==$) n_amPf) (FromInteger 0) =>
+                        Sing (Case_1627477698_amPh n_amPf FalseSym0)
+                      lambda_amPF
+                        = case
+                              applySing
+                                (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_amPD)
+                                (sFromInteger (sing :: Sing 1))
+                          of {
+                            STrue
+                              -> let
+                                  lambda_amPG ::
+                                    TrueSym0 ~ Apply (Apply (:==$) n_amPf) (FromInteger 1) =>
+                                    Sing (Case_1627477700_amPj n_amPf TrueSym0)
+                                  lambda_amPG = STrue
+                                in lambda_amPG;
+                            SFalse
+                              -> let
+                                  lambda_amPH ::
+                                    FalseSym0 ~ Apply (Apply (:==$) n_amPf) (FromInteger 1) =>
+                                    Sing (Case_1627477700_amPj n_amPf FalseSym0)
+                                  lambda_amPH = sError (sing :: Sing "toEnum: bad argument")
+                                in lambda_amPH } ::
+                            Sing (Case_1627477700_amPj n_amPf (Apply (Apply (:==$) n_amPf) (FromInteger 1)))
+                    in lambda_amPF } ::
+              Sing (Case_1627477698_amPh n_amPf (Apply (Apply (:==$) n_amPf) (FromInteger 0)))
+      in lambda_amPC sN
+  sFromEnum SFalse
+    = let
+        lambda_amPI ::
+          t_agqk ~ FalseSym0 => Sing (Apply FromEnumSym0 FalseSym0 :: Nat)
+        lambda_amPI = sFromInteger (sing :: Sing 0)
+      in lambda_amPI
+  sFromEnum STrue
+    = let
+        lambda_amPJ ::
+          t_agqk ~ TrueSym0 => Sing (Apply FromEnumSym0 TrueSym0 :: Nat)
+        lambda_amPJ = sFromInteger (sing :: Sing 1)
+      in lambda_amPJ
+type family Case_1627477738_amPV n_amPP t_amPW where
+  Case_1627477738_amPV n_amPP 'True = GTSym0
+  Case_1627477738_amPV n_amPP 'False = Apply ErrorSym0 "toEnum: bad argument"
+type family Case_1627477736_amPT n_amPP t_amPX where
+  Case_1627477736_amPT n_amPP 'True = EQSym0
+  Case_1627477736_amPT n_amPP 'False = Case_1627477738_amPV n_amPP (Apply (Apply (:==$) n_amPP) (FromInteger 2))
+type family Case_1627477734_amPR n_amPP t_amPY where
+  Case_1627477734_amPR n_amPP 'True = LTSym0
+  Case_1627477734_amPR n_amPP 'False = Case_1627477736_amPT n_amPP (Apply (Apply (:==$) n_amPP) (FromInteger 1))
+type family ToEnum_1627477744_amQ1 (a_amPZ :: Nat) :: Ordering where
+  ToEnum_1627477744_amQ1 n_amPP = Case_1627477734_amPR n_amPP (Apply (Apply (:==$) n_amPP) (FromInteger 0))
+type ToEnum_1627477744Sym1 (t_amQ2 :: Nat) =
+    ToEnum_1627477744_amQ1 t_amQ2
+instance SuppressUnusedWarnings ToEnum_1627477744Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) ToEnum_1627477744Sym0KindInference ())
+data ToEnum_1627477744Sym0 (l_amQ3 :: TyFun Nat Ordering)
+  = forall arg_amQ4. KindOf (Apply ToEnum_1627477744Sym0 arg_amQ4) ~ KindOf (ToEnum_1627477744Sym1 arg_amQ4) =>
+    ToEnum_1627477744Sym0KindInference
+type instance Apply ToEnum_1627477744Sym0 l_amQ3 = ToEnum_1627477744Sym1 l_amQ3
+type family FromEnum_1627477754_amQb (a_amQ9 :: Ordering) :: Nat where
+  FromEnum_1627477754_amQb 'LT = FromInteger 0
+  FromEnum_1627477754_amQb 'EQ = FromInteger 1
+  FromEnum_1627477754_amQb 'GT = FromInteger 2
+type FromEnum_1627477754Sym1 (t_amQc :: Ordering) =
+    FromEnum_1627477754_amQb t_amQc
+instance SuppressUnusedWarnings FromEnum_1627477754Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) FromEnum_1627477754Sym0KindInference ())
+data FromEnum_1627477754Sym0 (l_amQd :: TyFun Ordering Nat)
+  = forall arg_amQe. KindOf (Apply FromEnum_1627477754Sym0 arg_amQe) ~ KindOf (FromEnum_1627477754Sym1 arg_amQe) =>
+    FromEnum_1627477754Sym0KindInference
+type instance Apply FromEnum_1627477754Sym0 l_amQd = FromEnum_1627477754Sym1 l_amQd
+instance PEnum ('KProxy :: KProxy Ordering) where
+  type ToEnum (a_amPZ :: Nat) = Apply ToEnum_1627477744Sym0 a_amPZ
+  type FromEnum (a_amQ9 :: Ordering) = Apply FromEnum_1627477754Sym0 a_amQ9
+instance SEnum ('KProxy :: KProxy Ordering) where
+  sToEnum ::
+    forall (t_agqj :: Nat).
+    Sing t_agqj
+    -> Sing (Apply (ToEnumSym0 :: TyFun Nat Ordering
+                                  -> *) t_agqj :: Ordering)
+  sFromEnum ::
+    forall (t_agqk :: Ordering).
+    Sing t_agqk
+    -> Sing (Apply (FromEnumSym0 :: TyFun Ordering Nat
+                                    -> *) t_agqk :: Nat)
+  sToEnum sN
+    = let
+        lambda_amQf ::
+          forall n_amPP. t_agqj ~ n_amPP =>
+          Sing n_amPP -> Sing (Apply ToEnumSym0 n_amPP :: Ordering)
+        lambda_amQf n_amQg
+          = case
+                applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_amQg)
+                  (sFromInteger (sing :: Sing 0))
+            of {
+              STrue
+                -> let
+                      lambda_amQh ::
+                        TrueSym0 ~ Apply (Apply (:==$) n_amPP) (FromInteger 0) =>
+                        Sing (Case_1627477734_amPR n_amPP TrueSym0)
+                      lambda_amQh = SLT
+                    in lambda_amQh;
+              SFalse
+                -> let
+                      lambda_amQi ::
+                        FalseSym0 ~ Apply (Apply (:==$) n_amPP) (FromInteger 0) =>
+                        Sing (Case_1627477734_amPR n_amPP FalseSym0)
+                      lambda_amQi
+                        = case
+                              applySing
+                                (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_amQg)
+                                (sFromInteger (sing :: Sing 1))
+                          of {
+                            STrue
+                              -> let
+                                  lambda_amQj ::
+                                    TrueSym0 ~ Apply (Apply (:==$) n_amPP) (FromInteger 1) =>
+                                    Sing (Case_1627477736_amPT n_amPP TrueSym0)
+                                  lambda_amQj = SEQ
+                                in lambda_amQj;
+                            SFalse
+                              -> let
+                                  lambda_amQk ::
+                                    FalseSym0 ~ Apply (Apply (:==$) n_amPP) (FromInteger 1) =>
+                                    Sing (Case_1627477736_amPT n_amPP FalseSym0)
+                                  lambda_amQk
+                                    = case
+                                          applySing
+                                            (applySing
+                                                (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_amQg)
+                                            (sFromInteger (sing :: Sing 2))
+                                      of {
+                                        STrue
+                                          -> let
+                                                lambda_amQl ::
+                                                  TrueSym0 ~ Apply (Apply (:==$) n_amPP) (FromInteger 2) =>
+                                                  Sing (Case_1627477738_amPV n_amPP TrueSym0)
+                                                lambda_amQl = SGT
+                                              in lambda_amQl;
+                                        SFalse
+                                          -> let
+                                                lambda_amQm ::
+                                                  FalseSym0 ~ Apply (Apply (:==$) n_amPP) (FromInteger 2) =>
+                                                  Sing (Case_1627477738_amPV n_amPP FalseSym0)
+                                                lambda_amQm
+                                                  = sError (sing :: Sing "toEnum: bad argument")
+                                              in lambda_amQm } ::
+                                        Sing (Case_1627477738_amPV n_amPP (Apply (Apply (:==$) n_amPP) (FromInteger 2)))
+                                in lambda_amQk } ::
+                            Sing (Case_1627477736_amPT n_amPP (Apply (Apply (:==$) n_amPP) (FromInteger 1)))
+                    in lambda_amQi } ::
+              Sing (Case_1627477734_amPR n_amPP (Apply (Apply (:==$) n_amPP) (FromInteger 0)))
+      in lambda_amQf sN
+  sFromEnum SLT
+    = let
+        lambda_amQn ::
+          t_agqk ~ LTSym0 => Sing (Apply FromEnumSym0 LTSym0 :: Nat)
+        lambda_amQn = sFromInteger (sing :: Sing 0)
+      in lambda_amQn
+  sFromEnum SEQ
+    = let
+        lambda_amQo ::
+          t_agqk ~ EQSym0 => Sing (Apply FromEnumSym0 EQSym0 :: Nat)
+        lambda_amQo = sFromInteger (sing :: Sing 1)
+      in lambda_amQo
+  sFromEnum SGT
+    = let
+        lambda_amQp ::
+          t_agqk ~ GTSym0 => Sing (Apply FromEnumSym0 GTSym0 :: Nat)
+        lambda_amQp = sFromInteger (sing :: Sing 2)
+      in lambda_amQp
+type family Case_1627477776_amQx n_amQv t_amQy where
+  Case_1627477776_amQx n_amQv 'True = Tuple0Sym0
+  Case_1627477776_amQx n_amQv 'False = Apply ErrorSym0 "toEnum: bad argument"
+type family ToEnum_1627477780_amQB (a_amQz :: Nat) :: () where
+  ToEnum_1627477780_amQB n_amQv = Case_1627477776_amQx n_amQv (Apply (Apply (:==$) n_amQv) (FromInteger 0))
+type ToEnum_1627477780Sym1 (t_amQC :: Nat) =
+    ToEnum_1627477780_amQB t_amQC
+instance SuppressUnusedWarnings ToEnum_1627477780Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) ToEnum_1627477780Sym0KindInference ())
+data ToEnum_1627477780Sym0 (l_amQD :: TyFun Nat ())
+  = forall arg_amQE. KindOf (Apply ToEnum_1627477780Sym0 arg_amQE) ~ KindOf (ToEnum_1627477780Sym1 arg_amQE) =>
+    ToEnum_1627477780Sym0KindInference
+type instance Apply ToEnum_1627477780Sym0 l_amQD = ToEnum_1627477780Sym1 l_amQD
+type family FromEnum_1627477790_amQL (a_amQJ :: ()) :: Nat where
+  FromEnum_1627477790_amQL '() = FromInteger 0
+type FromEnum_1627477790Sym1 (t_amQM :: ()) =
+    FromEnum_1627477790_amQL t_amQM
+instance SuppressUnusedWarnings FromEnum_1627477790Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) FromEnum_1627477790Sym0KindInference ())
+data FromEnum_1627477790Sym0 (l_amQN :: TyFun () Nat)
+  = forall arg_amQO. KindOf (Apply FromEnum_1627477790Sym0 arg_amQO) ~ KindOf (FromEnum_1627477790Sym1 arg_amQO) =>
+    FromEnum_1627477790Sym0KindInference
+type instance Apply FromEnum_1627477790Sym0 l_amQN = FromEnum_1627477790Sym1 l_amQN
+instance PEnum ('KProxy :: KProxy ()) where
+  type ToEnum (a_amQz :: Nat) = Apply ToEnum_1627477780Sym0 a_amQz
+  type FromEnum (a_amQJ :: ()) = Apply FromEnum_1627477790Sym0 a_amQJ
+instance SEnum ('KProxy :: KProxy ()) where
+  sToEnum ::
+    forall (t_agqj :: Nat).
+    Sing t_agqj
+    -> Sing (Apply (ToEnumSym0 :: TyFun Nat () -> *) t_agqj :: ())
+  sFromEnum ::
+    forall (t_agqk :: ()).
+    Sing t_agqk
+    -> Sing (Apply (FromEnumSym0 :: TyFun () Nat -> *) t_agqk :: Nat)
+  sToEnum sN
+    = let
+        lambda_amQP ::
+          forall n_amQv. t_agqj ~ n_amQv =>
+          Sing n_amQv -> Sing (Apply ToEnumSym0 n_amQv :: ())
+        lambda_amQP n_amQQ
+          = case
+                applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_amQQ)
+                  (sFromInteger (sing :: Sing 0))
+            of {
+              STrue
+                -> let
+                      lambda_amQR ::
+                        TrueSym0 ~ Apply (Apply (:==$) n_amQv) (FromInteger 0) =>
+                        Sing (Case_1627477776_amQx n_amQv TrueSym0)
+                      lambda_amQR = STuple0
+                    in lambda_amQR;
+              SFalse
+                -> let
+                      lambda_amQS ::
+                        FalseSym0 ~ Apply (Apply (:==$) n_amQv) (FromInteger 0) =>
+                        Sing (Case_1627477776_amQx n_amQv FalseSym0)
+                      lambda_amQS = sError (sing :: Sing "toEnum: bad argument")
+                    in lambda_amQS } ::
+              Sing (Case_1627477776_amQx n_amQv (Apply (Apply (:==$) n_amQv) (FromInteger 0)))
+      in lambda_amQP sN
+  sFromEnum STuple0
+    = let
+        lambda_amQT ::
+          t_agqk ~ Tuple0Sym0 => Sing (Apply FromEnumSym0 Tuple0Sym0 :: Nat)
+        lambda_amQT = sFromInteger (sing :: Sing 0)
+      in lambda_amQT
diff --git a/src/Data/Singletons/Prelude/Eq.hs b/src/Data/Singletons/Prelude/Eq.hs
index 6d4905b..8639cf6 100644
--- a/src/Data/Singletons/Prelude/Eq.hs
+++ b/src/Data/Singletons/Prelude/Eq.hs
@@ -22,10 +22,8 @@ module Data.Singletons.Prelude.Eq (
 
 import Data.Singletons.Prelude.Bool
 import Data.Singletons
-import Data.Singletons.Single
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.Prelude.Instances
-import Data.Singletons.Util
-import Data.Singletons.Promote
 import Data.Type.Equality
 
 -- NB: These must be defined by hand because of the custom handling of the
@@ -43,7 +41,34 @@ class kproxy ~ 'KProxy => PEq (kproxy :: KProxy a) where
 infix 4 :==
 infix 4 :/=
 
-$(genDefunSymbols [''(:==), ''(:/=)])
+type (:==$$$) (t_abkj :: a_ab1R) (t_abkk :: a_ab1R) =
+    (:==) t_abkj t_abkk
+instance SuppressUnusedWarnings (:==$$) where
+  suppressUnusedWarnings _ = snd ((,) (:==$$###) ())
+data (:==$$) (l_abko :: a_ab1R) (l_abkn :: TyFun a_ab1R Bool)
+  = forall arg_abkp. KindOf (Apply ((:==$$) l_abko) arg_abkp) ~ KindOf ((:==$$$) l_abko arg_abkp) =>
+    (:==$$###)
+type instance Apply ((:==$$) l_abko) l_abkn = (:==$$$) l_abko l_abkn
+instance SuppressUnusedWarnings (:==$) where
+  suppressUnusedWarnings _ = snd ((,) (:==$###) ())
+data (:==$) (l_abkl :: TyFun a_ab1R (TyFun a_ab1R Bool -> *))
+  = forall arg_abkm. KindOf (Apply (:==$) arg_abkm) ~ KindOf ((:==$$) arg_abkm) =>
+    (:==$###)
+type instance Apply (:==$) l_abkl = (:==$$) l_abkl
+type (:/=$$$) (t_abkq :: a_ab1R) (t_abkr :: a_ab1R) =
+    (:/=) t_abkq t_abkr
+instance SuppressUnusedWarnings (:/=$$) where
+  suppressUnusedWarnings _ = snd ((,) (:/=$$###) ())
+data (:/=$$) (l_abkv :: a_ab1R) (l_abku :: TyFun a_ab1R Bool)
+  = forall arg_abkw. KindOf (Apply ((:/=$$) l_abkv) arg_abkw) ~ KindOf ((:/=$$$) l_abkv arg_abkw) =>
+    (:/=$$###)
+type instance Apply ((:/=$$) l_abkv) l_abku = (:/=$$$) l_abkv l_abku
+instance SuppressUnusedWarnings (:/=$) where
+  suppressUnusedWarnings _ = snd ((,) (:/=$###) ())
+data (:/=$) (l_abks :: TyFun a_ab1R (TyFun a_ab1R Bool -> *))
+  = forall arg_abkt. KindOf (Apply (:/=$) arg_abkt) ~ KindOf ((:/=$$) arg_abkt) =>
+    (:/=$###)
+type instance Apply (:/=$) l_abks = (:/=$$) l_abks
 
 -- | The singleton analogue of 'Eq'. Unlike the definition for 'Eq', it is required
 -- that instances define a body for '(%:==)'. You may also supply a body for '(%:/=)'.
@@ -60,4 +85,376 @@ class (kparam ~ 'KProxy) => SEq (kparam :: KProxy k) where
   a %:/= b = sNot (a %:== b)
   infix 4 %:/=
 
-$(singEqInstances basicTypes)
+instance SEq ('KProxy :: KProxy a_i8ON) =>
+          SEq ('KProxy :: KProxy (Maybe a_i8ON)) where
+  (%:==) SNothing SNothing = STrue
+  (%:==) SNothing (SJust _) = SFalse
+  (%:==) (SJust _) SNothing = SFalse
+  (%:==) (SJust a_abv3) (SJust b_abv4) = (%:==) a_abv3 b_abv4
+type family Equals_1627434151_abuU (a_abuV :: Maybe k_abuS)
+                                    (b_abuW :: Maybe k_abuS) :: Bool where
+  Equals_1627434151_abuU 'Nothing 'Nothing = TrueSym0
+  Equals_1627434151_abuU ('Just a_abuX) ('Just b_abuY) = (:==) a_abuX b_abuY
+  Equals_1627434151_abuU (a_abuZ :: Maybe k_abuS) (b_abv0 :: Maybe k_abuS) = FalseSym0
+instance PEq ('KProxy :: KProxy (Maybe k_abuS)) where
+  type (:==) (a_abuV :: Maybe k_abuS) (b_abuW :: Maybe k_abuS) = Equals_1627434151_abuU a_abuV b_abuW
+instance SEq ('KProxy :: KProxy a_12) =>
+          SEq ('KProxy :: KProxy [a_12]) where
+  (%:==) SNil SNil = STrue
+  (%:==) SNil (SCons _ _) = SFalse
+  (%:==) (SCons _ _) SNil = SFalse
+  (%:==) (SCons a_abvj a_abvk) (SCons b_abvl b_abvm)
+    = (%:&&) ((%:==) a_abvj b_abvl) ((%:==) a_abvk b_abvm)
+type family Equals_1627434164_abv7 (a_abv8 :: [k_abv5])
+                                    (b_abv9 :: [k_abv5]) :: Bool where
+  Equals_1627434164_abv7 '[] '[] = TrueSym0
+  Equals_1627434164_abv7 (a_abva ': a_abvb) (b_abvc ': b_abvd) = (:&&) ((:==) a_abva b_abvc) ((:==) a_abvb b_abvd)
+  Equals_1627434164_abv7 (a_abve :: [k_abv5]) (b_abvf :: [k_abv5]) = FalseSym0
+instance PEq ('KProxy :: KProxy [k_abv5]) where
+  type (:==) (a_abv8 :: [k_abv5]) (b_abv9 :: [k_abv5]) = Equals_1627434164_abv7 a_abv8 b_abv9
+instance (SEq ('KProxy :: KProxy a_i8OB),
+          SEq ('KProxy :: KProxy b_i8OC)) =>
+          SEq ('KProxy :: KProxy (Either a_i8OB b_i8OC)) where
+  (%:==) (SLeft a_abvC) (SLeft b_abvD) = (%:==) a_abvC b_abvD
+  (%:==) (SLeft _) (SRight _) = SFalse
+  (%:==) (SRight _) (SLeft _) = SFalse
+  (%:==) (SRight a_abvE) (SRight b_abvF) = (%:==) a_abvE b_abvF
+type family Equals_1627434183_abvq (a_abvr :: Either k_abvn k_abvo)
+                                    (b_abvs :: Either k_abvn k_abvo) :: Bool where
+  Equals_1627434183_abvq ('Left a_abvt) ('Left b_abvu) = (:==) a_abvt b_abvu
+  Equals_1627434183_abvq ('Right a_abvv) ('Right b_abvw) = (:==) a_abvv b_abvw
+  Equals_1627434183_abvq (a_abvx :: Either k_abvn k_abvo) (b_abvy :: Either k_abvn k_abvo) = FalseSym0
+instance PEq ('KProxy :: KProxy (Either k_abvn k_abvo)) where
+  type (:==) (a_abvr :: Either k_abvn k_abvo) (b_abvs :: Either k_abvn k_abvo) = Equals_1627434183_abvq a_abvr b_abvs
+instance (SEq ('KProxy :: KProxy a_12),
+          SEq ('KProxy :: KProxy b_13)) =>
+          SEq ('KProxy :: KProxy (a_12, b_13)) where
+  (%:==) (STuple2 a_abvV a_abvW) (STuple2 b_abvX b_abvY)
+    = (%:&&) ((%:==) a_abvV b_abvX) ((%:==) a_abvW b_abvY)
+type family Equals_1627434202_abvJ (a_abvK :: (k_abvG, k_abvH))
+                                    (b_abvL :: (k_abvG, k_abvH)) :: Bool where
+  Equals_1627434202_abvJ '(a_abvM, a_abvN) '(b_abvO,
+                                              b_abvP) = (:&&) ((:==) a_abvM b_abvO) ((:==) a_abvN b_abvP)
+  Equals_1627434202_abvJ (a_abvQ :: (k_abvG,
+                                      k_abvH)) (b_abvR :: (k_abvG, k_abvH)) = FalseSym0
+instance PEq ('KProxy :: KProxy (k_abvG, k_abvH)) where
+  type (:==) (a_abvK :: (k_abvG, k_abvH)) (b_abvL :: (k_abvG,
+                                                      k_abvH)) = Equals_1627434202_abvJ a_abvK b_abvL
+instance (SEq ('KProxy :: KProxy a_12),
+          SEq ('KProxy :: KProxy b_13),
+          SEq ('KProxy :: KProxy c_14)) =>
+          SEq ('KProxy :: KProxy (a_12, b_13, c_14)) where
+  (%:==)
+    (STuple3 a_abwi a_abwj a_abwk)
+    (STuple3 b_abwl b_abwm b_abwn)
+    = (%:&&)
+        ((%:==) a_abwi b_abwl)
+        ((%:&&) ((%:==) a_abwj b_abwm) ((%:==) a_abwk b_abwn))
+type family Equals_1627434222_abw3 (a_abw4 :: (k_abvZ,
+                                                k_abw0,
+                                                k_abw1))
+                                    (b_abw5 :: (k_abvZ, k_abw0, k_abw1)) :: Bool where
+  Equals_1627434222_abw3 '(a_abw6, a_abw7, a_abw8) '(b_abw9,
+                                                      b_abwa,
+                                                      b_abwb) = (:&&) ((:==) a_abw6 b_abw9) ((:&&) ((:==) a_abw7 b_abwa) ((:==) a_abw8 b_abwb))
+  Equals_1627434222_abw3 (a_abwc :: (k_abvZ,
+                                      k_abw0,
+                                      k_abw1)) (b_abwd :: (k_abvZ, k_abw0, k_abw1)) = FalseSym0
+instance PEq ('KProxy :: KProxy (k_abvZ, k_abw0, k_abw1)) where
+  type (:==) (a_abw4 :: (k_abvZ, k_abw0, k_abw1)) (b_abw5 :: (k_abvZ,
+                                                              k_abw0,
+                                                              k_abw1)) = Equals_1627434222_abw3 a_abw4 b_abw5
+instance (SEq ('KProxy :: KProxy a_12),
+          SEq ('KProxy :: KProxy b_13),
+          SEq ('KProxy :: KProxy c_14),
+          SEq ('KProxy :: KProxy d_15)) =>
+          SEq ('KProxy :: KProxy (a_12, b_13, c_14, d_15)) where
+  (%:==)
+    (STuple4 a_abwL a_abwM a_abwN a_abwO)
+    (STuple4 b_abwP b_abwQ b_abwR b_abwS)
+    = (%:&&)
+        ((%:==) a_abwL b_abwP)
+        ((%:&&)
+            ((%:==) a_abwM b_abwQ)
+            ((%:&&) ((%:==) a_abwN b_abwR) ((%:==) a_abwO b_abwS)))
+type family Equals_1627434248_abwt (a_abwu :: (k_abwo,
+                                                k_abwp,
+                                                k_abwq,
+                                                k_abwr))
+                                    (b_abwv :: (k_abwo, k_abwp, k_abwq, k_abwr)) :: Bool where
+  Equals_1627434248_abwt '(a_abww, a_abwx, a_abwy, a_abwz) '(b_abwA,
+                                                              b_abwB,
+                                                              b_abwC,
+                                                              b_abwD) = (:&&) ((:==) a_abww b_abwA) ((:&&) ((:==) a_abwx b_abwB) ((:&&) ((:==) a_abwy b_abwC) ((:==) a_abwz b_abwD)))
+  Equals_1627434248_abwt (a_abwE :: (k_abwo,
+                                      k_abwp,
+                                      k_abwq,
+                                      k_abwr)) (b_abwF :: (k_abwo,
+                                                          k_abwp,
+                                                          k_abwq,
+                                                          k_abwr)) = FalseSym0
+instance PEq ('KProxy :: KProxy (k_abwo,
+                                k_abwp,
+                                k_abwq,
+                                k_abwr)) where
+  type (:==) (a_abwu :: (k_abwo,
+                          k_abwp,
+                          k_abwq,
+                          k_abwr)) (b_abwv :: (k_abwo,
+                                              k_abwp,
+                                              k_abwq,
+                                              k_abwr)) = Equals_1627434248_abwt a_abwu b_abwv
+instance (SEq ('KProxy :: KProxy a_12),
+          SEq ('KProxy :: KProxy b_13),
+          SEq ('KProxy :: KProxy c_14),
+          SEq ('KProxy :: KProxy d_15),
+          SEq ('KProxy :: KProxy e_16)) =>
+          SEq ('KProxy :: KProxy (a_12, b_13, c_14, d_15, e_16)) where
+  (%:==)
+    (STuple5 a_abxk a_abxl a_abxm a_abxn a_abxo)
+    (STuple5 b_abxp b_abxq b_abxr b_abxs b_abxt)
+    = (%:&&)
+        ((%:==) a_abxk b_abxp)
+        ((%:&&)
+            ((%:==) a_abxl b_abxq)
+            ((%:&&)
+              ((%:==) a_abxm b_abxr)
+              ((%:&&) ((%:==) a_abxn b_abxs) ((%:==) a_abxo b_abxt))))
+type family Equals_1627434280_abwZ (a_abx0 :: (k_abwT,
+                                                k_abwU,
+                                                k_abwV,
+                                                k_abwW,
+                                                k_abwX))
+                                    (b_abx1 :: (k_abwT,
+                                                k_abwU,
+                                                k_abwV,
+                                                k_abwW,
+                                                k_abwX)) :: Bool where
+  Equals_1627434280_abwZ '(a_abx2,
+                            a_abx3,
+                            a_abx4,
+                            a_abx5,
+                            a_abx6) '(b_abx7,
+                                      b_abx8,
+                                      b_abx9,
+                                      b_abxa,
+                                      b_abxb) = (:&&) ((:==) a_abx2 b_abx7) ((:&&) ((:==) a_abx3 b_abx8) ((:&&) ((:==) a_abx4 b_abx9) ((:&&) ((:==) a_abx5 b_abxa) ((:==) a_abx6 b_abxb))))
+  Equals_1627434280_abwZ (a_abxc :: (k_abwT,
+                                      k_abwU,
+                                      k_abwV,
+                                      k_abwW,
+                                      k_abwX)) (b_abxd :: (k_abwT,
+                                                          k_abwU,
+                                                          k_abwV,
+                                                          k_abwW,
+                                                          k_abwX)) = FalseSym0
+instance PEq ('KProxy :: KProxy (k_abwT,
+                                k_abwU,
+                                k_abwV,
+                                k_abwW,
+                                k_abwX)) where
+  type (:==) (a_abx0 :: (k_abwT,
+                          k_abwU,
+                          k_abwV,
+                          k_abwW,
+                          k_abwX)) (b_abx1 :: (k_abwT,
+                                              k_abwU,
+                                              k_abwV,
+                                              k_abwW,
+                                              k_abwX)) = Equals_1627434280_abwZ a_abx0 b_abx1
+instance (SEq ('KProxy :: KProxy a_12),
+          SEq ('KProxy :: KProxy b_13),
+          SEq ('KProxy :: KProxy c_14),
+          SEq ('KProxy :: KProxy d_15),
+          SEq ('KProxy :: KProxy e_16),
+          SEq ('KProxy :: KProxy f_17)) =>
+          SEq ('KProxy :: KProxy (a_12, b_13, c_14, d_15, e_16, f_17)) where
+  (%:==)
+    (STuple6 a_abxZ a_aby0 a_aby1 a_aby2 a_aby3 a_aby4)
+    (STuple6 b_aby5 b_aby6 b_aby7 b_aby8 b_aby9 b_abya)
+    = (%:&&)
+        ((%:==) a_abxZ b_aby5)
+        ((%:&&)
+            ((%:==) a_aby0 b_aby6)
+            ((%:&&)
+              ((%:==) a_aby1 b_aby7)
+              ((%:&&)
+                  ((%:==) a_aby2 b_aby8)
+                  ((%:&&) ((%:==) a_aby3 b_aby9) ((%:==) a_aby4 b_abya)))))
+type family Equals_1627434318_abxB (a_abxC :: (k_abxu,
+                                                k_abxv,
+                                                k_abxw,
+                                                k_abxx,
+                                                k_abxy,
+                                                k_abxz))
+                                    (b_abxD :: (k_abxu,
+                                                k_abxv,
+                                                k_abxw,
+                                                k_abxx,
+                                                k_abxy,
+                                                k_abxz)) :: Bool where
+  Equals_1627434318_abxB '(a_abxE,
+                            a_abxF,
+                            a_abxG,
+                            a_abxH,
+                            a_abxI,
+                            a_abxJ) '(b_abxK,
+                                      b_abxL,
+                                      b_abxM,
+                                      b_abxN,
+                                      b_abxO,
+                                      b_abxP) = (:&&) ((:==) a_abxE b_abxK) ((:&&) ((:==) a_abxF b_abxL) ((:&&) ((:==) a_abxG b_abxM) ((:&&) ((:==) a_abxH b_abxN) ((:&&) ((:==) a_abxI b_abxO) ((:==) a_abxJ b_abxP)))))
+  Equals_1627434318_abxB (a_abxQ :: (k_abxu,
+                                      k_abxv,
+                                      k_abxw,
+                                      k_abxx,
+                                      k_abxy,
+                                      k_abxz)) (b_abxR :: (k_abxu,
+                                                          k_abxv,
+                                                          k_abxw,
+                                                          k_abxx,
+                                                          k_abxy,
+                                                          k_abxz)) = FalseSym0
+instance PEq ('KProxy :: KProxy (k_abxu,
+                                k_abxv,
+                                k_abxw,
+                                k_abxx,
+                                k_abxy,
+                                k_abxz)) where
+  type (:==) (a_abxC :: (k_abxu,
+                          k_abxv,
+                          k_abxw,
+                          k_abxx,
+                          k_abxy,
+                          k_abxz)) (b_abxD :: (k_abxu,
+                                              k_abxv,
+                                              k_abxw,
+                                              k_abxx,
+                                              k_abxy,
+                                              k_abxz)) = Equals_1627434318_abxB a_abxC b_abxD
+instance (SEq ('KProxy :: KProxy a_12),
+          SEq ('KProxy :: KProxy b_13),
+          SEq ('KProxy :: KProxy c_14),
+          SEq ('KProxy :: KProxy d_15),
+          SEq ('KProxy :: KProxy e_16),
+          SEq ('KProxy :: KProxy f_17),
+          SEq ('KProxy :: KProxy g_18)) =>
+          SEq ('KProxy :: KProxy (a_12,
+                                b_13,
+                                c_14,
+                                d_15,
+                                e_16,
+                                f_17,
+                                g_18)) where
+  (%:==)
+    (STuple7 a_abyK a_abyL a_abyM a_abyN a_abyO a_abyP a_abyQ)
+    (STuple7 b_abyR b_abyS b_abyT b_abyU b_abyV b_abyW b_abyX)
+    = (%:&&)
+        ((%:==) a_abyK b_abyR)
+        ((%:&&)
+            ((%:==) a_abyL b_abyS)
+            ((%:&&)
+              ((%:==) a_abyM b_abyT)
+              ((%:&&)
+                  ((%:==) a_abyN b_abyU)
+                  ((%:&&)
+                    ((%:==) a_abyO b_abyV)
+                    ((%:&&) ((%:==) a_abyP b_abyW) ((%:==) a_abyQ b_abyX))))))
+type family Equals_1627434362_abyj (a_abyk :: (k_abyb,
+                                                k_abyc,
+                                                k_abyd,
+                                                k_abye,
+                                                k_abyf,
+                                                k_abyg,
+                                                k_abyh))
+                                    (b_abyl :: (k_abyb,
+                                                k_abyc,
+                                                k_abyd,
+                                                k_abye,
+                                                k_abyf,
+                                                k_abyg,
+                                                k_abyh)) :: Bool where
+  Equals_1627434362_abyj '(a_abym,
+                            a_abyn,
+                            a_abyo,
+                            a_abyp,
+                            a_abyq,
+                            a_abyr,
+                            a_abys) '(b_abyt,
+                                      b_abyu,
+                                      b_abyv,
+                                      b_abyw,
+                                      b_abyx,
+                                      b_abyy,
+                                      b_abyz) = (:&&) ((:==) a_abym b_abyt) ((:&&) ((:==) a_abyn b_abyu) ((:&&) ((:==) a_abyo b_abyv) ((:&&) ((:==) a_abyp b_abyw) ((:&&) ((:==) a_abyq b_abyx) ((:&&) ((:==) a_abyr b_abyy) ((:==) a_abys b_abyz))))))
+  Equals_1627434362_abyj (a_abyA :: (k_abyb,
+                                      k_abyc,
+                                      k_abyd,
+                                      k_abye,
+                                      k_abyf,
+                                      k_abyg,
+                                      k_abyh)) (b_abyB :: (k_abyb,
+                                                          k_abyc,
+                                                          k_abyd,
+                                                          k_abye,
+                                                          k_abyf,
+                                                          k_abyg,
+                                                          k_abyh)) = FalseSym0
+instance PEq ('KProxy :: KProxy (k_abyb,
+                                k_abyc,
+                                k_abyd,
+                                k_abye,
+                                k_abyf,
+                                k_abyg,
+                                k_abyh)) where
+  type (:==) (a_abyk :: (k_abyb,
+                          k_abyc,
+                          k_abyd,
+                          k_abye,
+                          k_abyf,
+                          k_abyg,
+                          k_abyh)) (b_abyl :: (k_abyb,
+                                              k_abyc,
+                                              k_abyd,
+                                              k_abye,
+                                              k_abyf,
+                                              k_abyg,
+                                              k_abyh)) = Equals_1627434362_abyj a_abyk b_abyl
+instance SEq ('KProxy :: KProxy Bool) where
+  (%:==) SFalse SFalse = STrue
+  (%:==) SFalse STrue = SFalse
+  (%:==) STrue SFalse = SFalse
+  (%:==) STrue STrue = STrue
+type family Equals_1627434404_abyZ (a_abz0 :: Bool)
+                                    (b_abz1 :: Bool) :: Bool where
+  Equals_1627434404_abyZ 'False 'False = TrueSym0
+  Equals_1627434404_abyZ 'True 'True = TrueSym0
+  Equals_1627434404_abyZ (a_abz2 :: Bool) (b_abz3 :: Bool) = FalseSym0
+instance PEq ('KProxy :: KProxy Bool) where
+  type (:==) (a_abz0 :: Bool) (b_abz1 :: Bool) = Equals_1627434404_abyZ a_abz0 b_abz1
+instance SEq ('KProxy :: KProxy Ordering) where
+  (%:==) SLT SLT = STrue
+  (%:==) SLT SEQ = SFalse
+  (%:==) SLT SGT = SFalse
+  (%:==) SEQ SLT = SFalse
+  (%:==) SEQ SEQ = STrue
+  (%:==) SEQ SGT = SFalse
+  (%:==) SGT SLT = SFalse
+  (%:==) SGT SEQ = SFalse
+  (%:==) SGT SGT = STrue
+type family Equals_1627434411_abz6 (a_abz7 :: Ordering)
+                                    (b_abz8 :: Ordering) :: Bool where
+  Equals_1627434411_abz6 'LT 'LT = TrueSym0
+  Equals_1627434411_abz6 'EQ 'EQ = TrueSym0
+  Equals_1627434411_abz6 'GT 'GT = TrueSym0
+  Equals_1627434411_abz6 (a_abz9 :: Ordering) (b_abza :: Ordering) = FalseSym0
+instance PEq ('KProxy :: KProxy Ordering) where
+  type (:==) (a_abz7 :: Ordering) (b_abz8 :: Ordering) = Equals_1627434411_abz6 a_abz7 b_abz8
+instance SEq ('KProxy :: KProxy ()) where
+  (%:==) STuple0 STuple0 = STrue
+type family Equals_1627434418_abzd (a_abze :: ())
+                                    (b_abzf :: ()) :: Bool where
+  Equals_1627434418_abzd '() '() = TrueSym0
+  Equals_1627434418_abzd (a_abzg :: ()) (b_abzh :: ()) = FalseSym0
+instance PEq ('KProxy :: KProxy ()) where
+  type (:==) (a_abze :: ()) (b_abzf :: ()) = Equals_1627434418_abzd a_abze b_abzf
diff --git a/src/Data/Singletons/Prelude/Instances.hs b/src/Data/Singletons/Prelude/Instances.hs
index 84f41af..e921ad6 100644
--- a/src/Data/Singletons/Prelude/Instances.hs
+++ b/src/Data/Singletons/Prelude/Instances.hs
@@ -15,20 +15,1374 @@ re-exported from various places.
 
 module Data.Singletons.Prelude.Instances where
 
-import Data.Singletons.Single
-import Data.Singletons.Util
+import Data.Proxy
+import Data.Singletons
+import Data.Singletons.Decide
+import Data.Singletons.SuppressUnusedWarnings
 
 -- some useful singletons
-$(genSingletons basicTypes)
-$(singDecideInstances basicTypes)
+type NothingSym0 = 'Nothing
+type JustSym1 (t_a1ujl :: a_a5JI) = 'Just t_a1ujl
+instance SuppressUnusedWarnings JustSym0 where
+  suppressUnusedWarnings _ = snd ((,) JustSym0KindInference ())
+data JustSym0 (l_a1ujm :: TyFun a_a5JI (Maybe a_a5JI))
+  = forall arg_a1ujn. KindOf (Apply JustSym0 arg_a1ujn) ~ KindOf (JustSym1 arg_a1ujn) =>
+    JustSym0KindInference
+type instance Apply JustSym0 l_a1ujm = JustSym1 l_a1ujm
+data instance Sing (z_a1ujo :: Maybe a_a5JI)
+  = z_a1ujo ~ 'Nothing => SNothing |
+    forall (n_a1ujp :: a_a5JI). z_a1ujo ~ 'Just n_a1ujp =>
+    SJust (Sing (n_a1ujp :: a_a5JI))
+type SMaybe = (Sing :: Maybe a_a5JI -> *)
+instance SingKind ('KProxy :: KProxy a_a5JI) =>
+          SingKind ('KProxy :: KProxy (Maybe a_a5JI)) where
+  type DemoteRep ('KProxy :: KProxy (Maybe a_a5JI)) = Maybe (DemoteRep ('KProxy :: KProxy a_a5JI))
+  fromSing SNothing = Nothing
+  fromSing (SJust b_a1ujq) = Just (fromSing b_a1ujq)
+  toSing Nothing = SomeSing SNothing
+  toSing (Just b_a1ujr)
+    = case toSing b_a1ujr :: SomeSing ('KProxy :: KProxy a_a5JI) of {
+        SomeSing c_a1ujs -> SomeSing (SJust c_a1ujs) }
+instance SingI 'Nothing where
+  sing = SNothing
+instance SingI n_a1ujp => SingI ('Just (n_a1ujp :: a_a5JI)) where
+  sing = SJust sing
+type NilSym0 = '[]
+type (:$$$) (t_a1uju :: a_12) (t_a1ujv :: [a_12]) =
+    t_a1uju ': t_a1ujv
+instance SuppressUnusedWarnings (:$$) where
+  suppressUnusedWarnings _ = snd ((,) (:$$###) ())
+data (:$$) (l_a1ujz :: a_12) (l_a1ujy :: TyFun [a_12] [a_12])
+  = forall arg_a1ujA. KindOf (Apply ((:$$) l_a1ujz) arg_a1ujA) ~ KindOf ((:$$$) l_a1ujz arg_a1ujA) =>
+    (:$$###)
+type instance Apply ((:$$) l_a1ujz) l_a1ujy = (:$$$) l_a1ujz l_a1ujy
+instance SuppressUnusedWarnings (:$) where
+  suppressUnusedWarnings _ = snd ((,) (:$###) ())
+data (:$) (l_a1ujw :: TyFun a_12 (TyFun [a_12] [a_12] -> *))
+  = forall arg_a1ujx. KindOf (Apply (:$) arg_a1ujx) ~ KindOf ((:$$) arg_a1ujx) =>
+    (:$###)
+type instance Apply (:$) l_a1ujw = (:$$) l_a1ujw
+data instance Sing (z_a1ujB :: [a_12])
+  = z_a1ujB ~ '[] => SNil |
+    forall (n_a1ujC :: a_12)
+            (n_a1ujD :: [a_12]). z_a1ujB ~ (n_a1ujC ': n_a1ujD) =>
+    SCons (Sing (n_a1ujC :: a_12)) (Sing (n_a1ujD :: [a_12]))
+type SList = (Sing :: [a_12] -> *)
+instance SingKind ('KProxy :: KProxy a_12) =>
+          SingKind ('KProxy :: KProxy [a_12]) where
+  type DemoteRep ('KProxy :: KProxy [a_12]) = [DemoteRep ('KProxy :: KProxy a_12)]
+  fromSing SNil = []
+  fromSing (SCons b_a1ujE b_a1ujF)
+    = (:) (fromSing b_a1ujE) (fromSing b_a1ujF)
+  toSing [] = SomeSing SNil
+  toSing ((:) b_a1ujG b_a1ujH)
+    = case
+          (,)
+            (toSing b_a1ujG :: SomeSing ('KProxy :: KProxy a_12))
+            (toSing b_a1ujH :: SomeSing ('KProxy :: KProxy [a_12]))
+      of {
+        (,) (SomeSing c_a1ujI) (SomeSing c_a1ujJ)
+          -> SomeSing (SCons c_a1ujI c_a1ujJ) }
+instance SingI '[] where
+  sing = SNil
+instance (SingI n_a1ujC, SingI n_a1ujD) =>
+          SingI ((n_a1ujC :: a_12) ': (n_a1ujD :: [a_12])) where
+  sing = SCons sing sing
+type LeftSym1 (t_a1ujM :: a_a8mn) = 'Left t_a1ujM
+instance SuppressUnusedWarnings LeftSym0 where
+  suppressUnusedWarnings _ = snd ((,) LeftSym0KindInference ())
+data LeftSym0 (l_a1ujN :: TyFun a_a8mn (Either a_a8mn b_a8mo))
+  = forall arg_a1ujO. KindOf (Apply LeftSym0 arg_a1ujO) ~ KindOf (LeftSym1 arg_a1ujO) =>
+    LeftSym0KindInference
+type instance Apply LeftSym0 l_a1ujN = LeftSym1 l_a1ujN
+type RightSym1 (t_a1ujP :: b_a8mo) = 'Right t_a1ujP
+instance SuppressUnusedWarnings RightSym0 where
+  suppressUnusedWarnings _ = snd ((,) RightSym0KindInference ())
+data RightSym0 (l_a1ujQ :: TyFun b_a8mo (Either a_a8mn b_a8mo))
+  = forall arg_a1ujR. KindOf (Apply RightSym0 arg_a1ujR) ~ KindOf (RightSym1 arg_a1ujR) =>
+    RightSym0KindInference
+type instance Apply RightSym0 l_a1ujQ = RightSym1 l_a1ujQ
+data instance Sing (z_a1ujS :: Either a_a8mn b_a8mo)
+  = forall (n_a1ujT :: a_a8mn). z_a1ujS ~ 'Left n_a1ujT =>
+    SLeft (Sing (n_a1ujT :: a_a8mn)) |
+    forall (n_a1ujU :: b_a8mo). z_a1ujS ~ 'Right n_a1ujU =>
+    SRight (Sing (n_a1ujU :: b_a8mo))
+type SEither = (Sing :: Either a_a8mn b_a8mo -> *)
+instance (SingKind ('KProxy :: KProxy a_a8mn),
+          SingKind ('KProxy :: KProxy b_a8mo)) =>
+          SingKind ('KProxy :: KProxy (Either a_a8mn b_a8mo)) where
+  type DemoteRep ('KProxy :: KProxy (Either a_a8mn b_a8mo)) = Either (DemoteRep ('KProxy :: KProxy a_a8mn)) (DemoteRep ('KProxy :: KProxy b_a8mo))
+  fromSing (SLeft b_a1ujV) = Left (fromSing b_a1ujV)
+  fromSing (SRight b_a1ujW) = Right (fromSing b_a1ujW)
+  toSing (Left b_a1ujX)
+    = case toSing b_a1ujX :: SomeSing ('KProxy :: KProxy a_a8mn) of {
+        SomeSing c_a1ujY -> SomeSing (SLeft c_a1ujY) }
+  toSing (Right b_a1ujZ)
+    = case toSing b_a1ujZ :: SomeSing ('KProxy :: KProxy b_a8mo) of {
+        SomeSing c_a1uk0 -> SomeSing (SRight c_a1uk0) }
+instance SingI n_a1ujT => SingI ('Left (n_a1ujT :: a_a8mn)) where
+  sing = SLeft sing
+instance SingI n_a1ujU => SingI ('Right (n_a1ujU :: b_a8mo)) where
+  sing = SRight sing
+type Tuple2Sym2 (t_a1uk3 :: a_12) (t_a1uk4 :: b_13) =
+    '(t_a1uk3, t_a1uk4)
+instance SuppressUnusedWarnings Tuple2Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Tuple2Sym1KindInference ())
+data Tuple2Sym1 (l_a1uk8 :: a_12)
+                (l_a1uk7 :: TyFun b_13 (a_12, b_13))
+  = forall arg_a1uk9. KindOf (Apply (Tuple2Sym1 l_a1uk8) arg_a1uk9) ~ KindOf (Tuple2Sym2 l_a1uk8 arg_a1uk9) =>
+    Tuple2Sym1KindInference
+type instance Apply (Tuple2Sym1 l_a1uk8) l_a1uk7 = Tuple2Sym2 l_a1uk8 l_a1uk7
+instance SuppressUnusedWarnings Tuple2Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Tuple2Sym0KindInference ())
+data Tuple2Sym0 (l_a1uk5 :: TyFun a_12 (TyFun b_13 (a_12, b_13)
+                                        -> *))
+  = forall arg_a1uk6. KindOf (Apply Tuple2Sym0 arg_a1uk6) ~ KindOf (Tuple2Sym1 arg_a1uk6) =>
+    Tuple2Sym0KindInference
+type instance Apply Tuple2Sym0 l_a1uk5 = Tuple2Sym1 l_a1uk5
+data instance Sing (z_a1uka :: (a_12, b_13))
+  = forall (n_a1ukb :: a_12) (n_a1ukc :: b_13). z_a1uka ~ '(n_a1ukb,
+                                                            n_a1ukc) =>
+    STuple2 (Sing (n_a1ukb :: a_12)) (Sing (n_a1ukc :: b_13))
+type STuple2 = (Sing :: (a_12, b_13) -> *)
+instance (SingKind ('KProxy :: KProxy a_12),
+          SingKind ('KProxy :: KProxy b_13)) =>
+          SingKind ('KProxy :: KProxy (a_12, b_13)) where
+  type DemoteRep ('KProxy :: KProxy (a_12,
+                                    b_13)) = (DemoteRep ('KProxy :: KProxy a_12),
+                                              DemoteRep ('KProxy :: KProxy b_13))
+  fromSing (STuple2 b_a1ukd b_a1uke)
+    = (,) (fromSing b_a1ukd) (fromSing b_a1uke)
+  toSing ((,) b_a1ukf b_a1ukg)
+    = case
+          (,)
+            (toSing b_a1ukf :: SomeSing ('KProxy :: KProxy a_12))
+            (toSing b_a1ukg :: SomeSing ('KProxy :: KProxy b_13))
+      of {
+        (,) (SomeSing c_a1ukh) (SomeSing c_a1uki)
+          -> SomeSing (STuple2 c_a1ukh c_a1uki) }
+instance (SingI n_a1ukb, SingI n_a1ukc) =>
+          SingI '((n_a1ukb :: a_12), (n_a1ukc :: b_13)) where
+  sing = STuple2 sing sing
+type Tuple3Sym3 (t_a1ukm :: a_12)
+                (t_a1ukn :: b_13)
+                (t_a1uko :: c_14) =
+    '(t_a1ukm, t_a1ukn, t_a1uko)
+instance SuppressUnusedWarnings Tuple3Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Tuple3Sym2KindInference ())
+data Tuple3Sym2 (l_a1ukv :: a_12)
+                (l_a1ukw :: b_13)
+                (l_a1uku :: TyFun c_14 (a_12, b_13, c_14))
+  = forall arg_a1ukx. KindOf (Apply (Tuple3Sym2 l_a1ukv l_a1ukw) arg_a1ukx) ~ KindOf (Tuple3Sym3 l_a1ukv l_a1ukw arg_a1ukx) =>
+    Tuple3Sym2KindInference
+type instance Apply (Tuple3Sym2 l_a1ukv l_a1ukw) l_a1uku = Tuple3Sym3 l_a1ukv l_a1ukw l_a1uku
+instance SuppressUnusedWarnings Tuple3Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Tuple3Sym1KindInference ())
+data Tuple3Sym1 (l_a1uks :: a_12)
+                (l_a1ukr :: TyFun b_13 (TyFun c_14 (a_12, b_13, c_14) -> *))
+  = forall arg_a1ukt. KindOf (Apply (Tuple3Sym1 l_a1uks) arg_a1ukt) ~ KindOf (Tuple3Sym2 l_a1uks arg_a1ukt) =>
+    Tuple3Sym1KindInference
+type instance Apply (Tuple3Sym1 l_a1uks) l_a1ukr = Tuple3Sym2 l_a1uks l_a1ukr
+instance SuppressUnusedWarnings Tuple3Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Tuple3Sym0KindInference ())
+data Tuple3Sym0 (l_a1ukp :: TyFun a_12 (TyFun b_13 (TyFun c_14 (a_12,
+                                                                b_13,
+                                                                c_14)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1ukq. KindOf (Apply Tuple3Sym0 arg_a1ukq) ~ KindOf (Tuple3Sym1 arg_a1ukq) =>
+    Tuple3Sym0KindInference
+type instance Apply Tuple3Sym0 l_a1ukp = Tuple3Sym1 l_a1ukp
+data instance Sing (z_a1uky :: (a_12, b_13, c_14))
+  = forall (n_a1ukz :: a_12)
+            (n_a1ukA :: b_13)
+            (n_a1ukB :: c_14). z_a1uky ~ '(n_a1ukz, n_a1ukA, n_a1ukB) =>
+    STuple3 (Sing (n_a1ukz :: a_12)) (Sing (n_a1ukA :: b_13)) (Sing (n_a1ukB :: c_14))
+type STuple3 = (Sing :: (a_12, b_13, c_14) -> *)
+instance (SingKind ('KProxy :: KProxy a_12),
+          SingKind ('KProxy :: KProxy b_13),
+          SingKind ('KProxy :: KProxy c_14)) =>
+          SingKind ('KProxy :: KProxy (a_12, b_13, c_14)) where
+  type DemoteRep ('KProxy :: KProxy (a_12,
+                                    b_13,
+                                    c_14)) = (DemoteRep ('KProxy :: KProxy a_12),
+                                              DemoteRep ('KProxy :: KProxy b_13),
+                                              DemoteRep ('KProxy :: KProxy c_14))
+  fromSing (STuple3 b_a1ukC b_a1ukD b_a1ukE)
+    = (,,) (fromSing b_a1ukC) (fromSing b_a1ukD) (fromSing b_a1ukE)
+  toSing ((,,) b_a1ukF b_a1ukG b_a1ukH)
+    = case
+          (,,)
+            (toSing b_a1ukF :: SomeSing ('KProxy :: KProxy a_12))
+            (toSing b_a1ukG :: SomeSing ('KProxy :: KProxy b_13))
+            (toSing b_a1ukH :: SomeSing ('KProxy :: KProxy c_14))
+      of {
+        (,,) (SomeSing c_a1ukI) (SomeSing c_a1ukJ) (SomeSing c_a1ukK)
+          -> SomeSing (STuple3 c_a1ukI c_a1ukJ c_a1ukK) }
+instance (SingI n_a1ukz, SingI n_a1ukA, SingI n_a1ukB) =>
+          SingI '((n_a1ukz :: a_12),
+                  (n_a1ukA :: b_13),
+                  (n_a1ukB :: c_14)) where
+  sing = STuple3 sing sing sing
+type Tuple4Sym4 (t_a1ukP :: a_12)
+                (t_a1ukQ :: b_13)
+                (t_a1ukR :: c_14)
+                (t_a1ukS :: d_15) =
+    '(t_a1ukP, t_a1ukQ, t_a1ukR, t_a1ukS)
+instance SuppressUnusedWarnings Tuple4Sym3 where
+  suppressUnusedWarnings _ = snd ((,) Tuple4Sym3KindInference ())
+data Tuple4Sym3 (l_a1ul3 :: a_12)
+                (l_a1ul4 :: b_13)
+                (l_a1ul5 :: c_14)
+                (l_a1ul2 :: TyFun d_15 (a_12, b_13, c_14, d_15))
+  = forall arg_a1ul6. KindOf (Apply (Tuple4Sym3 l_a1ul3 l_a1ul4 l_a1ul5) arg_a1ul6) ~ KindOf (Tuple4Sym4 l_a1ul3 l_a1ul4 l_a1ul5 arg_a1ul6) =>
+    Tuple4Sym3KindInference
+type instance Apply (Tuple4Sym3 l_a1ul3 l_a1ul4 l_a1ul5) l_a1ul2 = Tuple4Sym4 l_a1ul3 l_a1ul4 l_a1ul5 l_a1ul2
+instance SuppressUnusedWarnings Tuple4Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Tuple4Sym2KindInference ())
+data Tuple4Sym2 (l_a1ukZ :: a_12)
+                (l_a1ul0 :: b_13)
+                (l_a1ukY :: TyFun c_14 (TyFun d_15 (a_12, b_13, c_14, d_15) -> *))
+  = forall arg_a1ul1. KindOf (Apply (Tuple4Sym2 l_a1ukZ l_a1ul0) arg_a1ul1) ~ KindOf (Tuple4Sym3 l_a1ukZ l_a1ul0 arg_a1ul1) =>
+    Tuple4Sym2KindInference
+type instance Apply (Tuple4Sym2 l_a1ukZ l_a1ul0) l_a1ukY = Tuple4Sym3 l_a1ukZ l_a1ul0 l_a1ukY
+instance SuppressUnusedWarnings Tuple4Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Tuple4Sym1KindInference ())
+data Tuple4Sym1 (l_a1ukW :: a_12)
+                (l_a1ukV :: TyFun b_13 (TyFun c_14 (TyFun d_15 (a_12,
+                                                                b_13,
+                                                                c_14,
+                                                                d_15)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1ukX. KindOf (Apply (Tuple4Sym1 l_a1ukW) arg_a1ukX) ~ KindOf (Tuple4Sym2 l_a1ukW arg_a1ukX) =>
+    Tuple4Sym1KindInference
+type instance Apply (Tuple4Sym1 l_a1ukW) l_a1ukV = Tuple4Sym2 l_a1ukW l_a1ukV
+instance SuppressUnusedWarnings Tuple4Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Tuple4Sym0KindInference ())
+data Tuple4Sym0 (l_a1ukT :: TyFun a_12 (TyFun b_13 (TyFun c_14 (TyFun d_15 (a_12,
+                                                                            b_13,
+                                                                            c_14,
+                                                                            d_15)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1ukU. KindOf (Apply Tuple4Sym0 arg_a1ukU) ~ KindOf (Tuple4Sym1 arg_a1ukU) =>
+    Tuple4Sym0KindInference
+type instance Apply Tuple4Sym0 l_a1ukT = Tuple4Sym1 l_a1ukT
+data instance Sing (z_a1ul7 :: (a_12, b_13, c_14, d_15))
+  = forall (n_a1ul8 :: a_12)
+            (n_a1ul9 :: b_13)
+            (n_a1ula :: c_14)
+            (n_a1ulb :: d_15). z_a1ul7 ~ '(n_a1ul8,
+                                          n_a1ul9,
+                                          n_a1ula,
+                                          n_a1ulb) =>
+    STuple4 (Sing (n_a1ul8 :: a_12)) (Sing (n_a1ul9 :: b_13)) (Sing (n_a1ula :: c_14)) (Sing (n_a1ulb :: d_15))
+type STuple4 = (Sing :: (a_12, b_13, c_14, d_15) -> *)
+instance (SingKind ('KProxy :: KProxy a_12),
+          SingKind ('KProxy :: KProxy b_13),
+          SingKind ('KProxy :: KProxy c_14),
+          SingKind ('KProxy :: KProxy d_15)) =>
+          SingKind ('KProxy :: KProxy (a_12, b_13, c_14, d_15)) where
+  type DemoteRep ('KProxy :: KProxy (a_12,
+                                    b_13,
+                                    c_14,
+                                    d_15)) = (DemoteRep ('KProxy :: KProxy a_12),
+                                              DemoteRep ('KProxy :: KProxy b_13),
+                                              DemoteRep ('KProxy :: KProxy c_14),
+                                              DemoteRep ('KProxy :: KProxy d_15))
+  fromSing (STuple4 b_a1ulc b_a1uld b_a1ule b_a1ulf)
+    = (,,,)
+        (fromSing b_a1ulc)
+        (fromSing b_a1uld)
+        (fromSing b_a1ule)
+        (fromSing b_a1ulf)
+  toSing ((,,,) b_a1ulg b_a1ulh b_a1uli b_a1ulj)
+    = case
+          (,,,)
+            (toSing b_a1ulg :: SomeSing ('KProxy :: KProxy a_12))
+            (toSing b_a1ulh :: SomeSing ('KProxy :: KProxy b_13))
+            (toSing b_a1uli :: SomeSing ('KProxy :: KProxy c_14))
+            (toSing b_a1ulj :: SomeSing ('KProxy :: KProxy d_15))
+      of {
+        (,,,) (SomeSing c_a1ulk)
+              (SomeSing c_a1ull)
+              (SomeSing c_a1ulm)
+              (SomeSing c_a1uln)
+          -> SomeSing (STuple4 c_a1ulk c_a1ull c_a1ulm c_a1uln) }
+instance (SingI n_a1ul8,
+          SingI n_a1ul9,
+          SingI n_a1ula,
+          SingI n_a1ulb) =>
+          SingI '((n_a1ul8 :: a_12),
+                  (n_a1ul9 :: b_13),
+                  (n_a1ula :: c_14),
+                  (n_a1ulb :: d_15)) where
+  sing = STuple4 sing sing sing sing
+type Tuple5Sym5 (t_a1ult :: a_12)
+                (t_a1ulu :: b_13)
+                (t_a1ulv :: c_14)
+                (t_a1ulw :: d_15)
+                (t_a1ulx :: e_16) =
+    '(t_a1ult, t_a1ulu, t_a1ulv, t_a1ulw, t_a1ulx)
+instance SuppressUnusedWarnings Tuple5Sym4 where
+  suppressUnusedWarnings _ = snd ((,) Tuple5Sym4KindInference ())
+data Tuple5Sym4 (l_a1ulN :: a_12)
+                (l_a1ulO :: b_13)
+                (l_a1ulP :: c_14)
+                (l_a1ulQ :: d_15)
+                (l_a1ulM :: TyFun e_16 (a_12, b_13, c_14, d_15, e_16))
+  = forall arg_a1ulR. KindOf (Apply (Tuple5Sym4 l_a1ulN l_a1ulO l_a1ulP l_a1ulQ) arg_a1ulR) ~ KindOf (Tuple5Sym5 l_a1ulN l_a1ulO l_a1ulP l_a1ulQ arg_a1ulR) =>
+    Tuple5Sym4KindInference
+type instance Apply (Tuple5Sym4 l_a1ulN l_a1ulO l_a1ulP l_a1ulQ) l_a1ulM = Tuple5Sym5 l_a1ulN l_a1ulO l_a1ulP l_a1ulQ l_a1ulM
+instance SuppressUnusedWarnings Tuple5Sym3 where
+  suppressUnusedWarnings _ = snd ((,) Tuple5Sym3KindInference ())
+data Tuple5Sym3 (l_a1ulI :: a_12)
+                (l_a1ulJ :: b_13)
+                (l_a1ulK :: c_14)
+                (l_a1ulH :: TyFun d_15 (TyFun e_16 (a_12, b_13, c_14, d_15, e_16)
+                                        -> *))
+  = forall arg_a1ulL. KindOf (Apply (Tuple5Sym3 l_a1ulI l_a1ulJ l_a1ulK) arg_a1ulL) ~ KindOf (Tuple5Sym4 l_a1ulI l_a1ulJ l_a1ulK arg_a1ulL) =>
+    Tuple5Sym3KindInference
+type instance Apply (Tuple5Sym3 l_a1ulI l_a1ulJ l_a1ulK) l_a1ulH = Tuple5Sym4 l_a1ulI l_a1ulJ l_a1ulK l_a1ulH
+instance SuppressUnusedWarnings Tuple5Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Tuple5Sym2KindInference ())
+data Tuple5Sym2 (l_a1ulE :: a_12)
+                (l_a1ulF :: b_13)
+                (l_a1ulD :: TyFun c_14 (TyFun d_15 (TyFun e_16 (a_12,
+                                                                b_13,
+                                                                c_14,
+                                                                d_15,
+                                                                e_16)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1ulG. KindOf (Apply (Tuple5Sym2 l_a1ulE l_a1ulF) arg_a1ulG) ~ KindOf (Tuple5Sym3 l_a1ulE l_a1ulF arg_a1ulG) =>
+    Tuple5Sym2KindInference
+type instance Apply (Tuple5Sym2 l_a1ulE l_a1ulF) l_a1ulD = Tuple5Sym3 l_a1ulE l_a1ulF l_a1ulD
+instance SuppressUnusedWarnings Tuple5Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Tuple5Sym1KindInference ())
+data Tuple5Sym1 (l_a1ulB :: a_12)
+                (l_a1ulA :: TyFun b_13 (TyFun c_14 (TyFun d_15 (TyFun e_16 (a_12,
+                                                                            b_13,
+                                                                            c_14,
+                                                                            d_15,
+                                                                            e_16)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1ulC. KindOf (Apply (Tuple5Sym1 l_a1ulB) arg_a1ulC) ~ KindOf (Tuple5Sym2 l_a1ulB arg_a1ulC) =>
+    Tuple5Sym1KindInference
+type instance Apply (Tuple5Sym1 l_a1ulB) l_a1ulA = Tuple5Sym2 l_a1ulB l_a1ulA
+instance SuppressUnusedWarnings Tuple5Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Tuple5Sym0KindInference ())
+data Tuple5Sym0 (l_a1uly :: TyFun a_12 (TyFun b_13 (TyFun c_14 (TyFun d_15 (TyFun e_16 (a_12,
+                                                                                        b_13,
+                                                                                        c_14,
+                                                                                        d_15,
+                                                                                        e_16)
+                                                                            -> *)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1ulz. KindOf (Apply Tuple5Sym0 arg_a1ulz) ~ KindOf (Tuple5Sym1 arg_a1ulz) =>
+    Tuple5Sym0KindInference
+type instance Apply Tuple5Sym0 l_a1uly = Tuple5Sym1 l_a1uly
+data instance Sing (z_a1ulS :: (a_12, b_13, c_14, d_15, e_16))
+  = forall (n_a1ulT :: a_12)
+            (n_a1ulU :: b_13)
+            (n_a1ulV :: c_14)
+            (n_a1ulW :: d_15)
+            (n_a1ulX :: e_16). z_a1ulS ~ '(n_a1ulT,
+                                          n_a1ulU,
+                                          n_a1ulV,
+                                          n_a1ulW,
+                                          n_a1ulX) =>
+    STuple5 (Sing (n_a1ulT :: a_12)) (Sing (n_a1ulU :: b_13)) (Sing (n_a1ulV :: c_14)) (Sing (n_a1ulW :: d_15)) (Sing (n_a1ulX :: e_16))
+type STuple5 = (Sing :: (a_12, b_13, c_14, d_15, e_16) -> *)
+instance (SingKind ('KProxy :: KProxy a_12),
+          SingKind ('KProxy :: KProxy b_13),
+          SingKind ('KProxy :: KProxy c_14),
+          SingKind ('KProxy :: KProxy d_15),
+          SingKind ('KProxy :: KProxy e_16)) =>
+          SingKind ('KProxy :: KProxy (a_12, b_13, c_14, d_15, e_16)) where
+  type DemoteRep ('KProxy :: KProxy (a_12,
+                                    b_13,
+                                    c_14,
+                                    d_15,
+                                    e_16)) = (DemoteRep ('KProxy :: KProxy a_12),
+                                              DemoteRep ('KProxy :: KProxy b_13),
+                                              DemoteRep ('KProxy :: KProxy c_14),
+                                              DemoteRep ('KProxy :: KProxy d_15),
+                                              DemoteRep ('KProxy :: KProxy e_16))
+  fromSing (STuple5 b_a1ulY b_a1ulZ b_a1um0 b_a1um1 b_a1um2)
+    = (,,,,)
+        (fromSing b_a1ulY)
+        (fromSing b_a1ulZ)
+        (fromSing b_a1um0)
+        (fromSing b_a1um1)
+        (fromSing b_a1um2)
+  toSing ((,,,,) b_a1um3 b_a1um4 b_a1um5 b_a1um6 b_a1um7)
+    = case
+          (,,,,)
+            (toSing b_a1um3 :: SomeSing ('KProxy :: KProxy a_12))
+            (toSing b_a1um4 :: SomeSing ('KProxy :: KProxy b_13))
+            (toSing b_a1um5 :: SomeSing ('KProxy :: KProxy c_14))
+            (toSing b_a1um6 :: SomeSing ('KProxy :: KProxy d_15))
+            (toSing b_a1um7 :: SomeSing ('KProxy :: KProxy e_16))
+      of {
+        (,,,,) (SomeSing c_a1um8)
+                (SomeSing c_a1um9)
+                (SomeSing c_a1uma)
+                (SomeSing c_a1umb)
+                (SomeSing c_a1umc)
+          -> SomeSing (STuple5 c_a1um8 c_a1um9 c_a1uma c_a1umb c_a1umc) }
+instance (SingI n_a1ulT,
+          SingI n_a1ulU,
+          SingI n_a1ulV,
+          SingI n_a1ulW,
+          SingI n_a1ulX) =>
+          SingI '((n_a1ulT :: a_12),
+                  (n_a1ulU :: b_13),
+                  (n_a1ulV :: c_14),
+                  (n_a1ulW :: d_15),
+                  (n_a1ulX :: e_16)) where
+  sing = STuple5 sing sing sing sing sing
+type Tuple6Sym6 (t_a1umj :: a_12)
+                (t_a1umk :: b_13)
+                (t_a1uml :: c_14)
+                (t_a1umm :: d_15)
+                (t_a1umn :: e_16)
+                (t_a1umo :: f_17) =
+    '(t_a1umj, t_a1umk, t_a1uml, t_a1umm, t_a1umn, t_a1umo)
+instance SuppressUnusedWarnings Tuple6Sym5 where
+  suppressUnusedWarnings _ = snd ((,) Tuple6Sym5KindInference ())
+data Tuple6Sym5 (l_a1umK :: a_12)
+                (l_a1umL :: b_13)
+                (l_a1umM :: c_14)
+                (l_a1umN :: d_15)
+                (l_a1umO :: e_16)
+                (l_a1umJ :: TyFun f_17 (a_12, b_13, c_14, d_15, e_16, f_17))
+  = forall arg_a1umP. KindOf (Apply (Tuple6Sym5 l_a1umK l_a1umL l_a1umM l_a1umN l_a1umO) arg_a1umP) ~ KindOf (Tuple6Sym6 l_a1umK l_a1umL l_a1umM l_a1umN l_a1umO arg_a1umP) =>
+    Tuple6Sym5KindInference
+type instance Apply (Tuple6Sym5 l_a1umK l_a1umL l_a1umM l_a1umN l_a1umO) l_a1umJ = Tuple6Sym6 l_a1umK l_a1umL l_a1umM l_a1umN l_a1umO l_a1umJ
+instance SuppressUnusedWarnings Tuple6Sym4 where
+  suppressUnusedWarnings _ = snd ((,) Tuple6Sym4KindInference ())
+data Tuple6Sym4 (l_a1umE :: a_12)
+                (l_a1umF :: b_13)
+                (l_a1umG :: c_14)
+                (l_a1umH :: d_15)
+                (l_a1umD :: TyFun e_16 (TyFun f_17 (a_12,
+                                                    b_13,
+                                                    c_14,
+                                                    d_15,
+                                                    e_16,
+                                                    f_17)
+                                        -> *))
+  = forall arg_a1umI. KindOf (Apply (Tuple6Sym4 l_a1umE l_a1umF l_a1umG l_a1umH) arg_a1umI) ~ KindOf (Tuple6Sym5 l_a1umE l_a1umF l_a1umG l_a1umH arg_a1umI) =>
+    Tuple6Sym4KindInference
+type instance Apply (Tuple6Sym4 l_a1umE l_a1umF l_a1umG l_a1umH) l_a1umD = Tuple6Sym5 l_a1umE l_a1umF l_a1umG l_a1umH l_a1umD
+instance SuppressUnusedWarnings Tuple6Sym3 where
+  suppressUnusedWarnings _ = snd ((,) Tuple6Sym3KindInference ())
+data Tuple6Sym3 (l_a1umz :: a_12)
+                (l_a1umA :: b_13)
+                (l_a1umB :: c_14)
+                (l_a1umy :: TyFun d_15 (TyFun e_16 (TyFun f_17 (a_12,
+                                                                b_13,
+                                                                c_14,
+                                                                d_15,
+                                                                e_16,
+                                                                f_17)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1umC. KindOf (Apply (Tuple6Sym3 l_a1umz l_a1umA l_a1umB) arg_a1umC) ~ KindOf (Tuple6Sym4 l_a1umz l_a1umA l_a1umB arg_a1umC) =>
+    Tuple6Sym3KindInference
+type instance Apply (Tuple6Sym3 l_a1umz l_a1umA l_a1umB) l_a1umy = Tuple6Sym4 l_a1umz l_a1umA l_a1umB l_a1umy
+instance SuppressUnusedWarnings Tuple6Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Tuple6Sym2KindInference ())
+data Tuple6Sym2 (l_a1umv :: a_12)
+                (l_a1umw :: b_13)
+                (l_a1umu :: TyFun c_14 (TyFun d_15 (TyFun e_16 (TyFun f_17 (a_12,
+                                                                            b_13,
+                                                                            c_14,
+                                                                            d_15,
+                                                                            e_16,
+                                                                            f_17)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1umx. KindOf (Apply (Tuple6Sym2 l_a1umv l_a1umw) arg_a1umx) ~ KindOf (Tuple6Sym3 l_a1umv l_a1umw arg_a1umx) =>
+    Tuple6Sym2KindInference
+type instance Apply (Tuple6Sym2 l_a1umv l_a1umw) l_a1umu = Tuple6Sym3 l_a1umv l_a1umw l_a1umu
+instance SuppressUnusedWarnings Tuple6Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Tuple6Sym1KindInference ())
+data Tuple6Sym1 (l_a1ums :: a_12)
+                (l_a1umr :: TyFun b_13 (TyFun c_14 (TyFun d_15 (TyFun e_16 (TyFun f_17 (a_12,
+                                                                                        b_13,
+                                                                                        c_14,
+                                                                                        d_15,
+                                                                                        e_16,
+                                                                                        f_17)
+                                                                            -> *)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1umt. KindOf (Apply (Tuple6Sym1 l_a1ums) arg_a1umt) ~ KindOf (Tuple6Sym2 l_a1ums arg_a1umt) =>
+    Tuple6Sym1KindInference
+type instance Apply (Tuple6Sym1 l_a1ums) l_a1umr = Tuple6Sym2 l_a1ums l_a1umr
+instance SuppressUnusedWarnings Tuple6Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Tuple6Sym0KindInference ())
+data Tuple6Sym0 (l_a1ump :: TyFun a_12 (TyFun b_13 (TyFun c_14 (TyFun d_15 (TyFun e_16 (TyFun f_17 (a_12,
+                                                                                                    b_13,
+                                                                                                    c_14,
+                                                                                                    d_15,
+                                                                                                    e_16,
+                                                                                                    f_17)
+                                                                                        -> *)
+                                                                            -> *)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1umq. KindOf (Apply Tuple6Sym0 arg_a1umq) ~ KindOf (Tuple6Sym1 arg_a1umq) =>
+    Tuple6Sym0KindInference
+type instance Apply Tuple6Sym0 l_a1ump = Tuple6Sym1 l_a1ump
+data instance Sing (z_a1umQ :: (a_12,
+                                b_13,
+                                c_14,
+                                d_15,
+                                e_16,
+                                f_17))
+  = forall (n_a1umR :: a_12)
+            (n_a1umS :: b_13)
+            (n_a1umT :: c_14)
+            (n_a1umU :: d_15)
+            (n_a1umV :: e_16)
+            (n_a1umW :: f_17). z_a1umQ ~ '(n_a1umR,
+                                          n_a1umS,
+                                          n_a1umT,
+                                          n_a1umU,
+                                          n_a1umV,
+                                          n_a1umW) =>
+    STuple6 (Sing (n_a1umR :: a_12)) (Sing (n_a1umS :: b_13)) (Sing (n_a1umT :: c_14)) (Sing (n_a1umU :: d_15)) (Sing (n_a1umV :: e_16)) (Sing (n_a1umW :: f_17))
+type STuple6 = (Sing :: (a_12, b_13, c_14, d_15, e_16, f_17) -> *)
+instance (SingKind ('KProxy :: KProxy a_12),
+          SingKind ('KProxy :: KProxy b_13),
+          SingKind ('KProxy :: KProxy c_14),
+          SingKind ('KProxy :: KProxy d_15),
+          SingKind ('KProxy :: KProxy e_16),
+          SingKind ('KProxy :: KProxy f_17)) =>
+          SingKind ('KProxy :: KProxy (a_12,
+                                      b_13,
+                                      c_14,
+                                      d_15,
+                                      e_16,
+                                      f_17)) where
+  type DemoteRep ('KProxy :: KProxy (a_12,
+                                    b_13,
+                                    c_14,
+                                    d_15,
+                                    e_16,
+                                    f_17)) = (DemoteRep ('KProxy :: KProxy a_12),
+                                              DemoteRep ('KProxy :: KProxy b_13),
+                                              DemoteRep ('KProxy :: KProxy c_14),
+                                              DemoteRep ('KProxy :: KProxy d_15),
+                                              DemoteRep ('KProxy :: KProxy e_16),
+                                              DemoteRep ('KProxy :: KProxy f_17))
+  fromSing (STuple6 b_a1umX b_a1umY b_a1umZ b_a1un0 b_a1un1 b_a1un2)
+    = (,,,,,)
+        (fromSing b_a1umX)
+        (fromSing b_a1umY)
+        (fromSing b_a1umZ)
+        (fromSing b_a1un0)
+        (fromSing b_a1un1)
+        (fromSing b_a1un2)
+  toSing ((,,,,,) b_a1un3 b_a1un4 b_a1un5 b_a1un6 b_a1un7 b_a1un8)
+    = case
+          (,,,,,)
+            (toSing b_a1un3 :: SomeSing ('KProxy :: KProxy a_12))
+            (toSing b_a1un4 :: SomeSing ('KProxy :: KProxy b_13))
+            (toSing b_a1un5 :: SomeSing ('KProxy :: KProxy c_14))
+            (toSing b_a1un6 :: SomeSing ('KProxy :: KProxy d_15))
+            (toSing b_a1un7 :: SomeSing ('KProxy :: KProxy e_16))
+            (toSing b_a1un8 :: SomeSing ('KProxy :: KProxy f_17))
+      of {
+        (,,,,,) (SomeSing c_a1un9)
+                (SomeSing c_a1una)
+                (SomeSing c_a1unb)
+                (SomeSing c_a1unc)
+                (SomeSing c_a1und)
+                (SomeSing c_a1une)
+          -> SomeSing
+                (STuple6 c_a1un9 c_a1una c_a1unb c_a1unc c_a1und c_a1une) }
+instance (SingI n_a1umR,
+          SingI n_a1umS,
+          SingI n_a1umT,
+          SingI n_a1umU,
+          SingI n_a1umV,
+          SingI n_a1umW) =>
+          SingI '((n_a1umR :: a_12),
+                  (n_a1umS :: b_13),
+                  (n_a1umT :: c_14),
+                  (n_a1umU :: d_15),
+                  (n_a1umV :: e_16),
+                  (n_a1umW :: f_17)) where
+  sing = STuple6 sing sing sing sing sing sing
+type Tuple7Sym7 (t_a1unm :: a_12)
+                (t_a1unn :: b_13)
+                (t_a1uno :: c_14)
+                (t_a1unp :: d_15)
+                (t_a1unq :: e_16)
+                (t_a1unr :: f_17)
+                (t_a1uns :: g_18) =
+    '(t_a1unm, t_a1unn, t_a1uno, t_a1unp, t_a1unq, t_a1unr, t_a1uns)
+instance SuppressUnusedWarnings Tuple7Sym6 where
+  suppressUnusedWarnings _ = snd ((,) Tuple7Sym6KindInference ())
+data Tuple7Sym6 (l_a1unV :: a_12)
+                (l_a1unW :: b_13)
+                (l_a1unX :: c_14)
+                (l_a1unY :: d_15)
+                (l_a1unZ :: e_16)
+                (l_a1uo0 :: f_17)
+                (l_a1unU :: TyFun g_18 (a_12, b_13, c_14, d_15, e_16, f_17, g_18))
+  = forall arg_a1uo1. KindOf (Apply (Tuple7Sym6 l_a1unV l_a1unW l_a1unX l_a1unY l_a1unZ l_a1uo0) arg_a1uo1) ~ KindOf (Tuple7Sym7 l_a1unV l_a1unW l_a1unX l_a1unY l_a1unZ l_a1uo0 arg_a1uo1) =>
+    Tuple7Sym6KindInference
+type instance Apply (Tuple7Sym6 l_a1unV l_a1unW l_a1unX l_a1unY l_a1unZ l_a1uo0) l_a1unU = Tuple7Sym7 l_a1unV l_a1unW l_a1unX l_a1unY l_a1unZ l_a1uo0 l_a1unU
+instance SuppressUnusedWarnings Tuple7Sym5 where
+  suppressUnusedWarnings _ = snd ((,) Tuple7Sym5KindInference ())
+data Tuple7Sym5 (l_a1unO :: a_12)
+                (l_a1unP :: b_13)
+                (l_a1unQ :: c_14)
+                (l_a1unR :: d_15)
+                (l_a1unS :: e_16)
+                (l_a1unN :: TyFun f_17 (TyFun g_18 (a_12,
+                                                    b_13,
+                                                    c_14,
+                                                    d_15,
+                                                    e_16,
+                                                    f_17,
+                                                    g_18)
+                                        -> *))
+  = forall arg_a1unT. KindOf (Apply (Tuple7Sym5 l_a1unO l_a1unP l_a1unQ l_a1unR l_a1unS) arg_a1unT) ~ KindOf (Tuple7Sym6 l_a1unO l_a1unP l_a1unQ l_a1unR l_a1unS arg_a1unT) =>
+    Tuple7Sym5KindInference
+type instance Apply (Tuple7Sym5 l_a1unO l_a1unP l_a1unQ l_a1unR l_a1unS) l_a1unN = Tuple7Sym6 l_a1unO l_a1unP l_a1unQ l_a1unR l_a1unS l_a1unN
+instance SuppressUnusedWarnings Tuple7Sym4 where
+  suppressUnusedWarnings _ = snd ((,) Tuple7Sym4KindInference ())
+data Tuple7Sym4 (l_a1unI :: a_12)
+                (l_a1unJ :: b_13)
+                (l_a1unK :: c_14)
+                (l_a1unL :: d_15)
+                (l_a1unH :: TyFun e_16 (TyFun f_17 (TyFun g_18 (a_12,
+                                                                b_13,
+                                                                c_14,
+                                                                d_15,
+                                                                e_16,
+                                                                f_17,
+                                                                g_18)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1unM. KindOf (Apply (Tuple7Sym4 l_a1unI l_a1unJ l_a1unK l_a1unL) arg_a1unM) ~ KindOf (Tuple7Sym5 l_a1unI l_a1unJ l_a1unK l_a1unL arg_a1unM) =>
+    Tuple7Sym4KindInference
+type instance Apply (Tuple7Sym4 l_a1unI l_a1unJ l_a1unK l_a1unL) l_a1unH = Tuple7Sym5 l_a1unI l_a1unJ l_a1unK l_a1unL l_a1unH
+instance SuppressUnusedWarnings Tuple7Sym3 where
+  suppressUnusedWarnings _ = snd ((,) Tuple7Sym3KindInference ())
+data Tuple7Sym3 (l_a1unD :: a_12)
+                (l_a1unE :: b_13)
+                (l_a1unF :: c_14)
+                (l_a1unC :: TyFun d_15 (TyFun e_16 (TyFun f_17 (TyFun g_18 (a_12,
+                                                                            b_13,
+                                                                            c_14,
+                                                                            d_15,
+                                                                            e_16,
+                                                                            f_17,
+                                                                            g_18)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1unG. KindOf (Apply (Tuple7Sym3 l_a1unD l_a1unE l_a1unF) arg_a1unG) ~ KindOf (Tuple7Sym4 l_a1unD l_a1unE l_a1unF arg_a1unG) =>
+    Tuple7Sym3KindInference
+type instance Apply (Tuple7Sym3 l_a1unD l_a1unE l_a1unF) l_a1unC = Tuple7Sym4 l_a1unD l_a1unE l_a1unF l_a1unC
+instance SuppressUnusedWarnings Tuple7Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Tuple7Sym2KindInference ())
+data Tuple7Sym2 (l_a1unz :: a_12)
+                (l_a1unA :: b_13)
+                (l_a1uny :: TyFun c_14 (TyFun d_15 (TyFun e_16 (TyFun f_17 (TyFun g_18 (a_12,
+                                                                                        b_13,
+                                                                                        c_14,
+                                                                                        d_15,
+                                                                                        e_16,
+                                                                                        f_17,
+                                                                                        g_18)
+                                                                            -> *)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1unB. KindOf (Apply (Tuple7Sym2 l_a1unz l_a1unA) arg_a1unB) ~ KindOf (Tuple7Sym3 l_a1unz l_a1unA arg_a1unB) =>
+    Tuple7Sym2KindInference
+type instance Apply (Tuple7Sym2 l_a1unz l_a1unA) l_a1uny = Tuple7Sym3 l_a1unz l_a1unA l_a1uny
+instance SuppressUnusedWarnings Tuple7Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Tuple7Sym1KindInference ())
+data Tuple7Sym1 (l_a1unw :: a_12)
+                (l_a1unv :: TyFun b_13 (TyFun c_14 (TyFun d_15 (TyFun e_16 (TyFun f_17 (TyFun g_18 (a_12,
+                                                                                                    b_13,
+                                                                                                    c_14,
+                                                                                                    d_15,
+                                                                                                    e_16,
+                                                                                                    f_17,
+                                                                                                    g_18)
+                                                                                        -> *)
+                                                                            -> *)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1unx. KindOf (Apply (Tuple7Sym1 l_a1unw) arg_a1unx) ~ KindOf (Tuple7Sym2 l_a1unw arg_a1unx) =>
+    Tuple7Sym1KindInference
+type instance Apply (Tuple7Sym1 l_a1unw) l_a1unv = Tuple7Sym2 l_a1unw l_a1unv
+instance SuppressUnusedWarnings Tuple7Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Tuple7Sym0KindInference ())
+data Tuple7Sym0 (l_a1unt :: TyFun a_12 (TyFun b_13 (TyFun c_14 (TyFun d_15 (TyFun e_16 (TyFun f_17 (TyFun g_18 (a_12,
+                                                                                                                b_13,
+                                                                                                                c_14,
+                                                                                                                d_15,
+                                                                                                                e_16,
+                                                                                                                f_17,
+                                                                                                                g_18)
+                                                                                                    -> *)
+                                                                                        -> *)
+                                                                            -> *)
+                                                                -> *)
+                                                    -> *)
+                                        -> *))
+  = forall arg_a1unu. KindOf (Apply Tuple7Sym0 arg_a1unu) ~ KindOf (Tuple7Sym1 arg_a1unu) =>
+    Tuple7Sym0KindInference
+type instance Apply Tuple7Sym0 l_a1unt = Tuple7Sym1 l_a1unt
+data instance Sing (z_a1uo2 :: (a_12,
+                                b_13,
+                                c_14,
+                                d_15,
+                                e_16,
+                                f_17,
+                                g_18))
+  = forall (n_a1uo3 :: a_12)
+            (n_a1uo4 :: b_13)
+            (n_a1uo5 :: c_14)
+            (n_a1uo6 :: d_15)
+            (n_a1uo7 :: e_16)
+            (n_a1uo8 :: f_17)
+            (n_a1uo9 :: g_18). z_a1uo2 ~ '(n_a1uo3,
+                                          n_a1uo4,
+                                          n_a1uo5,
+                                          n_a1uo6,
+                                          n_a1uo7,
+                                          n_a1uo8,
+                                          n_a1uo9) =>
+    STuple7 (Sing (n_a1uo3 :: a_12)) (Sing (n_a1uo4 :: b_13)) (Sing (n_a1uo5 :: c_14)) (Sing (n_a1uo6 :: d_15)) (Sing (n_a1uo7 :: e_16)) (Sing (n_a1uo8 :: f_17)) (Sing (n_a1uo9 :: g_18))
+type STuple7 =
+    (Sing :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18) -> *)
+instance (SingKind ('KProxy :: KProxy a_12),
+          SingKind ('KProxy :: KProxy b_13),
+          SingKind ('KProxy :: KProxy c_14),
+          SingKind ('KProxy :: KProxy d_15),
+          SingKind ('KProxy :: KProxy e_16),
+          SingKind ('KProxy :: KProxy f_17),
+          SingKind ('KProxy :: KProxy g_18)) =>
+          SingKind ('KProxy :: KProxy (a_12,
+                                      b_13,
+                                      c_14,
+                                      d_15,
+                                      e_16,
+                                      f_17,
+                                      g_18)) where
+  type DemoteRep ('KProxy :: KProxy (a_12,
+                                    b_13,
+                                    c_14,
+                                    d_15,
+                                    e_16,
+                                    f_17,
+                                    g_18)) = (DemoteRep ('KProxy :: KProxy a_12),
+                                              DemoteRep ('KProxy :: KProxy b_13),
+                                              DemoteRep ('KProxy :: KProxy c_14),
+                                              DemoteRep ('KProxy :: KProxy d_15),
+                                              DemoteRep ('KProxy :: KProxy e_16),
+                                              DemoteRep ('KProxy :: KProxy f_17),
+                                              DemoteRep ('KProxy :: KProxy g_18))
+  fromSing
+    (STuple7 b_a1uoa b_a1uob b_a1uoc b_a1uod b_a1uoe b_a1uof b_a1uog)
+    = (,,,,,,)
+        (fromSing b_a1uoa)
+        (fromSing b_a1uob)
+        (fromSing b_a1uoc)
+        (fromSing b_a1uod)
+        (fromSing b_a1uoe)
+        (fromSing b_a1uof)
+        (fromSing b_a1uog)
+  toSing
+    ((,,,,,,) b_a1uoh b_a1uoi b_a1uoj b_a1uok b_a1uol b_a1uom b_a1uon)
+    = case
+          (,,,,,,)
+            (toSing b_a1uoh :: SomeSing ('KProxy :: KProxy a_12))
+            (toSing b_a1uoi :: SomeSing ('KProxy :: KProxy b_13))
+            (toSing b_a1uoj :: SomeSing ('KProxy :: KProxy c_14))
+            (toSing b_a1uok :: SomeSing ('KProxy :: KProxy d_15))
+            (toSing b_a1uol :: SomeSing ('KProxy :: KProxy e_16))
+            (toSing b_a1uom :: SomeSing ('KProxy :: KProxy f_17))
+            (toSing b_a1uon :: SomeSing ('KProxy :: KProxy g_18))
+      of {
+        (,,,,,,) (SomeSing c_a1uoo)
+                  (SomeSing c_a1uop)
+                  (SomeSing c_a1uoq)
+                  (SomeSing c_a1uor)
+                  (SomeSing c_a1uos)
+                  (SomeSing c_a1uot)
+                  (SomeSing c_a1uou)
+          -> SomeSing
+                (STuple7 c_a1uoo c_a1uop c_a1uoq c_a1uor c_a1uos c_a1uot c_a1uou) }
+instance (SingI n_a1uo3,
+          SingI n_a1uo4,
+          SingI n_a1uo5,
+          SingI n_a1uo6,
+          SingI n_a1uo7,
+          SingI n_a1uo8,
+          SingI n_a1uo9) =>
+          SingI '((n_a1uo3 :: a_12),
+                  (n_a1uo4 :: b_13),
+                  (n_a1uo5 :: c_14),
+                  (n_a1uo6 :: d_15),
+                  (n_a1uo7 :: e_16),
+                  (n_a1uo8 :: f_17),
+                  (n_a1uo9 :: g_18)) where
+  sing = STuple7 sing sing sing sing sing sing sing
+type FalseSym0 = 'False
+type TrueSym0 = 'True
+data instance Sing (z_a1uov :: Bool)
+  = z_a1uov ~ 'False => SFalse | z_a1uov ~ 'True => STrue
+type SBool = (Sing :: Bool -> *)
+instance SingKind ('KProxy :: KProxy Bool) where
+  type DemoteRep ('KProxy :: KProxy Bool) = Bool
+  fromSing SFalse = False
+  fromSing STrue = True
+  toSing False = SomeSing SFalse
+  toSing True = SomeSing STrue
+instance SingI 'False where
+  sing = SFalse
+instance SingI 'True where
+  sing = STrue
+type LTSym0 = 'LT
+type EQSym0 = 'EQ
+type GTSym0 = 'GT
+data instance Sing (z_a1uow :: Ordering)
+  = z_a1uow ~ 'LT => SLT | z_a1uow ~ 'EQ => SEQ | z_a1uow ~ 'GT => SGT
+type SOrdering = (Sing :: Ordering -> *)
+instance SingKind ('KProxy :: KProxy Ordering) where
+  type DemoteRep ('KProxy :: KProxy Ordering) = Ordering
+  fromSing SLT = LT
+  fromSing SEQ = EQ
+  fromSing SGT = GT
+  toSing LT = SomeSing SLT
+  toSing EQ = SomeSing SEQ
+  toSing GT = SomeSing SGT
+instance SingI 'LT where
+  sing = SLT
+instance SingI 'EQ where
+  sing = SEQ
+instance SingI 'GT where
+  sing = SGT
+type Tuple0Sym0 = '()
+data instance Sing (z_a1uox :: ()) = z_a1uox ~ '() => STuple0
+type STuple0 = (Sing :: () -> *)
+instance SingKind ('KProxy :: KProxy ()) where
+  type DemoteRep ('KProxy :: KProxy ()) = ()
+  fromSing STuple0 = ()
+  toSing () = SomeSing STuple0
+instance SingI '() where
+  sing = STuple0
+
+instance SDecide ('KProxy :: KProxy a_a5JI) =>
+          SDecide ('KProxy :: KProxy (Maybe a_a5JI)) where
+  (%~) SNothing SNothing = Proved Refl
+  (%~) SNothing (SJust _)
+    = Disproved
+        (\ x_a1wYq
+            -> case x_a1wYq of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) (SJust _) SNothing
+    = Disproved
+        (\ x_a1wYr
+            -> case x_a1wYr of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) (SJust a_a1wYs) (SJust b_a1wYt)
+    = case (%~) a_a1wYs b_a1wYt of {
+        Proved Refl -> Proved Refl;
+        Disproved contra_a1wYu
+          -> Disproved
+                (\ refl_a1wYv
+                  -> case refl_a1wYv of { Refl -> contra_a1wYu Refl }) }
+instance SDecide ('KProxy :: KProxy a_12) =>
+          SDecide ('KProxy :: KProxy [a_12]) where
+  (%~) SNil SNil = Proved Refl
+  (%~) SNil (SCons _ _)
+    = Disproved
+        (\ x_a1wYz
+            -> case x_a1wYz of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) (SCons _ _) SNil
+    = Disproved
+        (\ x_a1wYA
+            -> case x_a1wYA of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) (SCons a_a1wYB a_a1wYC) (SCons b_a1wYD b_a1wYE)
+    = case (,) ((%~) a_a1wYB b_a1wYD) ((%~) a_a1wYC b_a1wYE) of {
+        (,) (Proved Refl) (Proved Refl) -> Proved Refl;
+        (,) (Disproved contra_a1wYF) _
+          -> Disproved
+                (\ refl_a1wYG -> case refl_a1wYG of { Refl -> contra_a1wYF Refl });
+        (,) _ (Disproved contra_a1wYF)
+          -> Disproved
+                (\ refl_a1wYG
+                  -> case refl_a1wYG of { Refl -> contra_a1wYF Refl }) }
+instance (SDecide ('KProxy :: KProxy a_a8mn),
+          SDecide ('KProxy :: KProxy b_a8mo)) =>
+          SDecide ('KProxy :: KProxy (Either a_a8mn b_a8mo)) where
+  (%~) (SLeft a_a1wYK) (SLeft b_a1wYL)
+    = case (%~) a_a1wYK b_a1wYL of {
+        Proved Refl -> Proved Refl;
+        Disproved contra_a1wYM
+          -> Disproved
+                (\ refl_a1wYN
+                  -> case refl_a1wYN of { Refl -> contra_a1wYM Refl }) }
+  (%~) (SLeft _) (SRight _)
+    = Disproved
+        (\ x_a1wYO
+            -> case x_a1wYO of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) (SRight _) (SLeft _)
+    = Disproved
+        (\ x_a1wYP
+            -> case x_a1wYP of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) (SRight a_a1wYQ) (SRight b_a1wYR)
+    = case (%~) a_a1wYQ b_a1wYR of {
+        Proved Refl -> Proved Refl;
+        Disproved contra_a1wYS
+          -> Disproved
+                (\ refl_a1wYT
+                  -> case refl_a1wYT of { Refl -> contra_a1wYS Refl }) }
+instance (SDecide ('KProxy :: KProxy a_12),
+          SDecide ('KProxy :: KProxy b_13)) =>
+          SDecide ('KProxy :: KProxy (a_12, b_13)) where
+  (%~) (STuple2 a_a1wYX a_a1wYY) (STuple2 b_a1wYZ b_a1wZ0)
+    = case (,) ((%~) a_a1wYX b_a1wYZ) ((%~) a_a1wYY b_a1wZ0) of {
+        (,) (Proved Refl) (Proved Refl) -> Proved Refl;
+        (,) (Disproved contra_a1wZ1) _
+          -> Disproved
+                (\ refl_a1wZ2 -> case refl_a1wZ2 of { Refl -> contra_a1wZ1 Refl });
+        (,) _ (Disproved contra_a1wZ1)
+          -> Disproved
+                (\ refl_a1wZ2
+                  -> case refl_a1wZ2 of { Refl -> contra_a1wZ1 Refl }) }
+instance (SDecide ('KProxy :: KProxy a_12),
+          SDecide ('KProxy :: KProxy b_13),
+          SDecide ('KProxy :: KProxy c_14)) =>
+          SDecide ('KProxy :: KProxy (a_12, b_13, c_14)) where
+  (%~)
+    (STuple3 a_a1wZ7 a_a1wZ8 a_a1wZ9)
+    (STuple3 b_a1wZa b_a1wZb b_a1wZc)
+    = case
+          (,,)
+            ((%~) a_a1wZ7 b_a1wZa)
+            ((%~) a_a1wZ8 b_a1wZb)
+            ((%~) a_a1wZ9 b_a1wZc)
+      of {
+        (,,) (Proved Refl) (Proved Refl) (Proved Refl) -> Proved Refl;
+        (,,) (Disproved contra_a1wZd) _ _
+          -> Disproved
+                (\ refl_a1wZe -> case refl_a1wZe of { Refl -> contra_a1wZd Refl });
+        (,,) _ (Disproved contra_a1wZd) _
+          -> Disproved
+                (\ refl_a1wZe -> case refl_a1wZe of { Refl -> contra_a1wZd Refl });
+        (,,) _ _ (Disproved contra_a1wZd)
+          -> Disproved
+                (\ refl_a1wZe
+                  -> case refl_a1wZe of { Refl -> contra_a1wZd Refl }) }
+instance (SDecide ('KProxy :: KProxy a_12),
+          SDecide ('KProxy :: KProxy b_13),
+          SDecide ('KProxy :: KProxy c_14),
+          SDecide ('KProxy :: KProxy d_15)) =>
+          SDecide ('KProxy :: KProxy (a_12, b_13, c_14, d_15)) where
+  (%~)
+    (STuple4 a_a1wZk a_a1wZl a_a1wZm a_a1wZn)
+    (STuple4 b_a1wZo b_a1wZp b_a1wZq b_a1wZr)
+    = case
+          (,,,)
+            ((%~) a_a1wZk b_a1wZo)
+            ((%~) a_a1wZl b_a1wZp)
+            ((%~) a_a1wZm b_a1wZq)
+            ((%~) a_a1wZn b_a1wZr)
+      of {
+        (,,,) (Proved Refl) (Proved Refl) (Proved Refl) (Proved Refl)
+          -> Proved Refl;
+        (,,,) (Disproved contra_a1wZs) _ _ _
+          -> Disproved
+                (\ refl_a1wZt -> case refl_a1wZt of { Refl -> contra_a1wZs Refl });
+        (,,,) _ (Disproved contra_a1wZs) _ _
+          -> Disproved
+                (\ refl_a1wZt -> case refl_a1wZt of { Refl -> contra_a1wZs Refl });
+        (,,,) _ _ (Disproved contra_a1wZs) _
+          -> Disproved
+                (\ refl_a1wZt -> case refl_a1wZt of { Refl -> contra_a1wZs Refl });
+        (,,,) _ _ _ (Disproved contra_a1wZs)
+          -> Disproved
+                (\ refl_a1wZt
+                  -> case refl_a1wZt of { Refl -> contra_a1wZs Refl }) }
+instance (SDecide ('KProxy :: KProxy a_12),
+          SDecide ('KProxy :: KProxy b_13),
+          SDecide ('KProxy :: KProxy c_14),
+          SDecide ('KProxy :: KProxy d_15),
+          SDecide ('KProxy :: KProxy e_16)) =>
+          SDecide ('KProxy :: KProxy (a_12, b_13, c_14, d_15, e_16)) where
+  (%~)
+    (STuple5 a_a1wZA a_a1wZB a_a1wZC a_a1wZD a_a1wZE)
+    (STuple5 b_a1wZF b_a1wZG b_a1wZH b_a1wZI b_a1wZJ)
+    = case
+          (,,,,)
+            ((%~) a_a1wZA b_a1wZF)
+            ((%~) a_a1wZB b_a1wZG)
+            ((%~) a_a1wZC b_a1wZH)
+            ((%~) a_a1wZD b_a1wZI)
+            ((%~) a_a1wZE b_a1wZJ)
+      of {
+        (,,,,) (Proved Refl)
+                (Proved Refl)
+                (Proved Refl)
+                (Proved Refl)
+                (Proved Refl)
+          -> Proved Refl;
+        (,,,,) (Disproved contra_a1wZK) _ _ _ _
+          -> Disproved
+                (\ refl_a1wZL -> case refl_a1wZL of { Refl -> contra_a1wZK Refl });
+        (,,,,) _ (Disproved contra_a1wZK) _ _ _
+          -> Disproved
+                (\ refl_a1wZL -> case refl_a1wZL of { Refl -> contra_a1wZK Refl });
+        (,,,,) _ _ (Disproved contra_a1wZK) _ _
+          -> Disproved
+                (\ refl_a1wZL -> case refl_a1wZL of { Refl -> contra_a1wZK Refl });
+        (,,,,) _ _ _ (Disproved contra_a1wZK) _
+          -> Disproved
+                (\ refl_a1wZL -> case refl_a1wZL of { Refl -> contra_a1wZK Refl });
+        (,,,,) _ _ _ _ (Disproved contra_a1wZK)
+          -> Disproved
+                (\ refl_a1wZL
+                  -> case refl_a1wZL of { Refl -> contra_a1wZK Refl }) }
+instance (SDecide ('KProxy :: KProxy a_12),
+          SDecide ('KProxy :: KProxy b_13),
+          SDecide ('KProxy :: KProxy c_14),
+          SDecide ('KProxy :: KProxy d_15),
+          SDecide ('KProxy :: KProxy e_16),
+          SDecide ('KProxy :: KProxy f_17)) =>
+          SDecide ('KProxy :: KProxy (a_12,
+                                    b_13,
+                                    c_14,
+                                    d_15,
+                                    e_16,
+                                    f_17)) where
+  (%~)
+    (STuple6 a_a1wZT a_a1wZU a_a1wZV a_a1wZW a_a1wZX a_a1wZY)
+    (STuple6 b_a1wZZ b_a1x00 b_a1x01 b_a1x02 b_a1x03 b_a1x04)
+    = case
+          (,,,,,)
+            ((%~) a_a1wZT b_a1wZZ)
+            ((%~) a_a1wZU b_a1x00)
+            ((%~) a_a1wZV b_a1x01)
+            ((%~) a_a1wZW b_a1x02)
+            ((%~) a_a1wZX b_a1x03)
+            ((%~) a_a1wZY b_a1x04)
+      of {
+        (,,,,,) (Proved Refl)
+                (Proved Refl)
+                (Proved Refl)
+                (Proved Refl)
+                (Proved Refl)
+                (Proved Refl)
+          -> Proved Refl;
+        (,,,,,) (Disproved contra_a1x05) _ _ _ _ _
+          -> Disproved
+                (\ refl_a1x06 -> case refl_a1x06 of { Refl -> contra_a1x05 Refl });
+        (,,,,,) _ (Disproved contra_a1x05) _ _ _ _
+          -> Disproved
+                (\ refl_a1x06 -> case refl_a1x06 of { Refl -> contra_a1x05 Refl });
+        (,,,,,) _ _ (Disproved contra_a1x05) _ _ _
+          -> Disproved
+                (\ refl_a1x06 -> case refl_a1x06 of { Refl -> contra_a1x05 Refl });
+        (,,,,,) _ _ _ (Disproved contra_a1x05) _ _
+          -> Disproved
+                (\ refl_a1x06 -> case refl_a1x06 of { Refl -> contra_a1x05 Refl });
+        (,,,,,) _ _ _ _ (Disproved contra_a1x05) _
+          -> Disproved
+                (\ refl_a1x06 -> case refl_a1x06 of { Refl -> contra_a1x05 Refl });
+        (,,,,,) _ _ _ _ _ (Disproved contra_a1x05)
+          -> Disproved
+                (\ refl_a1x06
+                  -> case refl_a1x06 of { Refl -> contra_a1x05 Refl }) }
+instance (SDecide ('KProxy :: KProxy a_12),
+          SDecide ('KProxy :: KProxy b_13),
+          SDecide ('KProxy :: KProxy c_14),
+          SDecide ('KProxy :: KProxy d_15),
+          SDecide ('KProxy :: KProxy e_16),
+          SDecide ('KProxy :: KProxy f_17),
+          SDecide ('KProxy :: KProxy g_18)) =>
+          SDecide ('KProxy :: KProxy (a_12,
+                                    b_13,
+                                    c_14,
+                                    d_15,
+                                    e_16,
+                                    f_17,
+                                    g_18)) where
+  (%~)
+    (STuple7 a_a1x0f a_a1x0g a_a1x0h a_a1x0i a_a1x0j a_a1x0k a_a1x0l)
+    (STuple7 b_a1x0m b_a1x0n b_a1x0o b_a1x0p b_a1x0q b_a1x0r b_a1x0s)
+    = case
+          (,,,,,,)
+            ((%~) a_a1x0f b_a1x0m)
+            ((%~) a_a1x0g b_a1x0n)
+            ((%~) a_a1x0h b_a1x0o)
+            ((%~) a_a1x0i b_a1x0p)
+            ((%~) a_a1x0j b_a1x0q)
+            ((%~) a_a1x0k b_a1x0r)
+            ((%~) a_a1x0l b_a1x0s)
+      of {
+        (,,,,,,) (Proved Refl)
+                  (Proved Refl)
+                  (Proved Refl)
+                  (Proved Refl)
+                  (Proved Refl)
+                  (Proved Refl)
+                  (Proved Refl)
+          -> Proved Refl;
+        (,,,,,,) (Disproved contra_a1x0t) _ _ _ _ _ _
+          -> Disproved
+                (\ refl_a1x0u -> case refl_a1x0u of { Refl -> contra_a1x0t Refl });
+        (,,,,,,) _ (Disproved contra_a1x0t) _ _ _ _ _
+          -> Disproved
+                (\ refl_a1x0u -> case refl_a1x0u of { Refl -> contra_a1x0t Refl });
+        (,,,,,,) _ _ (Disproved contra_a1x0t) _ _ _ _
+          -> Disproved
+                (\ refl_a1x0u -> case refl_a1x0u of { Refl -> contra_a1x0t Refl });
+        (,,,,,,) _ _ _ (Disproved contra_a1x0t) _ _ _
+          -> Disproved
+                (\ refl_a1x0u -> case refl_a1x0u of { Refl -> contra_a1x0t Refl });
+        (,,,,,,) _ _ _ _ (Disproved contra_a1x0t) _ _
+          -> Disproved
+                (\ refl_a1x0u -> case refl_a1x0u of { Refl -> contra_a1x0t Refl });
+        (,,,,,,) _ _ _ _ _ (Disproved contra_a1x0t) _
+          -> Disproved
+                (\ refl_a1x0u -> case refl_a1x0u of { Refl -> contra_a1x0t Refl });
+        (,,,,,,) _ _ _ _ _ _ (Disproved contra_a1x0t)
+          -> Disproved
+                (\ refl_a1x0u
+                  -> case refl_a1x0u of { Refl -> contra_a1x0t Refl }) }
+instance SDecide ('KProxy :: KProxy Bool) where
+  (%~) SFalse SFalse = Proved Refl
+  (%~) SFalse STrue
+    = Disproved
+        (\ x_a1x0w
+            -> case x_a1x0w of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) STrue SFalse
+    = Disproved
+        (\ x_a1x0x
+            -> case x_a1x0x of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) STrue STrue = Proved Refl
+instance SDecide ('KProxy :: KProxy Ordering) where
+  (%~) SLT SLT = Proved Refl
+  (%~) SLT SEQ
+    = Disproved
+        (\ x_a1x0z
+            -> case x_a1x0z of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) SLT SGT
+    = Disproved
+        (\ x_a1x0A
+            -> case x_a1x0A of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) SEQ SLT
+    = Disproved
+        (\ x_a1x0B
+            -> case x_a1x0B of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) SEQ SEQ = Proved Refl
+  (%~) SEQ SGT
+    = Disproved
+        (\ x_a1x0C
+            -> case x_a1x0C of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) SGT SLT
+    = Disproved
+        (\ x_a1x0D
+            -> case x_a1x0D of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) SGT SEQ
+    = Disproved
+        (\ x_a1x0E
+            -> case x_a1x0E of {
+                _ -> error "Empty case reached -- this should be impossible" })
+  (%~) SGT SGT = Proved Refl
+instance SDecide ('KProxy :: KProxy ()) where
+  (%~) STuple0 STuple0 = Proved Refl
 
 -- basic definitions we need right away
 
-$(singletonsOnly [d|
-  foldl        :: forall a b. (b -> a -> b) -> b -> [a] -> b
-  foldl f z0 xs0 = lgo z0 xs0
-               where
-                 lgo :: b -> [a] -> b
-                 lgo z []     =  z
-                 lgo z (x:xs) = lgo (f z x) xs
-  |])
+type Let1627757071LgoSym5 t_a1xvi
+                          t_a1xvj
+                          t_a1xvk
+                          (t_a1xvl :: b_a1xuP)
+                          (t_a1xvm :: [a_a1xuO]) =
+    Let1627757071Lgo t_a1xvi t_a1xvj t_a1xvk t_a1xvl t_a1xvm
+instance SuppressUnusedWarnings Let1627757071LgoSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627757071LgoSym4KindInference ())
+data Let1627757071LgoSym4 l_a1xvC
+                          l_a1xvD
+                          l_a1xvE
+                          (l_a1xvF :: b_a1xuP)
+                          (l_a1xvB :: TyFun [a_a1xuO] b_a1xuP)
+  = forall arg_a1xvG. KindOf (Apply (Let1627757071LgoSym4 l_a1xvC l_a1xvD l_a1xvE l_a1xvF) arg_a1xvG) ~ KindOf (Let1627757071LgoSym5 l_a1xvC l_a1xvD l_a1xvE l_a1xvF arg_a1xvG) =>
+    Let1627757071LgoSym4KindInference
+type instance Apply (Let1627757071LgoSym4 l_a1xvC l_a1xvD l_a1xvE l_a1xvF) l_a1xvB = Let1627757071LgoSym5 l_a1xvC l_a1xvD l_a1xvE l_a1xvF l_a1xvB
+instance SuppressUnusedWarnings Let1627757071LgoSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627757071LgoSym3KindInference ())
+data Let1627757071LgoSym3 l_a1xvx
+                          l_a1xvy
+                          l_a1xvz
+                          (l_a1xvw :: TyFun b_a1xuP (TyFun [a_a1xuO] b_a1xuP -> *))
+  = forall arg_a1xvA. KindOf (Apply (Let1627757071LgoSym3 l_a1xvx l_a1xvy l_a1xvz) arg_a1xvA) ~ KindOf (Let1627757071LgoSym4 l_a1xvx l_a1xvy l_a1xvz arg_a1xvA) =>
+    Let1627757071LgoSym3KindInference
+type instance Apply (Let1627757071LgoSym3 l_a1xvx l_a1xvy l_a1xvz) l_a1xvw = Let1627757071LgoSym4 l_a1xvx l_a1xvy l_a1xvz l_a1xvw
+instance SuppressUnusedWarnings Let1627757071LgoSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627757071LgoSym2KindInference ())
+data Let1627757071LgoSym2 l_a1xvt l_a1xvu l_a1xvs
+  = forall arg_a1xvv. KindOf (Apply (Let1627757071LgoSym2 l_a1xvt l_a1xvu) arg_a1xvv) ~ KindOf (Let1627757071LgoSym3 l_a1xvt l_a1xvu arg_a1xvv) =>
+    Let1627757071LgoSym2KindInference
+type instance Apply (Let1627757071LgoSym2 l_a1xvt l_a1xvu) l_a1xvs = Let1627757071LgoSym3 l_a1xvt l_a1xvu l_a1xvs
+instance SuppressUnusedWarnings Let1627757071LgoSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627757071LgoSym1KindInference ())
+data Let1627757071LgoSym1 l_a1xvq l_a1xvp
+  = forall arg_a1xvr. KindOf (Apply (Let1627757071LgoSym1 l_a1xvq) arg_a1xvr) ~ KindOf (Let1627757071LgoSym2 l_a1xvq arg_a1xvr) =>
+    Let1627757071LgoSym1KindInference
+type instance Apply (Let1627757071LgoSym1 l_a1xvq) l_a1xvp = Let1627757071LgoSym2 l_a1xvq l_a1xvp
+instance SuppressUnusedWarnings Let1627757071LgoSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627757071LgoSym0KindInference ())
+data Let1627757071LgoSym0 l_a1xvn
+  = forall arg_a1xvo. KindOf (Apply Let1627757071LgoSym0 arg_a1xvo) ~ KindOf (Let1627757071LgoSym1 arg_a1xvo) =>
+    Let1627757071LgoSym0KindInference
+type instance Apply Let1627757071LgoSym0 l_a1xvn = Let1627757071LgoSym1 l_a1xvn
+type family Let1627757071Lgo f_a1xve
+                              z0_a1xvf
+                              xs0_a1xvg
+                              (a_a1xvH :: b_a1xuP)
+                              (a_a1xvI :: [a_a1xuO]) :: b_a1xuP where
+  Let1627757071Lgo f_a1xve z0_a1xvf xs0_a1xvg z_a1xvJ '[] = z_a1xvJ
+  Let1627757071Lgo f_a1xve z0_a1xvf xs0_a1xvg z_a1xvK (x_a1xvL ': xs_a1xvM) = Apply (Apply (Let1627757071LgoSym3 f_a1xve z0_a1xvf xs0_a1xvg) (Apply (Apply f_a1xve z_a1xvK) x_a1xvL)) xs_a1xvM
+type FoldlSym3 (t_a1xuZ :: TyFun b_a1xuP (TyFun a_a1xuO b_a1xuP
+                                          -> *)
+                            -> *)
+                (t_a1xv0 :: b_a1xuP)
+                (t_a1xv1 :: [a_a1xuO]) =
+    Foldl t_a1xuZ t_a1xv0 t_a1xv1
+instance SuppressUnusedWarnings FoldlSym2 where
+  suppressUnusedWarnings _ = snd ((,) FoldlSym2KindInference ())
+data FoldlSym2 (l_a1xv8 :: TyFun b_a1xuP (TyFun a_a1xuO b_a1xuP
+                                          -> *)
+                            -> *)
+                (l_a1xv9 :: b_a1xuP)
+                (l_a1xv7 :: TyFun [a_a1xuO] b_a1xuP)
+  = forall arg_a1xva. KindOf (Apply (FoldlSym2 l_a1xv8 l_a1xv9) arg_a1xva) ~ KindOf (FoldlSym3 l_a1xv8 l_a1xv9 arg_a1xva) =>
+    FoldlSym2KindInference
+type instance Apply (FoldlSym2 l_a1xv8 l_a1xv9) l_a1xv7 = FoldlSym3 l_a1xv8 l_a1xv9 l_a1xv7
+instance SuppressUnusedWarnings FoldlSym1 where
+  suppressUnusedWarnings _ = snd ((,) FoldlSym1KindInference ())
+data FoldlSym1 (l_a1xv5 :: TyFun b_a1xuP (TyFun a_a1xuO b_a1xuP
+                                          -> *)
+                            -> *)
+                (l_a1xv4 :: TyFun b_a1xuP (TyFun [a_a1xuO] b_a1xuP -> *))
+  = forall arg_a1xv6. KindOf (Apply (FoldlSym1 l_a1xv5) arg_a1xv6) ~ KindOf (FoldlSym2 l_a1xv5 arg_a1xv6) =>
+    FoldlSym1KindInference
+type instance Apply (FoldlSym1 l_a1xv5) l_a1xv4 = FoldlSym2 l_a1xv5 l_a1xv4
+instance SuppressUnusedWarnings FoldlSym0 where
+  suppressUnusedWarnings _ = snd ((,) FoldlSym0KindInference ())
+data FoldlSym0 (l_a1xv2 :: TyFun (TyFun b_a1xuP (TyFun a_a1xuO b_a1xuP
+                                                  -> *)
+                                  -> *) (TyFun b_a1xuP (TyFun [a_a1xuO] b_a1xuP -> *) -> *))
+  = forall arg_a1xv3. KindOf (Apply FoldlSym0 arg_a1xv3) ~ KindOf (FoldlSym1 arg_a1xv3) =>
+    FoldlSym0KindInference
+type instance Apply FoldlSym0 l_a1xv2 = FoldlSym1 l_a1xv2
+type family Foldl (a_a1xvb :: TyFun b_a1xuP (TyFun a_a1xuO b_a1xuP
+                                              -> *)
+                              -> *)
+                  (a_a1xvc :: b_a1xuP)
+                  (a_a1xvd :: [a_a1xuO]) :: b_a1xuP where
+  Foldl f_a1xve z0_a1xvf xs0_a1xvg = Apply (Apply (Let1627757071LgoSym3 f_a1xve z0_a1xvf xs0_a1xvg) z0_a1xvf) xs0_a1xvg
+sFoldl ::
+  forall (t_a1xvN :: TyFun b_a1xuP (TyFun a_a1xuO b_a1xuP -> *) -> *)
+          (t_a1xvO :: b_a1xuP)
+          (t_a1xvP :: [a_a1xuO]).
+  Sing t_a1xvN
+  -> Sing t_a1xvO
+      -> Sing t_a1xvP
+        -> Sing (Apply (Apply (Apply FoldlSym0 t_a1xvN) t_a1xvO) t_a1xvP :: b_a1xuP)
+sFoldl sF sZ0 sXs0
+  = let
+      lambda_a1xvQ ::
+        forall f_a1xve z0_a1xvf xs0_a1xvg. (t_a1xvN ~ f_a1xve,
+                                            t_a1xvO ~ z0_a1xvf,
+                                            t_a1xvP ~ xs0_a1xvg) =>
+        Sing f_a1xve
+        -> Sing z0_a1xvf
+            -> Sing xs0_a1xvg
+              -> Sing (Apply (Apply (Apply FoldlSym0 f_a1xve) z0_a1xvf) xs0_a1xvg :: b_a1xuP)
+      lambda_a1xvQ f_a1xvR z0_a1xvS xs0_a1xvT
+        = let
+            sLgo ::
+              forall (t_a1xvU :: b_a1xuP) (t_a1xvV :: [a_a1xuO]).
+              Sing t_a1xvU
+              -> Sing t_a1xvV
+                  -> Sing (Apply (Apply (Let1627757071LgoSym3 f_a1xve z0_a1xvf xs0_a1xvg) t_a1xvU) t_a1xvV :: b_a1xuP)
+            sLgo sZ SNil
+              = let
+                  lambda_a1xvW ::
+                    forall z_a1xvJ. (t_a1xvU ~ z_a1xvJ, t_a1xvV ~ '[]) =>
+                    Sing z_a1xvJ
+                    -> Sing (Apply (Apply (Let1627757071LgoSym3 f_a1xve z0_a1xvf xs0_a1xvg) z_a1xvJ) '[] :: b_a1xuP)
+                  lambda_a1xvW z_a1xvX = z_a1xvX
+                in lambda_a1xvW sZ
+            sLgo sZ (SCons sX sXs)
+              = let
+                  lambda_a1xvY ::
+                    forall z_a1xvK x_a1xvL xs_a1xvM. (t_a1xvU ~ z_a1xvK,
+                                                      t_a1xvV ~ Apply (Apply (:$) x_a1xvL) xs_a1xvM) =>
+                    Sing z_a1xvK
+                    -> Sing x_a1xvL
+                        -> Sing xs_a1xvM
+                          -> Sing (Apply (Apply (Let1627757071LgoSym3 f_a1xve z0_a1xvf xs0_a1xvg) z_a1xvK) (Apply (Apply (:$) x_a1xvL) xs_a1xvM) :: b_a1xuP)
+                  lambda_a1xvY z_a1xvZ x_a1xw0 xs_a1xw1
+                    = applySing
+                        (applySing
+                            (singFun2
+                              (Proxy :: Proxy (Let1627757071LgoSym3 f_a1xve z0_a1xvf xs0_a1xvg))
+                              sLgo)
+                            (applySing (applySing f_a1xvR z_a1xvZ) x_a1xw0))
+                        xs_a1xw1
+                in lambda_a1xvY sZ sX sXs
+          in
+            applySing
+              (applySing
+                  (singFun2
+                    (Proxy :: Proxy (Let1627757071LgoSym3 f_a1xve z0_a1xvf xs0_a1xvg))
+                    sLgo)
+                  z0_a1xvS)
+              xs0_a1xvT
+    in lambda_a1xvQ sF sZ0 sXs0
+
diff --git a/src/Data/Singletons/Prelude/List.hs b/src/Data/Singletons/Prelude/List.hs
index 8a2a985..e67137a 100644
--- a/src/Data/Singletons/Prelude/List.hs
+++ b/src/Data/Singletons/Prelude/List.hs
@@ -236,8 +236,8 @@ module Data.Singletons.Prelude.List (
   ) where
 
 import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.Prelude.Instances
-import Data.Singletons.Single
 import Data.Singletons.TypeLits
 import Data.Singletons.Prelude.Base
 import Data.Singletons.Prelude.Bool
@@ -246,553 +246,10844 @@ import Data.Singletons.Prelude.Maybe
 import Data.Singletons.Prelude.Tuple
 import Data.Singletons.Prelude.Num
 import Data.Singletons.Prelude.Ord
-import Data.Maybe
-
-$(singletons [d|
-  any_                     :: (a -> Bool) -> [a] -> Bool
-  any_ _ []                = False
-  any_ p (x:xs)            = p x || any_ p xs
- |])
-
-$(singletonsOnly [d|
-  head :: [a] -> a
-  head (a : _) = a
-  head []      = error "Data.Singletons.List.head: empty list"
-
-  last :: [a] -> a
-  last []       =  error "Data.Singletons.List.last: empty list"
-  last [x]      =  x
-  last (_:x:xs) =  last (x:xs)
-
-  tail :: [a] -> [a]
-  tail (_ : t) = t
-  tail []      = error "Data.Singletons.List.tail: empty list"
-
-  init                    :: [a] -> [a]
-  init []                 =  error "Data.Singletons.List.init: empty list"
-  init (x:xs)             =  init' x xs
-     where init' :: a -> [a] -> [a]
-           init' _ []     = []
-           init' y (z:zs) = y : init' z zs
-
-  null                    :: [a] -> Bool
-  null []                 =  True
-  null (_:_)              =  False
-
-  reverse                 :: [a] -> [a]
-  reverse l =  rev l []
-    where
-      rev :: [a] -> [a] -> [a]
-      rev []     a = a
-      rev (x:xs) a = rev xs (x:a)
-
-  intersperse             :: a -> [a] -> [a]
-  intersperse _   []      = []
-  intersperse sep (x:xs)  = x : prependToAll sep xs
-
-  intercalate :: [a] -> [[a]] -> [a]
-  intercalate xs xss = concat (intersperse xs xss)
-
-  subsequences            :: [a] -> [[a]]
-  subsequences xs         =  [] : nonEmptySubsequences xs
-
-  nonEmptySubsequences         :: [a] -> [[a]]
-  nonEmptySubsequences []      =  []
-  nonEmptySubsequences (x:xs)  =  [x] : foldr f [] (nonEmptySubsequences xs)
-    where f ys r = ys : (x : ys) : r
-
-  prependToAll            :: a -> [a] -> [a]
-  prependToAll _   []     = []
-  prependToAll sep (x:xs) = sep : x : prependToAll sep xs
-
-  permutations            :: [a] -> [[a]]
-  permutations xs0        =  xs0 : perms xs0 []
-    where
-      perms []     _  = []
-      perms (t:ts) is = foldr interleave (perms ts (t:is)) (permutations is)
-        where interleave    xs     r = let (_,zs) = interleave' id xs r in zs
-              interleave' _ []     r = (ts, r)
-              interleave' f (y:ys) r = let (us,zs) = interleave' (f . (y:)) ys r
-                                       in  (y:us, f (t:y:us) : zs)
-
-  foldl'           :: forall a b. (b -> a -> b) -> b -> [a] -> b
-  foldl' f z0 xs0 = lgo z0 xs0
-      where lgo :: b -> [a] -> b
-            lgo z []     = z
-            lgo z (x:xs) = let z' = f z x in z' `seq` lgo z' xs
-
-  foldl1                  :: (a -> a -> a) -> [a] -> a
-  foldl1 f (x:xs)         =  foldl f x xs
-  foldl1 _ []             =  error "Data.Singletons.List.foldl1: empty list"
-
-  foldl1'                  :: (a -> a -> a) -> [a] -> a
-  foldl1' f (x:xs)         =  foldl' f x xs
-  foldl1' _ []             =  error "Data.Singletons.List.foldl1': empty list"
-
-  foldr1                  :: (a -> a -> a) -> [a] -> a
-  foldr1 _ [x]            =  x
-  foldr1 f (x:xs@(_:_))   =  f x (foldr1 f xs)
-  foldr1 _ []             =  error "Data.Singletons.List.foldr1: empty list"
-
-  concat :: [[a]] -> [a]
-  concat = foldr (++) []
-
-  concatMap               :: (a -> [b]) -> [a] -> [b]
-  concatMap f             =  foldr ((++) . f) []
-
-  and                     :: [Bool] -> Bool
-  and []                  =  True
-  and (x:xs)              =  x && and xs
-
-  or                      :: [Bool] -> Bool
-  or []                   =  False
-  or (x:xs)               =  x || or xs
-
-  all                     :: (a -> Bool) -> [a] -> Bool
-  all _ []                =  True
-  all p (x:xs)            =  p x && all p xs
-
-  scanl         :: (b -> a -> b) -> b -> [a] -> [b]
-  scanl f q ls  =  q : (case ls of
-                        []   -> []
-                        x:xs -> scanl f (f q x) xs)
-  scanl1                  :: (a -> a -> a) -> [a] -> [a]
-  scanl1 f (x:xs)         =  scanl f x xs
-  scanl1 _ []             =  []
-
-  scanr                   :: (a -> b -> b) -> b -> [a] -> [b]
-  scanr _ q0 []           =  [q0]
-  scanr f q0 (x:xs)       =  case scanr f q0 xs of
-                               []     -> error "Data.Singletons.List.scanr: empty list"
-                               (q:qs) -> f x q : (q:qs)
-
-  scanr1                  :: (a -> a -> a) -> [a] -> [a]
-  scanr1 _ []             =  []
-  scanr1 _ [x]            =  [x]
-  scanr1 f (x:xs@(_:_))   =  case scanr1 f xs of
-                               []     -> error "Data.Singletons.List.scanr1: empty list"
-                               (q:qs) -> f x q : (q:qs)
-
-  mapAccumL :: (acc -> x -> (acc, y))
-            -> acc
-            -> [x]
-            -> (acc, [y])
-  mapAccumL _ s []        =  (s, [])
-  mapAccumL f s (x:xs)    =  (s'',y:ys)
-                             where (s', y ) = f s x
-                                   (s'',ys) = mapAccumL f s' xs
-
-  mapAccumR :: (acc -> x -> (acc, y))
-              -> acc
-              -> [x]
-              -> (acc, [y])
-  mapAccumR _ s []        =  (s, [])
-  mapAccumR f s (x:xs)    =  (s'', y:ys)
-                             where (s'',y ) = f s' x
-                                   (s', ys) = mapAccumR f s xs
-
-  unfoldr      :: (b -> Maybe (a, b)) -> b -> [a]
-  unfoldr f b  =
-    case f b of
-     Just (a,new_b) -> a : unfoldr f new_b
-     Nothing        -> []
-
-  inits                   :: [a] -> [[a]]
-  inits xs                =  [] : case xs of
-                                    []      -> []
-                                    x : xs' -> map (x :) (inits xs')
-
-  tails                   :: [a] -> [[a]]
-  tails xs                =  xs : case xs of
-                                    []      -> []
-                                    _ : xs' -> tails xs'
-
-  isPrefixOf              :: (Eq a) => [a] -> [a] -> Bool
-  isPrefixOf [] []        =  True
-  isPrefixOf [] (_:_)     =  True
-  isPrefixOf (_:_) []     =  False
-  isPrefixOf (x:xs) (y:ys)=  x == y && isPrefixOf xs ys
-
-  isSuffixOf              :: (Eq a) => [a] -> [a] -> Bool
-  isSuffixOf x y          =  reverse x `isPrefixOf` reverse y
-
-  isInfixOf               :: (Eq a) => [a] -> [a] -> Bool
-  isInfixOf needle haystack = any_ (isPrefixOf needle) (tails haystack)
-
-  elem                    :: (Eq a) => a -> [a] -> Bool
-  elem _ []               = False
-  elem x (y:ys)           = x==y || elem x ys
-
-  notElem                 :: (Eq a) => a -> [a] -> Bool
-  notElem _ []            =  True
-  notElem x (y:ys)        =  x /= y && notElem x ys
-
-  zip :: [a] -> [b] -> [(a,b)]
-  zip (x:xs) (y:ys) = (x,y) : zip xs ys
-  zip [] []         = []
-  zip (_:_) []      = []
-  zip [] (_:_)      = []
-
-  zip3 :: [a] -> [b] -> [c] -> [(a,b,c)]
-  zip3 (a:as) (b:bs) (c:cs) = (a,b,c) : zip3 as bs cs
-  zip3 []     []     []     = []
-  zip3 []     []     (_:_)  = []
-  zip3 []     (_:_)     []  = []
-  zip3 []     (_:_)  (_:_)  = []
-  zip3 (_:_)  []     []     = []
-  zip3 (_:_)  []     (_:_)  = []
-  zip3 (_:_)  (_:_)  []     = []
-
-  zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
-  zipWith f (x:xs) (y:ys) = f x y : zipWith f xs ys
-  zipWith _ [] []         = []
-  zipWith _ (_:_) []      = []
-  zipWith _ [] (_:_)      = []
-
-  zipWith3                :: (a->b->c->d) -> [a]->[b]->[c]->[d]
-  zipWith3 z (a:as) (b:bs) (c:cs) =  z a b c : zipWith3 z as bs cs
-  zipWith3 _ []     []     []     = []
-  zipWith3 _ []     []     (_:_)  = []
-  zipWith3 _ []     (_:_)     []  = []
-  zipWith3 _ []     (_:_)  (_:_)  = []
-  zipWith3 _ (_:_)  []     []     = []
-  zipWith3 _ (_:_)  []     (_:_)  = []
-  zipWith3 _ (_:_)  (_:_)  []     = []
-
-  unzip    :: [(a,b)] -> ([a],[b])
-  unzip xs =  foldr (\(a,b) (as,bs) -> (a:as,b:bs)) ([],[]) xs
-
-  -- Lazy patterns removed from unzip
-  unzip3                  :: [(a,b,c)] -> ([a],[b],[c])
-  unzip3 xs               =  foldr (\(a,b,c) (as,bs,cs) -> (a:as,b:bs,c:cs))
-                                   ([],[],[]) xs
-
-  unzip4                  :: [(a,b,c,d)] -> ([a],[b],[c],[d])
-  unzip4 xs               =  foldr (\(a,b,c,d) (as,bs,cs,ds) ->
-                                          (a:as,b:bs,c:cs,d:ds))
-                                   ([],[],[],[]) xs
-
-  unzip5                  :: [(a,b,c,d,e)] -> ([a],[b],[c],[d],[e])
-  unzip5 xs               =  foldr (\(a,b,c,d,e) (as,bs,cs,ds,es) ->
-                                          (a:as,b:bs,c:cs,d:ds,e:es))
-                                   ([],[],[],[],[]) xs
-
-  unzip6                  :: [(a,b,c,d,e,f)] -> ([a],[b],[c],[d],[e],[f])
-  unzip6 xs               =  foldr (\(a,b,c,d,e,f) (as,bs,cs,ds,es,fs) ->
-                                          (a:as,b:bs,c:cs,d:ds,e:es,f:fs))
-                                   ([],[],[],[],[],[]) xs
-
-  unzip7                  :: [(a,b,c,d,e,f,g)] -> ([a],[b],[c],[d],[e],[f],[g])
-  unzip7 xs               =  foldr (\(a,b,c,d,e,f,g) (as,bs,cs,ds,es,fs,gs) ->
-                                          (a:as,b:bs,c:cs,d:ds,e:es,f:fs,g:gs))
-                                   ([],[],[],[],[],[],[]) xs
-
--- We can't promote any of these functions because at the type level
--- String literals are no longer considered to be lists of Chars, so
--- there is mismatch between term-level and type-level semantics
---  lines                   :: String -> [String]
---  lines ""                =  []
---  lines s                 =  cons (case break (== '\n') s of
---                                      (l, s') -> (l, case s' of
---                                                      []      -> []
---                                                      _:s''   -> lines s''))
---      where
---        cons ~(h, t)        =  h : t
---
---  unlines                 :: [String] -> String
---  unlines                 =  concatMap (++ "\n")
---
---  words                   :: String -> [String]
---  words s                 =  case dropWhile isSpace s of
---                                  "" -> []
---                                  s' -> w : words s''
---                                        where (w, s'') =
---                                               break isSpace s'
---
---  unwords                 :: [String] -> String
---  unwords []              =  ""
---  unwords ws              =  foldr1 (\w s -> w ++ ' ':s) ws
-
-  delete                  :: (Eq a) => a -> [a] -> [a]
-  delete                  =  deleteBy (==)
-
-  (\\)                    :: (Eq a) => [a] -> [a] -> [a]
-  (\\)                    =  foldl (flip delete)
-  infix 5 \\
-
-  deleteBy                :: (a -> a -> Bool) -> a -> [a] -> [a]
-  deleteBy _  _ []        = []
-  deleteBy eq x (y:ys)    = if x `eq` y then ys else y : deleteBy eq x ys
-
-  deleteFirstsBy          :: (a -> a -> Bool) -> [a] -> [a] -> [a]
-  deleteFirstsBy eq       =  foldl (flip (deleteBy eq))
-
-  sortBy :: (a -> a -> Ordering) -> [a] -> [a]
-  sortBy cmp  = foldr (insertBy cmp) []
-
-  insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]
-  insertBy _   x [] = [x]
-  insertBy cmp x ys@(y:ys')
-   = case cmp x y of
-       GT -> y : insertBy cmp x ys'
-       LT  -> x : ys
-       EQ  -> x : ys
-
-  maximumBy               :: (a -> a -> Ordering) -> [a] -> a
-  maximumBy _ []          =  error "Data.Singletons.List.maximumBy: empty list"
-  maximumBy cmp xs@(_:_)  =  foldl1 maxBy xs
-                          where
-                            maxBy x y = case cmp x y of
-                                         GT -> x
-                                         EQ -> y
-                                         LT -> y
-
-  minimumBy               :: (a -> a -> Ordering) -> [a] -> a
-  minimumBy _ []          =  error "Data.Singletons.List.minimumBy: empty list"
-  minimumBy cmp xs@(_:_)  =  foldl1 minBy xs
-                          where
-                            minBy x y = case cmp x y of
-                                         GT -> y
-                                         EQ -> x
-                                         LT -> x
-
-  filter :: (a -> Bool) -> [a] -> [a]
-  filter _p []    = []
-  filter p  (x:xs) = if p x then x : filter p xs else filter p xs
-
-  find                    :: (a -> Bool) -> [a] -> Maybe a
-  find p                  = listToMaybe . filter p
-
--- These three rely on findIndices, which does not promote.
--- Since we have our own implementation of findIndices these are perfectly valid
-  elemIndex       :: Eq a => a -> [a] -> Maybe Nat
-  elemIndex x     = findIndex (x==)
-
-  elemIndices     :: Eq a => a -> [a] -> [Nat]
-  elemIndices x   = findIndices (x==)
-
-  findIndex       :: (a -> Bool) -> [a] -> Maybe Nat
-  findIndex p     = listToMaybe . findIndices p
-
--- Uses list comprehensions, infinite lists and and Ints
---  findIndices      :: (a -> Bool) -> [a] -> [Int]
---  findIndices p xs = [ i | (x,i) <- zip xs [0..], p x]
-
-  findIndices      :: (a -> Bool) -> [a] -> [Nat]
-  findIndices p xs = map snd (filter (\(x,_) -> p x)
-                                     (zip xs (buildList 0 xs)))
-    where buildList :: Nat -> [b] -> [Nat]
-          buildList _ []     = []
-          buildList a (_:rest) = a : buildList (a+1) rest
-
-  -- Relies on intersectBy, which does not singletonize
-  intersect               :: (Eq a) => [a] -> [a] -> [a]
-  intersect               =  intersectBy (==)
-
--- Uses list comprehensions.
---  intersectBy             :: (a -> a -> Bool) -> [a] -> [a] -> [a]
---  intersectBy _  [] []    =  []
---  intersectBy _  [] (_:_) =  []
---  intersectBy _  (_:_) [] =  []
---  intersectBy eq xs ys    =  [x | x <- xs, any_ (eq x) ys]
-
-  intersectBy             :: (a -> a -> Bool) -> [a] -> [a] -> [a]
-  intersectBy _  []       []       =  []
-  intersectBy _  []       (_:_)    =  []
-  intersectBy _  (_:_)    []       =  []
-  intersectBy eq xs@(_:_) ys@(_:_) =  filter (\x -> any_ (eq x) ys) xs
-
-  takeWhile               :: (a -> Bool) -> [a] -> [a]
-  takeWhile _ []          =  []
-  takeWhile p (x:xs)      = if p x then x : takeWhile p xs else []
-
-  dropWhile               :: (a -> Bool) -> [a] -> [a]
-  dropWhile _ []          =  []
-  dropWhile p xs@(x:xs')  = if p x then dropWhile p xs' else xs
-
-  dropWhileEnd            :: (a -> Bool) -> [a] -> [a]
-  dropWhileEnd p          = foldr (\x xs -> if p x && null xs then [] else x : xs) []
-
-  span                    :: (a -> Bool) -> [a] -> ([a],[a])
-  span _ xs@[]            =  (xs, xs)
-  span p xs@(x:xs')       = if p x then let (ys,zs) = span p xs' in (x:ys,zs)
-                                   else ([], xs)
-
-  break                   :: (a -> Bool) -> [a] -> ([a],[a])
-  break _ xs@[]           =  (xs, xs)
-  break p xs@(x:xs')      = if p x then ([],xs)
-                                   else let (ys,zs) = break p xs' in (x:ys,zs)
-
--- Can't be promoted because of limitations of Int promotion
--- Below is a re-implementation using Nat
---  take                   :: Int -> [a] -> [a]
---  take n _      | n <= 0 =  []
---  take _ []              =  []
---  take n (x:xs)          =  x : take (n-1) xs
-
---  drop                   :: Int -> [a] -> [a]
---  drop n xs     | n <= 0 =  xs
---  drop _ []              =  []
---  drop n (_:xs)          =  drop (n-1) xs
-
---  splitAt                :: Int -> [a] -> ([a],[a])
---  splitAt n xs           =  (take n xs, drop n xs)
-
-  take                   :: Nat -> [a] -> [a]
-  take _ []              =  []
-  take n (x:xs)          = if n == 0 then [] else x : take (n-1) xs
-
-  drop                   :: Nat -> [a] -> [a]
-  drop _ []              = []
-  drop n (x:xs)          = if n == 0 then x:xs else drop (n-1) xs
-
-  splitAt                :: Nat -> [a] -> ([a],[a])
-  splitAt n xs           =  (take n xs, drop n xs)
-
-  group                   :: Eq a => [a] -> [[a]]
-  group xs                =  groupBy (==) xs
-
-  maximum                 :: (Ord a) => [a] -> a
-  maximum []              =  error "Data.Singletons.List.maximum: empty list"
-  maximum xs@(_:_)        =  foldl1 max xs
-
-  minimum                 :: (Ord a) => [a] -> a
-  minimum []              =  error "Data.Singletons.List.minimum: empty list"
-  minimum xs@(_:_)        =  foldl1 min xs
-
-  insert :: Ord a => a -> [a] -> [a]
-  insert e ls = insertBy (compare) e ls
-
-  sort :: (Ord a) => [a] -> [a]
-  sort = sortBy compare
-
-  groupBy                 :: (a -> a -> Bool) -> [a] -> [[a]]
-  groupBy _  []           =  []
-  groupBy eq (x:xs)       =  (x:ys) : groupBy eq zs
-                             where (ys,zs) = span (eq x) xs
-
-  lookup                  :: (Eq a) => a -> [(a,b)] -> Maybe b
-  lookup _key []          =  Nothing
-  lookup  key ((x,y):xys) = if key == x then Just y else lookup key xys
-
-  partition               :: (a -> Bool) -> [a] -> ([a],[a])
-  partition p xs          = foldr (select p) ([],[]) xs
-
-  -- Lazy pattern removed from select
-  select :: (a -> Bool) -> a -> ([a], [a]) -> ([a], [a])
-  select p x (ts,fs) = if p x then (x:ts,fs) else (ts, x:fs)
-
--- Can't be promoted because of limitations of Int promotion
--- Below is a re-implementation using Nat
---  sum                     :: (Num a) => [a] -> a
---  sum     l       = sum' l 0
---    where
---      sum' []     a = a
---      sum' (x:xs) a = sum' xs (a+x)
---
---  product                 :: (Num a) => [a] -> a
---  product l       = prod l 1
---    where
---      prod []     a = a
---      prod (x:xs) a = prod xs (a*x)
-
-  sum                     :: forall a. Num a => [a] -> a
-  sum     l       = sum' l 0
-    where
-      sum' :: [a] -> a -> a
-      sum' []     a = a
-      sum' (x:xs) a = sum' xs (a+x)
-
-  product                 :: forall a. Num a => [a] -> a
-  product l       = prod l 1
-    where
-      prod :: [a] -> a -> a
-      prod []     a = a
-      prod (x:xs) a = prod xs (a*x)
-
-
--- Can't be promoted because of limitations of Int promotion
--- Below is a re-implementation using Nat
---  length                  :: [a] -> Int
---  length l                =  lenAcc l 0#
---
---  lenAcc :: [a] -> Int# -> Int
---  lenAcc []     a# = I# a#
---  lenAcc (_:xs) a# = lenAcc xs (a# +# 1#)
---
---  incLen :: a -> (Int# -> Int) -> Int# -> Int
---  incLen _ g x = g (x +# 1#)
-
-  length :: [a] -> Nat
-  length []     = 0
-  length (_:xs) = 1 + length xs
-
--- Functions working on infinite lists don't promote because they create
--- infinite types. replicate also uses integers, but luckily it can be rewritten
---  iterate :: (a -> a) -> a -> [a]
---  iterate f x =  x : iterate f (f x)
---
---  repeat :: a -> [a]
---  repeat x = xs where xs = x : xs
---
---  replicate               :: Int -> a -> [a]
---  replicate n x           =  take n (repeat x)
---
---  cycle                   :: [a] -> [a]
---  cycle []                = error "Data.Singletons.List.cycle: empty list"
---  cycle xs                = xs' where xs' = xs ++ xs'
-
-  replicate               :: Nat -> a -> [a]
-  replicate n x           = if n == 0 then [] else x : replicate (n-1) x
-
--- Uses list comprehensions
---  transpose               :: [[a]] -> [[a]]
---  transpose []             = []
---  transpose ([]   : xss)   = transpose xss
---  transpose ((x:xs) : xss) = (x : [h | (h:_) <- xss]) : transpose (xs : [ t | (_:t) <- xss])
-
-  transpose               :: [[a]] -> [[a]]
-  transpose []             = []
-  transpose ([]   : xss)   = transpose xss
-  transpose ((x:xs) : xss) = (x : (map head xss)) : transpose (xs : (map tail xss))
-
--- Can't be promoted because of limitations of Int promotion.
--- Below is a re-implementation using Nat
---  (!!)                    :: [a] -> Int -> a
---  xs     !! n | n < 0 =  error "Data.Singletons.List.!!: negative index"
---  []     !! _         =  error "Data.Singletons.List.!!: index too large"
---  (x:_)  !! 0         =  x
---  (_:xs) !! n         =  xs !! (n-1)
-
-  (!!)                    :: [a] -> Nat -> a
-  []     !! _         =  error "Data.Singletons.List.!!: index too large"
-  (x:xs) !! n         =  if n == 0 then x else xs !! (n-1)
-
-  nub                     :: forall a. (Eq a) => [a] -> [a]
-  nub l                   = nub' l []
-    where
-      nub' :: [a] -> [a] -> [a]
-      nub' [] _           = []
-      nub' (x:xs) ls      = if x `elem` ls then nub' xs ls else x : nub' xs (x:ls)
-
-  nubBy                   :: (a -> a -> Bool) -> [a] -> [a]
-  nubBy eq l              = nubBy' l []
-    where
-      nubBy' [] _         = []
-      nubBy' (y:ys) xs    = if elem_by eq y xs then nubBy' ys xs else y : nubBy' ys (y:xs)
-
-  elem_by :: (a -> a -> Bool) -> a -> [a] -> Bool
-  elem_by _  _ []         =  False
-  elem_by eq y (x:xs)     =  y `eq` x || elem_by eq y xs
-
-  unionBy                 :: (a -> a -> Bool) -> [a] -> [a] -> [a]
-  unionBy eq xs ys        =  xs ++ foldl (flip (deleteBy eq)) (nubBy eq ys) xs
-
-  union                   :: (Eq a) => [a] -> [a] -> [a]
-  union                   = unionBy (==)
-
-  genericLength :: (Num i) => [a] -> i
-  genericLength []     = 0
-  genericLength (_:xs) = 1 + genericLength xs
-
-  |])
+import Data.Proxy
+
+any_ ::
+  forall a_a12kF. (a_a12kF -> Bool) -> [a_a12kF] -> Bool
+any_ _ [] = False
+any_ p_a12kG (x_a12kH : xs_a12kI)
+  = ((p_a12kG x_a12kH) || (any_ p_a12kG xs_a12kI))
+type Any_Sym2 (t_a12kJ :: TyFun a_a12kF Bool -> *)
+              (t_a12kK :: [a_a12kF]) =
+    Any_ t_a12kJ t_a12kK
+instance SuppressUnusedWarnings Any_Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Any_Sym1KindInference ())
+data Any_Sym1 (l_a12kO :: TyFun a_a12kF Bool -> *)
+              (l_a12kN :: TyFun [a_a12kF] Bool)
+  = forall arg_a12kP. KindOf (Apply (Any_Sym1 l_a12kO) arg_a12kP) ~ KindOf (Any_Sym2 l_a12kO arg_a12kP) =>
+    Any_Sym1KindInference
+type instance Apply (Any_Sym1 l_a12kO) l_a12kN = Any_Sym2 l_a12kO l_a12kN
+instance SuppressUnusedWarnings Any_Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Any_Sym0KindInference ())
+data Any_Sym0 (l_a12kL :: TyFun (TyFun a_a12kF Bool
+                                  -> *) (TyFun [a_a12kF] Bool -> *))
+  = forall arg_a12kM. KindOf (Apply Any_Sym0 arg_a12kM) ~ KindOf (Any_Sym1 arg_a12kM) =>
+    Any_Sym0KindInference
+type instance Apply Any_Sym0 l_a12kL = Any_Sym1 l_a12kL
+type family Any_ (a_a12kQ :: TyFun a_a12kF Bool -> *)
+                  (a_a12kR :: [a_a12kF]) :: Bool where
+  Any_ _z_1627637262_a12kU '[] = FalseSym0
+  Any_ p_a12kV (x_a12kW ': xs_a12kX) = Apply (Apply (:||$) (Apply p_a12kV x_a12kW)) (Apply (Apply Any_Sym0 p_a12kV) xs_a12kX)
+sAny_ ::
+  forall (t_a12kY :: TyFun a_a12kF Bool -> *) (t_a12kZ :: [a_a12kF]).
+  Sing t_a12kY
+  -> Sing t_a12kZ
+      -> Sing (Apply (Apply Any_Sym0 t_a12kY) t_a12kZ :: Bool)
+sAny_ _s_z_1627637262 SNil
+  = let
+      lambda_a12l0 ::
+        forall _z_1627637262_a12kU. (t_a12kY ~ _z_1627637262_a12kU,
+                                      t_a12kZ ~ '[]) =>
+        Sing _z_1627637262_a12kU
+        -> Sing (Apply (Apply Any_Sym0 _z_1627637262_a12kU) '[] :: Bool)
+      lambda_a12l0 _z_1627637262_a12l1 = SFalse
+    in lambda_a12l0 _s_z_1627637262
+sAny_ sP (SCons sX sXs)
+  = let
+      lambda_a12l2 ::
+        forall p_a12kV x_a12kW xs_a12kX. (t_a12kY ~ p_a12kV,
+                                          t_a12kZ ~ Apply (Apply (:$) x_a12kW) xs_a12kX) =>
+        Sing p_a12kV
+        -> Sing x_a12kW
+            -> Sing xs_a12kX
+              -> Sing (Apply (Apply Any_Sym0 p_a12kV) (Apply (Apply (:$) x_a12kW) xs_a12kX) :: Bool)
+      lambda_a12l2 p_a12l3 x_a12l4 xs_a12l5
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:||$)) (%:||))
+                (applySing p_a12l3 x_a12l4))
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy Any_Sym0) sAny_) p_a12l3)
+                xs_a12l5)
+    in lambda_a12l2 sP sX sXs
+
+
+type Let1627648730Scrutinee_1627648590Sym5 t_a15jR
+                                            t_a15jS
+                                            t_a15jT
+                                            t_a15jU
+                                            t_a15jV =
+    Let1627648730Scrutinee_1627648590 t_a15jR t_a15jS t_a15jT t_a15jU t_a15jV
+instance SuppressUnusedWarnings Let1627648730Scrutinee_1627648590Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648730Scrutinee_1627648590Sym4KindInference ())
+data Let1627648730Scrutinee_1627648590Sym4 l_a15kb
+                                            l_a15kc
+                                            l_a15kd
+                                            l_a15ke
+                                            l_a15ka
+  = forall arg_a15kf. KindOf (Apply (Let1627648730Scrutinee_1627648590Sym4 l_a15kb l_a15kc l_a15kd l_a15ke) arg_a15kf) ~ KindOf (Let1627648730Scrutinee_1627648590Sym5 l_a15kb l_a15kc l_a15kd l_a15ke arg_a15kf) =>
+    Let1627648730Scrutinee_1627648590Sym4KindInference
+type instance Apply (Let1627648730Scrutinee_1627648590Sym4 l_a15kb l_a15kc l_a15kd l_a15ke) l_a15ka = Let1627648730Scrutinee_1627648590Sym5 l_a15kb l_a15kc l_a15kd l_a15ke l_a15ka
+instance SuppressUnusedWarnings Let1627648730Scrutinee_1627648590Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648730Scrutinee_1627648590Sym3KindInference ())
+data Let1627648730Scrutinee_1627648590Sym3 l_a15k6
+                                            l_a15k7
+                                            l_a15k8
+                                            l_a15k5
+  = forall arg_a15k9. KindOf (Apply (Let1627648730Scrutinee_1627648590Sym3 l_a15k6 l_a15k7 l_a15k8) arg_a15k9) ~ KindOf (Let1627648730Scrutinee_1627648590Sym4 l_a15k6 l_a15k7 l_a15k8 arg_a15k9) =>
+    Let1627648730Scrutinee_1627648590Sym3KindInference
+type instance Apply (Let1627648730Scrutinee_1627648590Sym3 l_a15k6 l_a15k7 l_a15k8) l_a15k5 = Let1627648730Scrutinee_1627648590Sym4 l_a15k6 l_a15k7 l_a15k8 l_a15k5
+instance SuppressUnusedWarnings Let1627648730Scrutinee_1627648590Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648730Scrutinee_1627648590Sym2KindInference ())
+data Let1627648730Scrutinee_1627648590Sym2 l_a15k2 l_a15k3 l_a15k1
+  = forall arg_a15k4. KindOf (Apply (Let1627648730Scrutinee_1627648590Sym2 l_a15k2 l_a15k3) arg_a15k4) ~ KindOf (Let1627648730Scrutinee_1627648590Sym3 l_a15k2 l_a15k3 arg_a15k4) =>
+    Let1627648730Scrutinee_1627648590Sym2KindInference
+type instance Apply (Let1627648730Scrutinee_1627648590Sym2 l_a15k2 l_a15k3) l_a15k1 = Let1627648730Scrutinee_1627648590Sym3 l_a15k2 l_a15k3 l_a15k1
+instance SuppressUnusedWarnings Let1627648730Scrutinee_1627648590Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648730Scrutinee_1627648590Sym1KindInference ())
+data Let1627648730Scrutinee_1627648590Sym1 l_a15jZ l_a15jY
+  = forall arg_a15k0. KindOf (Apply (Let1627648730Scrutinee_1627648590Sym1 l_a15jZ) arg_a15k0) ~ KindOf (Let1627648730Scrutinee_1627648590Sym2 l_a15jZ arg_a15k0) =>
+    Let1627648730Scrutinee_1627648590Sym1KindInference
+type instance Apply (Let1627648730Scrutinee_1627648590Sym1 l_a15jZ) l_a15jY = Let1627648730Scrutinee_1627648590Sym2 l_a15jZ l_a15jY
+instance SuppressUnusedWarnings Let1627648730Scrutinee_1627648590Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648730Scrutinee_1627648590Sym0KindInference ())
+data Let1627648730Scrutinee_1627648590Sym0 l_a15jW
+  = forall arg_a15jX. KindOf (Apply Let1627648730Scrutinee_1627648590Sym0 arg_a15jX) ~ KindOf (Let1627648730Scrutinee_1627648590Sym1 arg_a15jX) =>
+    Let1627648730Scrutinee_1627648590Sym0KindInference
+type instance Apply Let1627648730Scrutinee_1627648590Sym0 l_a15jW = Let1627648730Scrutinee_1627648590Sym1 l_a15jW
+type family Let1627648730Scrutinee_1627648590 eq_a15jn
+                                              l_a15jo
+                                              y_a15jN
+                                              ys_a15jO
+                                              xs_a15jP where
+  Let1627648730Scrutinee_1627648590 eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP = Apply (Apply (Apply Elem_bySym0 eq_a15jn) y_a15jN) xs_a15jP
+type family Case_1627648756_a15kh eq_a15jn
+                                  l_a15jo
+                                  y_a15jN
+                                  ys_a15jO
+                                  xs_a15jP
+                                  t_a15ki where
+  Case_1627648756_a15kh eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP 'True = Apply (Apply (Let1627648703NubBy'Sym2 eq_a15jn l_a15jo) ys_a15jO) xs_a15jP
+  Case_1627648756_a15kh eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP 'False = Apply (Apply (:$) y_a15jN) (Apply (Apply (Let1627648703NubBy'Sym2 eq_a15jn l_a15jo) ys_a15jO) (Apply (Apply (:$) y_a15jN) xs_a15jP))
+type Let1627648703NubBy'Sym4 t_a15jq t_a15jr t_a15js t_a15jt =
+    Let1627648703NubBy' t_a15jq t_a15jr t_a15js t_a15jt
+instance SuppressUnusedWarnings Let1627648703NubBy'Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648703NubBy'Sym3KindInference ())
+data Let1627648703NubBy'Sym3 l_a15jE l_a15jF l_a15jG l_a15jD
+  = forall arg_a15jH. KindOf (Apply (Let1627648703NubBy'Sym3 l_a15jE l_a15jF l_a15jG) arg_a15jH) ~ KindOf (Let1627648703NubBy'Sym4 l_a15jE l_a15jF l_a15jG arg_a15jH) =>
+    Let1627648703NubBy'Sym3KindInference
+type instance Apply (Let1627648703NubBy'Sym3 l_a15jE l_a15jF l_a15jG) l_a15jD = Let1627648703NubBy'Sym4 l_a15jE l_a15jF l_a15jG l_a15jD
+instance SuppressUnusedWarnings Let1627648703NubBy'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648703NubBy'Sym2KindInference ())
+data Let1627648703NubBy'Sym2 l_a15jA l_a15jB l_a15jz
+  = forall arg_a15jC. KindOf (Apply (Let1627648703NubBy'Sym2 l_a15jA l_a15jB) arg_a15jC) ~ KindOf (Let1627648703NubBy'Sym3 l_a15jA l_a15jB arg_a15jC) =>
+    Let1627648703NubBy'Sym2KindInference
+type instance Apply (Let1627648703NubBy'Sym2 l_a15jA l_a15jB) l_a15jz = Let1627648703NubBy'Sym3 l_a15jA l_a15jB l_a15jz
+instance SuppressUnusedWarnings Let1627648703NubBy'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648703NubBy'Sym1KindInference ())
+data Let1627648703NubBy'Sym1 l_a15jx l_a15jw
+  = forall arg_a15jy. KindOf (Apply (Let1627648703NubBy'Sym1 l_a15jx) arg_a15jy) ~ KindOf (Let1627648703NubBy'Sym2 l_a15jx arg_a15jy) =>
+    Let1627648703NubBy'Sym1KindInference
+type instance Apply (Let1627648703NubBy'Sym1 l_a15jx) l_a15jw = Let1627648703NubBy'Sym2 l_a15jx l_a15jw
+instance SuppressUnusedWarnings Let1627648703NubBy'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648703NubBy'Sym0KindInference ())
+data Let1627648703NubBy'Sym0 l_a15ju
+  = forall arg_a15jv. KindOf (Apply Let1627648703NubBy'Sym0 arg_a15jv) ~ KindOf (Let1627648703NubBy'Sym1 arg_a15jv) =>
+    Let1627648703NubBy'Sym0KindInference
+type instance Apply Let1627648703NubBy'Sym0 l_a15ju = Let1627648703NubBy'Sym1 l_a15ju
+type family Let1627648703NubBy' eq_a15jn
+                                l_a15jo
+                                a_a15jI
+                                a_a15jJ where
+  Let1627648703NubBy' eq_a15jn l_a15jo '[] _z_1627648724_a15jM = '[]
+  Let1627648703NubBy' eq_a15jn l_a15jo (y_a15jN ': ys_a15jO) xs_a15jP = Case_1627648756_a15kh eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP (Let1627648730Scrutinee_1627648590Sym5 eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP)
+type Let1627648774Scrutinee_1627648586Sym3 t_a15kz
+                                            t_a15kA
+                                            t_a15kB =
+    Let1627648774Scrutinee_1627648586 t_a15kz t_a15kA t_a15kB
+instance SuppressUnusedWarnings Let1627648774Scrutinee_1627648586Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648774Scrutinee_1627648586Sym2KindInference ())
+data Let1627648774Scrutinee_1627648586Sym2 l_a15kI l_a15kJ l_a15kH
+  = forall arg_a15kK. KindOf (Apply (Let1627648774Scrutinee_1627648586Sym2 l_a15kI l_a15kJ) arg_a15kK) ~ KindOf (Let1627648774Scrutinee_1627648586Sym3 l_a15kI l_a15kJ arg_a15kK) =>
+    Let1627648774Scrutinee_1627648586Sym2KindInference
+type instance Apply (Let1627648774Scrutinee_1627648586Sym2 l_a15kI l_a15kJ) l_a15kH = Let1627648774Scrutinee_1627648586Sym3 l_a15kI l_a15kJ l_a15kH
+instance SuppressUnusedWarnings Let1627648774Scrutinee_1627648586Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648774Scrutinee_1627648586Sym1KindInference ())
+data Let1627648774Scrutinee_1627648586Sym1 l_a15kF l_a15kE
+  = forall arg_a15kG. KindOf (Apply (Let1627648774Scrutinee_1627648586Sym1 l_a15kF) arg_a15kG) ~ KindOf (Let1627648774Scrutinee_1627648586Sym2 l_a15kF arg_a15kG) =>
+    Let1627648774Scrutinee_1627648586Sym1KindInference
+type instance Apply (Let1627648774Scrutinee_1627648586Sym1 l_a15kF) l_a15kE = Let1627648774Scrutinee_1627648586Sym2 l_a15kF l_a15kE
+instance SuppressUnusedWarnings Let1627648774Scrutinee_1627648586Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648774Scrutinee_1627648586Sym0KindInference ())
+data Let1627648774Scrutinee_1627648586Sym0 l_a15kC
+  = forall arg_a15kD. KindOf (Apply Let1627648774Scrutinee_1627648586Sym0 arg_a15kD) ~ KindOf (Let1627648774Scrutinee_1627648586Sym1 arg_a15kD) =>
+    Let1627648774Scrutinee_1627648586Sym0KindInference
+type instance Apply Let1627648774Scrutinee_1627648586Sym0 l_a15kC = Let1627648774Scrutinee_1627648586Sym1 l_a15kC
+type family Let1627648774Scrutinee_1627648586 x_a15kv
+                                              xs_a15kw
+                                              n_a15kx where
+  Let1627648774Scrutinee_1627648586 x_a15kv xs_a15kw n_a15kx = Apply (Apply (:==$) n_a15kx) (FromInteger 0)
+type family Case_1627648787_a15kM x_a15kv
+                                  xs_a15kw
+                                  n_a15kx
+                                  t_a15kN where
+  Case_1627648787_a15kM x_a15kv xs_a15kw n_a15kx 'True = x_a15kv
+  Case_1627648787_a15kM x_a15kv xs_a15kw n_a15kx 'False = Apply (Apply (:!!$) xs_a15kw) (Apply (Apply (:-$) n_a15kx) (FromInteger 1))
+type Let1627648801Scrutinee_1627648584Sym2 t_a15l0 t_a15l1 =
+    Let1627648801Scrutinee_1627648584 t_a15l0 t_a15l1
+instance SuppressUnusedWarnings Let1627648801Scrutinee_1627648584Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648801Scrutinee_1627648584Sym1KindInference ())
+data Let1627648801Scrutinee_1627648584Sym1 l_a15l5 l_a15l4
+  = forall arg_a15l6. KindOf (Apply (Let1627648801Scrutinee_1627648584Sym1 l_a15l5) arg_a15l6) ~ KindOf (Let1627648801Scrutinee_1627648584Sym2 l_a15l5 arg_a15l6) =>
+    Let1627648801Scrutinee_1627648584Sym1KindInference
+type instance Apply (Let1627648801Scrutinee_1627648584Sym1 l_a15l5) l_a15l4 = Let1627648801Scrutinee_1627648584Sym2 l_a15l5 l_a15l4
+instance SuppressUnusedWarnings Let1627648801Scrutinee_1627648584Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648801Scrutinee_1627648584Sym0KindInference ())
+data Let1627648801Scrutinee_1627648584Sym0 l_a15l2
+  = forall arg_a15l3. KindOf (Apply Let1627648801Scrutinee_1627648584Sym0 arg_a15l3) ~ KindOf (Let1627648801Scrutinee_1627648584Sym1 arg_a15l3) =>
+    Let1627648801Scrutinee_1627648584Sym0KindInference
+type instance Apply Let1627648801Scrutinee_1627648584Sym0 l_a15l2 = Let1627648801Scrutinee_1627648584Sym1 l_a15l2
+type family Let1627648801Scrutinee_1627648584 n_a15kX x_a15kY where
+  Let1627648801Scrutinee_1627648584 n_a15kX x_a15kY = Apply (Apply (:==$) n_a15kX) (FromInteger 0)
+type family Case_1627648809_a15l8 n_a15kX x_a15kY t_a15l9 where
+  Case_1627648809_a15l8 n_a15kX x_a15kY 'True = '[]
+  Case_1627648809_a15l8 n_a15kX x_a15kY 'False = Apply (Apply (:$) x_a15kY) (Apply (Apply ReplicateSym0 (Apply (Apply (:-$) n_a15kX) (FromInteger 1))) x_a15kY)
+type Let1627648825ProdSym3 t_a15lo
+                            (t_a15lp :: [a_a156L])
+                            (t_a15lq :: a_a156L) =
+    Let1627648825Prod t_a15lo t_a15lp t_a15lq
+instance SuppressUnusedWarnings Let1627648825ProdSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648825ProdSym2KindInference ())
+data Let1627648825ProdSym2 l_a15lx
+                            (l_a15ly :: [a_a156L])
+                            (l_a15lw :: TyFun a_a156L a_a156L)
+  = forall arg_a15lz. KindOf (Apply (Let1627648825ProdSym2 l_a15lx l_a15ly) arg_a15lz) ~ KindOf (Let1627648825ProdSym3 l_a15lx l_a15ly arg_a15lz) =>
+    Let1627648825ProdSym2KindInference
+type instance Apply (Let1627648825ProdSym2 l_a15lx l_a15ly) l_a15lw = Let1627648825ProdSym3 l_a15lx l_a15ly l_a15lw
+instance SuppressUnusedWarnings Let1627648825ProdSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648825ProdSym1KindInference ())
+data Let1627648825ProdSym1 l_a15lu
+                            (l_a15lt :: TyFun [a_a156L] (TyFun a_a156L a_a156L -> *))
+  = forall arg_a15lv. KindOf (Apply (Let1627648825ProdSym1 l_a15lu) arg_a15lv) ~ KindOf (Let1627648825ProdSym2 l_a15lu arg_a15lv) =>
+    Let1627648825ProdSym1KindInference
+type instance Apply (Let1627648825ProdSym1 l_a15lu) l_a15lt = Let1627648825ProdSym2 l_a15lu l_a15lt
+instance SuppressUnusedWarnings Let1627648825ProdSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648825ProdSym0KindInference ())
+data Let1627648825ProdSym0 l_a15lr
+  = forall arg_a15ls. KindOf (Apply Let1627648825ProdSym0 arg_a15ls) ~ KindOf (Let1627648825ProdSym1 arg_a15ls) =>
+    Let1627648825ProdSym0KindInference
+type instance Apply Let1627648825ProdSym0 l_a15lr = Let1627648825ProdSym1 l_a15lr
+type family Let1627648825Prod l_a15lm
+                              (a_a15lA :: [a_a156L])
+                              (a_a15lB :: a_a156L) :: a_a156L where
+  Let1627648825Prod l_a15lm '[] a_a15lC = a_a15lC
+  Let1627648825Prod l_a15lm (x_a15lD ': xs_a15lE) a_a15lF = Apply (Apply (Let1627648825ProdSym1 l_a15lm) xs_a15lE) (Apply (Apply (:*$) a_a15lF) x_a15lD)
+type Let1627648849Sum'Sym3 t_a15lM
+                            (t_a15lN :: [a_a156M])
+                            (t_a15lO :: a_a156M) =
+    Let1627648849Sum' t_a15lM t_a15lN t_a15lO
+instance SuppressUnusedWarnings Let1627648849Sum'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648849Sum'Sym2KindInference ())
+data Let1627648849Sum'Sym2 l_a15lV
+                            (l_a15lW :: [a_a156M])
+                            (l_a15lU :: TyFun a_a156M a_a156M)
+  = forall arg_a15lX. KindOf (Apply (Let1627648849Sum'Sym2 l_a15lV l_a15lW) arg_a15lX) ~ KindOf (Let1627648849Sum'Sym3 l_a15lV l_a15lW arg_a15lX) =>
+    Let1627648849Sum'Sym2KindInference
+type instance Apply (Let1627648849Sum'Sym2 l_a15lV l_a15lW) l_a15lU = Let1627648849Sum'Sym3 l_a15lV l_a15lW l_a15lU
+instance SuppressUnusedWarnings Let1627648849Sum'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648849Sum'Sym1KindInference ())
+data Let1627648849Sum'Sym1 l_a15lS
+                            (l_a15lR :: TyFun [a_a156M] (TyFun a_a156M a_a156M -> *))
+  = forall arg_a15lT. KindOf (Apply (Let1627648849Sum'Sym1 l_a15lS) arg_a15lT) ~ KindOf (Let1627648849Sum'Sym2 l_a15lS arg_a15lT) =>
+    Let1627648849Sum'Sym1KindInference
+type instance Apply (Let1627648849Sum'Sym1 l_a15lS) l_a15lR = Let1627648849Sum'Sym2 l_a15lS l_a15lR
+instance SuppressUnusedWarnings Let1627648849Sum'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648849Sum'Sym0KindInference ())
+data Let1627648849Sum'Sym0 l_a15lP
+  = forall arg_a15lQ. KindOf (Apply Let1627648849Sum'Sym0 arg_a15lQ) ~ KindOf (Let1627648849Sum'Sym1 arg_a15lQ) =>
+    Let1627648849Sum'Sym0KindInference
+type instance Apply Let1627648849Sum'Sym0 l_a15lP = Let1627648849Sum'Sym1 l_a15lP
+type family Let1627648849Sum' l_a15lK
+                              (a_a15lY :: [a_a156M])
+                              (a_a15lZ :: a_a156M) :: a_a156M where
+  Let1627648849Sum' l_a15lK '[] a_a15m0 = a_a15m0
+  Let1627648849Sum' l_a15lK (x_a15m1 ': xs_a15m2) a_a15m3 = Apply (Apply (Let1627648849Sum'Sym1 l_a15lK) xs_a15m2) (Apply (Apply (:+$) a_a15m3) x_a15m1)
+type Let1627648887Scrutinee_1627648582Sym4 t_a15mo
+                                            t_a15mp
+                                            t_a15mq
+                                            t_a15mr =
+    Let1627648887Scrutinee_1627648582 t_a15mo t_a15mp t_a15mq t_a15mr
+instance SuppressUnusedWarnings Let1627648887Scrutinee_1627648582Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648887Scrutinee_1627648582Sym3KindInference ())
+data Let1627648887Scrutinee_1627648582Sym3 l_a15mC
+                                            l_a15mD
+                                            l_a15mE
+                                            l_a15mB
+  = forall arg_a15mF. KindOf (Apply (Let1627648887Scrutinee_1627648582Sym3 l_a15mC l_a15mD l_a15mE) arg_a15mF) ~ KindOf (Let1627648887Scrutinee_1627648582Sym4 l_a15mC l_a15mD l_a15mE arg_a15mF) =>
+    Let1627648887Scrutinee_1627648582Sym3KindInference
+type instance Apply (Let1627648887Scrutinee_1627648582Sym3 l_a15mC l_a15mD l_a15mE) l_a15mB = Let1627648887Scrutinee_1627648582Sym4 l_a15mC l_a15mD l_a15mE l_a15mB
+instance SuppressUnusedWarnings Let1627648887Scrutinee_1627648582Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648887Scrutinee_1627648582Sym2KindInference ())
+data Let1627648887Scrutinee_1627648582Sym2 l_a15my l_a15mz l_a15mx
+  = forall arg_a15mA. KindOf (Apply (Let1627648887Scrutinee_1627648582Sym2 l_a15my l_a15mz) arg_a15mA) ~ KindOf (Let1627648887Scrutinee_1627648582Sym3 l_a15my l_a15mz arg_a15mA) =>
+    Let1627648887Scrutinee_1627648582Sym2KindInference
+type instance Apply (Let1627648887Scrutinee_1627648582Sym2 l_a15my l_a15mz) l_a15mx = Let1627648887Scrutinee_1627648582Sym3 l_a15my l_a15mz l_a15mx
+instance SuppressUnusedWarnings Let1627648887Scrutinee_1627648582Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648887Scrutinee_1627648582Sym1KindInference ())
+data Let1627648887Scrutinee_1627648582Sym1 l_a15mv l_a15mu
+  = forall arg_a15mw. KindOf (Apply (Let1627648887Scrutinee_1627648582Sym1 l_a15mv) arg_a15mw) ~ KindOf (Let1627648887Scrutinee_1627648582Sym2 l_a15mv arg_a15mw) =>
+    Let1627648887Scrutinee_1627648582Sym1KindInference
+type instance Apply (Let1627648887Scrutinee_1627648582Sym1 l_a15mv) l_a15mu = Let1627648887Scrutinee_1627648582Sym2 l_a15mv l_a15mu
+instance SuppressUnusedWarnings Let1627648887Scrutinee_1627648582Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648887Scrutinee_1627648582Sym0KindInference ())
+data Let1627648887Scrutinee_1627648582Sym0 l_a15ms
+  = forall arg_a15mt. KindOf (Apply Let1627648887Scrutinee_1627648582Sym0 arg_a15mt) ~ KindOf (Let1627648887Scrutinee_1627648582Sym1 arg_a15mt) =>
+    Let1627648887Scrutinee_1627648582Sym0KindInference
+type instance Apply Let1627648887Scrutinee_1627648582Sym0 l_a15ms = Let1627648887Scrutinee_1627648582Sym1 l_a15ms
+type family Let1627648887Scrutinee_1627648582 p_a15mj
+                                              x_a15mk
+                                              ts_a15ml
+                                              fs_a15mm where
+  Let1627648887Scrutinee_1627648582 p_a15mj x_a15mk ts_a15ml fs_a15mm = Apply p_a15mj x_a15mk
+type family Case_1627648906_a15mH p_a15mj
+                                  x_a15mk
+                                  ts_a15ml
+                                  fs_a15mm
+                                  t_a15mI where
+  Case_1627648906_a15mH p_a15mj x_a15mk ts_a15ml fs_a15mm 'True = Apply (Apply Tuple2Sym0 (Apply (Apply (:$) x_a15mk) ts_a15ml)) fs_a15mm
+  Case_1627648906_a15mH p_a15mj x_a15mk ts_a15ml fs_a15mm 'False = Apply (Apply Tuple2Sym0 ts_a15ml) (Apply (Apply (:$) x_a15mk) fs_a15mm)
+type Let1627648934Scrutinee_1627648580Sym4 t_a15n9
+                                            t_a15na
+                                            t_a15nb
+                                            t_a15nc =
+    Let1627648934Scrutinee_1627648580 t_a15n9 t_a15na t_a15nb t_a15nc
+instance SuppressUnusedWarnings Let1627648934Scrutinee_1627648580Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648934Scrutinee_1627648580Sym3KindInference ())
+data Let1627648934Scrutinee_1627648580Sym3 l_a15nn
+                                            l_a15no
+                                            l_a15np
+                                            l_a15nm
+  = forall arg_a15nq. KindOf (Apply (Let1627648934Scrutinee_1627648580Sym3 l_a15nn l_a15no l_a15np) arg_a15nq) ~ KindOf (Let1627648934Scrutinee_1627648580Sym4 l_a15nn l_a15no l_a15np arg_a15nq) =>
+    Let1627648934Scrutinee_1627648580Sym3KindInference
+type instance Apply (Let1627648934Scrutinee_1627648580Sym3 l_a15nn l_a15no l_a15np) l_a15nm = Let1627648934Scrutinee_1627648580Sym4 l_a15nn l_a15no l_a15np l_a15nm
+instance SuppressUnusedWarnings Let1627648934Scrutinee_1627648580Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648934Scrutinee_1627648580Sym2KindInference ())
+data Let1627648934Scrutinee_1627648580Sym2 l_a15nj l_a15nk l_a15ni
+  = forall arg_a15nl. KindOf (Apply (Let1627648934Scrutinee_1627648580Sym2 l_a15nj l_a15nk) arg_a15nl) ~ KindOf (Let1627648934Scrutinee_1627648580Sym3 l_a15nj l_a15nk arg_a15nl) =>
+    Let1627648934Scrutinee_1627648580Sym2KindInference
+type instance Apply (Let1627648934Scrutinee_1627648580Sym2 l_a15nj l_a15nk) l_a15ni = Let1627648934Scrutinee_1627648580Sym3 l_a15nj l_a15nk l_a15ni
+instance SuppressUnusedWarnings Let1627648934Scrutinee_1627648580Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648934Scrutinee_1627648580Sym1KindInference ())
+data Let1627648934Scrutinee_1627648580Sym1 l_a15ng l_a15nf
+  = forall arg_a15nh. KindOf (Apply (Let1627648934Scrutinee_1627648580Sym1 l_a15ng) arg_a15nh) ~ KindOf (Let1627648934Scrutinee_1627648580Sym2 l_a15ng arg_a15nh) =>
+    Let1627648934Scrutinee_1627648580Sym1KindInference
+type instance Apply (Let1627648934Scrutinee_1627648580Sym1 l_a15ng) l_a15nf = Let1627648934Scrutinee_1627648580Sym2 l_a15ng l_a15nf
+instance SuppressUnusedWarnings Let1627648934Scrutinee_1627648580Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648934Scrutinee_1627648580Sym0KindInference ())
+data Let1627648934Scrutinee_1627648580Sym0 l_a15nd
+  = forall arg_a15ne. KindOf (Apply Let1627648934Scrutinee_1627648580Sym0 arg_a15ne) ~ KindOf (Let1627648934Scrutinee_1627648580Sym1 arg_a15ne) =>
+    Let1627648934Scrutinee_1627648580Sym0KindInference
+type instance Apply Let1627648934Scrutinee_1627648580Sym0 l_a15nd = Let1627648934Scrutinee_1627648580Sym1 l_a15nd
+type family Let1627648934Scrutinee_1627648580 key_a15n4
+                                              x_a15n5
+                                              y_a15n6
+                                              xys_a15n7 where
+  Let1627648934Scrutinee_1627648580 key_a15n4 x_a15n5 y_a15n6 xys_a15n7 = Apply (Apply (:==$) key_a15n4) x_a15n5
+type family Case_1627648953_a15ns key_a15n4
+                                  x_a15n5
+                                  y_a15n6
+                                  xys_a15n7
+                                  t_a15nt where
+  Case_1627648953_a15ns key_a15n4 x_a15n5 y_a15n6 xys_a15n7 'True = Apply JustSym0 y_a15n6
+  Case_1627648953_a15ns key_a15n4 x_a15n5 y_a15n6 xys_a15n7 'False = Apply (Apply LookupSym0 key_a15n4) xys_a15n7
+type Let1627648971Scrutinee_1627648570Sym3 t_a15nK
+                                            t_a15nL
+                                            t_a15nM =
+    Let1627648971Scrutinee_1627648570 t_a15nK t_a15nL t_a15nM
+instance SuppressUnusedWarnings Let1627648971Scrutinee_1627648570Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648971Scrutinee_1627648570Sym2KindInference ())
+data Let1627648971Scrutinee_1627648570Sym2 l_a15nT l_a15nU l_a15nS
+  = forall arg_a15nV. KindOf (Apply (Let1627648971Scrutinee_1627648570Sym2 l_a15nT l_a15nU) arg_a15nV) ~ KindOf (Let1627648971Scrutinee_1627648570Sym3 l_a15nT l_a15nU arg_a15nV) =>
+    Let1627648971Scrutinee_1627648570Sym2KindInference
+type instance Apply (Let1627648971Scrutinee_1627648570Sym2 l_a15nT l_a15nU) l_a15nS = Let1627648971Scrutinee_1627648570Sym3 l_a15nT l_a15nU l_a15nS
+instance SuppressUnusedWarnings Let1627648971Scrutinee_1627648570Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648971Scrutinee_1627648570Sym1KindInference ())
+data Let1627648971Scrutinee_1627648570Sym1 l_a15nQ l_a15nP
+  = forall arg_a15nR. KindOf (Apply (Let1627648971Scrutinee_1627648570Sym1 l_a15nQ) arg_a15nR) ~ KindOf (Let1627648971Scrutinee_1627648570Sym2 l_a15nQ arg_a15nR) =>
+    Let1627648971Scrutinee_1627648570Sym1KindInference
+type instance Apply (Let1627648971Scrutinee_1627648570Sym1 l_a15nQ) l_a15nP = Let1627648971Scrutinee_1627648570Sym2 l_a15nQ l_a15nP
+instance SuppressUnusedWarnings Let1627648971Scrutinee_1627648570Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627648971Scrutinee_1627648570Sym0KindInference ())
+data Let1627648971Scrutinee_1627648570Sym0 l_a15nN
+  = forall arg_a15nO. KindOf (Apply Let1627648971Scrutinee_1627648570Sym0 arg_a15nO) ~ KindOf (Let1627648971Scrutinee_1627648570Sym1 arg_a15nO) =>
+    Let1627648971Scrutinee_1627648570Sym0KindInference
+type instance Apply Let1627648971Scrutinee_1627648570Sym0 l_a15nN = Let1627648971Scrutinee_1627648570Sym1 l_a15nN
+type family Let1627648971Scrutinee_1627648570 n_a15nG
+                                              x_a15nH
+                                              xs_a15nI where
+  Let1627648971Scrutinee_1627648570 n_a15nG x_a15nH xs_a15nI = Apply (Apply (:==$) n_a15nG) (FromInteger 0)
+type family Case_1627648984_a15nX n_a15nG
+                                  x_a15nH
+                                  xs_a15nI
+                                  t_a15nY where
+  Case_1627648984_a15nX n_a15nG x_a15nH xs_a15nI 'True = Apply (Apply (:$) x_a15nH) xs_a15nI
+  Case_1627648984_a15nX n_a15nG x_a15nH xs_a15nI 'False = Apply (Apply DropSym0 (Apply (Apply (:-$) n_a15nG) (FromInteger 1))) xs_a15nI
+type Let1627649002Scrutinee_1627648568Sym3 t_a15of
+                                            t_a15og
+                                            t_a15oh =
+    Let1627649002Scrutinee_1627648568 t_a15of t_a15og t_a15oh
+instance SuppressUnusedWarnings Let1627649002Scrutinee_1627648568Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649002Scrutinee_1627648568Sym2KindInference ())
+data Let1627649002Scrutinee_1627648568Sym2 l_a15oo l_a15op l_a15on
+  = forall arg_a15oq. KindOf (Apply (Let1627649002Scrutinee_1627648568Sym2 l_a15oo l_a15op) arg_a15oq) ~ KindOf (Let1627649002Scrutinee_1627648568Sym3 l_a15oo l_a15op arg_a15oq) =>
+    Let1627649002Scrutinee_1627648568Sym2KindInference
+type instance Apply (Let1627649002Scrutinee_1627648568Sym2 l_a15oo l_a15op) l_a15on = Let1627649002Scrutinee_1627648568Sym3 l_a15oo l_a15op l_a15on
+instance SuppressUnusedWarnings Let1627649002Scrutinee_1627648568Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649002Scrutinee_1627648568Sym1KindInference ())
+data Let1627649002Scrutinee_1627648568Sym1 l_a15ol l_a15ok
+  = forall arg_a15om. KindOf (Apply (Let1627649002Scrutinee_1627648568Sym1 l_a15ol) arg_a15om) ~ KindOf (Let1627649002Scrutinee_1627648568Sym2 l_a15ol arg_a15om) =>
+    Let1627649002Scrutinee_1627648568Sym1KindInference
+type instance Apply (Let1627649002Scrutinee_1627648568Sym1 l_a15ol) l_a15ok = Let1627649002Scrutinee_1627648568Sym2 l_a15ol l_a15ok
+instance SuppressUnusedWarnings Let1627649002Scrutinee_1627648568Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649002Scrutinee_1627648568Sym0KindInference ())
+data Let1627649002Scrutinee_1627648568Sym0 l_a15oi
+  = forall arg_a15oj. KindOf (Apply Let1627649002Scrutinee_1627648568Sym0 arg_a15oj) ~ KindOf (Let1627649002Scrutinee_1627648568Sym1 arg_a15oj) =>
+    Let1627649002Scrutinee_1627648568Sym0KindInference
+type instance Apply Let1627649002Scrutinee_1627648568Sym0 l_a15oi = Let1627649002Scrutinee_1627648568Sym1 l_a15oi
+type family Let1627649002Scrutinee_1627648568 n_a15ob
+                                              x_a15oc
+                                              xs_a15od where
+  Let1627649002Scrutinee_1627648568 n_a15ob x_a15oc xs_a15od = Apply (Apply (:==$) n_a15ob) (FromInteger 0)
+type family Case_1627649015_a15os n_a15ob
+                                  x_a15oc
+                                  xs_a15od
+                                  t_a15ot where
+  Case_1627649015_a15os n_a15ob x_a15oc xs_a15od 'True = '[]
+  Case_1627649015_a15os n_a15ob x_a15oc xs_a15od 'False = Apply (Apply (:$) x_a15oc) (Apply (Apply TakeSym0 (Apply (Apply (:-$) n_a15ob) (FromInteger 1))) xs_a15od)
+type Let1627649041XsSym1 t_a15oS = Let1627649041Xs t_a15oS
+instance SuppressUnusedWarnings Let1627649041XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649041XsSym0KindInference ())
+data Let1627649041XsSym0 l_a15oT
+  = forall arg_a15oU. KindOf (Apply Let1627649041XsSym0 arg_a15oU) ~ KindOf (Let1627649041XsSym1 arg_a15oU) =>
+    Let1627649041XsSym0KindInference
+type instance Apply Let1627649041XsSym0 l_a15oT = Let1627649041XsSym1 l_a15oT
+type family Let1627649041Xs _z_1627649038_a15oQ where
+  Let1627649041Xs _z_1627649038_a15oQ = '[]
+type Let1627649048XsSym3 t_a15oZ t_a15p0 t_a15p1 =
+    Let1627649048Xs t_a15oZ t_a15p0 t_a15p1
+instance SuppressUnusedWarnings Let1627649048XsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649048XsSym2KindInference ())
+data Let1627649048XsSym2 l_a15p8 l_a15p9 l_a15p7
+  = forall arg_a15pa. KindOf (Apply (Let1627649048XsSym2 l_a15p8 l_a15p9) arg_a15pa) ~ KindOf (Let1627649048XsSym3 l_a15p8 l_a15p9 arg_a15pa) =>
+    Let1627649048XsSym2KindInference
+type instance Apply (Let1627649048XsSym2 l_a15p8 l_a15p9) l_a15p7 = Let1627649048XsSym3 l_a15p8 l_a15p9 l_a15p7
+instance SuppressUnusedWarnings Let1627649048XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649048XsSym1KindInference ())
+data Let1627649048XsSym1 l_a15p5 l_a15p4
+  = forall arg_a15p6. KindOf (Apply (Let1627649048XsSym1 l_a15p5) arg_a15p6) ~ KindOf (Let1627649048XsSym2 l_a15p5 arg_a15p6) =>
+    Let1627649048XsSym1KindInference
+type instance Apply (Let1627649048XsSym1 l_a15p5) l_a15p4 = Let1627649048XsSym2 l_a15p5 l_a15p4
+instance SuppressUnusedWarnings Let1627649048XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649048XsSym0KindInference ())
+data Let1627649048XsSym0 l_a15p2
+  = forall arg_a15p3. KindOf (Apply Let1627649048XsSym0 arg_a15p3) ~ KindOf (Let1627649048XsSym1 arg_a15p3) =>
+    Let1627649048XsSym0KindInference
+type instance Apply Let1627649048XsSym0 l_a15p2 = Let1627649048XsSym1 l_a15p2
+type family Let1627649048Xs p_a15oV x_a15oW xs'_a15oX where
+  Let1627649048Xs p_a15oV x_a15oW xs'_a15oX = Apply (Apply (:$) x_a15oW) xs'_a15oX
+type Let1627649061Scrutinee_1627648566Sym3 t_a15pc
+                                            t_a15pd
+                                            t_a15pe =
+    Let1627649061Scrutinee_1627648566 t_a15pc t_a15pd t_a15pe
+instance SuppressUnusedWarnings Let1627649061Scrutinee_1627648566Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649061Scrutinee_1627648566Sym2KindInference ())
+data Let1627649061Scrutinee_1627648566Sym2 l_a15pl l_a15pm l_a15pk
+  = forall arg_a15pn. KindOf (Apply (Let1627649061Scrutinee_1627648566Sym2 l_a15pl l_a15pm) arg_a15pn) ~ KindOf (Let1627649061Scrutinee_1627648566Sym3 l_a15pl l_a15pm arg_a15pn) =>
+    Let1627649061Scrutinee_1627648566Sym2KindInference
+type instance Apply (Let1627649061Scrutinee_1627648566Sym2 l_a15pl l_a15pm) l_a15pk = Let1627649061Scrutinee_1627648566Sym3 l_a15pl l_a15pm l_a15pk
+instance SuppressUnusedWarnings Let1627649061Scrutinee_1627648566Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649061Scrutinee_1627648566Sym1KindInference ())
+data Let1627649061Scrutinee_1627648566Sym1 l_a15pi l_a15ph
+  = forall arg_a15pj. KindOf (Apply (Let1627649061Scrutinee_1627648566Sym1 l_a15pi) arg_a15pj) ~ KindOf (Let1627649061Scrutinee_1627648566Sym2 l_a15pi arg_a15pj) =>
+    Let1627649061Scrutinee_1627648566Sym1KindInference
+type instance Apply (Let1627649061Scrutinee_1627648566Sym1 l_a15pi) l_a15ph = Let1627649061Scrutinee_1627648566Sym2 l_a15pi l_a15ph
+instance SuppressUnusedWarnings Let1627649061Scrutinee_1627648566Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649061Scrutinee_1627648566Sym0KindInference ())
+data Let1627649061Scrutinee_1627648566Sym0 l_a15pf
+  = forall arg_a15pg. KindOf (Apply Let1627649061Scrutinee_1627648566Sym0 arg_a15pg) ~ KindOf (Let1627649061Scrutinee_1627648566Sym1 arg_a15pg) =>
+    Let1627649061Scrutinee_1627648566Sym0KindInference
+type instance Apply Let1627649061Scrutinee_1627648566Sym0 l_a15pf = Let1627649061Scrutinee_1627648566Sym1 l_a15pf
+type family Let1627649061Scrutinee_1627648566 p_a15oV
+                                              x_a15oW
+                                              xs'_a15oX where
+  Let1627649061Scrutinee_1627648566 p_a15oV x_a15oW xs'_a15oX = Apply p_a15oV x_a15oW
+type family Case_1627649083_a15py p_a15oV
+                                  x_a15oW
+                                  xs'_a15oX
+                                  t_a15pD where
+  Case_1627649083_a15py p_a15oV x_a15oW xs'_a15oX '(y_1627649079_a15pz,
+                                                    _z_1627649086_a15pC) = y_1627649079_a15pz
+type family Case_1627649102_a15pR p_a15oV
+                                  x_a15oW
+                                  xs'_a15oX
+                                  t_a15pW where
+  Case_1627649102_a15pR p_a15oV x_a15oW xs'_a15oX '(_z_1627649104_a15pU,
+                                                    y_1627649081_a15pV) = y_1627649081_a15pV
+type Let1627649076YsSym3 t_a15pE t_a15pF t_a15pG =
+    Let1627649076Ys t_a15pE t_a15pF t_a15pG
+instance SuppressUnusedWarnings Let1627649076YsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649076YsSym2KindInference ())
+data Let1627649076YsSym2 l_a15pN l_a15pO l_a15pM
+  = forall arg_a15pP. KindOf (Apply (Let1627649076YsSym2 l_a15pN l_a15pO) arg_a15pP) ~ KindOf (Let1627649076YsSym3 l_a15pN l_a15pO arg_a15pP) =>
+    Let1627649076YsSym2KindInference
+type instance Apply (Let1627649076YsSym2 l_a15pN l_a15pO) l_a15pM = Let1627649076YsSym3 l_a15pN l_a15pO l_a15pM
+instance SuppressUnusedWarnings Let1627649076YsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649076YsSym1KindInference ())
+data Let1627649076YsSym1 l_a15pK l_a15pJ
+  = forall arg_a15pL. KindOf (Apply (Let1627649076YsSym1 l_a15pK) arg_a15pL) ~ KindOf (Let1627649076YsSym2 l_a15pK arg_a15pL) =>
+    Let1627649076YsSym1KindInference
+type instance Apply (Let1627649076YsSym1 l_a15pK) l_a15pJ = Let1627649076YsSym2 l_a15pK l_a15pJ
+instance SuppressUnusedWarnings Let1627649076YsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649076YsSym0KindInference ())
+data Let1627649076YsSym0 l_a15pH
+  = forall arg_a15pI. KindOf (Apply Let1627649076YsSym0 arg_a15pI) ~ KindOf (Let1627649076YsSym1 arg_a15pI) =>
+    Let1627649076YsSym0KindInference
+type instance Apply Let1627649076YsSym0 l_a15pH = Let1627649076YsSym1 l_a15pH
+type Let1627649076ZsSym3 t_a15pX t_a15pY t_a15pZ =
+    Let1627649076Zs t_a15pX t_a15pY t_a15pZ
+instance SuppressUnusedWarnings Let1627649076ZsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649076ZsSym2KindInference ())
+data Let1627649076ZsSym2 l_a15q6 l_a15q7 l_a15q5
+  = forall arg_a15q8. KindOf (Apply (Let1627649076ZsSym2 l_a15q6 l_a15q7) arg_a15q8) ~ KindOf (Let1627649076ZsSym3 l_a15q6 l_a15q7 arg_a15q8) =>
+    Let1627649076ZsSym2KindInference
+type instance Apply (Let1627649076ZsSym2 l_a15q6 l_a15q7) l_a15q5 = Let1627649076ZsSym3 l_a15q6 l_a15q7 l_a15q5
+instance SuppressUnusedWarnings Let1627649076ZsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649076ZsSym1KindInference ())
+data Let1627649076ZsSym1 l_a15q3 l_a15q2
+  = forall arg_a15q4. KindOf (Apply (Let1627649076ZsSym1 l_a15q3) arg_a15q4) ~ KindOf (Let1627649076ZsSym2 l_a15q3 arg_a15q4) =>
+    Let1627649076ZsSym1KindInference
+type instance Apply (Let1627649076ZsSym1 l_a15q3) l_a15q2 = Let1627649076ZsSym2 l_a15q3 l_a15q2
+instance SuppressUnusedWarnings Let1627649076ZsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649076ZsSym0KindInference ())
+data Let1627649076ZsSym0 l_a15q0
+  = forall arg_a15q1. KindOf (Apply Let1627649076ZsSym0 arg_a15q1) ~ KindOf (Let1627649076ZsSym1 arg_a15q1) =>
+    Let1627649076ZsSym0KindInference
+type instance Apply Let1627649076ZsSym0 l_a15q0 = Let1627649076ZsSym1 l_a15q0
+type Let1627649076X_1627649077Sym3 t_a15q9 t_a15qa t_a15qb =
+    Let1627649076X_1627649077 t_a15q9 t_a15qa t_a15qb
+instance SuppressUnusedWarnings Let1627649076X_1627649077Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649076X_1627649077Sym2KindInference ())
+data Let1627649076X_1627649077Sym2 l_a15qi l_a15qj l_a15qh
+  = forall arg_a15qk. KindOf (Apply (Let1627649076X_1627649077Sym2 l_a15qi l_a15qj) arg_a15qk) ~ KindOf (Let1627649076X_1627649077Sym3 l_a15qi l_a15qj arg_a15qk) =>
+    Let1627649076X_1627649077Sym2KindInference
+type instance Apply (Let1627649076X_1627649077Sym2 l_a15qi l_a15qj) l_a15qh = Let1627649076X_1627649077Sym3 l_a15qi l_a15qj l_a15qh
+instance SuppressUnusedWarnings Let1627649076X_1627649077Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649076X_1627649077Sym1KindInference ())
+data Let1627649076X_1627649077Sym1 l_a15qf l_a15qe
+  = forall arg_a15qg. KindOf (Apply (Let1627649076X_1627649077Sym1 l_a15qf) arg_a15qg) ~ KindOf (Let1627649076X_1627649077Sym2 l_a15qf arg_a15qg) =>
+    Let1627649076X_1627649077Sym1KindInference
+type instance Apply (Let1627649076X_1627649077Sym1 l_a15qf) l_a15qe = Let1627649076X_1627649077Sym2 l_a15qf l_a15qe
+instance SuppressUnusedWarnings Let1627649076X_1627649077Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649076X_1627649077Sym0KindInference ())
+data Let1627649076X_1627649077Sym0 l_a15qc
+  = forall arg_a15qd. KindOf (Apply Let1627649076X_1627649077Sym0 arg_a15qd) ~ KindOf (Let1627649076X_1627649077Sym1 arg_a15qd) =>
+    Let1627649076X_1627649077Sym0KindInference
+type instance Apply Let1627649076X_1627649077Sym0 l_a15qc = Let1627649076X_1627649077Sym1 l_a15qc
+type family Let1627649076Ys p_a15oV x_a15oW xs'_a15oX where
+  Let1627649076Ys p_a15oV x_a15oW xs'_a15oX = Case_1627649083_a15py p_a15oV x_a15oW xs'_a15oX (Let1627649076X_1627649077Sym3 p_a15oV x_a15oW xs'_a15oX)
+type family Let1627649076Zs p_a15oV x_a15oW xs'_a15oX where
+  Let1627649076Zs p_a15oV x_a15oW xs'_a15oX = Case_1627649102_a15pR p_a15oV x_a15oW xs'_a15oX (Let1627649076X_1627649077Sym3 p_a15oV x_a15oW xs'_a15oX)
+type family Let1627649076X_1627649077 p_a15oV
+                                      x_a15oW
+                                      xs'_a15oX where
+  Let1627649076X_1627649077 p_a15oV x_a15oW xs'_a15oX = Apply (Apply BreakSym0 p_a15oV) xs'_a15oX
+type family Case_1627649074_a15pp p_a15oV
+                                  x_a15oW
+                                  xs'_a15oX
+                                  t_a15ql where
+  Case_1627649074_a15pp p_a15oV x_a15oW xs'_a15oX 'True = Apply (Apply Tuple2Sym0 '[]) (Let1627649048XsSym3 p_a15oV x_a15oW xs'_a15oX)
+  Case_1627649074_a15pp p_a15oV x_a15oW xs'_a15oX 'False = Apply (Apply Tuple2Sym0 (Apply (Apply (:$) x_a15oW) (Let1627649076YsSym3 p_a15oV x_a15oW xs'_a15oX))) (Let1627649076ZsSym3 p_a15oV x_a15oW xs'_a15oX)
+type Let1627649146XsSym1 t_a15qz = Let1627649146Xs t_a15qz
+instance SuppressUnusedWarnings Let1627649146XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649146XsSym0KindInference ())
+data Let1627649146XsSym0 l_a15qA
+  = forall arg_a15qB. KindOf (Apply Let1627649146XsSym0 arg_a15qB) ~ KindOf (Let1627649146XsSym1 arg_a15qB) =>
+    Let1627649146XsSym0KindInference
+type instance Apply Let1627649146XsSym0 l_a15qA = Let1627649146XsSym1 l_a15qA
+type family Let1627649146Xs _z_1627649143_a15qx where
+  Let1627649146Xs _z_1627649143_a15qx = '[]
+type Let1627649153XsSym3 t_a15qG t_a15qH t_a15qI =
+    Let1627649153Xs t_a15qG t_a15qH t_a15qI
+instance SuppressUnusedWarnings Let1627649153XsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649153XsSym2KindInference ())
+data Let1627649153XsSym2 l_a15qP l_a15qQ l_a15qO
+  = forall arg_a15qR. KindOf (Apply (Let1627649153XsSym2 l_a15qP l_a15qQ) arg_a15qR) ~ KindOf (Let1627649153XsSym3 l_a15qP l_a15qQ arg_a15qR) =>
+    Let1627649153XsSym2KindInference
+type instance Apply (Let1627649153XsSym2 l_a15qP l_a15qQ) l_a15qO = Let1627649153XsSym3 l_a15qP l_a15qQ l_a15qO
+instance SuppressUnusedWarnings Let1627649153XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649153XsSym1KindInference ())
+data Let1627649153XsSym1 l_a15qM l_a15qL
+  = forall arg_a15qN. KindOf (Apply (Let1627649153XsSym1 l_a15qM) arg_a15qN) ~ KindOf (Let1627649153XsSym2 l_a15qM arg_a15qN) =>
+    Let1627649153XsSym1KindInference
+type instance Apply (Let1627649153XsSym1 l_a15qM) l_a15qL = Let1627649153XsSym2 l_a15qM l_a15qL
+instance SuppressUnusedWarnings Let1627649153XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649153XsSym0KindInference ())
+data Let1627649153XsSym0 l_a15qJ
+  = forall arg_a15qK. KindOf (Apply Let1627649153XsSym0 arg_a15qK) ~ KindOf (Let1627649153XsSym1 arg_a15qK) =>
+    Let1627649153XsSym0KindInference
+type instance Apply Let1627649153XsSym0 l_a15qJ = Let1627649153XsSym1 l_a15qJ
+type family Let1627649153Xs p_a15qC x_a15qD xs'_a15qE where
+  Let1627649153Xs p_a15qC x_a15qD xs'_a15qE = Apply (Apply (:$) x_a15qD) xs'_a15qE
+type Let1627649166Scrutinee_1627648564Sym3 t_a15qT
+                                            t_a15qU
+                                            t_a15qV =
+    Let1627649166Scrutinee_1627648564 t_a15qT t_a15qU t_a15qV
+instance SuppressUnusedWarnings Let1627649166Scrutinee_1627648564Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649166Scrutinee_1627648564Sym2KindInference ())
+data Let1627649166Scrutinee_1627648564Sym2 l_a15r2 l_a15r3 l_a15r1
+  = forall arg_a15r4. KindOf (Apply (Let1627649166Scrutinee_1627648564Sym2 l_a15r2 l_a15r3) arg_a15r4) ~ KindOf (Let1627649166Scrutinee_1627648564Sym3 l_a15r2 l_a15r3 arg_a15r4) =>
+    Let1627649166Scrutinee_1627648564Sym2KindInference
+type instance Apply (Let1627649166Scrutinee_1627648564Sym2 l_a15r2 l_a15r3) l_a15r1 = Let1627649166Scrutinee_1627648564Sym3 l_a15r2 l_a15r3 l_a15r1
+instance SuppressUnusedWarnings Let1627649166Scrutinee_1627648564Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649166Scrutinee_1627648564Sym1KindInference ())
+data Let1627649166Scrutinee_1627648564Sym1 l_a15qZ l_a15qY
+  = forall arg_a15r0. KindOf (Apply (Let1627649166Scrutinee_1627648564Sym1 l_a15qZ) arg_a15r0) ~ KindOf (Let1627649166Scrutinee_1627648564Sym2 l_a15qZ arg_a15r0) =>
+    Let1627649166Scrutinee_1627648564Sym1KindInference
+type instance Apply (Let1627649166Scrutinee_1627648564Sym1 l_a15qZ) l_a15qY = Let1627649166Scrutinee_1627648564Sym2 l_a15qZ l_a15qY
+instance SuppressUnusedWarnings Let1627649166Scrutinee_1627648564Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649166Scrutinee_1627648564Sym0KindInference ())
+data Let1627649166Scrutinee_1627648564Sym0 l_a15qW
+  = forall arg_a15qX. KindOf (Apply Let1627649166Scrutinee_1627648564Sym0 arg_a15qX) ~ KindOf (Let1627649166Scrutinee_1627648564Sym1 arg_a15qX) =>
+    Let1627649166Scrutinee_1627648564Sym0KindInference
+type instance Apply Let1627649166Scrutinee_1627648564Sym0 l_a15qW = Let1627649166Scrutinee_1627648564Sym1 l_a15qW
+type family Let1627649166Scrutinee_1627648564 p_a15qC
+                                              x_a15qD
+                                              xs'_a15qE where
+  Let1627649166Scrutinee_1627648564 p_a15qC x_a15qD xs'_a15qE = Apply p_a15qC x_a15qD
+type family Case_1627649188_a15rf p_a15qC
+                                  x_a15qD
+                                  xs'_a15qE
+                                  t_a15rk where
+  Case_1627649188_a15rf p_a15qC x_a15qD xs'_a15qE '(y_1627649184_a15rg,
+                                                    _z_1627649191_a15rj) = y_1627649184_a15rg
+type family Case_1627649207_a15ry p_a15qC
+                                  x_a15qD
+                                  xs'_a15qE
+                                  t_a15rD where
+  Case_1627649207_a15ry p_a15qC x_a15qD xs'_a15qE '(_z_1627649209_a15rB,
+                                                    y_1627649186_a15rC) = y_1627649186_a15rC
+type Let1627649181YsSym3 t_a15rl t_a15rm t_a15rn =
+    Let1627649181Ys t_a15rl t_a15rm t_a15rn
+instance SuppressUnusedWarnings Let1627649181YsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649181YsSym2KindInference ())
+data Let1627649181YsSym2 l_a15ru l_a15rv l_a15rt
+  = forall arg_a15rw. KindOf (Apply (Let1627649181YsSym2 l_a15ru l_a15rv) arg_a15rw) ~ KindOf (Let1627649181YsSym3 l_a15ru l_a15rv arg_a15rw) =>
+    Let1627649181YsSym2KindInference
+type instance Apply (Let1627649181YsSym2 l_a15ru l_a15rv) l_a15rt = Let1627649181YsSym3 l_a15ru l_a15rv l_a15rt
+instance SuppressUnusedWarnings Let1627649181YsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649181YsSym1KindInference ())
+data Let1627649181YsSym1 l_a15rr l_a15rq
+  = forall arg_a15rs. KindOf (Apply (Let1627649181YsSym1 l_a15rr) arg_a15rs) ~ KindOf (Let1627649181YsSym2 l_a15rr arg_a15rs) =>
+    Let1627649181YsSym1KindInference
+type instance Apply (Let1627649181YsSym1 l_a15rr) l_a15rq = Let1627649181YsSym2 l_a15rr l_a15rq
+instance SuppressUnusedWarnings Let1627649181YsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649181YsSym0KindInference ())
+data Let1627649181YsSym0 l_a15ro
+  = forall arg_a15rp. KindOf (Apply Let1627649181YsSym0 arg_a15rp) ~ KindOf (Let1627649181YsSym1 arg_a15rp) =>
+    Let1627649181YsSym0KindInference
+type instance Apply Let1627649181YsSym0 l_a15ro = Let1627649181YsSym1 l_a15ro
+type Let1627649181ZsSym3 t_a15rE t_a15rF t_a15rG =
+    Let1627649181Zs t_a15rE t_a15rF t_a15rG
+instance SuppressUnusedWarnings Let1627649181ZsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649181ZsSym2KindInference ())
+data Let1627649181ZsSym2 l_a15rN l_a15rO l_a15rM
+  = forall arg_a15rP. KindOf (Apply (Let1627649181ZsSym2 l_a15rN l_a15rO) arg_a15rP) ~ KindOf (Let1627649181ZsSym3 l_a15rN l_a15rO arg_a15rP) =>
+    Let1627649181ZsSym2KindInference
+type instance Apply (Let1627649181ZsSym2 l_a15rN l_a15rO) l_a15rM = Let1627649181ZsSym3 l_a15rN l_a15rO l_a15rM
+instance SuppressUnusedWarnings Let1627649181ZsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649181ZsSym1KindInference ())
+data Let1627649181ZsSym1 l_a15rK l_a15rJ
+  = forall arg_a15rL. KindOf (Apply (Let1627649181ZsSym1 l_a15rK) arg_a15rL) ~ KindOf (Let1627649181ZsSym2 l_a15rK arg_a15rL) =>
+    Let1627649181ZsSym1KindInference
+type instance Apply (Let1627649181ZsSym1 l_a15rK) l_a15rJ = Let1627649181ZsSym2 l_a15rK l_a15rJ
+instance SuppressUnusedWarnings Let1627649181ZsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649181ZsSym0KindInference ())
+data Let1627649181ZsSym0 l_a15rH
+  = forall arg_a15rI. KindOf (Apply Let1627649181ZsSym0 arg_a15rI) ~ KindOf (Let1627649181ZsSym1 arg_a15rI) =>
+    Let1627649181ZsSym0KindInference
+type instance Apply Let1627649181ZsSym0 l_a15rH = Let1627649181ZsSym1 l_a15rH
+type Let1627649181X_1627649182Sym3 t_a15rQ t_a15rR t_a15rS =
+    Let1627649181X_1627649182 t_a15rQ t_a15rR t_a15rS
+instance SuppressUnusedWarnings Let1627649181X_1627649182Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649181X_1627649182Sym2KindInference ())
+data Let1627649181X_1627649182Sym2 l_a15rZ l_a15s0 l_a15rY
+  = forall arg_a15s1. KindOf (Apply (Let1627649181X_1627649182Sym2 l_a15rZ l_a15s0) arg_a15s1) ~ KindOf (Let1627649181X_1627649182Sym3 l_a15rZ l_a15s0 arg_a15s1) =>
+    Let1627649181X_1627649182Sym2KindInference
+type instance Apply (Let1627649181X_1627649182Sym2 l_a15rZ l_a15s0) l_a15rY = Let1627649181X_1627649182Sym3 l_a15rZ l_a15s0 l_a15rY
+instance SuppressUnusedWarnings Let1627649181X_1627649182Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649181X_1627649182Sym1KindInference ())
+data Let1627649181X_1627649182Sym1 l_a15rW l_a15rV
+  = forall arg_a15rX. KindOf (Apply (Let1627649181X_1627649182Sym1 l_a15rW) arg_a15rX) ~ KindOf (Let1627649181X_1627649182Sym2 l_a15rW arg_a15rX) =>
+    Let1627649181X_1627649182Sym1KindInference
+type instance Apply (Let1627649181X_1627649182Sym1 l_a15rW) l_a15rV = Let1627649181X_1627649182Sym2 l_a15rW l_a15rV
+instance SuppressUnusedWarnings Let1627649181X_1627649182Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649181X_1627649182Sym0KindInference ())
+data Let1627649181X_1627649182Sym0 l_a15rT
+  = forall arg_a15rU. KindOf (Apply Let1627649181X_1627649182Sym0 arg_a15rU) ~ KindOf (Let1627649181X_1627649182Sym1 arg_a15rU) =>
+    Let1627649181X_1627649182Sym0KindInference
+type instance Apply Let1627649181X_1627649182Sym0 l_a15rT = Let1627649181X_1627649182Sym1 l_a15rT
+type family Let1627649181Ys p_a15qC x_a15qD xs'_a15qE where
+  Let1627649181Ys p_a15qC x_a15qD xs'_a15qE = Case_1627649188_a15rf p_a15qC x_a15qD xs'_a15qE (Let1627649181X_1627649182Sym3 p_a15qC x_a15qD xs'_a15qE)
+type family Let1627649181Zs p_a15qC x_a15qD xs'_a15qE where
+  Let1627649181Zs p_a15qC x_a15qD xs'_a15qE = Case_1627649207_a15ry p_a15qC x_a15qD xs'_a15qE (Let1627649181X_1627649182Sym3 p_a15qC x_a15qD xs'_a15qE)
+type family Let1627649181X_1627649182 p_a15qC
+                                      x_a15qD
+                                      xs'_a15qE where
+  Let1627649181X_1627649182 p_a15qC x_a15qD xs'_a15qE = Apply (Apply SpanSym0 p_a15qC) xs'_a15qE
+type family Case_1627649179_a15r6 p_a15qC
+                                  x_a15qD
+                                  xs'_a15qE
+                                  t_a15s2 where
+  Case_1627649179_a15r6 p_a15qC x_a15qD xs'_a15qE 'True = Apply (Apply Tuple2Sym0 (Apply (Apply (:$) x_a15qD) (Let1627649181YsSym3 p_a15qC x_a15qD xs'_a15qE))) (Let1627649181ZsSym3 p_a15qC x_a15qD xs'_a15qE)
+  Case_1627649179_a15r6 p_a15qC x_a15qD xs'_a15qE 'False = Apply (Apply Tuple2Sym0 '[]) (Let1627649153XsSym3 p_a15qC x_a15qD xs'_a15qE)
+type family Case_1627649261_a15sq eq_a15sf
+                                  x_a15sg
+                                  xs_a15sh
+                                  t_a15sv where
+  Case_1627649261_a15sq eq_a15sf x_a15sg xs_a15sh '(y_1627649257_a15sr,
+                                                    _z_1627649264_a15su) = y_1627649257_a15sr
+type family Case_1627649280_a15sJ eq_a15sf
+                                  x_a15sg
+                                  xs_a15sh
+                                  t_a15sO where
+  Case_1627649280_a15sJ eq_a15sf x_a15sg xs_a15sh '(_z_1627649282_a15sM,
+                                                    y_1627649259_a15sN) = y_1627649259_a15sN
+type Let1627649254YsSym3 t_a15sw t_a15sx t_a15sy =
+    Let1627649254Ys t_a15sw t_a15sx t_a15sy
+instance SuppressUnusedWarnings Let1627649254YsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649254YsSym2KindInference ())
+data Let1627649254YsSym2 l_a15sF l_a15sG l_a15sE
+  = forall arg_a15sH. KindOf (Apply (Let1627649254YsSym2 l_a15sF l_a15sG) arg_a15sH) ~ KindOf (Let1627649254YsSym3 l_a15sF l_a15sG arg_a15sH) =>
+    Let1627649254YsSym2KindInference
+type instance Apply (Let1627649254YsSym2 l_a15sF l_a15sG) l_a15sE = Let1627649254YsSym3 l_a15sF l_a15sG l_a15sE
+instance SuppressUnusedWarnings Let1627649254YsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649254YsSym1KindInference ())
+data Let1627649254YsSym1 l_a15sC l_a15sB
+  = forall arg_a15sD. KindOf (Apply (Let1627649254YsSym1 l_a15sC) arg_a15sD) ~ KindOf (Let1627649254YsSym2 l_a15sC arg_a15sD) =>
+    Let1627649254YsSym1KindInference
+type instance Apply (Let1627649254YsSym1 l_a15sC) l_a15sB = Let1627649254YsSym2 l_a15sC l_a15sB
+instance SuppressUnusedWarnings Let1627649254YsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649254YsSym0KindInference ())
+data Let1627649254YsSym0 l_a15sz
+  = forall arg_a15sA. KindOf (Apply Let1627649254YsSym0 arg_a15sA) ~ KindOf (Let1627649254YsSym1 arg_a15sA) =>
+    Let1627649254YsSym0KindInference
+type instance Apply Let1627649254YsSym0 l_a15sz = Let1627649254YsSym1 l_a15sz
+type Let1627649254ZsSym3 t_a15sP t_a15sQ t_a15sR =
+    Let1627649254Zs t_a15sP t_a15sQ t_a15sR
+instance SuppressUnusedWarnings Let1627649254ZsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649254ZsSym2KindInference ())
+data Let1627649254ZsSym2 l_a15sY l_a15sZ l_a15sX
+  = forall arg_a15t0. KindOf (Apply (Let1627649254ZsSym2 l_a15sY l_a15sZ) arg_a15t0) ~ KindOf (Let1627649254ZsSym3 l_a15sY l_a15sZ arg_a15t0) =>
+    Let1627649254ZsSym2KindInference
+type instance Apply (Let1627649254ZsSym2 l_a15sY l_a15sZ) l_a15sX = Let1627649254ZsSym3 l_a15sY l_a15sZ l_a15sX
+instance SuppressUnusedWarnings Let1627649254ZsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649254ZsSym1KindInference ())
+data Let1627649254ZsSym1 l_a15sV l_a15sU
+  = forall arg_a15sW. KindOf (Apply (Let1627649254ZsSym1 l_a15sV) arg_a15sW) ~ KindOf (Let1627649254ZsSym2 l_a15sV arg_a15sW) =>
+    Let1627649254ZsSym1KindInference
+type instance Apply (Let1627649254ZsSym1 l_a15sV) l_a15sU = Let1627649254ZsSym2 l_a15sV l_a15sU
+instance SuppressUnusedWarnings Let1627649254ZsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649254ZsSym0KindInference ())
+data Let1627649254ZsSym0 l_a15sS
+  = forall arg_a15sT. KindOf (Apply Let1627649254ZsSym0 arg_a15sT) ~ KindOf (Let1627649254ZsSym1 arg_a15sT) =>
+    Let1627649254ZsSym0KindInference
+type instance Apply Let1627649254ZsSym0 l_a15sS = Let1627649254ZsSym1 l_a15sS
+type Let1627649254X_1627649255Sym3 t_a15t1 t_a15t2 t_a15t3 =
+    Let1627649254X_1627649255 t_a15t1 t_a15t2 t_a15t3
+instance SuppressUnusedWarnings Let1627649254X_1627649255Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649254X_1627649255Sym2KindInference ())
+data Let1627649254X_1627649255Sym2 l_a15ta l_a15tb l_a15t9
+  = forall arg_a15tc. KindOf (Apply (Let1627649254X_1627649255Sym2 l_a15ta l_a15tb) arg_a15tc) ~ KindOf (Let1627649254X_1627649255Sym3 l_a15ta l_a15tb arg_a15tc) =>
+    Let1627649254X_1627649255Sym2KindInference
+type instance Apply (Let1627649254X_1627649255Sym2 l_a15ta l_a15tb) l_a15t9 = Let1627649254X_1627649255Sym3 l_a15ta l_a15tb l_a15t9
+instance SuppressUnusedWarnings Let1627649254X_1627649255Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649254X_1627649255Sym1KindInference ())
+data Let1627649254X_1627649255Sym1 l_a15t7 l_a15t6
+  = forall arg_a15t8. KindOf (Apply (Let1627649254X_1627649255Sym1 l_a15t7) arg_a15t8) ~ KindOf (Let1627649254X_1627649255Sym2 l_a15t7 arg_a15t8) =>
+    Let1627649254X_1627649255Sym1KindInference
+type instance Apply (Let1627649254X_1627649255Sym1 l_a15t7) l_a15t6 = Let1627649254X_1627649255Sym2 l_a15t7 l_a15t6
+instance SuppressUnusedWarnings Let1627649254X_1627649255Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649254X_1627649255Sym0KindInference ())
+data Let1627649254X_1627649255Sym0 l_a15t4
+  = forall arg_a15t5. KindOf (Apply Let1627649254X_1627649255Sym0 arg_a15t5) ~ KindOf (Let1627649254X_1627649255Sym1 arg_a15t5) =>
+    Let1627649254X_1627649255Sym0KindInference
+type instance Apply Let1627649254X_1627649255Sym0 l_a15t4 = Let1627649254X_1627649255Sym1 l_a15t4
+type family Let1627649254Ys eq_a15sf x_a15sg xs_a15sh where
+  Let1627649254Ys eq_a15sf x_a15sg xs_a15sh = Case_1627649261_a15sq eq_a15sf x_a15sg xs_a15sh (Let1627649254X_1627649255Sym3 eq_a15sf x_a15sg xs_a15sh)
+type family Let1627649254Zs eq_a15sf x_a15sg xs_a15sh where
+  Let1627649254Zs eq_a15sf x_a15sg xs_a15sh = Case_1627649280_a15sJ eq_a15sf x_a15sg xs_a15sh (Let1627649254X_1627649255Sym3 eq_a15sf x_a15sg xs_a15sh)
+type family Let1627649254X_1627649255 eq_a15sf
+                                      x_a15sg
+                                      xs_a15sh where
+  Let1627649254X_1627649255 eq_a15sf x_a15sg xs_a15sh = Apply (Apply SpanSym0 (Apply eq_a15sf x_a15sg)) xs_a15sh
+type Let1627649331XsSym3 t_a15ty t_a15tz t_a15tA =
+    Let1627649331Xs t_a15ty t_a15tz t_a15tA
+instance SuppressUnusedWarnings Let1627649331XsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649331XsSym2KindInference ())
+data Let1627649331XsSym2 l_a15tH l_a15tI l_a15tG
+  = forall arg_a15tJ. KindOf (Apply (Let1627649331XsSym2 l_a15tH l_a15tI) arg_a15tJ) ~ KindOf (Let1627649331XsSym3 l_a15tH l_a15tI arg_a15tJ) =>
+    Let1627649331XsSym2KindInference
+type instance Apply (Let1627649331XsSym2 l_a15tH l_a15tI) l_a15tG = Let1627649331XsSym3 l_a15tH l_a15tI l_a15tG
+instance SuppressUnusedWarnings Let1627649331XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649331XsSym1KindInference ())
+data Let1627649331XsSym1 l_a15tE l_a15tD
+  = forall arg_a15tF. KindOf (Apply (Let1627649331XsSym1 l_a15tE) arg_a15tF) ~ KindOf (Let1627649331XsSym2 l_a15tE arg_a15tF) =>
+    Let1627649331XsSym1KindInference
+type instance Apply (Let1627649331XsSym1 l_a15tE) l_a15tD = Let1627649331XsSym2 l_a15tE l_a15tD
+instance SuppressUnusedWarnings Let1627649331XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649331XsSym0KindInference ())
+data Let1627649331XsSym0 l_a15tB
+  = forall arg_a15tC. KindOf (Apply Let1627649331XsSym0 arg_a15tC) ~ KindOf (Let1627649331XsSym1 arg_a15tC) =>
+    Let1627649331XsSym0KindInference
+type instance Apply Let1627649331XsSym0 l_a15tB = Let1627649331XsSym1 l_a15tB
+type family Let1627649331Xs p_a15tu x_a15tv xs'_a15tw where
+  Let1627649331Xs p_a15tu x_a15tv xs'_a15tw = Apply (Apply (:$) x_a15tv) xs'_a15tw
+type Let1627649344Scrutinee_1627648560Sym3 t_a15tL
+                                            t_a15tM
+                                            t_a15tN =
+    Let1627649344Scrutinee_1627648560 t_a15tL t_a15tM t_a15tN
+instance SuppressUnusedWarnings Let1627649344Scrutinee_1627648560Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649344Scrutinee_1627648560Sym2KindInference ())
+data Let1627649344Scrutinee_1627648560Sym2 l_a15tU l_a15tV l_a15tT
+  = forall arg_a15tW. KindOf (Apply (Let1627649344Scrutinee_1627648560Sym2 l_a15tU l_a15tV) arg_a15tW) ~ KindOf (Let1627649344Scrutinee_1627648560Sym3 l_a15tU l_a15tV arg_a15tW) =>
+    Let1627649344Scrutinee_1627648560Sym2KindInference
+type instance Apply (Let1627649344Scrutinee_1627648560Sym2 l_a15tU l_a15tV) l_a15tT = Let1627649344Scrutinee_1627648560Sym3 l_a15tU l_a15tV l_a15tT
+instance SuppressUnusedWarnings Let1627649344Scrutinee_1627648560Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649344Scrutinee_1627648560Sym1KindInference ())
+data Let1627649344Scrutinee_1627648560Sym1 l_a15tR l_a15tQ
+  = forall arg_a15tS. KindOf (Apply (Let1627649344Scrutinee_1627648560Sym1 l_a15tR) arg_a15tS) ~ KindOf (Let1627649344Scrutinee_1627648560Sym2 l_a15tR arg_a15tS) =>
+    Let1627649344Scrutinee_1627648560Sym1KindInference
+type instance Apply (Let1627649344Scrutinee_1627648560Sym1 l_a15tR) l_a15tQ = Let1627649344Scrutinee_1627648560Sym2 l_a15tR l_a15tQ
+instance SuppressUnusedWarnings Let1627649344Scrutinee_1627648560Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649344Scrutinee_1627648560Sym0KindInference ())
+data Let1627649344Scrutinee_1627648560Sym0 l_a15tO
+  = forall arg_a15tP. KindOf (Apply Let1627649344Scrutinee_1627648560Sym0 arg_a15tP) ~ KindOf (Let1627649344Scrutinee_1627648560Sym1 arg_a15tP) =>
+    Let1627649344Scrutinee_1627648560Sym0KindInference
+type instance Apply Let1627649344Scrutinee_1627648560Sym0 l_a15tO = Let1627649344Scrutinee_1627648560Sym1 l_a15tO
+type family Let1627649344Scrutinee_1627648560 p_a15tu
+                                              x_a15tv
+                                              xs'_a15tw where
+  Let1627649344Scrutinee_1627648560 p_a15tu x_a15tv xs'_a15tw = Apply p_a15tu x_a15tv
+type family Case_1627649357_a15tY p_a15tu
+                                  x_a15tv
+                                  xs'_a15tw
+                                  t_a15tZ where
+  Case_1627649357_a15tY p_a15tu x_a15tv xs'_a15tw 'True = Apply (Apply DropWhileSym0 p_a15tu) xs'_a15tw
+  Case_1627649357_a15tY p_a15tu x_a15tv xs'_a15tw 'False = Let1627649331XsSym3 p_a15tu x_a15tv xs'_a15tw
+type Let1627649375Scrutinee_1627648558Sym3 t_a15ug
+                                            t_a15uh
+                                            t_a15ui =
+    Let1627649375Scrutinee_1627648558 t_a15ug t_a15uh t_a15ui
+instance SuppressUnusedWarnings Let1627649375Scrutinee_1627648558Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649375Scrutinee_1627648558Sym2KindInference ())
+data Let1627649375Scrutinee_1627648558Sym2 l_a15up l_a15uq l_a15uo
+  = forall arg_a15ur. KindOf (Apply (Let1627649375Scrutinee_1627648558Sym2 l_a15up l_a15uq) arg_a15ur) ~ KindOf (Let1627649375Scrutinee_1627648558Sym3 l_a15up l_a15uq arg_a15ur) =>
+    Let1627649375Scrutinee_1627648558Sym2KindInference
+type instance Apply (Let1627649375Scrutinee_1627648558Sym2 l_a15up l_a15uq) l_a15uo = Let1627649375Scrutinee_1627648558Sym3 l_a15up l_a15uq l_a15uo
+instance SuppressUnusedWarnings Let1627649375Scrutinee_1627648558Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649375Scrutinee_1627648558Sym1KindInference ())
+data Let1627649375Scrutinee_1627648558Sym1 l_a15um l_a15ul
+  = forall arg_a15un. KindOf (Apply (Let1627649375Scrutinee_1627648558Sym1 l_a15um) arg_a15un) ~ KindOf (Let1627649375Scrutinee_1627648558Sym2 l_a15um arg_a15un) =>
+    Let1627649375Scrutinee_1627648558Sym1KindInference
+type instance Apply (Let1627649375Scrutinee_1627648558Sym1 l_a15um) l_a15ul = Let1627649375Scrutinee_1627648558Sym2 l_a15um l_a15ul
+instance SuppressUnusedWarnings Let1627649375Scrutinee_1627648558Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649375Scrutinee_1627648558Sym0KindInference ())
+data Let1627649375Scrutinee_1627648558Sym0 l_a15uj
+  = forall arg_a15uk. KindOf (Apply Let1627649375Scrutinee_1627648558Sym0 arg_a15uk) ~ KindOf (Let1627649375Scrutinee_1627648558Sym1 arg_a15uk) =>
+    Let1627649375Scrutinee_1627648558Sym0KindInference
+type instance Apply Let1627649375Scrutinee_1627648558Sym0 l_a15uj = Let1627649375Scrutinee_1627648558Sym1 l_a15uj
+type family Let1627649375Scrutinee_1627648558 p_a15uc
+                                              x_a15ud
+                                              xs_a15ue where
+  Let1627649375Scrutinee_1627648558 p_a15uc x_a15ud xs_a15ue = Apply p_a15uc x_a15ud
+type family Case_1627649388_a15ut p_a15uc
+                                  x_a15ud
+                                  xs_a15ue
+                                  t_a15uu where
+  Case_1627649388_a15ut p_a15uc x_a15ud xs_a15ue 'True = Apply (Apply (:$) x_a15ud) (Apply (Apply TakeWhileSym0 p_a15uc) xs_a15ue)
+  Case_1627649388_a15ut p_a15uc x_a15ud xs_a15ue 'False = '[]
+type Let1627649404Scrutinee_1627648546Sym3 t_a15uJ
+                                            t_a15uK
+                                            t_a15uL =
+    Let1627649404Scrutinee_1627648546 t_a15uJ t_a15uK t_a15uL
+instance SuppressUnusedWarnings Let1627649404Scrutinee_1627648546Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649404Scrutinee_1627648546Sym2KindInference ())
+data Let1627649404Scrutinee_1627648546Sym2 l_a15uS l_a15uT l_a15uR
+  = forall arg_a15uU. KindOf (Apply (Let1627649404Scrutinee_1627648546Sym2 l_a15uS l_a15uT) arg_a15uU) ~ KindOf (Let1627649404Scrutinee_1627648546Sym3 l_a15uS l_a15uT arg_a15uU) =>
+    Let1627649404Scrutinee_1627648546Sym2KindInference
+type instance Apply (Let1627649404Scrutinee_1627648546Sym2 l_a15uS l_a15uT) l_a15uR = Let1627649404Scrutinee_1627648546Sym3 l_a15uS l_a15uT l_a15uR
+instance SuppressUnusedWarnings Let1627649404Scrutinee_1627648546Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649404Scrutinee_1627648546Sym1KindInference ())
+data Let1627649404Scrutinee_1627648546Sym1 l_a15uP l_a15uO
+  = forall arg_a15uQ. KindOf (Apply (Let1627649404Scrutinee_1627648546Sym1 l_a15uP) arg_a15uQ) ~ KindOf (Let1627649404Scrutinee_1627648546Sym2 l_a15uP arg_a15uQ) =>
+    Let1627649404Scrutinee_1627648546Sym1KindInference
+type instance Apply (Let1627649404Scrutinee_1627648546Sym1 l_a15uP) l_a15uO = Let1627649404Scrutinee_1627648546Sym2 l_a15uP l_a15uO
+instance SuppressUnusedWarnings Let1627649404Scrutinee_1627648546Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649404Scrutinee_1627648546Sym0KindInference ())
+data Let1627649404Scrutinee_1627648546Sym0 l_a15uM
+  = forall arg_a15uN. KindOf (Apply Let1627649404Scrutinee_1627648546Sym0 arg_a15uN) ~ KindOf (Let1627649404Scrutinee_1627648546Sym1 arg_a15uN) =>
+    Let1627649404Scrutinee_1627648546Sym0KindInference
+type instance Apply Let1627649404Scrutinee_1627648546Sym0 l_a15uM = Let1627649404Scrutinee_1627648546Sym1 l_a15uM
+type family Let1627649404Scrutinee_1627648546 p_a15uF
+                                              x_a15uG
+                                              xs_a15uH where
+  Let1627649404Scrutinee_1627648546 p_a15uF x_a15uG xs_a15uH = Apply p_a15uF x_a15uG
+type family Case_1627649417_a15uW p_a15uF
+                                  x_a15uG
+                                  xs_a15uH
+                                  t_a15uX where
+  Case_1627649417_a15uW p_a15uF x_a15uG xs_a15uH 'True = Apply (Apply (:$) x_a15uG) (Apply (Apply FilterSym0 p_a15uF) xs_a15uH)
+  Case_1627649417_a15uW p_a15uF x_a15uG xs_a15uH 'False = Apply (Apply FilterSym0 p_a15uF) xs_a15uH
+type Let1627649474XsSym5 t_a15vR t_a15vS t_a15vT t_a15vU t_a15vV =
+    Let1627649474Xs t_a15vR t_a15vS t_a15vT t_a15vU t_a15vV
+instance SuppressUnusedWarnings Let1627649474XsSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474XsSym4KindInference ())
+data Let1627649474XsSym4 l_a15wb l_a15wc l_a15wd l_a15we l_a15wa
+  = forall arg_a15wf. KindOf (Apply (Let1627649474XsSym4 l_a15wb l_a15wc l_a15wd l_a15we) arg_a15wf) ~ KindOf (Let1627649474XsSym5 l_a15wb l_a15wc l_a15wd l_a15we arg_a15wf) =>
+    Let1627649474XsSym4KindInference
+type instance Apply (Let1627649474XsSym4 l_a15wb l_a15wc l_a15wd l_a15we) l_a15wa = Let1627649474XsSym5 l_a15wb l_a15wc l_a15wd l_a15we l_a15wa
+instance SuppressUnusedWarnings Let1627649474XsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474XsSym3KindInference ())
+data Let1627649474XsSym3 l_a15w6 l_a15w7 l_a15w8 l_a15w5
+  = forall arg_a15w9. KindOf (Apply (Let1627649474XsSym3 l_a15w6 l_a15w7 l_a15w8) arg_a15w9) ~ KindOf (Let1627649474XsSym4 l_a15w6 l_a15w7 l_a15w8 arg_a15w9) =>
+    Let1627649474XsSym3KindInference
+type instance Apply (Let1627649474XsSym3 l_a15w6 l_a15w7 l_a15w8) l_a15w5 = Let1627649474XsSym4 l_a15w6 l_a15w7 l_a15w8 l_a15w5
+instance SuppressUnusedWarnings Let1627649474XsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474XsSym2KindInference ())
+data Let1627649474XsSym2 l_a15w2 l_a15w3 l_a15w1
+  = forall arg_a15w4. KindOf (Apply (Let1627649474XsSym2 l_a15w2 l_a15w3) arg_a15w4) ~ KindOf (Let1627649474XsSym3 l_a15w2 l_a15w3 arg_a15w4) =>
+    Let1627649474XsSym2KindInference
+type instance Apply (Let1627649474XsSym2 l_a15w2 l_a15w3) l_a15w1 = Let1627649474XsSym3 l_a15w2 l_a15w3 l_a15w1
+instance SuppressUnusedWarnings Let1627649474XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474XsSym1KindInference ())
+data Let1627649474XsSym1 l_a15vZ l_a15vY
+  = forall arg_a15w0. KindOf (Apply (Let1627649474XsSym1 l_a15vZ) arg_a15w0) ~ KindOf (Let1627649474XsSym2 l_a15vZ arg_a15w0) =>
+    Let1627649474XsSym1KindInference
+type instance Apply (Let1627649474XsSym1 l_a15vZ) l_a15vY = Let1627649474XsSym2 l_a15vZ l_a15vY
+instance SuppressUnusedWarnings Let1627649474XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474XsSym0KindInference ())
+data Let1627649474XsSym0 l_a15vW
+  = forall arg_a15vX. KindOf (Apply Let1627649474XsSym0 arg_a15vX) ~ KindOf (Let1627649474XsSym1 arg_a15vX) =>
+    Let1627649474XsSym0KindInference
+type instance Apply Let1627649474XsSym0 l_a15vW = Let1627649474XsSym1 l_a15vW
+type Let1627649474YsSym5 t_a15wg t_a15wh t_a15wi t_a15wj t_a15wk =
+    Let1627649474Ys t_a15wg t_a15wh t_a15wi t_a15wj t_a15wk
+instance SuppressUnusedWarnings Let1627649474YsSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474YsSym4KindInference ())
+data Let1627649474YsSym4 l_a15wA l_a15wB l_a15wC l_a15wD l_a15wz
+  = forall arg_a15wE. KindOf (Apply (Let1627649474YsSym4 l_a15wA l_a15wB l_a15wC l_a15wD) arg_a15wE) ~ KindOf (Let1627649474YsSym5 l_a15wA l_a15wB l_a15wC l_a15wD arg_a15wE) =>
+    Let1627649474YsSym4KindInference
+type instance Apply (Let1627649474YsSym4 l_a15wA l_a15wB l_a15wC l_a15wD) l_a15wz = Let1627649474YsSym5 l_a15wA l_a15wB l_a15wC l_a15wD l_a15wz
+instance SuppressUnusedWarnings Let1627649474YsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474YsSym3KindInference ())
+data Let1627649474YsSym3 l_a15wv l_a15ww l_a15wx l_a15wu
+  = forall arg_a15wy. KindOf (Apply (Let1627649474YsSym3 l_a15wv l_a15ww l_a15wx) arg_a15wy) ~ KindOf (Let1627649474YsSym4 l_a15wv l_a15ww l_a15wx arg_a15wy) =>
+    Let1627649474YsSym3KindInference
+type instance Apply (Let1627649474YsSym3 l_a15wv l_a15ww l_a15wx) l_a15wu = Let1627649474YsSym4 l_a15wv l_a15ww l_a15wx l_a15wu
+instance SuppressUnusedWarnings Let1627649474YsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474YsSym2KindInference ())
+data Let1627649474YsSym2 l_a15wr l_a15ws l_a15wq
+  = forall arg_a15wt. KindOf (Apply (Let1627649474YsSym2 l_a15wr l_a15ws) arg_a15wt) ~ KindOf (Let1627649474YsSym3 l_a15wr l_a15ws arg_a15wt) =>
+    Let1627649474YsSym2KindInference
+type instance Apply (Let1627649474YsSym2 l_a15wr l_a15ws) l_a15wq = Let1627649474YsSym3 l_a15wr l_a15ws l_a15wq
+instance SuppressUnusedWarnings Let1627649474YsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474YsSym1KindInference ())
+data Let1627649474YsSym1 l_a15wo l_a15wn
+  = forall arg_a15wp. KindOf (Apply (Let1627649474YsSym1 l_a15wo) arg_a15wp) ~ KindOf (Let1627649474YsSym2 l_a15wo arg_a15wp) =>
+    Let1627649474YsSym1KindInference
+type instance Apply (Let1627649474YsSym1 l_a15wo) l_a15wn = Let1627649474YsSym2 l_a15wo l_a15wn
+instance SuppressUnusedWarnings Let1627649474YsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649474YsSym0KindInference ())
+data Let1627649474YsSym0 l_a15wl
+  = forall arg_a15wm. KindOf (Apply Let1627649474YsSym0 arg_a15wm) ~ KindOf (Let1627649474YsSym1 arg_a15wm) =>
+    Let1627649474YsSym0KindInference
+type instance Apply Let1627649474YsSym0 l_a15wl = Let1627649474YsSym1 l_a15wl
+type family Let1627649474Xs eq_a15vL
+                            wild_1627648550_a15vM
+                            wild_1627648552_a15vN
+                            wild_1627648554_a15vO
+                            wild_1627648556_a15vP where
+  Let1627649474Xs eq_a15vL wild_1627648550_a15vM wild_1627648552_a15vN wild_1627648554_a15vO wild_1627648556_a15vP = Apply (Apply (:$) wild_1627648550_a15vM) wild_1627648552_a15vN
+type family Let1627649474Ys eq_a15vL
+                            wild_1627648550_a15vM
+                            wild_1627648552_a15vN
+                            wild_1627648554_a15vO
+                            wild_1627648556_a15vP where
+  Let1627649474Ys eq_a15vL wild_1627648550_a15vM wild_1627648552_a15vN wild_1627648554_a15vO wild_1627648556_a15vP = Apply (Apply (:$) wild_1627648554_a15vO) wild_1627648556_a15vP
+type family Lambda_1627649525_a15wG eq_a15vL
+                                    wild_1627648550_a15vM
+                                    wild_1627648552_a15vN
+                                    wild_1627648554_a15vO
+                                    wild_1627648556_a15vP
+                                    t_a15wI where
+  Lambda_1627649525_a15wG eq_a15vL wild_1627648550_a15vM wild_1627648552_a15vN wild_1627648554_a15vO wild_1627648556_a15vP x_a15wH = Apply (Apply Any_Sym0 (Apply eq_a15vL x_a15wH)) (Let1627649474YsSym5 eq_a15vL wild_1627648550_a15vM wild_1627648552_a15vN wild_1627648554_a15vO wild_1627648556_a15vP)
+type Lambda_1627649525Sym6 t_a15wJ
+                            t_a15wK
+                            t_a15wL
+                            t_a15wM
+                            t_a15wN
+                            t_a15wO =
+    Lambda_1627649525_a15wG t_a15wJ t_a15wK t_a15wL t_a15wM t_a15wN t_a15wO
+instance SuppressUnusedWarnings Lambda_1627649525Sym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649525Sym5KindInference ())
+data Lambda_1627649525Sym5 l_a15xa
+                            l_a15xb
+                            l_a15xc
+                            l_a15xd
+                            l_a15xe
+                            l_a15x9
+  = forall arg_a15xf. KindOf (Apply (Lambda_1627649525Sym5 l_a15xa l_a15xb l_a15xc l_a15xd l_a15xe) arg_a15xf) ~ KindOf (Lambda_1627649525Sym6 l_a15xa l_a15xb l_a15xc l_a15xd l_a15xe arg_a15xf) =>
+    Lambda_1627649525Sym5KindInference
+type instance Apply (Lambda_1627649525Sym5 l_a15xa l_a15xb l_a15xc l_a15xd l_a15xe) l_a15x9 = Lambda_1627649525Sym6 l_a15xa l_a15xb l_a15xc l_a15xd l_a15xe l_a15x9
+instance SuppressUnusedWarnings Lambda_1627649525Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649525Sym4KindInference ())
+data Lambda_1627649525Sym4 l_a15x4 l_a15x5 l_a15x6 l_a15x7 l_a15x3
+  = forall arg_a15x8. KindOf (Apply (Lambda_1627649525Sym4 l_a15x4 l_a15x5 l_a15x6 l_a15x7) arg_a15x8) ~ KindOf (Lambda_1627649525Sym5 l_a15x4 l_a15x5 l_a15x6 l_a15x7 arg_a15x8) =>
+    Lambda_1627649525Sym4KindInference
+type instance Apply (Lambda_1627649525Sym4 l_a15x4 l_a15x5 l_a15x6 l_a15x7) l_a15x3 = Lambda_1627649525Sym5 l_a15x4 l_a15x5 l_a15x6 l_a15x7 l_a15x3
+instance SuppressUnusedWarnings Lambda_1627649525Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649525Sym3KindInference ())
+data Lambda_1627649525Sym3 l_a15wZ l_a15x0 l_a15x1 l_a15wY
+  = forall arg_a15x2. KindOf (Apply (Lambda_1627649525Sym3 l_a15wZ l_a15x0 l_a15x1) arg_a15x2) ~ KindOf (Lambda_1627649525Sym4 l_a15wZ l_a15x0 l_a15x1 arg_a15x2) =>
+    Lambda_1627649525Sym3KindInference
+type instance Apply (Lambda_1627649525Sym3 l_a15wZ l_a15x0 l_a15x1) l_a15wY = Lambda_1627649525Sym4 l_a15wZ l_a15x0 l_a15x1 l_a15wY
+instance SuppressUnusedWarnings Lambda_1627649525Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649525Sym2KindInference ())
+data Lambda_1627649525Sym2 l_a15wV l_a15wW l_a15wU
+  = forall arg_a15wX. KindOf (Apply (Lambda_1627649525Sym2 l_a15wV l_a15wW) arg_a15wX) ~ KindOf (Lambda_1627649525Sym3 l_a15wV l_a15wW arg_a15wX) =>
+    Lambda_1627649525Sym2KindInference
+type instance Apply (Lambda_1627649525Sym2 l_a15wV l_a15wW) l_a15wU = Lambda_1627649525Sym3 l_a15wV l_a15wW l_a15wU
+instance SuppressUnusedWarnings Lambda_1627649525Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649525Sym1KindInference ())
+data Lambda_1627649525Sym1 l_a15wS l_a15wR
+  = forall arg_a15wT. KindOf (Apply (Lambda_1627649525Sym1 l_a15wS) arg_a15wT) ~ KindOf (Lambda_1627649525Sym2 l_a15wS arg_a15wT) =>
+    Lambda_1627649525Sym1KindInference
+type instance Apply (Lambda_1627649525Sym1 l_a15wS) l_a15wR = Lambda_1627649525Sym2 l_a15wS l_a15wR
+instance SuppressUnusedWarnings Lambda_1627649525Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649525Sym0KindInference ())
+data Lambda_1627649525Sym0 l_a15wP
+  = forall arg_a15wQ. KindOf (Apply Lambda_1627649525Sym0 arg_a15wQ) ~ KindOf (Lambda_1627649525Sym1 arg_a15wQ) =>
+    Lambda_1627649525Sym0KindInference
+type instance Apply Lambda_1627649525Sym0 l_a15wP = Lambda_1627649525Sym1 l_a15wP
+type Let1627649600YsSym4 t_a15xT t_a15xU t_a15xV t_a15xW =
+    Let1627649600Ys t_a15xT t_a15xU t_a15xV t_a15xW
+instance SuppressUnusedWarnings Let1627649600YsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649600YsSym3KindInference ())
+data Let1627649600YsSym3 l_a15y7 l_a15y8 l_a15y9 l_a15y6
+  = forall arg_a15ya. KindOf (Apply (Let1627649600YsSym3 l_a15y7 l_a15y8 l_a15y9) arg_a15ya) ~ KindOf (Let1627649600YsSym4 l_a15y7 l_a15y8 l_a15y9 arg_a15ya) =>
+    Let1627649600YsSym3KindInference
+type instance Apply (Let1627649600YsSym3 l_a15y7 l_a15y8 l_a15y9) l_a15y6 = Let1627649600YsSym4 l_a15y7 l_a15y8 l_a15y9 l_a15y6
+instance SuppressUnusedWarnings Let1627649600YsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649600YsSym2KindInference ())
+data Let1627649600YsSym2 l_a15y3 l_a15y4 l_a15y2
+  = forall arg_a15y5. KindOf (Apply (Let1627649600YsSym2 l_a15y3 l_a15y4) arg_a15y5) ~ KindOf (Let1627649600YsSym3 l_a15y3 l_a15y4 arg_a15y5) =>
+    Let1627649600YsSym2KindInference
+type instance Apply (Let1627649600YsSym2 l_a15y3 l_a15y4) l_a15y2 = Let1627649600YsSym3 l_a15y3 l_a15y4 l_a15y2
+instance SuppressUnusedWarnings Let1627649600YsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649600YsSym1KindInference ())
+data Let1627649600YsSym1 l_a15y0 l_a15xZ
+  = forall arg_a15y1. KindOf (Apply (Let1627649600YsSym1 l_a15y0) arg_a15y1) ~ KindOf (Let1627649600YsSym2 l_a15y0 arg_a15y1) =>
+    Let1627649600YsSym1KindInference
+type instance Apply (Let1627649600YsSym1 l_a15y0) l_a15xZ = Let1627649600YsSym2 l_a15y0 l_a15xZ
+instance SuppressUnusedWarnings Let1627649600YsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649600YsSym0KindInference ())
+data Let1627649600YsSym0 l_a15xX
+  = forall arg_a15xY. KindOf (Apply Let1627649600YsSym0 arg_a15xY) ~ KindOf (Let1627649600YsSym1 arg_a15xY) =>
+    Let1627649600YsSym0KindInference
+type instance Apply Let1627649600YsSym0 l_a15xX = Let1627649600YsSym1 l_a15xX
+type family Let1627649600Ys cmp_a15xO
+                            x_a15xP
+                            y_a15xQ
+                            ys'_a15xR where
+  Let1627649600Ys cmp_a15xO x_a15xP y_a15xQ ys'_a15xR = Apply (Apply (:$) y_a15xQ) ys'_a15xR
+type Let1627649619Scrutinee_1627648532Sym4 t_a15yc
+                                            t_a15yd
+                                            t_a15ye
+                                            t_a15yf =
+    Let1627649619Scrutinee_1627648532 t_a15yc t_a15yd t_a15ye t_a15yf
+instance SuppressUnusedWarnings Let1627649619Scrutinee_1627648532Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649619Scrutinee_1627648532Sym3KindInference ())
+data Let1627649619Scrutinee_1627648532Sym3 l_a15yq
+                                            l_a15yr
+                                            l_a15ys
+                                            l_a15yp
+  = forall arg_a15yt. KindOf (Apply (Let1627649619Scrutinee_1627648532Sym3 l_a15yq l_a15yr l_a15ys) arg_a15yt) ~ KindOf (Let1627649619Scrutinee_1627648532Sym4 l_a15yq l_a15yr l_a15ys arg_a15yt) =>
+    Let1627649619Scrutinee_1627648532Sym3KindInference
+type instance Apply (Let1627649619Scrutinee_1627648532Sym3 l_a15yq l_a15yr l_a15ys) l_a15yp = Let1627649619Scrutinee_1627648532Sym4 l_a15yq l_a15yr l_a15ys l_a15yp
+instance SuppressUnusedWarnings Let1627649619Scrutinee_1627648532Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649619Scrutinee_1627648532Sym2KindInference ())
+data Let1627649619Scrutinee_1627648532Sym2 l_a15ym l_a15yn l_a15yl
+  = forall arg_a15yo. KindOf (Apply (Let1627649619Scrutinee_1627648532Sym2 l_a15ym l_a15yn) arg_a15yo) ~ KindOf (Let1627649619Scrutinee_1627648532Sym3 l_a15ym l_a15yn arg_a15yo) =>
+    Let1627649619Scrutinee_1627648532Sym2KindInference
+type instance Apply (Let1627649619Scrutinee_1627648532Sym2 l_a15ym l_a15yn) l_a15yl = Let1627649619Scrutinee_1627648532Sym3 l_a15ym l_a15yn l_a15yl
+instance SuppressUnusedWarnings Let1627649619Scrutinee_1627648532Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649619Scrutinee_1627648532Sym1KindInference ())
+data Let1627649619Scrutinee_1627648532Sym1 l_a15yj l_a15yi
+  = forall arg_a15yk. KindOf (Apply (Let1627649619Scrutinee_1627648532Sym1 l_a15yj) arg_a15yk) ~ KindOf (Let1627649619Scrutinee_1627648532Sym2 l_a15yj arg_a15yk) =>
+    Let1627649619Scrutinee_1627648532Sym1KindInference
+type instance Apply (Let1627649619Scrutinee_1627648532Sym1 l_a15yj) l_a15yi = Let1627649619Scrutinee_1627648532Sym2 l_a15yj l_a15yi
+instance SuppressUnusedWarnings Let1627649619Scrutinee_1627648532Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649619Scrutinee_1627648532Sym0KindInference ())
+data Let1627649619Scrutinee_1627648532Sym0 l_a15yg
+  = forall arg_a15yh. KindOf (Apply Let1627649619Scrutinee_1627648532Sym0 arg_a15yh) ~ KindOf (Let1627649619Scrutinee_1627648532Sym1 arg_a15yh) =>
+    Let1627649619Scrutinee_1627648532Sym0KindInference
+type instance Apply Let1627649619Scrutinee_1627648532Sym0 l_a15yg = Let1627649619Scrutinee_1627648532Sym1 l_a15yg
+type family Let1627649619Scrutinee_1627648532 cmp_a15xO
+                                              x_a15xP
+                                              y_a15xQ
+                                              ys'_a15xR where
+  Let1627649619Scrutinee_1627648532 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR = Apply (Apply cmp_a15xO x_a15xP) y_a15xQ
+type family Case_1627649638_a15yv cmp_a15xO
+                                  x_a15xP
+                                  y_a15xQ
+                                  ys'_a15xR
+                                  t_a15yw where
+  Case_1627649638_a15yv cmp_a15xO x_a15xP y_a15xQ ys'_a15xR 'GT = Apply (Apply (:$) y_a15xQ) (Apply (Apply (Apply InsertBySym0 cmp_a15xO) x_a15xP) ys'_a15xR)
+  Case_1627649638_a15yv cmp_a15xO x_a15xP y_a15xQ ys'_a15xR 'LT = Apply (Apply (:$) x_a15xP) (Let1627649600YsSym4 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR)
+  Case_1627649638_a15yv cmp_a15xO x_a15xP y_a15xQ ys'_a15xR 'EQ = Apply (Apply (:$) x_a15xP) (Let1627649600YsSym4 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR)
+type Let1627649697Scrutinee_1627648530Sym4 t_a15zs
+                                            t_a15zt
+                                            t_a15zu
+                                            t_a15zv =
+    Let1627649697Scrutinee_1627648530 t_a15zs t_a15zt t_a15zu t_a15zv
+instance SuppressUnusedWarnings Let1627649697Scrutinee_1627648530Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649697Scrutinee_1627648530Sym3KindInference ())
+data Let1627649697Scrutinee_1627648530Sym3 l_a15zG
+                                            l_a15zH
+                                            l_a15zI
+                                            l_a15zF
+  = forall arg_a15zJ. KindOf (Apply (Let1627649697Scrutinee_1627648530Sym3 l_a15zG l_a15zH l_a15zI) arg_a15zJ) ~ KindOf (Let1627649697Scrutinee_1627648530Sym4 l_a15zG l_a15zH l_a15zI arg_a15zJ) =>
+    Let1627649697Scrutinee_1627648530Sym3KindInference
+type instance Apply (Let1627649697Scrutinee_1627648530Sym3 l_a15zG l_a15zH l_a15zI) l_a15zF = Let1627649697Scrutinee_1627648530Sym4 l_a15zG l_a15zH l_a15zI l_a15zF
+instance SuppressUnusedWarnings Let1627649697Scrutinee_1627648530Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649697Scrutinee_1627648530Sym2KindInference ())
+data Let1627649697Scrutinee_1627648530Sym2 l_a15zC l_a15zD l_a15zB
+  = forall arg_a15zE. KindOf (Apply (Let1627649697Scrutinee_1627648530Sym2 l_a15zC l_a15zD) arg_a15zE) ~ KindOf (Let1627649697Scrutinee_1627648530Sym3 l_a15zC l_a15zD arg_a15zE) =>
+    Let1627649697Scrutinee_1627648530Sym2KindInference
+type instance Apply (Let1627649697Scrutinee_1627648530Sym2 l_a15zC l_a15zD) l_a15zB = Let1627649697Scrutinee_1627648530Sym3 l_a15zC l_a15zD l_a15zB
+instance SuppressUnusedWarnings Let1627649697Scrutinee_1627648530Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649697Scrutinee_1627648530Sym1KindInference ())
+data Let1627649697Scrutinee_1627648530Sym1 l_a15zz l_a15zy
+  = forall arg_a15zA. KindOf (Apply (Let1627649697Scrutinee_1627648530Sym1 l_a15zz) arg_a15zA) ~ KindOf (Let1627649697Scrutinee_1627648530Sym2 l_a15zz arg_a15zA) =>
+    Let1627649697Scrutinee_1627648530Sym1KindInference
+type instance Apply (Let1627649697Scrutinee_1627648530Sym1 l_a15zz) l_a15zy = Let1627649697Scrutinee_1627648530Sym2 l_a15zz l_a15zy
+instance SuppressUnusedWarnings Let1627649697Scrutinee_1627648530Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627649697Scrutinee_1627648530Sym0KindInference ())
+data Let1627649697Scrutinee_1627648530Sym0 l_a15zw
+  = forall arg_a15zx. KindOf (Apply Let1627649697Scrutinee_1627648530Sym0 arg_a15zx) ~ KindOf (Let1627649697Scrutinee_1627648530Sym1 arg_a15zx) =>
+    Let1627649697Scrutinee_1627648530Sym0KindInference
+type instance Apply Let1627649697Scrutinee_1627648530Sym0 l_a15zw = Let1627649697Scrutinee_1627648530Sym1 l_a15zw
+type family Let1627649697Scrutinee_1627648530 eq_a15zn
+                                              x_a15zo
+                                              y_a15zp
+                                              ys_a15zq where
+  Let1627649697Scrutinee_1627648530 eq_a15zn x_a15zo y_a15zp ys_a15zq = Apply (Apply eq_a15zn x_a15zo) y_a15zp
+type family Case_1627649716_a15zL eq_a15zn
+                                  x_a15zo
+                                  y_a15zp
+                                  ys_a15zq
+                                  t_a15zM where
+  Case_1627649716_a15zL eq_a15zn x_a15zo y_a15zp ys_a15zq 'True = ys_a15zq
+  Case_1627649716_a15zL eq_a15zn x_a15zo y_a15zp ys_a15zq 'False = Apply (Apply (:$) y_a15zp) (Apply (Apply (Apply DeleteBySym0 eq_a15zn) x_a15zo) ys_a15zq)
+type family Case_1627649813_a15Bk xs_a15Be
+                                  arg_1627648526_a15Bh
+                                  arg_1627648528_a15Bi
+                                  t_a15Bz where
+  Case_1627649813_a15Bk xs_a15Be arg_1627648526_a15Bh arg_1627648528_a15Bi '( '(a_a15Bl,
+                                                                                b_a15Bm,
+                                                                                c_a15Bn,
+                                                                                d_a15Bo,
+                                                                                e_a15Bp,
+                                                                                f_a15Bq,
+                                                                                g_a15Br),
+                                                                              '(as_a15Bs,
+                                                                                bs_a15Bt,
+                                                                                cs_a15Bu,
+                                                                                ds_a15Bv,
+                                                                                es_a15Bw,
+                                                                                fs_a15Bx,
+                                                                                gs_a15By)) = Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 (Apply (Apply (:$) a_a15Bl) as_a15Bs)) (Apply (Apply (:$) b_a15Bm) bs_a15Bt)) (Apply (Apply (:$) c_a15Bn) cs_a15Bu)) (Apply (Apply (:$) d_a15Bo) ds_a15Bv)) (Apply (Apply (:$) e_a15Bp) es_a15Bw)) (Apply (Apply (:$) f_a15Bq) fs_a15Bx)) (Apply (Apply (:$) g_a15Br) gs_a15By)
+type family Lambda_1627649809_a15Bg xs_a15Be t_a15BA t_a15BB where
+  Lambda_1627649809_a15Bg xs_a15Be arg_1627648526_a15Bh arg_1627648528_a15Bi = Case_1627649813_a15Bk xs_a15Be arg_1627648526_a15Bh arg_1627648528_a15Bi (Apply (Apply Tuple2Sym0 arg_1627648526_a15Bh) arg_1627648528_a15Bi)
+type Lambda_1627649809Sym3 t_a15BC t_a15BD t_a15BE =
+    Lambda_1627649809_a15Bg t_a15BC t_a15BD t_a15BE
+instance SuppressUnusedWarnings Lambda_1627649809Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649809Sym2KindInference ())
+data Lambda_1627649809Sym2 l_a15BL l_a15BM l_a15BK
+  = forall arg_a15BN. KindOf (Apply (Lambda_1627649809Sym2 l_a15BL l_a15BM) arg_a15BN) ~ KindOf (Lambda_1627649809Sym3 l_a15BL l_a15BM arg_a15BN) =>
+    Lambda_1627649809Sym2KindInference
+type instance Apply (Lambda_1627649809Sym2 l_a15BL l_a15BM) l_a15BK = Lambda_1627649809Sym3 l_a15BL l_a15BM l_a15BK
+instance SuppressUnusedWarnings Lambda_1627649809Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649809Sym1KindInference ())
+data Lambda_1627649809Sym1 l_a15BI l_a15BH
+  = forall arg_a15BJ. KindOf (Apply (Lambda_1627649809Sym1 l_a15BI) arg_a15BJ) ~ KindOf (Lambda_1627649809Sym2 l_a15BI arg_a15BJ) =>
+    Lambda_1627649809Sym1KindInference
+type instance Apply (Lambda_1627649809Sym1 l_a15BI) l_a15BH = Lambda_1627649809Sym2 l_a15BI l_a15BH
+instance SuppressUnusedWarnings Lambda_1627649809Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649809Sym0KindInference ())
+data Lambda_1627649809Sym0 l_a15BF
+  = forall arg_a15BG. KindOf (Apply Lambda_1627649809Sym0 arg_a15BG) ~ KindOf (Lambda_1627649809Sym1 arg_a15BG) =>
+    Lambda_1627649809Sym0KindInference
+type instance Apply Lambda_1627649809Sym0 l_a15BF = Lambda_1627649809Sym1 l_a15BF
+type family Case_1627649853_a15BY xs_a15BS
+                                  arg_1627648522_a15BV
+                                  arg_1627648524_a15BW
+                                  t_a15Cb where
+  Case_1627649853_a15BY xs_a15BS arg_1627648522_a15BV arg_1627648524_a15BW '( '(a_a15BZ,
+                                                                                b_a15C0,
+                                                                                c_a15C1,
+                                                                                d_a15C2,
+                                                                                e_a15C3,
+                                                                                f_a15C4),
+                                                                              '(as_a15C5,
+                                                                                bs_a15C6,
+                                                                                cs_a15C7,
+                                                                                ds_a15C8,
+                                                                                es_a15C9,
+                                                                                fs_a15Ca)) = Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 (Apply (Apply (:$) a_a15BZ) as_a15C5)) (Apply (Apply (:$) b_a15C0) bs_a15C6)) (Apply (Apply (:$) c_a15C1) cs_a15C7)) (Apply (Apply (:$) d_a15C2) ds_a15C8)) (Apply (Apply (:$) e_a15C3) es_a15C9)) (Apply (Apply (:$) f_a15C4) fs_a15Ca)
+type family Lambda_1627649849_a15BU xs_a15BS t_a15Cc t_a15Cd where
+  Lambda_1627649849_a15BU xs_a15BS arg_1627648522_a15BV arg_1627648524_a15BW = Case_1627649853_a15BY xs_a15BS arg_1627648522_a15BV arg_1627648524_a15BW (Apply (Apply Tuple2Sym0 arg_1627648522_a15BV) arg_1627648524_a15BW)
+type Lambda_1627649849Sym3 t_a15Ce t_a15Cf t_a15Cg =
+    Lambda_1627649849_a15BU t_a15Ce t_a15Cf t_a15Cg
+instance SuppressUnusedWarnings Lambda_1627649849Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649849Sym2KindInference ())
+data Lambda_1627649849Sym2 l_a15Cn l_a15Co l_a15Cm
+  = forall arg_a15Cp. KindOf (Apply (Lambda_1627649849Sym2 l_a15Cn l_a15Co) arg_a15Cp) ~ KindOf (Lambda_1627649849Sym3 l_a15Cn l_a15Co arg_a15Cp) =>
+    Lambda_1627649849Sym2KindInference
+type instance Apply (Lambda_1627649849Sym2 l_a15Cn l_a15Co) l_a15Cm = Lambda_1627649849Sym3 l_a15Cn l_a15Co l_a15Cm
+instance SuppressUnusedWarnings Lambda_1627649849Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649849Sym1KindInference ())
+data Lambda_1627649849Sym1 l_a15Ck l_a15Cj
+  = forall arg_a15Cl. KindOf (Apply (Lambda_1627649849Sym1 l_a15Ck) arg_a15Cl) ~ KindOf (Lambda_1627649849Sym2 l_a15Ck arg_a15Cl) =>
+    Lambda_1627649849Sym1KindInference
+type instance Apply (Lambda_1627649849Sym1 l_a15Ck) l_a15Cj = Lambda_1627649849Sym2 l_a15Ck l_a15Cj
+instance SuppressUnusedWarnings Lambda_1627649849Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649849Sym0KindInference ())
+data Lambda_1627649849Sym0 l_a15Ch
+  = forall arg_a15Ci. KindOf (Apply Lambda_1627649849Sym0 arg_a15Ci) ~ KindOf (Lambda_1627649849Sym1 arg_a15Ci) =>
+    Lambda_1627649849Sym0KindInference
+type instance Apply Lambda_1627649849Sym0 l_a15Ch = Lambda_1627649849Sym1 l_a15Ch
+type family Case_1627649891_a15CA xs_a15Cu
+                                  arg_1627648518_a15Cx
+                                  arg_1627648520_a15Cy
+                                  t_a15CL where
+  Case_1627649891_a15CA xs_a15Cu arg_1627648518_a15Cx arg_1627648520_a15Cy '( '(a_a15CB,
+                                                                                b_a15CC,
+                                                                                c_a15CD,
+                                                                                d_a15CE,
+                                                                                e_a15CF),
+                                                                              '(as_a15CG,
+                                                                                bs_a15CH,
+                                                                                cs_a15CI,
+                                                                                ds_a15CJ,
+                                                                                es_a15CK)) = Apply (Apply (Apply (Apply (Apply Tuple5Sym0 (Apply (Apply (:$) a_a15CB) as_a15CG)) (Apply (Apply (:$) b_a15CC) bs_a15CH)) (Apply (Apply (:$) c_a15CD) cs_a15CI)) (Apply (Apply (:$) d_a15CE) ds_a15CJ)) (Apply (Apply (:$) e_a15CF) es_a15CK)
+type family Lambda_1627649887_a15Cw xs_a15Cu t_a15CM t_a15CN where
+  Lambda_1627649887_a15Cw xs_a15Cu arg_1627648518_a15Cx arg_1627648520_a15Cy = Case_1627649891_a15CA xs_a15Cu arg_1627648518_a15Cx arg_1627648520_a15Cy (Apply (Apply Tuple2Sym0 arg_1627648518_a15Cx) arg_1627648520_a15Cy)
+type Lambda_1627649887Sym3 t_a15CO t_a15CP t_a15CQ =
+    Lambda_1627649887_a15Cw t_a15CO t_a15CP t_a15CQ
+instance SuppressUnusedWarnings Lambda_1627649887Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649887Sym2KindInference ())
+data Lambda_1627649887Sym2 l_a15CX l_a15CY l_a15CW
+  = forall arg_a15CZ. KindOf (Apply (Lambda_1627649887Sym2 l_a15CX l_a15CY) arg_a15CZ) ~ KindOf (Lambda_1627649887Sym3 l_a15CX l_a15CY arg_a15CZ) =>
+    Lambda_1627649887Sym2KindInference
+type instance Apply (Lambda_1627649887Sym2 l_a15CX l_a15CY) l_a15CW = Lambda_1627649887Sym3 l_a15CX l_a15CY l_a15CW
+instance SuppressUnusedWarnings Lambda_1627649887Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649887Sym1KindInference ())
+data Lambda_1627649887Sym1 l_a15CU l_a15CT
+  = forall arg_a15CV. KindOf (Apply (Lambda_1627649887Sym1 l_a15CU) arg_a15CV) ~ KindOf (Lambda_1627649887Sym2 l_a15CU arg_a15CV) =>
+    Lambda_1627649887Sym1KindInference
+type instance Apply (Lambda_1627649887Sym1 l_a15CU) l_a15CT = Lambda_1627649887Sym2 l_a15CU l_a15CT
+instance SuppressUnusedWarnings Lambda_1627649887Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649887Sym0KindInference ())
+data Lambda_1627649887Sym0 l_a15CR
+  = forall arg_a15CS. KindOf (Apply Lambda_1627649887Sym0 arg_a15CS) ~ KindOf (Lambda_1627649887Sym1 arg_a15CS) =>
+    Lambda_1627649887Sym0KindInference
+type instance Apply Lambda_1627649887Sym0 l_a15CR = Lambda_1627649887Sym1 l_a15CR
+type family Case_1627649927_a15Da xs_a15D4
+                                  arg_1627648514_a15D7
+                                  arg_1627648516_a15D8
+                                  t_a15Dj where
+  Case_1627649927_a15Da xs_a15D4 arg_1627648514_a15D7 arg_1627648516_a15D8 '( '(a_a15Db,
+                                                                                b_a15Dc,
+                                                                                c_a15Dd,
+                                                                                d_a15De),
+                                                                              '(as_a15Df,
+                                                                                bs_a15Dg,
+                                                                                cs_a15Dh,
+                                                                                ds_a15Di)) = Apply (Apply (Apply (Apply Tuple4Sym0 (Apply (Apply (:$) a_a15Db) as_a15Df)) (Apply (Apply (:$) b_a15Dc) bs_a15Dg)) (Apply (Apply (:$) c_a15Dd) cs_a15Dh)) (Apply (Apply (:$) d_a15De) ds_a15Di)
+type family Lambda_1627649923_a15D6 xs_a15D4 t_a15Dk t_a15Dl where
+  Lambda_1627649923_a15D6 xs_a15D4 arg_1627648514_a15D7 arg_1627648516_a15D8 = Case_1627649927_a15Da xs_a15D4 arg_1627648514_a15D7 arg_1627648516_a15D8 (Apply (Apply Tuple2Sym0 arg_1627648514_a15D7) arg_1627648516_a15D8)
+type Lambda_1627649923Sym3 t_a15Dm t_a15Dn t_a15Do =
+    Lambda_1627649923_a15D6 t_a15Dm t_a15Dn t_a15Do
+instance SuppressUnusedWarnings Lambda_1627649923Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649923Sym2KindInference ())
+data Lambda_1627649923Sym2 l_a15Dv l_a15Dw l_a15Du
+  = forall arg_a15Dx. KindOf (Apply (Lambda_1627649923Sym2 l_a15Dv l_a15Dw) arg_a15Dx) ~ KindOf (Lambda_1627649923Sym3 l_a15Dv l_a15Dw arg_a15Dx) =>
+    Lambda_1627649923Sym2KindInference
+type instance Apply (Lambda_1627649923Sym2 l_a15Dv l_a15Dw) l_a15Du = Lambda_1627649923Sym3 l_a15Dv l_a15Dw l_a15Du
+instance SuppressUnusedWarnings Lambda_1627649923Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649923Sym1KindInference ())
+data Lambda_1627649923Sym1 l_a15Ds l_a15Dr
+  = forall arg_a15Dt. KindOf (Apply (Lambda_1627649923Sym1 l_a15Ds) arg_a15Dt) ~ KindOf (Lambda_1627649923Sym2 l_a15Ds arg_a15Dt) =>
+    Lambda_1627649923Sym1KindInference
+type instance Apply (Lambda_1627649923Sym1 l_a15Ds) l_a15Dr = Lambda_1627649923Sym2 l_a15Ds l_a15Dr
+instance SuppressUnusedWarnings Lambda_1627649923Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649923Sym0KindInference ())
+data Lambda_1627649923Sym0 l_a15Dp
+  = forall arg_a15Dq. KindOf (Apply Lambda_1627649923Sym0 arg_a15Dq) ~ KindOf (Lambda_1627649923Sym1 arg_a15Dq) =>
+    Lambda_1627649923Sym0KindInference
+type instance Apply Lambda_1627649923Sym0 l_a15Dp = Lambda_1627649923Sym1 l_a15Dp
+type family Case_1627649961_a15DI xs_a15DC
+                                  arg_1627648510_a15DF
+                                  arg_1627648512_a15DG
+                                  t_a15DP where
+  Case_1627649961_a15DI xs_a15DC arg_1627648510_a15DF arg_1627648512_a15DG '( '(a_a15DJ,
+                                                                                b_a15DK,
+                                                                                c_a15DL),
+                                                                              '(as_a15DM,
+                                                                                bs_a15DN,
+                                                                                cs_a15DO)) = Apply (Apply (Apply Tuple3Sym0 (Apply (Apply (:$) a_a15DJ) as_a15DM)) (Apply (Apply (:$) b_a15DK) bs_a15DN)) (Apply (Apply (:$) c_a15DL) cs_a15DO)
+type family Lambda_1627649957_a15DE xs_a15DC t_a15DQ t_a15DR where
+  Lambda_1627649957_a15DE xs_a15DC arg_1627648510_a15DF arg_1627648512_a15DG = Case_1627649961_a15DI xs_a15DC arg_1627648510_a15DF arg_1627648512_a15DG (Apply (Apply Tuple2Sym0 arg_1627648510_a15DF) arg_1627648512_a15DG)
+type Lambda_1627649957Sym3 t_a15DS t_a15DT t_a15DU =
+    Lambda_1627649957_a15DE t_a15DS t_a15DT t_a15DU
+instance SuppressUnusedWarnings Lambda_1627649957Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649957Sym2KindInference ())
+data Lambda_1627649957Sym2 l_a15E1 l_a15E2 l_a15E0
+  = forall arg_a15E3. KindOf (Apply (Lambda_1627649957Sym2 l_a15E1 l_a15E2) arg_a15E3) ~ KindOf (Lambda_1627649957Sym3 l_a15E1 l_a15E2 arg_a15E3) =>
+    Lambda_1627649957Sym2KindInference
+type instance Apply (Lambda_1627649957Sym2 l_a15E1 l_a15E2) l_a15E0 = Lambda_1627649957Sym3 l_a15E1 l_a15E2 l_a15E0
+instance SuppressUnusedWarnings Lambda_1627649957Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649957Sym1KindInference ())
+data Lambda_1627649957Sym1 l_a15DY l_a15DX
+  = forall arg_a15DZ. KindOf (Apply (Lambda_1627649957Sym1 l_a15DY) arg_a15DZ) ~ KindOf (Lambda_1627649957Sym2 l_a15DY arg_a15DZ) =>
+    Lambda_1627649957Sym1KindInference
+type instance Apply (Lambda_1627649957Sym1 l_a15DY) l_a15DX = Lambda_1627649957Sym2 l_a15DY l_a15DX
+instance SuppressUnusedWarnings Lambda_1627649957Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649957Sym0KindInference ())
+data Lambda_1627649957Sym0 l_a15DV
+  = forall arg_a15DW. KindOf (Apply Lambda_1627649957Sym0 arg_a15DW) ~ KindOf (Lambda_1627649957Sym1 arg_a15DW) =>
+    Lambda_1627649957Sym0KindInference
+type instance Apply Lambda_1627649957Sym0 l_a15DV = Lambda_1627649957Sym1 l_a15DV
+type family Case_1627649993_a15Ee xs_a15E8
+                                  arg_1627648506_a15Eb
+                                  arg_1627648508_a15Ec
+                                  t_a15Ej where
+  Case_1627649993_a15Ee xs_a15E8 arg_1627648506_a15Eb arg_1627648508_a15Ec '( '(a_a15Ef,
+                                                                                b_a15Eg),
+                                                                              '(as_a15Eh,
+                                                                                bs_a15Ei)) = Apply (Apply Tuple2Sym0 (Apply (Apply (:$) a_a15Ef) as_a15Eh)) (Apply (Apply (:$) b_a15Eg) bs_a15Ei)
+type family Lambda_1627649989_a15Ea xs_a15E8 t_a15Ek t_a15El where
+  Lambda_1627649989_a15Ea xs_a15E8 arg_1627648506_a15Eb arg_1627648508_a15Ec = Case_1627649993_a15Ee xs_a15E8 arg_1627648506_a15Eb arg_1627648508_a15Ec (Apply (Apply Tuple2Sym0 arg_1627648506_a15Eb) arg_1627648508_a15Ec)
+type Lambda_1627649989Sym3 t_a15Em t_a15En t_a15Eo =
+    Lambda_1627649989_a15Ea t_a15Em t_a15En t_a15Eo
+instance SuppressUnusedWarnings Lambda_1627649989Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649989Sym2KindInference ())
+data Lambda_1627649989Sym2 l_a15Ev l_a15Ew l_a15Eu
+  = forall arg_a15Ex. KindOf (Apply (Lambda_1627649989Sym2 l_a15Ev l_a15Ew) arg_a15Ex) ~ KindOf (Lambda_1627649989Sym3 l_a15Ev l_a15Ew arg_a15Ex) =>
+    Lambda_1627649989Sym2KindInference
+type instance Apply (Lambda_1627649989Sym2 l_a15Ev l_a15Ew) l_a15Eu = Lambda_1627649989Sym3 l_a15Ev l_a15Ew l_a15Eu
+instance SuppressUnusedWarnings Lambda_1627649989Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649989Sym1KindInference ())
+data Lambda_1627649989Sym1 l_a15Es l_a15Er
+  = forall arg_a15Et. KindOf (Apply (Lambda_1627649989Sym1 l_a15Es) arg_a15Et) ~ KindOf (Lambda_1627649989Sym2 l_a15Es arg_a15Et) =>
+    Lambda_1627649989Sym1KindInference
+type instance Apply (Lambda_1627649989Sym1 l_a15Es) l_a15Er = Lambda_1627649989Sym2 l_a15Es l_a15Er
+instance SuppressUnusedWarnings Lambda_1627649989Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627649989Sym0KindInference ())
+data Lambda_1627649989Sym0 l_a15Ep
+  = forall arg_a15Eq. KindOf (Apply Lambda_1627649989Sym0 arg_a15Eq) ~ KindOf (Lambda_1627649989Sym1 arg_a15Eq) =>
+    Lambda_1627649989Sym0KindInference
+type instance Apply Lambda_1627649989Sym0 l_a15Ep = Lambda_1627649989Sym1 l_a15Ep
+type Let1627650270BuildListSym4 t_a15IH
+                                t_a15II
+                                (t_a15IJ :: Nat)
+                                (t_a15IK :: [b_a15dT]) =
+    Let1627650270BuildList t_a15IH t_a15II t_a15IJ t_a15IK
+instance SuppressUnusedWarnings Let1627650270BuildListSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650270BuildListSym3KindInference ())
+data Let1627650270BuildListSym3 l_a15IV
+                                l_a15IW
+                                (l_a15IX :: Nat)
+                                (l_a15IU :: TyFun [b_a15dT] [Nat])
+  = forall arg_a15IY. KindOf (Apply (Let1627650270BuildListSym3 l_a15IV l_a15IW l_a15IX) arg_a15IY) ~ KindOf (Let1627650270BuildListSym4 l_a15IV l_a15IW l_a15IX arg_a15IY) =>
+    Let1627650270BuildListSym3KindInference
+type instance Apply (Let1627650270BuildListSym3 l_a15IV l_a15IW l_a15IX) l_a15IU = Let1627650270BuildListSym4 l_a15IV l_a15IW l_a15IX l_a15IU
+instance SuppressUnusedWarnings Let1627650270BuildListSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650270BuildListSym2KindInference ())
+data Let1627650270BuildListSym2 l_a15IR
+                                l_a15IS
+                                (l_a15IQ :: TyFun Nat (TyFun [b_a15dT] [Nat] -> *))
+  = forall arg_a15IT. KindOf (Apply (Let1627650270BuildListSym2 l_a15IR l_a15IS) arg_a15IT) ~ KindOf (Let1627650270BuildListSym3 l_a15IR l_a15IS arg_a15IT) =>
+    Let1627650270BuildListSym2KindInference
+type instance Apply (Let1627650270BuildListSym2 l_a15IR l_a15IS) l_a15IQ = Let1627650270BuildListSym3 l_a15IR l_a15IS l_a15IQ
+instance SuppressUnusedWarnings Let1627650270BuildListSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650270BuildListSym1KindInference ())
+data Let1627650270BuildListSym1 l_a15IO l_a15IN
+  = forall arg_a15IP. KindOf (Apply (Let1627650270BuildListSym1 l_a15IO) arg_a15IP) ~ KindOf (Let1627650270BuildListSym2 l_a15IO arg_a15IP) =>
+    Let1627650270BuildListSym1KindInference
+type instance Apply (Let1627650270BuildListSym1 l_a15IO) l_a15IN = Let1627650270BuildListSym2 l_a15IO l_a15IN
+instance SuppressUnusedWarnings Let1627650270BuildListSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650270BuildListSym0KindInference ())
+data Let1627650270BuildListSym0 l_a15IL
+  = forall arg_a15IM. KindOf (Apply Let1627650270BuildListSym0 arg_a15IM) ~ KindOf (Let1627650270BuildListSym1 arg_a15IM) =>
+    Let1627650270BuildListSym0KindInference
+type instance Apply Let1627650270BuildListSym0 l_a15IL = Let1627650270BuildListSym1 l_a15IL
+type family Let1627650270BuildList p_a15IE
+                                    xs_a15IF
+                                    (a_a15IZ :: Nat)
+                                    (a_a15J0 :: [b_a15dT]) :: [Nat] where
+  Let1627650270BuildList p_a15IE xs_a15IF _z_1627650291_a15J3 '[] = '[]
+  Let1627650270BuildList p_a15IE xs_a15IF a_a15J4 (_z_1627650295_a15J7 ': rest_a15J8) = Apply (Apply (:$) a_a15J4) (Apply (Apply (Let1627650270BuildListSym2 p_a15IE xs_a15IF) (Apply (Apply (:+$) a_a15J4) (FromInteger 1))) rest_a15J8)
+type family Case_1627650302_a15Jd p_a15IE
+                                  xs_a15IF
+                                  arg_1627648548_a15Jb
+                                  t_a15Ji where
+  Case_1627650302_a15Jd p_a15IE xs_a15IF arg_1627648548_a15Jb '(x_a15Je,
+                                                                _z_1627650305_a15Jh) = Apply p_a15IE x_a15Je
+type family Lambda_1627650299_a15Ja p_a15IE xs_a15IF t_a15Jj where
+  Lambda_1627650299_a15Ja p_a15IE xs_a15IF arg_1627648548_a15Jb = Case_1627650302_a15Jd p_a15IE xs_a15IF arg_1627648548_a15Jb arg_1627648548_a15Jb
+type Lambda_1627650299Sym3 t_a15Jk t_a15Jl t_a15Jm =
+    Lambda_1627650299_a15Ja t_a15Jk t_a15Jl t_a15Jm
+instance SuppressUnusedWarnings Lambda_1627650299Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627650299Sym2KindInference ())
+data Lambda_1627650299Sym2 l_a15Jt l_a15Ju l_a15Js
+  = forall arg_a15Jv. KindOf (Apply (Lambda_1627650299Sym2 l_a15Jt l_a15Ju) arg_a15Jv) ~ KindOf (Lambda_1627650299Sym3 l_a15Jt l_a15Ju arg_a15Jv) =>
+    Lambda_1627650299Sym2KindInference
+type instance Apply (Lambda_1627650299Sym2 l_a15Jt l_a15Ju) l_a15Js = Lambda_1627650299Sym3 l_a15Jt l_a15Ju l_a15Js
+instance SuppressUnusedWarnings Lambda_1627650299Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627650299Sym1KindInference ())
+data Lambda_1627650299Sym1 l_a15Jq l_a15Jp
+  = forall arg_a15Jr. KindOf (Apply (Lambda_1627650299Sym1 l_a15Jq) arg_a15Jr) ~ KindOf (Lambda_1627650299Sym2 l_a15Jq arg_a15Jr) =>
+    Lambda_1627650299Sym1KindInference
+type instance Apply (Lambda_1627650299Sym1 l_a15Jq) l_a15Jp = Lambda_1627650299Sym2 l_a15Jq l_a15Jp
+instance SuppressUnusedWarnings Lambda_1627650299Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627650299Sym0KindInference ())
+data Lambda_1627650299Sym0 l_a15Jn
+  = forall arg_a15Jo. KindOf (Apply Lambda_1627650299Sym0 arg_a15Jo) ~ KindOf (Lambda_1627650299Sym1 arg_a15Jo) =>
+    Lambda_1627650299Sym0KindInference
+type instance Apply Lambda_1627650299Sym0 l_a15Jn = Lambda_1627650299Sym1 l_a15Jn
+type Let1627650417Scrutinee_1627648588Sym4 t_a15L4
+                                            t_a15L5
+                                            t_a15L6
+                                            t_a15L7 =
+    Let1627650417Scrutinee_1627648588 t_a15L4 t_a15L5 t_a15L6 t_a15L7
+instance SuppressUnusedWarnings Let1627650417Scrutinee_1627648588Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650417Scrutinee_1627648588Sym3KindInference ())
+data Let1627650417Scrutinee_1627648588Sym3 l_a15Li
+                                            l_a15Lj
+                                            l_a15Lk
+                                            l_a15Lh
+  = forall arg_a15Ll. KindOf (Apply (Let1627650417Scrutinee_1627648588Sym3 l_a15Li l_a15Lj l_a15Lk) arg_a15Ll) ~ KindOf (Let1627650417Scrutinee_1627648588Sym4 l_a15Li l_a15Lj l_a15Lk arg_a15Ll) =>
+    Let1627650417Scrutinee_1627648588Sym3KindInference
+type instance Apply (Let1627650417Scrutinee_1627648588Sym3 l_a15Li l_a15Lj l_a15Lk) l_a15Lh = Let1627650417Scrutinee_1627648588Sym4 l_a15Li l_a15Lj l_a15Lk l_a15Lh
+instance SuppressUnusedWarnings Let1627650417Scrutinee_1627648588Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650417Scrutinee_1627648588Sym2KindInference ())
+data Let1627650417Scrutinee_1627648588Sym2 l_a15Le l_a15Lf l_a15Ld
+  = forall arg_a15Lg. KindOf (Apply (Let1627650417Scrutinee_1627648588Sym2 l_a15Le l_a15Lf) arg_a15Lg) ~ KindOf (Let1627650417Scrutinee_1627648588Sym3 l_a15Le l_a15Lf arg_a15Lg) =>
+    Let1627650417Scrutinee_1627648588Sym2KindInference
+type instance Apply (Let1627650417Scrutinee_1627648588Sym2 l_a15Le l_a15Lf) l_a15Ld = Let1627650417Scrutinee_1627648588Sym3 l_a15Le l_a15Lf l_a15Ld
+instance SuppressUnusedWarnings Let1627650417Scrutinee_1627648588Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650417Scrutinee_1627648588Sym1KindInference ())
+data Let1627650417Scrutinee_1627648588Sym1 l_a15Lb l_a15La
+  = forall arg_a15Lc. KindOf (Apply (Let1627650417Scrutinee_1627648588Sym1 l_a15Lb) arg_a15Lc) ~ KindOf (Let1627650417Scrutinee_1627648588Sym2 l_a15Lb arg_a15Lc) =>
+    Let1627650417Scrutinee_1627648588Sym1KindInference
+type instance Apply (Let1627650417Scrutinee_1627648588Sym1 l_a15Lb) l_a15La = Let1627650417Scrutinee_1627648588Sym2 l_a15Lb l_a15La
+instance SuppressUnusedWarnings Let1627650417Scrutinee_1627648588Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650417Scrutinee_1627648588Sym0KindInference ())
+data Let1627650417Scrutinee_1627648588Sym0 l_a15L8
+  = forall arg_a15L9. KindOf (Apply Let1627650417Scrutinee_1627648588Sym0 arg_a15L9) ~ KindOf (Let1627650417Scrutinee_1627648588Sym1 arg_a15L9) =>
+    Let1627650417Scrutinee_1627648588Sym0KindInference
+type instance Apply Let1627650417Scrutinee_1627648588Sym0 l_a15L8 = Let1627650417Scrutinee_1627648588Sym1 l_a15L8
+type family Let1627650417Scrutinee_1627648588 l_a15KH
+                                              x_a15L0
+                                              xs_a15L1
+                                              ls_a15L2 where
+  Let1627650417Scrutinee_1627648588 l_a15KH x_a15L0 xs_a15L1 ls_a15L2 = Apply (Apply ElemSym0 x_a15L0) ls_a15L2
+type family Case_1627650436_a15Ln l_a15KH
+                                  x_a15L0
+                                  xs_a15L1
+                                  ls_a15L2
+                                  t_a15Lo where
+  Case_1627650436_a15Ln l_a15KH x_a15L0 xs_a15L1 ls_a15L2 'True = Apply (Apply (Let1627650396Nub'Sym1 l_a15KH) xs_a15L1) ls_a15L2
+  Case_1627650436_a15Ln l_a15KH x_a15L0 xs_a15L1 ls_a15L2 'False = Apply (Apply (:$) x_a15L0) (Apply (Apply (Let1627650396Nub'Sym1 l_a15KH) xs_a15L1) (Apply (Apply (:$) x_a15L0) ls_a15L2))
+type Let1627650396Nub'Sym3 t_a15KJ
+                            (t_a15KK :: [a_a156K])
+                            (t_a15KL :: [a_a156K]) =
+    Let1627650396Nub' t_a15KJ t_a15KK t_a15KL
+instance SuppressUnusedWarnings Let1627650396Nub'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650396Nub'Sym2KindInference ())
+data Let1627650396Nub'Sym2 l_a15KS
+                            (l_a15KT :: [a_a156K])
+                            (l_a15KR :: TyFun [a_a156K] [a_a156K])
+  = forall arg_a15KU. KindOf (Apply (Let1627650396Nub'Sym2 l_a15KS l_a15KT) arg_a15KU) ~ KindOf (Let1627650396Nub'Sym3 l_a15KS l_a15KT arg_a15KU) =>
+    Let1627650396Nub'Sym2KindInference
+type instance Apply (Let1627650396Nub'Sym2 l_a15KS l_a15KT) l_a15KR = Let1627650396Nub'Sym3 l_a15KS l_a15KT l_a15KR
+instance SuppressUnusedWarnings Let1627650396Nub'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650396Nub'Sym1KindInference ())
+data Let1627650396Nub'Sym1 l_a15KP
+                            (l_a15KO :: TyFun [a_a156K] (TyFun [a_a156K] [a_a156K] -> *))
+  = forall arg_a15KQ. KindOf (Apply (Let1627650396Nub'Sym1 l_a15KP) arg_a15KQ) ~ KindOf (Let1627650396Nub'Sym2 l_a15KP arg_a15KQ) =>
+    Let1627650396Nub'Sym1KindInference
+type instance Apply (Let1627650396Nub'Sym1 l_a15KP) l_a15KO = Let1627650396Nub'Sym2 l_a15KP l_a15KO
+instance SuppressUnusedWarnings Let1627650396Nub'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650396Nub'Sym0KindInference ())
+data Let1627650396Nub'Sym0 l_a15KM
+  = forall arg_a15KN. KindOf (Apply Let1627650396Nub'Sym0 arg_a15KN) ~ KindOf (Let1627650396Nub'Sym1 arg_a15KN) =>
+    Let1627650396Nub'Sym0KindInference
+type instance Apply Let1627650396Nub'Sym0 l_a15KM = Let1627650396Nub'Sym1 l_a15KM
+type family Let1627650396Nub' l_a15KH
+                              (a_a15KV :: [a_a156K])
+                              (a_a15KW :: [a_a156K]) :: [a_a156K] where
+  Let1627650396Nub' l_a15KH '[] _z_1627650411_a15KZ = '[]
+  Let1627650396Nub' l_a15KH (x_a15L0 ': xs_a15L1) ls_a15L2 = Case_1627650436_a15Ln l_a15KH x_a15L0 xs_a15L1 ls_a15L2 (Let1627650417Scrutinee_1627648588Sym4 l_a15KH x_a15L0 xs_a15L1 ls_a15L2)
+type family Case_1627650469_a15LU xs_a15LS t_a15LZ where
+  Case_1627650469_a15LU xs_a15LS '[] = '[]
+  Case_1627650469_a15LU xs_a15LS (_z_1627650471_a15LX ': xs'_a15LY) = Apply TailsSym0 xs'_a15LY
+type family Case_1627650492_a15Mh xs_a15Mf t_a15Mk where
+  Case_1627650492_a15Mh xs_a15Mf '[] = '[]
+  Case_1627650492_a15Mh xs_a15Mf (x_a15Mi ': xs'_a15Mj) = Apply (Apply MapSym0 (Apply (:$) x_a15Mi)) (Apply InitsSym0 xs'_a15Mj)
+type Let1627650508Scrutinee_1627648504Sym2 t_a15Mx t_a15My =
+    Let1627650508Scrutinee_1627648504 t_a15Mx t_a15My
+instance SuppressUnusedWarnings Let1627650508Scrutinee_1627648504Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650508Scrutinee_1627648504Sym1KindInference ())
+data Let1627650508Scrutinee_1627648504Sym1 l_a15MC l_a15MB
+  = forall arg_a15MD. KindOf (Apply (Let1627650508Scrutinee_1627648504Sym1 l_a15MC) arg_a15MD) ~ KindOf (Let1627650508Scrutinee_1627648504Sym2 l_a15MC arg_a15MD) =>
+    Let1627650508Scrutinee_1627648504Sym1KindInference
+type instance Apply (Let1627650508Scrutinee_1627648504Sym1 l_a15MC) l_a15MB = Let1627650508Scrutinee_1627648504Sym2 l_a15MC l_a15MB
+instance SuppressUnusedWarnings Let1627650508Scrutinee_1627648504Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650508Scrutinee_1627648504Sym0KindInference ())
+data Let1627650508Scrutinee_1627648504Sym0 l_a15Mz
+  = forall arg_a15MA. KindOf (Apply Let1627650508Scrutinee_1627648504Sym0 arg_a15MA) ~ KindOf (Let1627650508Scrutinee_1627648504Sym1 arg_a15MA) =>
+    Let1627650508Scrutinee_1627648504Sym0KindInference
+type instance Apply Let1627650508Scrutinee_1627648504Sym0 l_a15Mz = Let1627650508Scrutinee_1627648504Sym1 l_a15Mz
+type family Let1627650508Scrutinee_1627648504 f_a15Mu b_a15Mv where
+  Let1627650508Scrutinee_1627648504 f_a15Mu b_a15Mv = Apply f_a15Mu b_a15Mv
+type family Case_1627650516_a15MF f_a15Mu b_a15Mv t_a15MI where
+  Case_1627650516_a15MF f_a15Mu b_a15Mv ('Just '(a_a15MG,
+                                                new_b_a15MH)) = Apply (Apply (:$) a_a15MG) (Apply (Apply UnfoldrSym0 f_a15Mu) new_b_a15MH)
+  Case_1627650516_a15MF f_a15Mu b_a15Mv 'Nothing = '[]
+type family Case_1627650557_a15Nk f_a15N2
+                                  s_a15N3
+                                  x_a15N4
+                                  xs_a15N5
+                                  t_a15Np where
+  Case_1627650557_a15Nk f_a15N2 s_a15N3 x_a15N4 xs_a15N5 '(y_1627650553_a15Nl,
+                                                            _z_1627650560_a15No) = y_1627650553_a15Nl
+type family Case_1627650582_a15NJ f_a15N2
+                                  s_a15N3
+                                  x_a15N4
+                                  xs_a15N5
+                                  t_a15NO where
+  Case_1627650582_a15NJ f_a15N2 s_a15N3 x_a15N4 xs_a15N5 '(_z_1627650584_a15NM,
+                                                            y_1627650555_a15NN) = y_1627650555_a15NN
+type family Case_1627650607_a15O8 f_a15N2
+                                  s_a15N3
+                                  x_a15N4
+                                  xs_a15N5
+                                  t_a15Od where
+  Case_1627650607_a15O8 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 '(y_1627650547_a15O9,
+                                                            _z_1627650610_a15Oc) = y_1627650547_a15O9
+type family Case_1627650632_a15Ox f_a15N2
+                                  s_a15N3
+                                  x_a15N4
+                                  xs_a15N5
+                                  t_a15OC where
+  Case_1627650632_a15Ox f_a15N2 s_a15N3 x_a15N4 xs_a15N5 '(_z_1627650634_a15OA,
+                                                            y_1627650549_a15OB) = y_1627650549_a15OB
+type Let1627650544S'Sym4 t_a15Nq t_a15Nr t_a15Ns t_a15Nt =
+    Let1627650544S' t_a15Nq t_a15Nr t_a15Ns t_a15Nt
+instance SuppressUnusedWarnings Let1627650544S'Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544S'Sym3KindInference ())
+data Let1627650544S'Sym3 l_a15NE l_a15NF l_a15NG l_a15ND
+  = forall arg_a15NH. KindOf (Apply (Let1627650544S'Sym3 l_a15NE l_a15NF l_a15NG) arg_a15NH) ~ KindOf (Let1627650544S'Sym4 l_a15NE l_a15NF l_a15NG arg_a15NH) =>
+    Let1627650544S'Sym3KindInference
+type instance Apply (Let1627650544S'Sym3 l_a15NE l_a15NF l_a15NG) l_a15ND = Let1627650544S'Sym4 l_a15NE l_a15NF l_a15NG l_a15ND
+instance SuppressUnusedWarnings Let1627650544S'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544S'Sym2KindInference ())
+data Let1627650544S'Sym2 l_a15NA l_a15NB l_a15Nz
+  = forall arg_a15NC. KindOf (Apply (Let1627650544S'Sym2 l_a15NA l_a15NB) arg_a15NC) ~ KindOf (Let1627650544S'Sym3 l_a15NA l_a15NB arg_a15NC) =>
+    Let1627650544S'Sym2KindInference
+type instance Apply (Let1627650544S'Sym2 l_a15NA l_a15NB) l_a15Nz = Let1627650544S'Sym3 l_a15NA l_a15NB l_a15Nz
+instance SuppressUnusedWarnings Let1627650544S'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544S'Sym1KindInference ())
+data Let1627650544S'Sym1 l_a15Nx l_a15Nw
+  = forall arg_a15Ny. KindOf (Apply (Let1627650544S'Sym1 l_a15Nx) arg_a15Ny) ~ KindOf (Let1627650544S'Sym2 l_a15Nx arg_a15Ny) =>
+    Let1627650544S'Sym1KindInference
+type instance Apply (Let1627650544S'Sym1 l_a15Nx) l_a15Nw = Let1627650544S'Sym2 l_a15Nx l_a15Nw
+instance SuppressUnusedWarnings Let1627650544S'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544S'Sym0KindInference ())
+data Let1627650544S'Sym0 l_a15Nu
+  = forall arg_a15Nv. KindOf (Apply Let1627650544S'Sym0 arg_a15Nv) ~ KindOf (Let1627650544S'Sym1 arg_a15Nv) =>
+    Let1627650544S'Sym0KindInference
+type instance Apply Let1627650544S'Sym0 l_a15Nu = Let1627650544S'Sym1 l_a15Nu
+type Let1627650544YsSym4 t_a15NP t_a15NQ t_a15NR t_a15NS =
+    Let1627650544Ys t_a15NP t_a15NQ t_a15NR t_a15NS
+instance SuppressUnusedWarnings Let1627650544YsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544YsSym3KindInference ())
+data Let1627650544YsSym3 l_a15O3 l_a15O4 l_a15O5 l_a15O2
+  = forall arg_a15O6. KindOf (Apply (Let1627650544YsSym3 l_a15O3 l_a15O4 l_a15O5) arg_a15O6) ~ KindOf (Let1627650544YsSym4 l_a15O3 l_a15O4 l_a15O5 arg_a15O6) =>
+    Let1627650544YsSym3KindInference
+type instance Apply (Let1627650544YsSym3 l_a15O3 l_a15O4 l_a15O5) l_a15O2 = Let1627650544YsSym4 l_a15O3 l_a15O4 l_a15O5 l_a15O2
+instance SuppressUnusedWarnings Let1627650544YsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544YsSym2KindInference ())
+data Let1627650544YsSym2 l_a15NZ l_a15O0 l_a15NY
+  = forall arg_a15O1. KindOf (Apply (Let1627650544YsSym2 l_a15NZ l_a15O0) arg_a15O1) ~ KindOf (Let1627650544YsSym3 l_a15NZ l_a15O0 arg_a15O1) =>
+    Let1627650544YsSym2KindInference
+type instance Apply (Let1627650544YsSym2 l_a15NZ l_a15O0) l_a15NY = Let1627650544YsSym3 l_a15NZ l_a15O0 l_a15NY
+instance SuppressUnusedWarnings Let1627650544YsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544YsSym1KindInference ())
+data Let1627650544YsSym1 l_a15NW l_a15NV
+  = forall arg_a15NX. KindOf (Apply (Let1627650544YsSym1 l_a15NW) arg_a15NX) ~ KindOf (Let1627650544YsSym2 l_a15NW arg_a15NX) =>
+    Let1627650544YsSym1KindInference
+type instance Apply (Let1627650544YsSym1 l_a15NW) l_a15NV = Let1627650544YsSym2 l_a15NW l_a15NV
+instance SuppressUnusedWarnings Let1627650544YsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544YsSym0KindInference ())
+data Let1627650544YsSym0 l_a15NT
+  = forall arg_a15NU. KindOf (Apply Let1627650544YsSym0 arg_a15NU) ~ KindOf (Let1627650544YsSym1 arg_a15NU) =>
+    Let1627650544YsSym0KindInference
+type instance Apply Let1627650544YsSym0 l_a15NT = Let1627650544YsSym1 l_a15NT
+type Let1627650544S''Sym4 t_a15Oe t_a15Of t_a15Og t_a15Oh =
+    Let1627650544S'' t_a15Oe t_a15Of t_a15Og t_a15Oh
+instance SuppressUnusedWarnings Let1627650544S''Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544S''Sym3KindInference ())
+data Let1627650544S''Sym3 l_a15Os l_a15Ot l_a15Ou l_a15Or
+  = forall arg_a15Ov. KindOf (Apply (Let1627650544S''Sym3 l_a15Os l_a15Ot l_a15Ou) arg_a15Ov) ~ KindOf (Let1627650544S''Sym4 l_a15Os l_a15Ot l_a15Ou arg_a15Ov) =>
+    Let1627650544S''Sym3KindInference
+type instance Apply (Let1627650544S''Sym3 l_a15Os l_a15Ot l_a15Ou) l_a15Or = Let1627650544S''Sym4 l_a15Os l_a15Ot l_a15Ou l_a15Or
+instance SuppressUnusedWarnings Let1627650544S''Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544S''Sym2KindInference ())
+data Let1627650544S''Sym2 l_a15Oo l_a15Op l_a15On
+  = forall arg_a15Oq. KindOf (Apply (Let1627650544S''Sym2 l_a15Oo l_a15Op) arg_a15Oq) ~ KindOf (Let1627650544S''Sym3 l_a15Oo l_a15Op arg_a15Oq) =>
+    Let1627650544S''Sym2KindInference
+type instance Apply (Let1627650544S''Sym2 l_a15Oo l_a15Op) l_a15On = Let1627650544S''Sym3 l_a15Oo l_a15Op l_a15On
+instance SuppressUnusedWarnings Let1627650544S''Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544S''Sym1KindInference ())
+data Let1627650544S''Sym1 l_a15Ol l_a15Ok
+  = forall arg_a15Om. KindOf (Apply (Let1627650544S''Sym1 l_a15Ol) arg_a15Om) ~ KindOf (Let1627650544S''Sym2 l_a15Ol arg_a15Om) =>
+    Let1627650544S''Sym1KindInference
+type instance Apply (Let1627650544S''Sym1 l_a15Ol) l_a15Ok = Let1627650544S''Sym2 l_a15Ol l_a15Ok
+instance SuppressUnusedWarnings Let1627650544S''Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544S''Sym0KindInference ())
+data Let1627650544S''Sym0 l_a15Oi
+  = forall arg_a15Oj. KindOf (Apply Let1627650544S''Sym0 arg_a15Oj) ~ KindOf (Let1627650544S''Sym1 arg_a15Oj) =>
+    Let1627650544S''Sym0KindInference
+type instance Apply Let1627650544S''Sym0 l_a15Oi = Let1627650544S''Sym1 l_a15Oi
+type Let1627650544YSym4 t_a15OD t_a15OE t_a15OF t_a15OG =
+    Let1627650544Y t_a15OD t_a15OE t_a15OF t_a15OG
+instance SuppressUnusedWarnings Let1627650544YSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544YSym3KindInference ())
+data Let1627650544YSym3 l_a15OR l_a15OS l_a15OT l_a15OQ
+  = forall arg_a15OU. KindOf (Apply (Let1627650544YSym3 l_a15OR l_a15OS l_a15OT) arg_a15OU) ~ KindOf (Let1627650544YSym4 l_a15OR l_a15OS l_a15OT arg_a15OU) =>
+    Let1627650544YSym3KindInference
+type instance Apply (Let1627650544YSym3 l_a15OR l_a15OS l_a15OT) l_a15OQ = Let1627650544YSym4 l_a15OR l_a15OS l_a15OT l_a15OQ
+instance SuppressUnusedWarnings Let1627650544YSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544YSym2KindInference ())
+data Let1627650544YSym2 l_a15ON l_a15OO l_a15OM
+  = forall arg_a15OP. KindOf (Apply (Let1627650544YSym2 l_a15ON l_a15OO) arg_a15OP) ~ KindOf (Let1627650544YSym3 l_a15ON l_a15OO arg_a15OP) =>
+    Let1627650544YSym2KindInference
+type instance Apply (Let1627650544YSym2 l_a15ON l_a15OO) l_a15OM = Let1627650544YSym3 l_a15ON l_a15OO l_a15OM
+instance SuppressUnusedWarnings Let1627650544YSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544YSym1KindInference ())
+data Let1627650544YSym1 l_a15OK l_a15OJ
+  = forall arg_a15OL. KindOf (Apply (Let1627650544YSym1 l_a15OK) arg_a15OL) ~ KindOf (Let1627650544YSym2 l_a15OK arg_a15OL) =>
+    Let1627650544YSym1KindInference
+type instance Apply (Let1627650544YSym1 l_a15OK) l_a15OJ = Let1627650544YSym2 l_a15OK l_a15OJ
+instance SuppressUnusedWarnings Let1627650544YSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544YSym0KindInference ())
+data Let1627650544YSym0 l_a15OH
+  = forall arg_a15OI. KindOf (Apply Let1627650544YSym0 arg_a15OI) ~ KindOf (Let1627650544YSym1 arg_a15OI) =>
+    Let1627650544YSym0KindInference
+type instance Apply Let1627650544YSym0 l_a15OH = Let1627650544YSym1 l_a15OH
+type Let1627650544X_1627650545Sym4 t_a15OV
+                                    t_a15OW
+                                    t_a15OX
+                                    t_a15OY =
+    Let1627650544X_1627650545 t_a15OV t_a15OW t_a15OX t_a15OY
+instance SuppressUnusedWarnings Let1627650544X_1627650545Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544X_1627650545Sym3KindInference ())
+data Let1627650544X_1627650545Sym3 l_a15P9 l_a15Pa l_a15Pb l_a15P8
+  = forall arg_a15Pc. KindOf (Apply (Let1627650544X_1627650545Sym3 l_a15P9 l_a15Pa l_a15Pb) arg_a15Pc) ~ KindOf (Let1627650544X_1627650545Sym4 l_a15P9 l_a15Pa l_a15Pb arg_a15Pc) =>
+    Let1627650544X_1627650545Sym3KindInference
+type instance Apply (Let1627650544X_1627650545Sym3 l_a15P9 l_a15Pa l_a15Pb) l_a15P8 = Let1627650544X_1627650545Sym4 l_a15P9 l_a15Pa l_a15Pb l_a15P8
+instance SuppressUnusedWarnings Let1627650544X_1627650545Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544X_1627650545Sym2KindInference ())
+data Let1627650544X_1627650545Sym2 l_a15P5 l_a15P6 l_a15P4
+  = forall arg_a15P7. KindOf (Apply (Let1627650544X_1627650545Sym2 l_a15P5 l_a15P6) arg_a15P7) ~ KindOf (Let1627650544X_1627650545Sym3 l_a15P5 l_a15P6 arg_a15P7) =>
+    Let1627650544X_1627650545Sym2KindInference
+type instance Apply (Let1627650544X_1627650545Sym2 l_a15P5 l_a15P6) l_a15P4 = Let1627650544X_1627650545Sym3 l_a15P5 l_a15P6 l_a15P4
+instance SuppressUnusedWarnings Let1627650544X_1627650545Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544X_1627650545Sym1KindInference ())
+data Let1627650544X_1627650545Sym1 l_a15P2 l_a15P1
+  = forall arg_a15P3. KindOf (Apply (Let1627650544X_1627650545Sym1 l_a15P2) arg_a15P3) ~ KindOf (Let1627650544X_1627650545Sym2 l_a15P2 arg_a15P3) =>
+    Let1627650544X_1627650545Sym1KindInference
+type instance Apply (Let1627650544X_1627650545Sym1 l_a15P2) l_a15P1 = Let1627650544X_1627650545Sym2 l_a15P2 l_a15P1
+instance SuppressUnusedWarnings Let1627650544X_1627650545Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544X_1627650545Sym0KindInference ())
+data Let1627650544X_1627650545Sym0 l_a15OZ
+  = forall arg_a15P0. KindOf (Apply Let1627650544X_1627650545Sym0 arg_a15P0) ~ KindOf (Let1627650544X_1627650545Sym1 arg_a15P0) =>
+    Let1627650544X_1627650545Sym0KindInference
+type instance Apply Let1627650544X_1627650545Sym0 l_a15OZ = Let1627650544X_1627650545Sym1 l_a15OZ
+type Let1627650544X_1627650551Sym4 t_a15Pd
+                                    t_a15Pe
+                                    t_a15Pf
+                                    t_a15Pg =
+    Let1627650544X_1627650551 t_a15Pd t_a15Pe t_a15Pf t_a15Pg
+instance SuppressUnusedWarnings Let1627650544X_1627650551Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544X_1627650551Sym3KindInference ())
+data Let1627650544X_1627650551Sym3 l_a15Pr l_a15Ps l_a15Pt l_a15Pq
+  = forall arg_a15Pu. KindOf (Apply (Let1627650544X_1627650551Sym3 l_a15Pr l_a15Ps l_a15Pt) arg_a15Pu) ~ KindOf (Let1627650544X_1627650551Sym4 l_a15Pr l_a15Ps l_a15Pt arg_a15Pu) =>
+    Let1627650544X_1627650551Sym3KindInference
+type instance Apply (Let1627650544X_1627650551Sym3 l_a15Pr l_a15Ps l_a15Pt) l_a15Pq = Let1627650544X_1627650551Sym4 l_a15Pr l_a15Ps l_a15Pt l_a15Pq
+instance SuppressUnusedWarnings Let1627650544X_1627650551Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544X_1627650551Sym2KindInference ())
+data Let1627650544X_1627650551Sym2 l_a15Pn l_a15Po l_a15Pm
+  = forall arg_a15Pp. KindOf (Apply (Let1627650544X_1627650551Sym2 l_a15Pn l_a15Po) arg_a15Pp) ~ KindOf (Let1627650544X_1627650551Sym3 l_a15Pn l_a15Po arg_a15Pp) =>
+    Let1627650544X_1627650551Sym2KindInference
+type instance Apply (Let1627650544X_1627650551Sym2 l_a15Pn l_a15Po) l_a15Pm = Let1627650544X_1627650551Sym3 l_a15Pn l_a15Po l_a15Pm
+instance SuppressUnusedWarnings Let1627650544X_1627650551Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544X_1627650551Sym1KindInference ())
+data Let1627650544X_1627650551Sym1 l_a15Pk l_a15Pj
+  = forall arg_a15Pl. KindOf (Apply (Let1627650544X_1627650551Sym1 l_a15Pk) arg_a15Pl) ~ KindOf (Let1627650544X_1627650551Sym2 l_a15Pk arg_a15Pl) =>
+    Let1627650544X_1627650551Sym1KindInference
+type instance Apply (Let1627650544X_1627650551Sym1 l_a15Pk) l_a15Pj = Let1627650544X_1627650551Sym2 l_a15Pk l_a15Pj
+instance SuppressUnusedWarnings Let1627650544X_1627650551Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650544X_1627650551Sym0KindInference ())
+data Let1627650544X_1627650551Sym0 l_a15Ph
+  = forall arg_a15Pi. KindOf (Apply Let1627650544X_1627650551Sym0 arg_a15Pi) ~ KindOf (Let1627650544X_1627650551Sym1 arg_a15Pi) =>
+    Let1627650544X_1627650551Sym0KindInference
+type instance Apply Let1627650544X_1627650551Sym0 l_a15Ph = Let1627650544X_1627650551Sym1 l_a15Ph
+type family Let1627650544S' f_a15N2 s_a15N3 x_a15N4 xs_a15N5 where
+  Let1627650544S' f_a15N2 s_a15N3 x_a15N4 xs_a15N5 = Case_1627650557_a15Nk f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Let1627650544X_1627650551Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+type family Let1627650544Ys f_a15N2 s_a15N3 x_a15N4 xs_a15N5 where
+  Let1627650544Ys f_a15N2 s_a15N3 x_a15N4 xs_a15N5 = Case_1627650582_a15NJ f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Let1627650544X_1627650551Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+type family Let1627650544S'' f_a15N2 s_a15N3 x_a15N4 xs_a15N5 where
+  Let1627650544S'' f_a15N2 s_a15N3 x_a15N4 xs_a15N5 = Case_1627650607_a15O8 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Let1627650544X_1627650545Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+type family Let1627650544Y f_a15N2 s_a15N3 x_a15N4 xs_a15N5 where
+  Let1627650544Y f_a15N2 s_a15N3 x_a15N4 xs_a15N5 = Case_1627650632_a15Ox f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Let1627650544X_1627650545Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+type family Let1627650544X_1627650545 f_a15N2
+                                      s_a15N3
+                                      x_a15N4
+                                      xs_a15N5 where
+  Let1627650544X_1627650545 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 = Apply (Apply f_a15N2 (Let1627650544S'Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)) x_a15N4
+type family Let1627650544X_1627650551 f_a15N2
+                                      s_a15N3
+                                      x_a15N4
+                                      xs_a15N5 where
+  Let1627650544X_1627650551 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 = Apply (Apply (Apply MapAccumRSym0 f_a15N2) s_a15N3) xs_a15N5
+type family Case_1627650729_a15Q6 f_a15PO
+                                  s_a15PP
+                                  x_a15PQ
+                                  xs_a15PR
+                                  t_a15Qb where
+  Case_1627650729_a15Q6 f_a15PO s_a15PP x_a15PQ xs_a15PR '(y_1627650719_a15Q7,
+                                                            _z_1627650732_a15Qa) = y_1627650719_a15Q7
+type family Case_1627650754_a15Qv f_a15PO
+                                  s_a15PP
+                                  x_a15PQ
+                                  xs_a15PR
+                                  t_a15QA where
+  Case_1627650754_a15Qv f_a15PO s_a15PP x_a15PQ xs_a15PR '(_z_1627650756_a15Qy,
+                                                            y_1627650721_a15Qz) = y_1627650721_a15Qz
+type family Case_1627650779_a15QU f_a15PO
+                                  s_a15PP
+                                  x_a15PQ
+                                  xs_a15PR
+                                  t_a15QZ where
+  Case_1627650779_a15QU f_a15PO s_a15PP x_a15PQ xs_a15PR '(y_1627650725_a15QV,
+                                                            _z_1627650782_a15QY) = y_1627650725_a15QV
+type family Case_1627650804_a15Rj f_a15PO
+                                  s_a15PP
+                                  x_a15PQ
+                                  xs_a15PR
+                                  t_a15Ro where
+  Case_1627650804_a15Rj f_a15PO s_a15PP x_a15PQ xs_a15PR '(_z_1627650806_a15Rm,
+                                                            y_1627650727_a15Rn) = y_1627650727_a15Rn
+type Let1627650716S'Sym4 t_a15Qc t_a15Qd t_a15Qe t_a15Qf =
+    Let1627650716S' t_a15Qc t_a15Qd t_a15Qe t_a15Qf
+instance SuppressUnusedWarnings Let1627650716S'Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716S'Sym3KindInference ())
+data Let1627650716S'Sym3 l_a15Qq l_a15Qr l_a15Qs l_a15Qp
+  = forall arg_a15Qt. KindOf (Apply (Let1627650716S'Sym3 l_a15Qq l_a15Qr l_a15Qs) arg_a15Qt) ~ KindOf (Let1627650716S'Sym4 l_a15Qq l_a15Qr l_a15Qs arg_a15Qt) =>
+    Let1627650716S'Sym3KindInference
+type instance Apply (Let1627650716S'Sym3 l_a15Qq l_a15Qr l_a15Qs) l_a15Qp = Let1627650716S'Sym4 l_a15Qq l_a15Qr l_a15Qs l_a15Qp
+instance SuppressUnusedWarnings Let1627650716S'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716S'Sym2KindInference ())
+data Let1627650716S'Sym2 l_a15Qm l_a15Qn l_a15Ql
+  = forall arg_a15Qo. KindOf (Apply (Let1627650716S'Sym2 l_a15Qm l_a15Qn) arg_a15Qo) ~ KindOf (Let1627650716S'Sym3 l_a15Qm l_a15Qn arg_a15Qo) =>
+    Let1627650716S'Sym2KindInference
+type instance Apply (Let1627650716S'Sym2 l_a15Qm l_a15Qn) l_a15Ql = Let1627650716S'Sym3 l_a15Qm l_a15Qn l_a15Ql
+instance SuppressUnusedWarnings Let1627650716S'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716S'Sym1KindInference ())
+data Let1627650716S'Sym1 l_a15Qj l_a15Qi
+  = forall arg_a15Qk. KindOf (Apply (Let1627650716S'Sym1 l_a15Qj) arg_a15Qk) ~ KindOf (Let1627650716S'Sym2 l_a15Qj arg_a15Qk) =>
+    Let1627650716S'Sym1KindInference
+type instance Apply (Let1627650716S'Sym1 l_a15Qj) l_a15Qi = Let1627650716S'Sym2 l_a15Qj l_a15Qi
+instance SuppressUnusedWarnings Let1627650716S'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716S'Sym0KindInference ())
+data Let1627650716S'Sym0 l_a15Qg
+  = forall arg_a15Qh. KindOf (Apply Let1627650716S'Sym0 arg_a15Qh) ~ KindOf (Let1627650716S'Sym1 arg_a15Qh) =>
+    Let1627650716S'Sym0KindInference
+type instance Apply Let1627650716S'Sym0 l_a15Qg = Let1627650716S'Sym1 l_a15Qg
+type Let1627650716YSym4 t_a15QB t_a15QC t_a15QD t_a15QE =
+    Let1627650716Y t_a15QB t_a15QC t_a15QD t_a15QE
+instance SuppressUnusedWarnings Let1627650716YSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716YSym3KindInference ())
+data Let1627650716YSym3 l_a15QP l_a15QQ l_a15QR l_a15QO
+  = forall arg_a15QS. KindOf (Apply (Let1627650716YSym3 l_a15QP l_a15QQ l_a15QR) arg_a15QS) ~ KindOf (Let1627650716YSym4 l_a15QP l_a15QQ l_a15QR arg_a15QS) =>
+    Let1627650716YSym3KindInference
+type instance Apply (Let1627650716YSym3 l_a15QP l_a15QQ l_a15QR) l_a15QO = Let1627650716YSym4 l_a15QP l_a15QQ l_a15QR l_a15QO
+instance SuppressUnusedWarnings Let1627650716YSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716YSym2KindInference ())
+data Let1627650716YSym2 l_a15QL l_a15QM l_a15QK
+  = forall arg_a15QN. KindOf (Apply (Let1627650716YSym2 l_a15QL l_a15QM) arg_a15QN) ~ KindOf (Let1627650716YSym3 l_a15QL l_a15QM arg_a15QN) =>
+    Let1627650716YSym2KindInference
+type instance Apply (Let1627650716YSym2 l_a15QL l_a15QM) l_a15QK = Let1627650716YSym3 l_a15QL l_a15QM l_a15QK
+instance SuppressUnusedWarnings Let1627650716YSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716YSym1KindInference ())
+data Let1627650716YSym1 l_a15QI l_a15QH
+  = forall arg_a15QJ. KindOf (Apply (Let1627650716YSym1 l_a15QI) arg_a15QJ) ~ KindOf (Let1627650716YSym2 l_a15QI arg_a15QJ) =>
+    Let1627650716YSym1KindInference
+type instance Apply (Let1627650716YSym1 l_a15QI) l_a15QH = Let1627650716YSym2 l_a15QI l_a15QH
+instance SuppressUnusedWarnings Let1627650716YSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716YSym0KindInference ())
+data Let1627650716YSym0 l_a15QF
+  = forall arg_a15QG. KindOf (Apply Let1627650716YSym0 arg_a15QG) ~ KindOf (Let1627650716YSym1 arg_a15QG) =>
+    Let1627650716YSym0KindInference
+type instance Apply Let1627650716YSym0 l_a15QF = Let1627650716YSym1 l_a15QF
+type Let1627650716S''Sym4 t_a15R0 t_a15R1 t_a15R2 t_a15R3 =
+    Let1627650716S'' t_a15R0 t_a15R1 t_a15R2 t_a15R3
+instance SuppressUnusedWarnings Let1627650716S''Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716S''Sym3KindInference ())
+data Let1627650716S''Sym3 l_a15Re l_a15Rf l_a15Rg l_a15Rd
+  = forall arg_a15Rh. KindOf (Apply (Let1627650716S''Sym3 l_a15Re l_a15Rf l_a15Rg) arg_a15Rh) ~ KindOf (Let1627650716S''Sym4 l_a15Re l_a15Rf l_a15Rg arg_a15Rh) =>
+    Let1627650716S''Sym3KindInference
+type instance Apply (Let1627650716S''Sym3 l_a15Re l_a15Rf l_a15Rg) l_a15Rd = Let1627650716S''Sym4 l_a15Re l_a15Rf l_a15Rg l_a15Rd
+instance SuppressUnusedWarnings Let1627650716S''Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716S''Sym2KindInference ())
+data Let1627650716S''Sym2 l_a15Ra l_a15Rb l_a15R9
+  = forall arg_a15Rc. KindOf (Apply (Let1627650716S''Sym2 l_a15Ra l_a15Rb) arg_a15Rc) ~ KindOf (Let1627650716S''Sym3 l_a15Ra l_a15Rb arg_a15Rc) =>
+    Let1627650716S''Sym2KindInference
+type instance Apply (Let1627650716S''Sym2 l_a15Ra l_a15Rb) l_a15R9 = Let1627650716S''Sym3 l_a15Ra l_a15Rb l_a15R9
+instance SuppressUnusedWarnings Let1627650716S''Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716S''Sym1KindInference ())
+data Let1627650716S''Sym1 l_a15R7 l_a15R6
+  = forall arg_a15R8. KindOf (Apply (Let1627650716S''Sym1 l_a15R7) arg_a15R8) ~ KindOf (Let1627650716S''Sym2 l_a15R7 arg_a15R8) =>
+    Let1627650716S''Sym1KindInference
+type instance Apply (Let1627650716S''Sym1 l_a15R7) l_a15R6 = Let1627650716S''Sym2 l_a15R7 l_a15R6
+instance SuppressUnusedWarnings Let1627650716S''Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716S''Sym0KindInference ())
+data Let1627650716S''Sym0 l_a15R4
+  = forall arg_a15R5. KindOf (Apply Let1627650716S''Sym0 arg_a15R5) ~ KindOf (Let1627650716S''Sym1 arg_a15R5) =>
+    Let1627650716S''Sym0KindInference
+type instance Apply Let1627650716S''Sym0 l_a15R4 = Let1627650716S''Sym1 l_a15R4
+type Let1627650716YsSym4 t_a15Rp t_a15Rq t_a15Rr t_a15Rs =
+    Let1627650716Ys t_a15Rp t_a15Rq t_a15Rr t_a15Rs
+instance SuppressUnusedWarnings Let1627650716YsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716YsSym3KindInference ())
+data Let1627650716YsSym3 l_a15RD l_a15RE l_a15RF l_a15RC
+  = forall arg_a15RG. KindOf (Apply (Let1627650716YsSym3 l_a15RD l_a15RE l_a15RF) arg_a15RG) ~ KindOf (Let1627650716YsSym4 l_a15RD l_a15RE l_a15RF arg_a15RG) =>
+    Let1627650716YsSym3KindInference
+type instance Apply (Let1627650716YsSym3 l_a15RD l_a15RE l_a15RF) l_a15RC = Let1627650716YsSym4 l_a15RD l_a15RE l_a15RF l_a15RC
+instance SuppressUnusedWarnings Let1627650716YsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716YsSym2KindInference ())
+data Let1627650716YsSym2 l_a15Rz l_a15RA l_a15Ry
+  = forall arg_a15RB. KindOf (Apply (Let1627650716YsSym2 l_a15Rz l_a15RA) arg_a15RB) ~ KindOf (Let1627650716YsSym3 l_a15Rz l_a15RA arg_a15RB) =>
+    Let1627650716YsSym2KindInference
+type instance Apply (Let1627650716YsSym2 l_a15Rz l_a15RA) l_a15Ry = Let1627650716YsSym3 l_a15Rz l_a15RA l_a15Ry
+instance SuppressUnusedWarnings Let1627650716YsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716YsSym1KindInference ())
+data Let1627650716YsSym1 l_a15Rw l_a15Rv
+  = forall arg_a15Rx. KindOf (Apply (Let1627650716YsSym1 l_a15Rw) arg_a15Rx) ~ KindOf (Let1627650716YsSym2 l_a15Rw arg_a15Rx) =>
+    Let1627650716YsSym1KindInference
+type instance Apply (Let1627650716YsSym1 l_a15Rw) l_a15Rv = Let1627650716YsSym2 l_a15Rw l_a15Rv
+instance SuppressUnusedWarnings Let1627650716YsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716YsSym0KindInference ())
+data Let1627650716YsSym0 l_a15Rt
+  = forall arg_a15Ru. KindOf (Apply Let1627650716YsSym0 arg_a15Ru) ~ KindOf (Let1627650716YsSym1 arg_a15Ru) =>
+    Let1627650716YsSym0KindInference
+type instance Apply Let1627650716YsSym0 l_a15Rt = Let1627650716YsSym1 l_a15Rt
+type Let1627650716X_1627650717Sym4 t_a15RH
+                                    t_a15RI
+                                    t_a15RJ
+                                    t_a15RK =
+    Let1627650716X_1627650717 t_a15RH t_a15RI t_a15RJ t_a15RK
+instance SuppressUnusedWarnings Let1627650716X_1627650717Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716X_1627650717Sym3KindInference ())
+data Let1627650716X_1627650717Sym3 l_a15RV l_a15RW l_a15RX l_a15RU
+  = forall arg_a15RY. KindOf (Apply (Let1627650716X_1627650717Sym3 l_a15RV l_a15RW l_a15RX) arg_a15RY) ~ KindOf (Let1627650716X_1627650717Sym4 l_a15RV l_a15RW l_a15RX arg_a15RY) =>
+    Let1627650716X_1627650717Sym3KindInference
+type instance Apply (Let1627650716X_1627650717Sym3 l_a15RV l_a15RW l_a15RX) l_a15RU = Let1627650716X_1627650717Sym4 l_a15RV l_a15RW l_a15RX l_a15RU
+instance SuppressUnusedWarnings Let1627650716X_1627650717Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716X_1627650717Sym2KindInference ())
+data Let1627650716X_1627650717Sym2 l_a15RR l_a15RS l_a15RQ
+  = forall arg_a15RT. KindOf (Apply (Let1627650716X_1627650717Sym2 l_a15RR l_a15RS) arg_a15RT) ~ KindOf (Let1627650716X_1627650717Sym3 l_a15RR l_a15RS arg_a15RT) =>
+    Let1627650716X_1627650717Sym2KindInference
+type instance Apply (Let1627650716X_1627650717Sym2 l_a15RR l_a15RS) l_a15RQ = Let1627650716X_1627650717Sym3 l_a15RR l_a15RS l_a15RQ
+instance SuppressUnusedWarnings Let1627650716X_1627650717Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716X_1627650717Sym1KindInference ())
+data Let1627650716X_1627650717Sym1 l_a15RO l_a15RN
+  = forall arg_a15RP. KindOf (Apply (Let1627650716X_1627650717Sym1 l_a15RO) arg_a15RP) ~ KindOf (Let1627650716X_1627650717Sym2 l_a15RO arg_a15RP) =>
+    Let1627650716X_1627650717Sym1KindInference
+type instance Apply (Let1627650716X_1627650717Sym1 l_a15RO) l_a15RN = Let1627650716X_1627650717Sym2 l_a15RO l_a15RN
+instance SuppressUnusedWarnings Let1627650716X_1627650717Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716X_1627650717Sym0KindInference ())
+data Let1627650716X_1627650717Sym0 l_a15RL
+  = forall arg_a15RM. KindOf (Apply Let1627650716X_1627650717Sym0 arg_a15RM) ~ KindOf (Let1627650716X_1627650717Sym1 arg_a15RM) =>
+    Let1627650716X_1627650717Sym0KindInference
+type instance Apply Let1627650716X_1627650717Sym0 l_a15RL = Let1627650716X_1627650717Sym1 l_a15RL
+type Let1627650716X_1627650723Sym4 t_a15RZ
+                                    t_a15S0
+                                    t_a15S1
+                                    t_a15S2 =
+    Let1627650716X_1627650723 t_a15RZ t_a15S0 t_a15S1 t_a15S2
+instance SuppressUnusedWarnings Let1627650716X_1627650723Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716X_1627650723Sym3KindInference ())
+data Let1627650716X_1627650723Sym3 l_a15Sd l_a15Se l_a15Sf l_a15Sc
+  = forall arg_a15Sg. KindOf (Apply (Let1627650716X_1627650723Sym3 l_a15Sd l_a15Se l_a15Sf) arg_a15Sg) ~ KindOf (Let1627650716X_1627650723Sym4 l_a15Sd l_a15Se l_a15Sf arg_a15Sg) =>
+    Let1627650716X_1627650723Sym3KindInference
+type instance Apply (Let1627650716X_1627650723Sym3 l_a15Sd l_a15Se l_a15Sf) l_a15Sc = Let1627650716X_1627650723Sym4 l_a15Sd l_a15Se l_a15Sf l_a15Sc
+instance SuppressUnusedWarnings Let1627650716X_1627650723Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716X_1627650723Sym2KindInference ())
+data Let1627650716X_1627650723Sym2 l_a15S9 l_a15Sa l_a15S8
+  = forall arg_a15Sb. KindOf (Apply (Let1627650716X_1627650723Sym2 l_a15S9 l_a15Sa) arg_a15Sb) ~ KindOf (Let1627650716X_1627650723Sym3 l_a15S9 l_a15Sa arg_a15Sb) =>
+    Let1627650716X_1627650723Sym2KindInference
+type instance Apply (Let1627650716X_1627650723Sym2 l_a15S9 l_a15Sa) l_a15S8 = Let1627650716X_1627650723Sym3 l_a15S9 l_a15Sa l_a15S8
+instance SuppressUnusedWarnings Let1627650716X_1627650723Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716X_1627650723Sym1KindInference ())
+data Let1627650716X_1627650723Sym1 l_a15S6 l_a15S5
+  = forall arg_a15S7. KindOf (Apply (Let1627650716X_1627650723Sym1 l_a15S6) arg_a15S7) ~ KindOf (Let1627650716X_1627650723Sym2 l_a15S6 arg_a15S7) =>
+    Let1627650716X_1627650723Sym1KindInference
+type instance Apply (Let1627650716X_1627650723Sym1 l_a15S6) l_a15S5 = Let1627650716X_1627650723Sym2 l_a15S6 l_a15S5
+instance SuppressUnusedWarnings Let1627650716X_1627650723Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650716X_1627650723Sym0KindInference ())
+data Let1627650716X_1627650723Sym0 l_a15S3
+  = forall arg_a15S4. KindOf (Apply Let1627650716X_1627650723Sym0 arg_a15S4) ~ KindOf (Let1627650716X_1627650723Sym1 arg_a15S4) =>
+    Let1627650716X_1627650723Sym0KindInference
+type instance Apply Let1627650716X_1627650723Sym0 l_a15S3 = Let1627650716X_1627650723Sym1 l_a15S3
+type family Let1627650716S' f_a15PO s_a15PP x_a15PQ xs_a15PR where
+  Let1627650716S' f_a15PO s_a15PP x_a15PQ xs_a15PR = Case_1627650729_a15Q6 f_a15PO s_a15PP x_a15PQ xs_a15PR (Let1627650716X_1627650717Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+type family Let1627650716Y f_a15PO s_a15PP x_a15PQ xs_a15PR where
+  Let1627650716Y f_a15PO s_a15PP x_a15PQ xs_a15PR = Case_1627650754_a15Qv f_a15PO s_a15PP x_a15PQ xs_a15PR (Let1627650716X_1627650717Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+type family Let1627650716S'' f_a15PO s_a15PP x_a15PQ xs_a15PR where
+  Let1627650716S'' f_a15PO s_a15PP x_a15PQ xs_a15PR = Case_1627650779_a15QU f_a15PO s_a15PP x_a15PQ xs_a15PR (Let1627650716X_1627650723Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+type family Let1627650716Ys f_a15PO s_a15PP x_a15PQ xs_a15PR where
+  Let1627650716Ys f_a15PO s_a15PP x_a15PQ xs_a15PR = Case_1627650804_a15Rj f_a15PO s_a15PP x_a15PQ xs_a15PR (Let1627650716X_1627650723Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+type family Let1627650716X_1627650717 f_a15PO
+                                      s_a15PP
+                                      x_a15PQ
+                                      xs_a15PR where
+  Let1627650716X_1627650717 f_a15PO s_a15PP x_a15PQ xs_a15PR = Apply (Apply f_a15PO s_a15PP) x_a15PQ
+type family Let1627650716X_1627650723 f_a15PO
+                                      s_a15PP
+                                      x_a15PQ
+                                      xs_a15PR where
+  Let1627650716X_1627650723 f_a15PO s_a15PP x_a15PQ xs_a15PR = Apply (Apply (Apply MapAccumLSym0 f_a15PO) (Let1627650716S'Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)) xs_a15PR
+type Let1627650885XsSym4 t_a15SC t_a15SD t_a15SE t_a15SF =
+    Let1627650885Xs t_a15SC t_a15SD t_a15SE t_a15SF
+instance SuppressUnusedWarnings Let1627650885XsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650885XsSym3KindInference ())
+data Let1627650885XsSym3 l_a15SQ l_a15SR l_a15SS l_a15SP
+  = forall arg_a15ST. KindOf (Apply (Let1627650885XsSym3 l_a15SQ l_a15SR l_a15SS) arg_a15ST) ~ KindOf (Let1627650885XsSym4 l_a15SQ l_a15SR l_a15SS arg_a15ST) =>
+    Let1627650885XsSym3KindInference
+type instance Apply (Let1627650885XsSym3 l_a15SQ l_a15SR l_a15SS) l_a15SP = Let1627650885XsSym4 l_a15SQ l_a15SR l_a15SS l_a15SP
+instance SuppressUnusedWarnings Let1627650885XsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650885XsSym2KindInference ())
+data Let1627650885XsSym2 l_a15SM l_a15SN l_a15SL
+  = forall arg_a15SO. KindOf (Apply (Let1627650885XsSym2 l_a15SM l_a15SN) arg_a15SO) ~ KindOf (Let1627650885XsSym3 l_a15SM l_a15SN arg_a15SO) =>
+    Let1627650885XsSym2KindInference
+type instance Apply (Let1627650885XsSym2 l_a15SM l_a15SN) l_a15SL = Let1627650885XsSym3 l_a15SM l_a15SN l_a15SL
+instance SuppressUnusedWarnings Let1627650885XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650885XsSym1KindInference ())
+data Let1627650885XsSym1 l_a15SJ l_a15SI
+  = forall arg_a15SK. KindOf (Apply (Let1627650885XsSym1 l_a15SJ) arg_a15SK) ~ KindOf (Let1627650885XsSym2 l_a15SJ arg_a15SK) =>
+    Let1627650885XsSym1KindInference
+type instance Apply (Let1627650885XsSym1 l_a15SJ) l_a15SI = Let1627650885XsSym2 l_a15SJ l_a15SI
+instance SuppressUnusedWarnings Let1627650885XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650885XsSym0KindInference ())
+data Let1627650885XsSym0 l_a15SG
+  = forall arg_a15SH. KindOf (Apply Let1627650885XsSym0 arg_a15SH) ~ KindOf (Let1627650885XsSym1 arg_a15SH) =>
+    Let1627650885XsSym0KindInference
+type instance Apply Let1627650885XsSym0 l_a15SG = Let1627650885XsSym1 l_a15SG
+type family Let1627650885Xs f_a15Sx
+                            x_a15Sy
+                            wild_1627648500_a15Sz
+                            wild_1627648502_a15SA where
+  Let1627650885Xs f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA = Apply (Apply (:$) wild_1627648500_a15Sz) wild_1627648502_a15SA
+type Let1627650904Scrutinee_1627648498Sym4 t_a15SV
+                                            t_a15SW
+                                            t_a15SX
+                                            t_a15SY =
+    Let1627650904Scrutinee_1627648498 t_a15SV t_a15SW t_a15SX t_a15SY
+instance SuppressUnusedWarnings Let1627650904Scrutinee_1627648498Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650904Scrutinee_1627648498Sym3KindInference ())
+data Let1627650904Scrutinee_1627648498Sym3 l_a15T9
+                                            l_a15Ta
+                                            l_a15Tb
+                                            l_a15T8
+  = forall arg_a15Tc. KindOf (Apply (Let1627650904Scrutinee_1627648498Sym3 l_a15T9 l_a15Ta l_a15Tb) arg_a15Tc) ~ KindOf (Let1627650904Scrutinee_1627648498Sym4 l_a15T9 l_a15Ta l_a15Tb arg_a15Tc) =>
+    Let1627650904Scrutinee_1627648498Sym3KindInference
+type instance Apply (Let1627650904Scrutinee_1627648498Sym3 l_a15T9 l_a15Ta l_a15Tb) l_a15T8 = Let1627650904Scrutinee_1627648498Sym4 l_a15T9 l_a15Ta l_a15Tb l_a15T8
+instance SuppressUnusedWarnings Let1627650904Scrutinee_1627648498Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650904Scrutinee_1627648498Sym2KindInference ())
+data Let1627650904Scrutinee_1627648498Sym2 l_a15T5 l_a15T6 l_a15T4
+  = forall arg_a15T7. KindOf (Apply (Let1627650904Scrutinee_1627648498Sym2 l_a15T5 l_a15T6) arg_a15T7) ~ KindOf (Let1627650904Scrutinee_1627648498Sym3 l_a15T5 l_a15T6 arg_a15T7) =>
+    Let1627650904Scrutinee_1627648498Sym2KindInference
+type instance Apply (Let1627650904Scrutinee_1627648498Sym2 l_a15T5 l_a15T6) l_a15T4 = Let1627650904Scrutinee_1627648498Sym3 l_a15T5 l_a15T6 l_a15T4
+instance SuppressUnusedWarnings Let1627650904Scrutinee_1627648498Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650904Scrutinee_1627648498Sym1KindInference ())
+data Let1627650904Scrutinee_1627648498Sym1 l_a15T2 l_a15T1
+  = forall arg_a15T3. KindOf (Apply (Let1627650904Scrutinee_1627648498Sym1 l_a15T2) arg_a15T3) ~ KindOf (Let1627650904Scrutinee_1627648498Sym2 l_a15T2 arg_a15T3) =>
+    Let1627650904Scrutinee_1627648498Sym1KindInference
+type instance Apply (Let1627650904Scrutinee_1627648498Sym1 l_a15T2) l_a15T1 = Let1627650904Scrutinee_1627648498Sym2 l_a15T2 l_a15T1
+instance SuppressUnusedWarnings Let1627650904Scrutinee_1627648498Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650904Scrutinee_1627648498Sym0KindInference ())
+data Let1627650904Scrutinee_1627648498Sym0 l_a15SZ
+  = forall arg_a15T0. KindOf (Apply Let1627650904Scrutinee_1627648498Sym0 arg_a15T0) ~ KindOf (Let1627650904Scrutinee_1627648498Sym1 arg_a15T0) =>
+    Let1627650904Scrutinee_1627648498Sym0KindInference
+type instance Apply Let1627650904Scrutinee_1627648498Sym0 l_a15SZ = Let1627650904Scrutinee_1627648498Sym1 l_a15SZ
+type family Let1627650904Scrutinee_1627648498 f_a15Sx
+                                              x_a15Sy
+                                              wild_1627648500_a15Sz
+                                              wild_1627648502_a15SA where
+  Let1627650904Scrutinee_1627648498 f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA = Apply (Apply Scanr1Sym0 f_a15Sx) (Let1627650885XsSym4 f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA)
+type family Case_1627650923_a15Te f_a15Sx
+                                  x_a15Sy
+                                  wild_1627648500_a15Sz
+                                  wild_1627648502_a15SA
+                                  t_a15Th where
+  Case_1627650923_a15Te f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA '[] = Apply ErrorSym0 "Data.Singletons.List.scanr1: empty list"
+  Case_1627650923_a15Te f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA (q_a15Tf ': qs_a15Tg) = Apply (Apply (:$) (Apply (Apply f_a15Sx x_a15Sy) q_a15Tf)) (Apply (Apply (:$) q_a15Tf) qs_a15Tg)
+type Let1627650951Scrutinee_1627648496Sym4 t_a15TG
+                                            t_a15TH
+                                            t_a15TI
+                                            t_a15TJ =
+    Let1627650951Scrutinee_1627648496 t_a15TG t_a15TH t_a15TI t_a15TJ
+instance SuppressUnusedWarnings Let1627650951Scrutinee_1627648496Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650951Scrutinee_1627648496Sym3KindInference ())
+data Let1627650951Scrutinee_1627648496Sym3 l_a15TU
+                                            l_a15TV
+                                            l_a15TW
+                                            l_a15TT
+  = forall arg_a15TX. KindOf (Apply (Let1627650951Scrutinee_1627648496Sym3 l_a15TU l_a15TV l_a15TW) arg_a15TX) ~ KindOf (Let1627650951Scrutinee_1627648496Sym4 l_a15TU l_a15TV l_a15TW arg_a15TX) =>
+    Let1627650951Scrutinee_1627648496Sym3KindInference
+type instance Apply (Let1627650951Scrutinee_1627648496Sym3 l_a15TU l_a15TV l_a15TW) l_a15TT = Let1627650951Scrutinee_1627648496Sym4 l_a15TU l_a15TV l_a15TW l_a15TT
+instance SuppressUnusedWarnings Let1627650951Scrutinee_1627648496Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650951Scrutinee_1627648496Sym2KindInference ())
+data Let1627650951Scrutinee_1627648496Sym2 l_a15TQ l_a15TR l_a15TP
+  = forall arg_a15TS. KindOf (Apply (Let1627650951Scrutinee_1627648496Sym2 l_a15TQ l_a15TR) arg_a15TS) ~ KindOf (Let1627650951Scrutinee_1627648496Sym3 l_a15TQ l_a15TR arg_a15TS) =>
+    Let1627650951Scrutinee_1627648496Sym2KindInference
+type instance Apply (Let1627650951Scrutinee_1627648496Sym2 l_a15TQ l_a15TR) l_a15TP = Let1627650951Scrutinee_1627648496Sym3 l_a15TQ l_a15TR l_a15TP
+instance SuppressUnusedWarnings Let1627650951Scrutinee_1627648496Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650951Scrutinee_1627648496Sym1KindInference ())
+data Let1627650951Scrutinee_1627648496Sym1 l_a15TN l_a15TM
+  = forall arg_a15TO. KindOf (Apply (Let1627650951Scrutinee_1627648496Sym1 l_a15TN) arg_a15TO) ~ KindOf (Let1627650951Scrutinee_1627648496Sym2 l_a15TN arg_a15TO) =>
+    Let1627650951Scrutinee_1627648496Sym1KindInference
+type instance Apply (Let1627650951Scrutinee_1627648496Sym1 l_a15TN) l_a15TM = Let1627650951Scrutinee_1627648496Sym2 l_a15TN l_a15TM
+instance SuppressUnusedWarnings Let1627650951Scrutinee_1627648496Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627650951Scrutinee_1627648496Sym0KindInference ())
+data Let1627650951Scrutinee_1627648496Sym0 l_a15TK
+  = forall arg_a15TL. KindOf (Apply Let1627650951Scrutinee_1627648496Sym0 arg_a15TL) ~ KindOf (Let1627650951Scrutinee_1627648496Sym1 arg_a15TL) =>
+    Let1627650951Scrutinee_1627648496Sym0KindInference
+type instance Apply Let1627650951Scrutinee_1627648496Sym0 l_a15TK = Let1627650951Scrutinee_1627648496Sym1 l_a15TK
+type family Let1627650951Scrutinee_1627648496 f_a15TB
+                                              q0_a15TC
+                                              x_a15TD
+                                              xs_a15TE where
+  Let1627650951Scrutinee_1627648496 f_a15TB q0_a15TC x_a15TD xs_a15TE = Apply (Apply (Apply ScanrSym0 f_a15TB) q0_a15TC) xs_a15TE
+type family Case_1627650970_a15TZ f_a15TB
+                                  q0_a15TC
+                                  x_a15TD
+                                  xs_a15TE
+                                  t_a15U2 where
+  Case_1627650970_a15TZ f_a15TB q0_a15TC x_a15TD xs_a15TE '[] = Apply ErrorSym0 "Data.Singletons.List.scanr: empty list"
+  Case_1627650970_a15TZ f_a15TB q0_a15TC x_a15TD xs_a15TE (q_a15U0 ': qs_a15U1) = Apply (Apply (:$) (Apply (Apply f_a15TB x_a15TD) q_a15U0)) (Apply (Apply (:$) q_a15U0) qs_a15U1)
+type family Case_1627650993_a15Um f_a15Ui
+                                  q_a15Uj
+                                  ls_a15Uk
+                                  t_a15Up where
+  Case_1627650993_a15Um f_a15Ui q_a15Uj ls_a15Uk '[] = '[]
+  Case_1627650993_a15Um f_a15Ui q_a15Uj ls_a15Uk (x_a15Un ': xs_a15Uo) = Apply (Apply (Apply ScanlSym0 f_a15Ui) (Apply (Apply f_a15Ui q_a15Uj) x_a15Un)) xs_a15Uo
+type Let1627651077XsSym4 t_a15VI t_a15VJ t_a15VK t_a15VL =
+    Let1627651077Xs t_a15VI t_a15VJ t_a15VK t_a15VL
+instance SuppressUnusedWarnings Let1627651077XsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651077XsSym3KindInference ())
+data Let1627651077XsSym3 l_a15VW l_a15VX l_a15VY l_a15VV
+  = forall arg_a15VZ. KindOf (Apply (Let1627651077XsSym3 l_a15VW l_a15VX l_a15VY) arg_a15VZ) ~ KindOf (Let1627651077XsSym4 l_a15VW l_a15VX l_a15VY arg_a15VZ) =>
+    Let1627651077XsSym3KindInference
+type instance Apply (Let1627651077XsSym3 l_a15VW l_a15VX l_a15VY) l_a15VV = Let1627651077XsSym4 l_a15VW l_a15VX l_a15VY l_a15VV
+instance SuppressUnusedWarnings Let1627651077XsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651077XsSym2KindInference ())
+data Let1627651077XsSym2 l_a15VS l_a15VT l_a15VR
+  = forall arg_a15VU. KindOf (Apply (Let1627651077XsSym2 l_a15VS l_a15VT) arg_a15VU) ~ KindOf (Let1627651077XsSym3 l_a15VS l_a15VT arg_a15VU) =>
+    Let1627651077XsSym2KindInference
+type instance Apply (Let1627651077XsSym2 l_a15VS l_a15VT) l_a15VR = Let1627651077XsSym3 l_a15VS l_a15VT l_a15VR
+instance SuppressUnusedWarnings Let1627651077XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651077XsSym1KindInference ())
+data Let1627651077XsSym1 l_a15VP l_a15VO
+  = forall arg_a15VQ. KindOf (Apply (Let1627651077XsSym1 l_a15VP) arg_a15VQ) ~ KindOf (Let1627651077XsSym2 l_a15VP arg_a15VQ) =>
+    Let1627651077XsSym1KindInference
+type instance Apply (Let1627651077XsSym1 l_a15VP) l_a15VO = Let1627651077XsSym2 l_a15VP l_a15VO
+instance SuppressUnusedWarnings Let1627651077XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651077XsSym0KindInference ())
+data Let1627651077XsSym0 l_a15VM
+  = forall arg_a15VN. KindOf (Apply Let1627651077XsSym0 arg_a15VN) ~ KindOf (Let1627651077XsSym1 arg_a15VN) =>
+    Let1627651077XsSym0KindInference
+type instance Apply Let1627651077XsSym0 l_a15VM = Let1627651077XsSym1 l_a15VM
+type family Let1627651077Xs f_a15VD
+                            x_a15VE
+                            wild_1627648492_a15VF
+                            wild_1627648494_a15VG where
+  Let1627651077Xs f_a15VD x_a15VE wild_1627648492_a15VF wild_1627648494_a15VG = Apply (Apply (:$) wild_1627648492_a15VF) wild_1627648494_a15VG
+type Let1627651129XsSym3 t_a15Wy t_a15Wz t_a15WA =
+    Let1627651129Xs t_a15Wy t_a15Wz t_a15WA
+instance SuppressUnusedWarnings Let1627651129XsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651129XsSym2KindInference ())
+data Let1627651129XsSym2 l_a15WH l_a15WI l_a15WG
+  = forall arg_a15WJ. KindOf (Apply (Let1627651129XsSym2 l_a15WH l_a15WI) arg_a15WJ) ~ KindOf (Let1627651129XsSym3 l_a15WH l_a15WI arg_a15WJ) =>
+    Let1627651129XsSym2KindInference
+type instance Apply (Let1627651129XsSym2 l_a15WH l_a15WI) l_a15WG = Let1627651129XsSym3 l_a15WH l_a15WI l_a15WG
+instance SuppressUnusedWarnings Let1627651129XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651129XsSym1KindInference ())
+data Let1627651129XsSym1 l_a15WE l_a15WD
+  = forall arg_a15WF. KindOf (Apply (Let1627651129XsSym1 l_a15WE) arg_a15WF) ~ KindOf (Let1627651129XsSym2 l_a15WE arg_a15WF) =>
+    Let1627651129XsSym1KindInference
+type instance Apply (Let1627651129XsSym1 l_a15WE) l_a15WD = Let1627651129XsSym2 l_a15WE l_a15WD
+instance SuppressUnusedWarnings Let1627651129XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651129XsSym0KindInference ())
+data Let1627651129XsSym0 l_a15WB
+  = forall arg_a15WC. KindOf (Apply Let1627651129XsSym0 arg_a15WC) ~ KindOf (Let1627651129XsSym1 arg_a15WC) =>
+    Let1627651129XsSym0KindInference
+type instance Apply Let1627651129XsSym0 l_a15WB = Let1627651129XsSym1 l_a15WB
+type family Let1627651129Xs cmp_a15Wu
+                            wild_1627648536_a15Wv
+                            wild_1627648538_a15Ww where
+  Let1627651129Xs cmp_a15Wu wild_1627648536_a15Wv wild_1627648538_a15Ww = Apply (Apply (:$) wild_1627648536_a15Wv) wild_1627648538_a15Ww
+type Let1627651172Scrutinee_1627648534Sym5 t_a15Xf
+                                            t_a15Xg
+                                            t_a15Xh
+                                            t_a15Xi
+                                            t_a15Xj =
+    Let1627651172Scrutinee_1627648534 t_a15Xf t_a15Xg t_a15Xh t_a15Xi t_a15Xj
+instance SuppressUnusedWarnings Let1627651172Scrutinee_1627648534Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651172Scrutinee_1627648534Sym4KindInference ())
+data Let1627651172Scrutinee_1627648534Sym4 l_a15Xz
+                                            l_a15XA
+                                            l_a15XB
+                                            l_a15XC
+                                            l_a15Xy
+  = forall arg_a15XD. KindOf (Apply (Let1627651172Scrutinee_1627648534Sym4 l_a15Xz l_a15XA l_a15XB l_a15XC) arg_a15XD) ~ KindOf (Let1627651172Scrutinee_1627648534Sym5 l_a15Xz l_a15XA l_a15XB l_a15XC arg_a15XD) =>
+    Let1627651172Scrutinee_1627648534Sym4KindInference
+type instance Apply (Let1627651172Scrutinee_1627648534Sym4 l_a15Xz l_a15XA l_a15XB l_a15XC) l_a15Xy = Let1627651172Scrutinee_1627648534Sym5 l_a15Xz l_a15XA l_a15XB l_a15XC l_a15Xy
+instance SuppressUnusedWarnings Let1627651172Scrutinee_1627648534Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651172Scrutinee_1627648534Sym3KindInference ())
+data Let1627651172Scrutinee_1627648534Sym3 l_a15Xu
+                                            l_a15Xv
+                                            l_a15Xw
+                                            l_a15Xt
+  = forall arg_a15Xx. KindOf (Apply (Let1627651172Scrutinee_1627648534Sym3 l_a15Xu l_a15Xv l_a15Xw) arg_a15Xx) ~ KindOf (Let1627651172Scrutinee_1627648534Sym4 l_a15Xu l_a15Xv l_a15Xw arg_a15Xx) =>
+    Let1627651172Scrutinee_1627648534Sym3KindInference
+type instance Apply (Let1627651172Scrutinee_1627648534Sym3 l_a15Xu l_a15Xv l_a15Xw) l_a15Xt = Let1627651172Scrutinee_1627648534Sym4 l_a15Xu l_a15Xv l_a15Xw l_a15Xt
+instance SuppressUnusedWarnings Let1627651172Scrutinee_1627648534Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651172Scrutinee_1627648534Sym2KindInference ())
+data Let1627651172Scrutinee_1627648534Sym2 l_a15Xq l_a15Xr l_a15Xp
+  = forall arg_a15Xs. KindOf (Apply (Let1627651172Scrutinee_1627648534Sym2 l_a15Xq l_a15Xr) arg_a15Xs) ~ KindOf (Let1627651172Scrutinee_1627648534Sym3 l_a15Xq l_a15Xr arg_a15Xs) =>
+    Let1627651172Scrutinee_1627648534Sym2KindInference
+type instance Apply (Let1627651172Scrutinee_1627648534Sym2 l_a15Xq l_a15Xr) l_a15Xp = Let1627651172Scrutinee_1627648534Sym3 l_a15Xq l_a15Xr l_a15Xp
+instance SuppressUnusedWarnings Let1627651172Scrutinee_1627648534Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651172Scrutinee_1627648534Sym1KindInference ())
+data Let1627651172Scrutinee_1627648534Sym1 l_a15Xn l_a15Xm
+  = forall arg_a15Xo. KindOf (Apply (Let1627651172Scrutinee_1627648534Sym1 l_a15Xn) arg_a15Xo) ~ KindOf (Let1627651172Scrutinee_1627648534Sym2 l_a15Xn arg_a15Xo) =>
+    Let1627651172Scrutinee_1627648534Sym1KindInference
+type instance Apply (Let1627651172Scrutinee_1627648534Sym1 l_a15Xn) l_a15Xm = Let1627651172Scrutinee_1627648534Sym2 l_a15Xn l_a15Xm
+instance SuppressUnusedWarnings Let1627651172Scrutinee_1627648534Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651172Scrutinee_1627648534Sym0KindInference ())
+data Let1627651172Scrutinee_1627648534Sym0 l_a15Xk
+  = forall arg_a15Xl. KindOf (Apply Let1627651172Scrutinee_1627648534Sym0 arg_a15Xl) ~ KindOf (Let1627651172Scrutinee_1627648534Sym1 arg_a15Xl) =>
+    Let1627651172Scrutinee_1627648534Sym0KindInference
+type instance Apply Let1627651172Scrutinee_1627648534Sym0 l_a15Xk = Let1627651172Scrutinee_1627648534Sym1 l_a15Xk
+type family Let1627651172Scrutinee_1627648534 cmp_a15Wu
+                                              x_a15Xc
+                                              y_a15Xd
+                                              wild_1627648536_a15Wv
+                                              wild_1627648538_a15Ww where
+  Let1627651172Scrutinee_1627648534 cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww = Apply (Apply cmp_a15Wu x_a15Xc) y_a15Xd
+type family Case_1627651198_a15XF cmp_a15Wu
+                                  x_a15Xc
+                                  y_a15Xd
+                                  wild_1627648536_a15Wv
+                                  wild_1627648538_a15Ww
+                                  t_a15XG where
+  Case_1627651198_a15XF cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww 'GT = x_a15Xc
+  Case_1627651198_a15XF cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww 'EQ = y_a15Xd
+  Case_1627651198_a15XF cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww 'LT = y_a15Xd
+type Let1627651142MaxBySym5 t_a15WL
+                            t_a15WM
+                            t_a15WN
+                            t_a15WO
+                            t_a15WP =
+    Let1627651142MaxBy t_a15WL t_a15WM t_a15WN t_a15WO t_a15WP
+instance SuppressUnusedWarnings Let1627651142MaxBySym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651142MaxBySym4KindInference ())
+data Let1627651142MaxBySym4 l_a15X5 l_a15X6 l_a15X7 l_a15X8 l_a15X4
+  = forall arg_a15X9. KindOf (Apply (Let1627651142MaxBySym4 l_a15X5 l_a15X6 l_a15X7 l_a15X8) arg_a15X9) ~ KindOf (Let1627651142MaxBySym5 l_a15X5 l_a15X6 l_a15X7 l_a15X8 arg_a15X9) =>
+    Let1627651142MaxBySym4KindInference
+type instance Apply (Let1627651142MaxBySym4 l_a15X5 l_a15X6 l_a15X7 l_a15X8) l_a15X4 = Let1627651142MaxBySym5 l_a15X5 l_a15X6 l_a15X7 l_a15X8 l_a15X4
+instance SuppressUnusedWarnings Let1627651142MaxBySym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651142MaxBySym3KindInference ())
+data Let1627651142MaxBySym3 l_a15X0 l_a15X1 l_a15X2 l_a15WZ
+  = forall arg_a15X3. KindOf (Apply (Let1627651142MaxBySym3 l_a15X0 l_a15X1 l_a15X2) arg_a15X3) ~ KindOf (Let1627651142MaxBySym4 l_a15X0 l_a15X1 l_a15X2 arg_a15X3) =>
+    Let1627651142MaxBySym3KindInference
+type instance Apply (Let1627651142MaxBySym3 l_a15X0 l_a15X1 l_a15X2) l_a15WZ = Let1627651142MaxBySym4 l_a15X0 l_a15X1 l_a15X2 l_a15WZ
+instance SuppressUnusedWarnings Let1627651142MaxBySym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651142MaxBySym2KindInference ())
+data Let1627651142MaxBySym2 l_a15WW l_a15WX l_a15WV
+  = forall arg_a15WY. KindOf (Apply (Let1627651142MaxBySym2 l_a15WW l_a15WX) arg_a15WY) ~ KindOf (Let1627651142MaxBySym3 l_a15WW l_a15WX arg_a15WY) =>
+    Let1627651142MaxBySym2KindInference
+type instance Apply (Let1627651142MaxBySym2 l_a15WW l_a15WX) l_a15WV = Let1627651142MaxBySym3 l_a15WW l_a15WX l_a15WV
+instance SuppressUnusedWarnings Let1627651142MaxBySym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651142MaxBySym1KindInference ())
+data Let1627651142MaxBySym1 l_a15WT l_a15WS
+  = forall arg_a15WU. KindOf (Apply (Let1627651142MaxBySym1 l_a15WT) arg_a15WU) ~ KindOf (Let1627651142MaxBySym2 l_a15WT arg_a15WU) =>
+    Let1627651142MaxBySym1KindInference
+type instance Apply (Let1627651142MaxBySym1 l_a15WT) l_a15WS = Let1627651142MaxBySym2 l_a15WT l_a15WS
+instance SuppressUnusedWarnings Let1627651142MaxBySym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651142MaxBySym0KindInference ())
+data Let1627651142MaxBySym0 l_a15WQ
+  = forall arg_a15WR. KindOf (Apply Let1627651142MaxBySym0 arg_a15WR) ~ KindOf (Let1627651142MaxBySym1 arg_a15WR) =>
+    Let1627651142MaxBySym0KindInference
+type instance Apply Let1627651142MaxBySym0 l_a15WQ = Let1627651142MaxBySym1 l_a15WQ
+type family Let1627651142MaxBy cmp_a15Wu
+                                wild_1627648536_a15Wv
+                                wild_1627648538_a15Ww
+                                a_a15Xa
+                                a_a15Xb where
+  Let1627651142MaxBy cmp_a15Wu wild_1627648536_a15Wv wild_1627648538_a15Ww x_a15Xc y_a15Xd = Case_1627651198_a15XF cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww (Let1627651172Scrutinee_1627648534Sym5 cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww)
+type Let1627651216XsSym3 t_a15XX t_a15XY t_a15XZ =
+    Let1627651216Xs t_a15XX t_a15XY t_a15XZ
+instance SuppressUnusedWarnings Let1627651216XsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651216XsSym2KindInference ())
+data Let1627651216XsSym2 l_a15Y6 l_a15Y7 l_a15Y5
+  = forall arg_a15Y8. KindOf (Apply (Let1627651216XsSym2 l_a15Y6 l_a15Y7) arg_a15Y8) ~ KindOf (Let1627651216XsSym3 l_a15Y6 l_a15Y7 arg_a15Y8) =>
+    Let1627651216XsSym2KindInference
+type instance Apply (Let1627651216XsSym2 l_a15Y6 l_a15Y7) l_a15Y5 = Let1627651216XsSym3 l_a15Y6 l_a15Y7 l_a15Y5
+instance SuppressUnusedWarnings Let1627651216XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651216XsSym1KindInference ())
+data Let1627651216XsSym1 l_a15Y3 l_a15Y2
+  = forall arg_a15Y4. KindOf (Apply (Let1627651216XsSym1 l_a15Y3) arg_a15Y4) ~ KindOf (Let1627651216XsSym2 l_a15Y3 arg_a15Y4) =>
+    Let1627651216XsSym1KindInference
+type instance Apply (Let1627651216XsSym1 l_a15Y3) l_a15Y2 = Let1627651216XsSym2 l_a15Y3 l_a15Y2
+instance SuppressUnusedWarnings Let1627651216XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651216XsSym0KindInference ())
+data Let1627651216XsSym0 l_a15Y0
+  = forall arg_a15Y1. KindOf (Apply Let1627651216XsSym0 arg_a15Y1) ~ KindOf (Let1627651216XsSym1 arg_a15Y1) =>
+    Let1627651216XsSym0KindInference
+type instance Apply Let1627651216XsSym0 l_a15Y0 = Let1627651216XsSym1 l_a15Y0
+type family Let1627651216Xs cmp_a15XT
+                            wild_1627648542_a15XU
+                            wild_1627648544_a15XV where
+  Let1627651216Xs cmp_a15XT wild_1627648542_a15XU wild_1627648544_a15XV = Apply (Apply (:$) wild_1627648542_a15XU) wild_1627648544_a15XV
+type Let1627651259Scrutinee_1627648540Sym5 t_a15YE
+                                            t_a15YF
+                                            t_a15YG
+                                            t_a15YH
+                                            t_a15YI =
+    Let1627651259Scrutinee_1627648540 t_a15YE t_a15YF t_a15YG t_a15YH t_a15YI
+instance SuppressUnusedWarnings Let1627651259Scrutinee_1627648540Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651259Scrutinee_1627648540Sym4KindInference ())
+data Let1627651259Scrutinee_1627648540Sym4 l_a15YY
+                                            l_a15YZ
+                                            l_a15Z0
+                                            l_a15Z1
+                                            l_a15YX
+  = forall arg_a15Z2. KindOf (Apply (Let1627651259Scrutinee_1627648540Sym4 l_a15YY l_a15YZ l_a15Z0 l_a15Z1) arg_a15Z2) ~ KindOf (Let1627651259Scrutinee_1627648540Sym5 l_a15YY l_a15YZ l_a15Z0 l_a15Z1 arg_a15Z2) =>
+    Let1627651259Scrutinee_1627648540Sym4KindInference
+type instance Apply (Let1627651259Scrutinee_1627648540Sym4 l_a15YY l_a15YZ l_a15Z0 l_a15Z1) l_a15YX = Let1627651259Scrutinee_1627648540Sym5 l_a15YY l_a15YZ l_a15Z0 l_a15Z1 l_a15YX
+instance SuppressUnusedWarnings Let1627651259Scrutinee_1627648540Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651259Scrutinee_1627648540Sym3KindInference ())
+data Let1627651259Scrutinee_1627648540Sym3 l_a15YT
+                                            l_a15YU
+                                            l_a15YV
+                                            l_a15YS
+  = forall arg_a15YW. KindOf (Apply (Let1627651259Scrutinee_1627648540Sym3 l_a15YT l_a15YU l_a15YV) arg_a15YW) ~ KindOf (Let1627651259Scrutinee_1627648540Sym4 l_a15YT l_a15YU l_a15YV arg_a15YW) =>
+    Let1627651259Scrutinee_1627648540Sym3KindInference
+type instance Apply (Let1627651259Scrutinee_1627648540Sym3 l_a15YT l_a15YU l_a15YV) l_a15YS = Let1627651259Scrutinee_1627648540Sym4 l_a15YT l_a15YU l_a15YV l_a15YS
+instance SuppressUnusedWarnings Let1627651259Scrutinee_1627648540Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651259Scrutinee_1627648540Sym2KindInference ())
+data Let1627651259Scrutinee_1627648540Sym2 l_a15YP l_a15YQ l_a15YO
+  = forall arg_a15YR. KindOf (Apply (Let1627651259Scrutinee_1627648540Sym2 l_a15YP l_a15YQ) arg_a15YR) ~ KindOf (Let1627651259Scrutinee_1627648540Sym3 l_a15YP l_a15YQ arg_a15YR) =>
+    Let1627651259Scrutinee_1627648540Sym2KindInference
+type instance Apply (Let1627651259Scrutinee_1627648540Sym2 l_a15YP l_a15YQ) l_a15YO = Let1627651259Scrutinee_1627648540Sym3 l_a15YP l_a15YQ l_a15YO
+instance SuppressUnusedWarnings Let1627651259Scrutinee_1627648540Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651259Scrutinee_1627648540Sym1KindInference ())
+data Let1627651259Scrutinee_1627648540Sym1 l_a15YM l_a15YL
+  = forall arg_a15YN. KindOf (Apply (Let1627651259Scrutinee_1627648540Sym1 l_a15YM) arg_a15YN) ~ KindOf (Let1627651259Scrutinee_1627648540Sym2 l_a15YM arg_a15YN) =>
+    Let1627651259Scrutinee_1627648540Sym1KindInference
+type instance Apply (Let1627651259Scrutinee_1627648540Sym1 l_a15YM) l_a15YL = Let1627651259Scrutinee_1627648540Sym2 l_a15YM l_a15YL
+instance SuppressUnusedWarnings Let1627651259Scrutinee_1627648540Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651259Scrutinee_1627648540Sym0KindInference ())
+data Let1627651259Scrutinee_1627648540Sym0 l_a15YJ
+  = forall arg_a15YK. KindOf (Apply Let1627651259Scrutinee_1627648540Sym0 arg_a15YK) ~ KindOf (Let1627651259Scrutinee_1627648540Sym1 arg_a15YK) =>
+    Let1627651259Scrutinee_1627648540Sym0KindInference
+type instance Apply Let1627651259Scrutinee_1627648540Sym0 l_a15YJ = Let1627651259Scrutinee_1627648540Sym1 l_a15YJ
+type family Let1627651259Scrutinee_1627648540 cmp_a15XT
+                                              x_a15YB
+                                              y_a15YC
+                                              wild_1627648542_a15XU
+                                              wild_1627648544_a15XV where
+  Let1627651259Scrutinee_1627648540 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV = Apply (Apply cmp_a15XT x_a15YB) y_a15YC
+type family Case_1627651285_a15Z4 cmp_a15XT
+                                  x_a15YB
+                                  y_a15YC
+                                  wild_1627648542_a15XU
+                                  wild_1627648544_a15XV
+                                  t_a15Z5 where
+  Case_1627651285_a15Z4 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV 'GT = y_a15YC
+  Case_1627651285_a15Z4 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV 'EQ = x_a15YB
+  Case_1627651285_a15Z4 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV 'LT = x_a15YB
+type Let1627651229MinBySym5 t_a15Ya
+                            t_a15Yb
+                            t_a15Yc
+                            t_a15Yd
+                            t_a15Ye =
+    Let1627651229MinBy t_a15Ya t_a15Yb t_a15Yc t_a15Yd t_a15Ye
+instance SuppressUnusedWarnings Let1627651229MinBySym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651229MinBySym4KindInference ())
+data Let1627651229MinBySym4 l_a15Yu l_a15Yv l_a15Yw l_a15Yx l_a15Yt
+  = forall arg_a15Yy. KindOf (Apply (Let1627651229MinBySym4 l_a15Yu l_a15Yv l_a15Yw l_a15Yx) arg_a15Yy) ~ KindOf (Let1627651229MinBySym5 l_a15Yu l_a15Yv l_a15Yw l_a15Yx arg_a15Yy) =>
+    Let1627651229MinBySym4KindInference
+type instance Apply (Let1627651229MinBySym4 l_a15Yu l_a15Yv l_a15Yw l_a15Yx) l_a15Yt = Let1627651229MinBySym5 l_a15Yu l_a15Yv l_a15Yw l_a15Yx l_a15Yt
+instance SuppressUnusedWarnings Let1627651229MinBySym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651229MinBySym3KindInference ())
+data Let1627651229MinBySym3 l_a15Yp l_a15Yq l_a15Yr l_a15Yo
+  = forall arg_a15Ys. KindOf (Apply (Let1627651229MinBySym3 l_a15Yp l_a15Yq l_a15Yr) arg_a15Ys) ~ KindOf (Let1627651229MinBySym4 l_a15Yp l_a15Yq l_a15Yr arg_a15Ys) =>
+    Let1627651229MinBySym3KindInference
+type instance Apply (Let1627651229MinBySym3 l_a15Yp l_a15Yq l_a15Yr) l_a15Yo = Let1627651229MinBySym4 l_a15Yp l_a15Yq l_a15Yr l_a15Yo
+instance SuppressUnusedWarnings Let1627651229MinBySym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651229MinBySym2KindInference ())
+data Let1627651229MinBySym2 l_a15Yl l_a15Ym l_a15Yk
+  = forall arg_a15Yn. KindOf (Apply (Let1627651229MinBySym2 l_a15Yl l_a15Ym) arg_a15Yn) ~ KindOf (Let1627651229MinBySym3 l_a15Yl l_a15Ym arg_a15Yn) =>
+    Let1627651229MinBySym2KindInference
+type instance Apply (Let1627651229MinBySym2 l_a15Yl l_a15Ym) l_a15Yk = Let1627651229MinBySym3 l_a15Yl l_a15Ym l_a15Yk
+instance SuppressUnusedWarnings Let1627651229MinBySym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651229MinBySym1KindInference ())
+data Let1627651229MinBySym1 l_a15Yi l_a15Yh
+  = forall arg_a15Yj. KindOf (Apply (Let1627651229MinBySym1 l_a15Yi) arg_a15Yj) ~ KindOf (Let1627651229MinBySym2 l_a15Yi arg_a15Yj) =>
+    Let1627651229MinBySym1KindInference
+type instance Apply (Let1627651229MinBySym1 l_a15Yi) l_a15Yh = Let1627651229MinBySym2 l_a15Yi l_a15Yh
+instance SuppressUnusedWarnings Let1627651229MinBySym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651229MinBySym0KindInference ())
+data Let1627651229MinBySym0 l_a15Yf
+  = forall arg_a15Yg. KindOf (Apply Let1627651229MinBySym0 arg_a15Yg) ~ KindOf (Let1627651229MinBySym1 arg_a15Yg) =>
+    Let1627651229MinBySym0KindInference
+type instance Apply Let1627651229MinBySym0 l_a15Yf = Let1627651229MinBySym1 l_a15Yf
+type family Let1627651229MinBy cmp_a15XT
+                                wild_1627648542_a15XU
+                                wild_1627648544_a15XV
+                                a_a15Yz
+                                a_a15YA where
+  Let1627651229MinBy cmp_a15XT wild_1627648542_a15XU wild_1627648544_a15XV x_a15YB y_a15YC = Case_1627651285_a15Z4 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV (Let1627651259Scrutinee_1627648540Sym5 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV)
+type Let1627651294XsSym2 t_a15Zd t_a15Ze =
+    Let1627651294Xs t_a15Zd t_a15Ze
+instance SuppressUnusedWarnings Let1627651294XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651294XsSym1KindInference ())
+data Let1627651294XsSym1 l_a15Zi l_a15Zh
+  = forall arg_a15Zj. KindOf (Apply (Let1627651294XsSym1 l_a15Zi) arg_a15Zj) ~ KindOf (Let1627651294XsSym2 l_a15Zi arg_a15Zj) =>
+    Let1627651294XsSym1KindInference
+type instance Apply (Let1627651294XsSym1 l_a15Zi) l_a15Zh = Let1627651294XsSym2 l_a15Zi l_a15Zh
+instance SuppressUnusedWarnings Let1627651294XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651294XsSym0KindInference ())
+data Let1627651294XsSym0 l_a15Zf
+  = forall arg_a15Zg. KindOf (Apply Let1627651294XsSym0 arg_a15Zg) ~ KindOf (Let1627651294XsSym1 arg_a15Zg) =>
+    Let1627651294XsSym0KindInference
+type instance Apply Let1627651294XsSym0 l_a15Zf = Let1627651294XsSym1 l_a15Zf
+type family Let1627651294Xs wild_1627648572_a15Za
+                            wild_1627648574_a15Zb where
+  Let1627651294Xs wild_1627648572_a15Za wild_1627648574_a15Zb = Apply (Apply (:$) wild_1627648572_a15Za) wild_1627648574_a15Zb
+type Let1627651308XsSym2 t_a15Zr t_a15Zs =
+    Let1627651308Xs t_a15Zr t_a15Zs
+instance SuppressUnusedWarnings Let1627651308XsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651308XsSym1KindInference ())
+data Let1627651308XsSym1 l_a15Zw l_a15Zv
+  = forall arg_a15Zx. KindOf (Apply (Let1627651308XsSym1 l_a15Zw) arg_a15Zx) ~ KindOf (Let1627651308XsSym2 l_a15Zw arg_a15Zx) =>
+    Let1627651308XsSym1KindInference
+type instance Apply (Let1627651308XsSym1 l_a15Zw) l_a15Zv = Let1627651308XsSym2 l_a15Zw l_a15Zv
+instance SuppressUnusedWarnings Let1627651308XsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651308XsSym0KindInference ())
+data Let1627651308XsSym0 l_a15Zt
+  = forall arg_a15Zu. KindOf (Apply Let1627651308XsSym0 arg_a15Zu) ~ KindOf (Let1627651308XsSym1 arg_a15Zu) =>
+    Let1627651308XsSym0KindInference
+type instance Apply Let1627651308XsSym0 l_a15Zt = Let1627651308XsSym1 l_a15Zt
+type family Let1627651308Xs wild_1627648576_a15Zo
+                            wild_1627648578_a15Zp where
+  Let1627651308Xs wild_1627648576_a15Zo wild_1627648578_a15Zp = Apply (Apply (:$) wild_1627648576_a15Zo) wild_1627648578_a15Zp
+type Let1627651366Z'Sym6 t_a160n
+                          t_a160o
+                          t_a160p
+                          t_a160q
+                          t_a160r
+                          t_a160s =
+    Let1627651366Z' t_a160n t_a160o t_a160p t_a160q t_a160r t_a160s
+instance SuppressUnusedWarnings Let1627651366Z'Sym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651366Z'Sym5KindInference ())
+data Let1627651366Z'Sym5 l_a160O
+                          l_a160P
+                          l_a160Q
+                          l_a160R
+                          l_a160S
+                          l_a160N
+  = forall arg_a160T. KindOf (Apply (Let1627651366Z'Sym5 l_a160O l_a160P l_a160Q l_a160R l_a160S) arg_a160T) ~ KindOf (Let1627651366Z'Sym6 l_a160O l_a160P l_a160Q l_a160R l_a160S arg_a160T) =>
+    Let1627651366Z'Sym5KindInference
+type instance Apply (Let1627651366Z'Sym5 l_a160O l_a160P l_a160Q l_a160R l_a160S) l_a160N = Let1627651366Z'Sym6 l_a160O l_a160P l_a160Q l_a160R l_a160S l_a160N
+instance SuppressUnusedWarnings Let1627651366Z'Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651366Z'Sym4KindInference ())
+data Let1627651366Z'Sym4 l_a160I l_a160J l_a160K l_a160L l_a160H
+  = forall arg_a160M. KindOf (Apply (Let1627651366Z'Sym4 l_a160I l_a160J l_a160K l_a160L) arg_a160M) ~ KindOf (Let1627651366Z'Sym5 l_a160I l_a160J l_a160K l_a160L arg_a160M) =>
+    Let1627651366Z'Sym4KindInference
+type instance Apply (Let1627651366Z'Sym4 l_a160I l_a160J l_a160K l_a160L) l_a160H = Let1627651366Z'Sym5 l_a160I l_a160J l_a160K l_a160L l_a160H
+instance SuppressUnusedWarnings Let1627651366Z'Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651366Z'Sym3KindInference ())
+data Let1627651366Z'Sym3 l_a160D l_a160E l_a160F l_a160C
+  = forall arg_a160G. KindOf (Apply (Let1627651366Z'Sym3 l_a160D l_a160E l_a160F) arg_a160G) ~ KindOf (Let1627651366Z'Sym4 l_a160D l_a160E l_a160F arg_a160G) =>
+    Let1627651366Z'Sym3KindInference
+type instance Apply (Let1627651366Z'Sym3 l_a160D l_a160E l_a160F) l_a160C = Let1627651366Z'Sym4 l_a160D l_a160E l_a160F l_a160C
+instance SuppressUnusedWarnings Let1627651366Z'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651366Z'Sym2KindInference ())
+data Let1627651366Z'Sym2 l_a160z l_a160A l_a160y
+  = forall arg_a160B. KindOf (Apply (Let1627651366Z'Sym2 l_a160z l_a160A) arg_a160B) ~ KindOf (Let1627651366Z'Sym3 l_a160z l_a160A arg_a160B) =>
+    Let1627651366Z'Sym2KindInference
+type instance Apply (Let1627651366Z'Sym2 l_a160z l_a160A) l_a160y = Let1627651366Z'Sym3 l_a160z l_a160A l_a160y
+instance SuppressUnusedWarnings Let1627651366Z'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651366Z'Sym1KindInference ())
+data Let1627651366Z'Sym1 l_a160w l_a160v
+  = forall arg_a160x. KindOf (Apply (Let1627651366Z'Sym1 l_a160w) arg_a160x) ~ KindOf (Let1627651366Z'Sym2 l_a160w arg_a160x) =>
+    Let1627651366Z'Sym1KindInference
+type instance Apply (Let1627651366Z'Sym1 l_a160w) l_a160v = Let1627651366Z'Sym2 l_a160w l_a160v
+instance SuppressUnusedWarnings Let1627651366Z'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651366Z'Sym0KindInference ())
+data Let1627651366Z'Sym0 l_a160t
+  = forall arg_a160u. KindOf (Apply Let1627651366Z'Sym0 arg_a160u) ~ KindOf (Let1627651366Z'Sym1 arg_a160u) =>
+    Let1627651366Z'Sym0KindInference
+type instance Apply Let1627651366Z'Sym0 l_a160t = Let1627651366Z'Sym1 l_a160t
+type family Let1627651366Z' f_a15ZN
+                            z0_a15ZO
+                            xs0_a15ZP
+                            z_a160j
+                            x_a160k
+                            xs_a160l where
+  Let1627651366Z' f_a15ZN z0_a15ZO xs0_a15ZP z_a160j x_a160k xs_a160l = Apply (Apply f_a15ZN z_a160j) x_a160k
+type Let1627651334LgoSym5 t_a15ZR
+                          t_a15ZS
+                          t_a15ZT
+                          (t_a15ZU :: b_a156O)
+                          (t_a15ZV :: [a_a156N]) =
+    Let1627651334Lgo t_a15ZR t_a15ZS t_a15ZT t_a15ZU t_a15ZV
+instance SuppressUnusedWarnings Let1627651334LgoSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651334LgoSym4KindInference ())
+data Let1627651334LgoSym4 l_a160b
+                          l_a160c
+                          l_a160d
+                          (l_a160e :: b_a156O)
+                          (l_a160a :: TyFun [a_a156N] b_a156O)
+  = forall arg_a160f. KindOf (Apply (Let1627651334LgoSym4 l_a160b l_a160c l_a160d l_a160e) arg_a160f) ~ KindOf (Let1627651334LgoSym5 l_a160b l_a160c l_a160d l_a160e arg_a160f) =>
+    Let1627651334LgoSym4KindInference
+type instance Apply (Let1627651334LgoSym4 l_a160b l_a160c l_a160d l_a160e) l_a160a = Let1627651334LgoSym5 l_a160b l_a160c l_a160d l_a160e l_a160a
+instance SuppressUnusedWarnings Let1627651334LgoSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651334LgoSym3KindInference ())
+data Let1627651334LgoSym3 l_a1606
+                          l_a1607
+                          l_a1608
+                          (l_a1605 :: TyFun b_a156O (TyFun [a_a156N] b_a156O -> *))
+  = forall arg_a1609. KindOf (Apply (Let1627651334LgoSym3 l_a1606 l_a1607 l_a1608) arg_a1609) ~ KindOf (Let1627651334LgoSym4 l_a1606 l_a1607 l_a1608 arg_a1609) =>
+    Let1627651334LgoSym3KindInference
+type instance Apply (Let1627651334LgoSym3 l_a1606 l_a1607 l_a1608) l_a1605 = Let1627651334LgoSym4 l_a1606 l_a1607 l_a1608 l_a1605
+instance SuppressUnusedWarnings Let1627651334LgoSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651334LgoSym2KindInference ())
+data Let1627651334LgoSym2 l_a1602 l_a1603 l_a1601
+  = forall arg_a1604. KindOf (Apply (Let1627651334LgoSym2 l_a1602 l_a1603) arg_a1604) ~ KindOf (Let1627651334LgoSym3 l_a1602 l_a1603 arg_a1604) =>
+    Let1627651334LgoSym2KindInference
+type instance Apply (Let1627651334LgoSym2 l_a1602 l_a1603) l_a1601 = Let1627651334LgoSym3 l_a1602 l_a1603 l_a1601
+instance SuppressUnusedWarnings Let1627651334LgoSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651334LgoSym1KindInference ())
+data Let1627651334LgoSym1 l_a15ZZ l_a15ZY
+  = forall arg_a1600. KindOf (Apply (Let1627651334LgoSym1 l_a15ZZ) arg_a1600) ~ KindOf (Let1627651334LgoSym2 l_a15ZZ arg_a1600) =>
+    Let1627651334LgoSym1KindInference
+type instance Apply (Let1627651334LgoSym1 l_a15ZZ) l_a15ZY = Let1627651334LgoSym2 l_a15ZZ l_a15ZY
+instance SuppressUnusedWarnings Let1627651334LgoSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651334LgoSym0KindInference ())
+data Let1627651334LgoSym0 l_a15ZW
+  = forall arg_a15ZX. KindOf (Apply Let1627651334LgoSym0 arg_a15ZX) ~ KindOf (Let1627651334LgoSym1 arg_a15ZX) =>
+    Let1627651334LgoSym0KindInference
+type instance Apply Let1627651334LgoSym0 l_a15ZW = Let1627651334LgoSym1 l_a15ZW
+type family Let1627651334Lgo f_a15ZN
+                              z0_a15ZO
+                              xs0_a15ZP
+                              (a_a160g :: b_a156O)
+                              (a_a160h :: [a_a156N]) :: b_a156O where
+  Let1627651334Lgo f_a15ZN z0_a15ZO xs0_a15ZP z_a160i '[] = z_a160i
+  Let1627651334Lgo f_a15ZN z0_a15ZO xs0_a15ZP z_a160j (x_a160k ': xs_a160l) = Apply (Apply SeqSym0 (Let1627651366Z'Sym6 f_a15ZN z0_a15ZO xs0_a15ZP z_a160j x_a160k xs_a160l)) (Apply (Apply (Let1627651334LgoSym3 f_a15ZN z0_a15ZO xs0_a15ZP) (Let1627651366Z'Sym6 f_a15ZN z0_a15ZO xs0_a15ZP z_a160j x_a160k xs_a160l)) xs_a160l)
+type family Case_1627651502_a162z xs0_a161d
+                                  t_a161w
+                                  ts_a161x
+                                  is_a161y
+                                  f_a162n
+                                  y_a162o
+                                  ys_a162p
+                                  r_a162q
+                                  t_a162E where
+  Case_1627651502_a162z xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q '(y_1627651498_a162A,
+                                                                                                _z_1627651505_a162D) = y_1627651498_a162A
+type family Case_1627651561_a163w xs0_a161d
+                                  t_a161w
+                                  ts_a161x
+                                  is_a161y
+                                  f_a162n
+                                  y_a162o
+                                  ys_a162p
+                                  r_a162q
+                                  t_a163B where
+  Case_1627651561_a163w xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q '(_z_1627651563_a163z,
+                                                                                                y_1627651500_a163A) = y_1627651500_a163A
+type Let1627651495UsSym8 t_a162F
+                          t_a162G
+                          t_a162H
+                          t_a162I
+                          t_a162J
+                          t_a162K
+                          t_a162L
+                          t_a162M =
+    Let1627651495Us t_a162F t_a162G t_a162H t_a162I t_a162J t_a162K t_a162L t_a162M
+instance SuppressUnusedWarnings Let1627651495UsSym7 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495UsSym7KindInference ())
+data Let1627651495UsSym7 l_a163n
+                          l_a163o
+                          l_a163p
+                          l_a163q
+                          l_a163r
+                          l_a163s
+                          l_a163t
+                          l_a163m
+  = forall arg_a163u. KindOf (Apply (Let1627651495UsSym7 l_a163n l_a163o l_a163p l_a163q l_a163r l_a163s l_a163t) arg_a163u) ~ KindOf (Let1627651495UsSym8 l_a163n l_a163o l_a163p l_a163q l_a163r l_a163s l_a163t arg_a163u) =>
+    Let1627651495UsSym7KindInference
+type instance Apply (Let1627651495UsSym7 l_a163n l_a163o l_a163p l_a163q l_a163r l_a163s l_a163t) l_a163m = Let1627651495UsSym8 l_a163n l_a163o l_a163p l_a163q l_a163r l_a163s l_a163t l_a163m
+instance SuppressUnusedWarnings Let1627651495UsSym6 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495UsSym6KindInference ())
+data Let1627651495UsSym6 l_a163f
+                          l_a163g
+                          l_a163h
+                          l_a163i
+                          l_a163j
+                          l_a163k
+                          l_a163e
+  = forall arg_a163l. KindOf (Apply (Let1627651495UsSym6 l_a163f l_a163g l_a163h l_a163i l_a163j l_a163k) arg_a163l) ~ KindOf (Let1627651495UsSym7 l_a163f l_a163g l_a163h l_a163i l_a163j l_a163k arg_a163l) =>
+    Let1627651495UsSym6KindInference
+type instance Apply (Let1627651495UsSym6 l_a163f l_a163g l_a163h l_a163i l_a163j l_a163k) l_a163e = Let1627651495UsSym7 l_a163f l_a163g l_a163h l_a163i l_a163j l_a163k l_a163e
+instance SuppressUnusedWarnings Let1627651495UsSym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495UsSym5KindInference ())
+data Let1627651495UsSym5 l_a1638
+                          l_a1639
+                          l_a163a
+                          l_a163b
+                          l_a163c
+                          l_a1637
+  = forall arg_a163d. KindOf (Apply (Let1627651495UsSym5 l_a1638 l_a1639 l_a163a l_a163b l_a163c) arg_a163d) ~ KindOf (Let1627651495UsSym6 l_a1638 l_a1639 l_a163a l_a163b l_a163c arg_a163d) =>
+    Let1627651495UsSym5KindInference
+type instance Apply (Let1627651495UsSym5 l_a1638 l_a1639 l_a163a l_a163b l_a163c) l_a1637 = Let1627651495UsSym6 l_a1638 l_a1639 l_a163a l_a163b l_a163c l_a1637
+instance SuppressUnusedWarnings Let1627651495UsSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495UsSym4KindInference ())
+data Let1627651495UsSym4 l_a1632 l_a1633 l_a1634 l_a1635 l_a1631
+  = forall arg_a1636. KindOf (Apply (Let1627651495UsSym4 l_a1632 l_a1633 l_a1634 l_a1635) arg_a1636) ~ KindOf (Let1627651495UsSym5 l_a1632 l_a1633 l_a1634 l_a1635 arg_a1636) =>
+    Let1627651495UsSym4KindInference
+type instance Apply (Let1627651495UsSym4 l_a1632 l_a1633 l_a1634 l_a1635) l_a1631 = Let1627651495UsSym5 l_a1632 l_a1633 l_a1634 l_a1635 l_a1631
+instance SuppressUnusedWarnings Let1627651495UsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495UsSym3KindInference ())
+data Let1627651495UsSym3 l_a162X l_a162Y l_a162Z l_a162W
+  = forall arg_a1630. KindOf (Apply (Let1627651495UsSym3 l_a162X l_a162Y l_a162Z) arg_a1630) ~ KindOf (Let1627651495UsSym4 l_a162X l_a162Y l_a162Z arg_a1630) =>
+    Let1627651495UsSym3KindInference
+type instance Apply (Let1627651495UsSym3 l_a162X l_a162Y l_a162Z) l_a162W = Let1627651495UsSym4 l_a162X l_a162Y l_a162Z l_a162W
+instance SuppressUnusedWarnings Let1627651495UsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495UsSym2KindInference ())
+data Let1627651495UsSym2 l_a162T l_a162U l_a162S
+  = forall arg_a162V. KindOf (Apply (Let1627651495UsSym2 l_a162T l_a162U) arg_a162V) ~ KindOf (Let1627651495UsSym3 l_a162T l_a162U arg_a162V) =>
+    Let1627651495UsSym2KindInference
+type instance Apply (Let1627651495UsSym2 l_a162T l_a162U) l_a162S = Let1627651495UsSym3 l_a162T l_a162U l_a162S
+instance SuppressUnusedWarnings Let1627651495UsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495UsSym1KindInference ())
+data Let1627651495UsSym1 l_a162Q l_a162P
+  = forall arg_a162R. KindOf (Apply (Let1627651495UsSym1 l_a162Q) arg_a162R) ~ KindOf (Let1627651495UsSym2 l_a162Q arg_a162R) =>
+    Let1627651495UsSym1KindInference
+type instance Apply (Let1627651495UsSym1 l_a162Q) l_a162P = Let1627651495UsSym2 l_a162Q l_a162P
+instance SuppressUnusedWarnings Let1627651495UsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495UsSym0KindInference ())
+data Let1627651495UsSym0 l_a162N
+  = forall arg_a162O. KindOf (Apply Let1627651495UsSym0 arg_a162O) ~ KindOf (Let1627651495UsSym1 arg_a162O) =>
+    Let1627651495UsSym0KindInference
+type instance Apply Let1627651495UsSym0 l_a162N = Let1627651495UsSym1 l_a162N
+type Let1627651495ZsSym8 t_a163C
+                          t_a163D
+                          t_a163E
+                          t_a163F
+                          t_a163G
+                          t_a163H
+                          t_a163I
+                          t_a163J =
+    Let1627651495Zs t_a163C t_a163D t_a163E t_a163F t_a163G t_a163H t_a163I t_a163J
+instance SuppressUnusedWarnings Let1627651495ZsSym7 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495ZsSym7KindInference ())
+data Let1627651495ZsSym7 l_a164k
+                          l_a164l
+                          l_a164m
+                          l_a164n
+                          l_a164o
+                          l_a164p
+                          l_a164q
+                          l_a164j
+  = forall arg_a164r. KindOf (Apply (Let1627651495ZsSym7 l_a164k l_a164l l_a164m l_a164n l_a164o l_a164p l_a164q) arg_a164r) ~ KindOf (Let1627651495ZsSym8 l_a164k l_a164l l_a164m l_a164n l_a164o l_a164p l_a164q arg_a164r) =>
+    Let1627651495ZsSym7KindInference
+type instance Apply (Let1627651495ZsSym7 l_a164k l_a164l l_a164m l_a164n l_a164o l_a164p l_a164q) l_a164j = Let1627651495ZsSym8 l_a164k l_a164l l_a164m l_a164n l_a164o l_a164p l_a164q l_a164j
+instance SuppressUnusedWarnings Let1627651495ZsSym6 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495ZsSym6KindInference ())
+data Let1627651495ZsSym6 l_a164c
+                          l_a164d
+                          l_a164e
+                          l_a164f
+                          l_a164g
+                          l_a164h
+                          l_a164b
+  = forall arg_a164i. KindOf (Apply (Let1627651495ZsSym6 l_a164c l_a164d l_a164e l_a164f l_a164g l_a164h) arg_a164i) ~ KindOf (Let1627651495ZsSym7 l_a164c l_a164d l_a164e l_a164f l_a164g l_a164h arg_a164i) =>
+    Let1627651495ZsSym6KindInference
+type instance Apply (Let1627651495ZsSym6 l_a164c l_a164d l_a164e l_a164f l_a164g l_a164h) l_a164b = Let1627651495ZsSym7 l_a164c l_a164d l_a164e l_a164f l_a164g l_a164h l_a164b
+instance SuppressUnusedWarnings Let1627651495ZsSym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495ZsSym5KindInference ())
+data Let1627651495ZsSym5 l_a1645
+                          l_a1646
+                          l_a1647
+                          l_a1648
+                          l_a1649
+                          l_a1644
+  = forall arg_a164a. KindOf (Apply (Let1627651495ZsSym5 l_a1645 l_a1646 l_a1647 l_a1648 l_a1649) arg_a164a) ~ KindOf (Let1627651495ZsSym6 l_a1645 l_a1646 l_a1647 l_a1648 l_a1649 arg_a164a) =>
+    Let1627651495ZsSym5KindInference
+type instance Apply (Let1627651495ZsSym5 l_a1645 l_a1646 l_a1647 l_a1648 l_a1649) l_a1644 = Let1627651495ZsSym6 l_a1645 l_a1646 l_a1647 l_a1648 l_a1649 l_a1644
+instance SuppressUnusedWarnings Let1627651495ZsSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495ZsSym4KindInference ())
+data Let1627651495ZsSym4 l_a163Z l_a1640 l_a1641 l_a1642 l_a163Y
+  = forall arg_a1643. KindOf (Apply (Let1627651495ZsSym4 l_a163Z l_a1640 l_a1641 l_a1642) arg_a1643) ~ KindOf (Let1627651495ZsSym5 l_a163Z l_a1640 l_a1641 l_a1642 arg_a1643) =>
+    Let1627651495ZsSym4KindInference
+type instance Apply (Let1627651495ZsSym4 l_a163Z l_a1640 l_a1641 l_a1642) l_a163Y = Let1627651495ZsSym5 l_a163Z l_a1640 l_a1641 l_a1642 l_a163Y
+instance SuppressUnusedWarnings Let1627651495ZsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495ZsSym3KindInference ())
+data Let1627651495ZsSym3 l_a163U l_a163V l_a163W l_a163T
+  = forall arg_a163X. KindOf (Apply (Let1627651495ZsSym3 l_a163U l_a163V l_a163W) arg_a163X) ~ KindOf (Let1627651495ZsSym4 l_a163U l_a163V l_a163W arg_a163X) =>
+    Let1627651495ZsSym3KindInference
+type instance Apply (Let1627651495ZsSym3 l_a163U l_a163V l_a163W) l_a163T = Let1627651495ZsSym4 l_a163U l_a163V l_a163W l_a163T
+instance SuppressUnusedWarnings Let1627651495ZsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495ZsSym2KindInference ())
+data Let1627651495ZsSym2 l_a163Q l_a163R l_a163P
+  = forall arg_a163S. KindOf (Apply (Let1627651495ZsSym2 l_a163Q l_a163R) arg_a163S) ~ KindOf (Let1627651495ZsSym3 l_a163Q l_a163R arg_a163S) =>
+    Let1627651495ZsSym2KindInference
+type instance Apply (Let1627651495ZsSym2 l_a163Q l_a163R) l_a163P = Let1627651495ZsSym3 l_a163Q l_a163R l_a163P
+instance SuppressUnusedWarnings Let1627651495ZsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495ZsSym1KindInference ())
+data Let1627651495ZsSym1 l_a163N l_a163M
+  = forall arg_a163O. KindOf (Apply (Let1627651495ZsSym1 l_a163N) arg_a163O) ~ KindOf (Let1627651495ZsSym2 l_a163N arg_a163O) =>
+    Let1627651495ZsSym1KindInference
+type instance Apply (Let1627651495ZsSym1 l_a163N) l_a163M = Let1627651495ZsSym2 l_a163N l_a163M
+instance SuppressUnusedWarnings Let1627651495ZsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495ZsSym0KindInference ())
+data Let1627651495ZsSym0 l_a163K
+  = forall arg_a163L. KindOf (Apply Let1627651495ZsSym0 arg_a163L) ~ KindOf (Let1627651495ZsSym1 arg_a163L) =>
+    Let1627651495ZsSym0KindInference
+type instance Apply Let1627651495ZsSym0 l_a163K = Let1627651495ZsSym1 l_a163K
+type Let1627651495X_1627651496Sym8 t_a164s
+                                    t_a164t
+                                    t_a164u
+                                    t_a164v
+                                    t_a164w
+                                    t_a164x
+                                    t_a164y
+                                    t_a164z =
+    Let1627651495X_1627651496 t_a164s t_a164t t_a164u t_a164v t_a164w t_a164x t_a164y t_a164z
+instance SuppressUnusedWarnings Let1627651495X_1627651496Sym7 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495X_1627651496Sym7KindInference ())
+data Let1627651495X_1627651496Sym7 l_a165a
+                                    l_a165b
+                                    l_a165c
+                                    l_a165d
+                                    l_a165e
+                                    l_a165f
+                                    l_a165g
+                                    l_a1659
+  = forall arg_a165h. KindOf (Apply (Let1627651495X_1627651496Sym7 l_a165a l_a165b l_a165c l_a165d l_a165e l_a165f l_a165g) arg_a165h) ~ KindOf (Let1627651495X_1627651496Sym8 l_a165a l_a165b l_a165c l_a165d l_a165e l_a165f l_a165g arg_a165h) =>
+    Let1627651495X_1627651496Sym7KindInference
+type instance Apply (Let1627651495X_1627651496Sym7 l_a165a l_a165b l_a165c l_a165d l_a165e l_a165f l_a165g) l_a1659 = Let1627651495X_1627651496Sym8 l_a165a l_a165b l_a165c l_a165d l_a165e l_a165f l_a165g l_a1659
+instance SuppressUnusedWarnings Let1627651495X_1627651496Sym6 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495X_1627651496Sym6KindInference ())
+data Let1627651495X_1627651496Sym6 l_a1652
+                                    l_a1653
+                                    l_a1654
+                                    l_a1655
+                                    l_a1656
+                                    l_a1657
+                                    l_a1651
+  = forall arg_a1658. KindOf (Apply (Let1627651495X_1627651496Sym6 l_a1652 l_a1653 l_a1654 l_a1655 l_a1656 l_a1657) arg_a1658) ~ KindOf (Let1627651495X_1627651496Sym7 l_a1652 l_a1653 l_a1654 l_a1655 l_a1656 l_a1657 arg_a1658) =>
+    Let1627651495X_1627651496Sym6KindInference
+type instance Apply (Let1627651495X_1627651496Sym6 l_a1652 l_a1653 l_a1654 l_a1655 l_a1656 l_a1657) l_a1651 = Let1627651495X_1627651496Sym7 l_a1652 l_a1653 l_a1654 l_a1655 l_a1656 l_a1657 l_a1651
+instance SuppressUnusedWarnings Let1627651495X_1627651496Sym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495X_1627651496Sym5KindInference ())
+data Let1627651495X_1627651496Sym5 l_a164V
+                                    l_a164W
+                                    l_a164X
+                                    l_a164Y
+                                    l_a164Z
+                                    l_a164U
+  = forall arg_a1650. KindOf (Apply (Let1627651495X_1627651496Sym5 l_a164V l_a164W l_a164X l_a164Y l_a164Z) arg_a1650) ~ KindOf (Let1627651495X_1627651496Sym6 l_a164V l_a164W l_a164X l_a164Y l_a164Z arg_a1650) =>
+    Let1627651495X_1627651496Sym5KindInference
+type instance Apply (Let1627651495X_1627651496Sym5 l_a164V l_a164W l_a164X l_a164Y l_a164Z) l_a164U = Let1627651495X_1627651496Sym6 l_a164V l_a164W l_a164X l_a164Y l_a164Z l_a164U
+instance SuppressUnusedWarnings Let1627651495X_1627651496Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495X_1627651496Sym4KindInference ())
+data Let1627651495X_1627651496Sym4 l_a164P
+                                    l_a164Q
+                                    l_a164R
+                                    l_a164S
+                                    l_a164O
+  = forall arg_a164T. KindOf (Apply (Let1627651495X_1627651496Sym4 l_a164P l_a164Q l_a164R l_a164S) arg_a164T) ~ KindOf (Let1627651495X_1627651496Sym5 l_a164P l_a164Q l_a164R l_a164S arg_a164T) =>
+    Let1627651495X_1627651496Sym4KindInference
+type instance Apply (Let1627651495X_1627651496Sym4 l_a164P l_a164Q l_a164R l_a164S) l_a164O = Let1627651495X_1627651496Sym5 l_a164P l_a164Q l_a164R l_a164S l_a164O
+instance SuppressUnusedWarnings Let1627651495X_1627651496Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495X_1627651496Sym3KindInference ())
+data Let1627651495X_1627651496Sym3 l_a164K l_a164L l_a164M l_a164J
+  = forall arg_a164N. KindOf (Apply (Let1627651495X_1627651496Sym3 l_a164K l_a164L l_a164M) arg_a164N) ~ KindOf (Let1627651495X_1627651496Sym4 l_a164K l_a164L l_a164M arg_a164N) =>
+    Let1627651495X_1627651496Sym3KindInference
+type instance Apply (Let1627651495X_1627651496Sym3 l_a164K l_a164L l_a164M) l_a164J = Let1627651495X_1627651496Sym4 l_a164K l_a164L l_a164M l_a164J
+instance SuppressUnusedWarnings Let1627651495X_1627651496Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495X_1627651496Sym2KindInference ())
+data Let1627651495X_1627651496Sym2 l_a164G l_a164H l_a164F
+  = forall arg_a164I. KindOf (Apply (Let1627651495X_1627651496Sym2 l_a164G l_a164H) arg_a164I) ~ KindOf (Let1627651495X_1627651496Sym3 l_a164G l_a164H arg_a164I) =>
+    Let1627651495X_1627651496Sym2KindInference
+type instance Apply (Let1627651495X_1627651496Sym2 l_a164G l_a164H) l_a164F = Let1627651495X_1627651496Sym3 l_a164G l_a164H l_a164F
+instance SuppressUnusedWarnings Let1627651495X_1627651496Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495X_1627651496Sym1KindInference ())
+data Let1627651495X_1627651496Sym1 l_a164D l_a164C
+  = forall arg_a164E. KindOf (Apply (Let1627651495X_1627651496Sym1 l_a164D) arg_a164E) ~ KindOf (Let1627651495X_1627651496Sym2 l_a164D arg_a164E) =>
+    Let1627651495X_1627651496Sym1KindInference
+type instance Apply (Let1627651495X_1627651496Sym1 l_a164D) l_a164C = Let1627651495X_1627651496Sym2 l_a164D l_a164C
+instance SuppressUnusedWarnings Let1627651495X_1627651496Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651495X_1627651496Sym0KindInference ())
+data Let1627651495X_1627651496Sym0 l_a164A
+  = forall arg_a164B. KindOf (Apply Let1627651495X_1627651496Sym0 arg_a164B) ~ KindOf (Let1627651495X_1627651496Sym1 arg_a164B) =>
+    Let1627651495X_1627651496Sym0KindInference
+type instance Apply Let1627651495X_1627651496Sym0 l_a164A = Let1627651495X_1627651496Sym1 l_a164A
+type family Let1627651495Us xs0_a161d
+                            t_a161w
+                            ts_a161x
+                            is_a161y
+                            f_a162n
+                            y_a162o
+                            ys_a162p
+                            r_a162q where
+  Let1627651495Us xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q = Case_1627651502_a162z xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q (Let1627651495X_1627651496Sym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q)
+type family Let1627651495Zs xs0_a161d
+                            t_a161w
+                            ts_a161x
+                            is_a161y
+                            f_a162n
+                            y_a162o
+                            ys_a162p
+                            r_a162q where
+  Let1627651495Zs xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q = Case_1627651561_a163w xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q (Let1627651495X_1627651496Sym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q)
+type family Let1627651495X_1627651496 xs0_a161d
+                                      t_a161w
+                                      ts_a161x
+                                      is_a161y
+                                      f_a162n
+                                      y_a162o
+                                      ys_a162p
+                                      r_a162q where
+  Let1627651495X_1627651496 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q = Apply (Apply (Apply (Let1627651441Interleave'Sym4 xs0_a161d t_a161w ts_a161x is_a161y) (Apply (Apply (:.$) f_a162n) (Apply (:$) y_a162o))) ys_a162p) r_a162q
+type family Case_1627651714_a165Z xs0_a161d
+                                  t_a161w
+                                  ts_a161x
+                                  is_a161y
+                                  xs_a165R
+                                  r_a165S
+                                  t_a1664 where
+  Case_1627651714_a165Z xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S '(_z_1627651716_a1662,
+                                                                                y_1627651712_a1663) = y_1627651712_a1663
+type Let1627651709ZsSym6 t_a1665
+                          t_a1666
+                          t_a1667
+                          t_a1668
+                          t_a1669
+                          t_a166a =
+    Let1627651709Zs t_a1665 t_a1666 t_a1667 t_a1668 t_a1669 t_a166a
+instance SuppressUnusedWarnings Let1627651709ZsSym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709ZsSym5KindInference ())
+data Let1627651709ZsSym5 l_a166w
+                          l_a166x
+                          l_a166y
+                          l_a166z
+                          l_a166A
+                          l_a166v
+  = forall arg_a166B. KindOf (Apply (Let1627651709ZsSym5 l_a166w l_a166x l_a166y l_a166z l_a166A) arg_a166B) ~ KindOf (Let1627651709ZsSym6 l_a166w l_a166x l_a166y l_a166z l_a166A arg_a166B) =>
+    Let1627651709ZsSym5KindInference
+type instance Apply (Let1627651709ZsSym5 l_a166w l_a166x l_a166y l_a166z l_a166A) l_a166v = Let1627651709ZsSym6 l_a166w l_a166x l_a166y l_a166z l_a166A l_a166v
+instance SuppressUnusedWarnings Let1627651709ZsSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709ZsSym4KindInference ())
+data Let1627651709ZsSym4 l_a166q l_a166r l_a166s l_a166t l_a166p
+  = forall arg_a166u. KindOf (Apply (Let1627651709ZsSym4 l_a166q l_a166r l_a166s l_a166t) arg_a166u) ~ KindOf (Let1627651709ZsSym5 l_a166q l_a166r l_a166s l_a166t arg_a166u) =>
+    Let1627651709ZsSym4KindInference
+type instance Apply (Let1627651709ZsSym4 l_a166q l_a166r l_a166s l_a166t) l_a166p = Let1627651709ZsSym5 l_a166q l_a166r l_a166s l_a166t l_a166p
+instance SuppressUnusedWarnings Let1627651709ZsSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709ZsSym3KindInference ())
+data Let1627651709ZsSym3 l_a166l l_a166m l_a166n l_a166k
+  = forall arg_a166o. KindOf (Apply (Let1627651709ZsSym3 l_a166l l_a166m l_a166n) arg_a166o) ~ KindOf (Let1627651709ZsSym4 l_a166l l_a166m l_a166n arg_a166o) =>
+    Let1627651709ZsSym3KindInference
+type instance Apply (Let1627651709ZsSym3 l_a166l l_a166m l_a166n) l_a166k = Let1627651709ZsSym4 l_a166l l_a166m l_a166n l_a166k
+instance SuppressUnusedWarnings Let1627651709ZsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709ZsSym2KindInference ())
+data Let1627651709ZsSym2 l_a166h l_a166i l_a166g
+  = forall arg_a166j. KindOf (Apply (Let1627651709ZsSym2 l_a166h l_a166i) arg_a166j) ~ KindOf (Let1627651709ZsSym3 l_a166h l_a166i arg_a166j) =>
+    Let1627651709ZsSym2KindInference
+type instance Apply (Let1627651709ZsSym2 l_a166h l_a166i) l_a166g = Let1627651709ZsSym3 l_a166h l_a166i l_a166g
+instance SuppressUnusedWarnings Let1627651709ZsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709ZsSym1KindInference ())
+data Let1627651709ZsSym1 l_a166e l_a166d
+  = forall arg_a166f. KindOf (Apply (Let1627651709ZsSym1 l_a166e) arg_a166f) ~ KindOf (Let1627651709ZsSym2 l_a166e arg_a166f) =>
+    Let1627651709ZsSym1KindInference
+type instance Apply (Let1627651709ZsSym1 l_a166e) l_a166d = Let1627651709ZsSym2 l_a166e l_a166d
+instance SuppressUnusedWarnings Let1627651709ZsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709ZsSym0KindInference ())
+data Let1627651709ZsSym0 l_a166b
+  = forall arg_a166c. KindOf (Apply Let1627651709ZsSym0 arg_a166c) ~ KindOf (Let1627651709ZsSym1 arg_a166c) =>
+    Let1627651709ZsSym0KindInference
+type instance Apply Let1627651709ZsSym0 l_a166b = Let1627651709ZsSym1 l_a166b
+type Let1627651709X_1627651710Sym6 t_a166C
+                                    t_a166D
+                                    t_a166E
+                                    t_a166F
+                                    t_a166G
+                                    t_a166H =
+    Let1627651709X_1627651710 t_a166C t_a166D t_a166E t_a166F t_a166G t_a166H
+instance SuppressUnusedWarnings Let1627651709X_1627651710Sym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709X_1627651710Sym5KindInference ())
+data Let1627651709X_1627651710Sym5 l_a1673
+                                    l_a1674
+                                    l_a1675
+                                    l_a1676
+                                    l_a1677
+                                    l_a1672
+  = forall arg_a1678. KindOf (Apply (Let1627651709X_1627651710Sym5 l_a1673 l_a1674 l_a1675 l_a1676 l_a1677) arg_a1678) ~ KindOf (Let1627651709X_1627651710Sym6 l_a1673 l_a1674 l_a1675 l_a1676 l_a1677 arg_a1678) =>
+    Let1627651709X_1627651710Sym5KindInference
+type instance Apply (Let1627651709X_1627651710Sym5 l_a1673 l_a1674 l_a1675 l_a1676 l_a1677) l_a1672 = Let1627651709X_1627651710Sym6 l_a1673 l_a1674 l_a1675 l_a1676 l_a1677 l_a1672
+instance SuppressUnusedWarnings Let1627651709X_1627651710Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709X_1627651710Sym4KindInference ())
+data Let1627651709X_1627651710Sym4 l_a166X
+                                    l_a166Y
+                                    l_a166Z
+                                    l_a1670
+                                    l_a166W
+  = forall arg_a1671. KindOf (Apply (Let1627651709X_1627651710Sym4 l_a166X l_a166Y l_a166Z l_a1670) arg_a1671) ~ KindOf (Let1627651709X_1627651710Sym5 l_a166X l_a166Y l_a166Z l_a1670 arg_a1671) =>
+    Let1627651709X_1627651710Sym4KindInference
+type instance Apply (Let1627651709X_1627651710Sym4 l_a166X l_a166Y l_a166Z l_a1670) l_a166W = Let1627651709X_1627651710Sym5 l_a166X l_a166Y l_a166Z l_a1670 l_a166W
+instance SuppressUnusedWarnings Let1627651709X_1627651710Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709X_1627651710Sym3KindInference ())
+data Let1627651709X_1627651710Sym3 l_a166S l_a166T l_a166U l_a166R
+  = forall arg_a166V. KindOf (Apply (Let1627651709X_1627651710Sym3 l_a166S l_a166T l_a166U) arg_a166V) ~ KindOf (Let1627651709X_1627651710Sym4 l_a166S l_a166T l_a166U arg_a166V) =>
+    Let1627651709X_1627651710Sym3KindInference
+type instance Apply (Let1627651709X_1627651710Sym3 l_a166S l_a166T l_a166U) l_a166R = Let1627651709X_1627651710Sym4 l_a166S l_a166T l_a166U l_a166R
+instance SuppressUnusedWarnings Let1627651709X_1627651710Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709X_1627651710Sym2KindInference ())
+data Let1627651709X_1627651710Sym2 l_a166O l_a166P l_a166N
+  = forall arg_a166Q. KindOf (Apply (Let1627651709X_1627651710Sym2 l_a166O l_a166P) arg_a166Q) ~ KindOf (Let1627651709X_1627651710Sym3 l_a166O l_a166P arg_a166Q) =>
+    Let1627651709X_1627651710Sym2KindInference
+type instance Apply (Let1627651709X_1627651710Sym2 l_a166O l_a166P) l_a166N = Let1627651709X_1627651710Sym3 l_a166O l_a166P l_a166N
+instance SuppressUnusedWarnings Let1627651709X_1627651710Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709X_1627651710Sym1KindInference ())
+data Let1627651709X_1627651710Sym1 l_a166L l_a166K
+  = forall arg_a166M. KindOf (Apply (Let1627651709X_1627651710Sym1 l_a166L) arg_a166M) ~ KindOf (Let1627651709X_1627651710Sym2 l_a166L arg_a166M) =>
+    Let1627651709X_1627651710Sym1KindInference
+type instance Apply (Let1627651709X_1627651710Sym1 l_a166L) l_a166K = Let1627651709X_1627651710Sym2 l_a166L l_a166K
+instance SuppressUnusedWarnings Let1627651709X_1627651710Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651709X_1627651710Sym0KindInference ())
+data Let1627651709X_1627651710Sym0 l_a166I
+  = forall arg_a166J. KindOf (Apply Let1627651709X_1627651710Sym0 arg_a166J) ~ KindOf (Let1627651709X_1627651710Sym1 arg_a166J) =>
+    Let1627651709X_1627651710Sym0KindInference
+type instance Apply Let1627651709X_1627651710Sym0 l_a166I = Let1627651709X_1627651710Sym1 l_a166I
+type family Let1627651709Zs xs0_a161d
+                            t_a161w
+                            ts_a161x
+                            is_a161y
+                            xs_a165R
+                            r_a165S where
+  Let1627651709Zs xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S = Case_1627651714_a165Z xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S (Let1627651709X_1627651710Sym6 xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S)
+type family Let1627651709X_1627651710 xs0_a161d
+                                      t_a161w
+                                      ts_a161x
+                                      is_a161y
+                                      xs_a165R
+                                      r_a165S where
+  Let1627651709X_1627651710 xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S = Apply (Apply (Apply (Let1627651441Interleave'Sym4 xs0_a161d t_a161w ts_a161x is_a161y) IdSym0) xs_a165R) r_a165S
+type Let1627651441Interleave'Sym7 t_a161A
+                                  t_a161B
+                                  t_a161C
+                                  t_a161D
+                                  t_a161E
+                                  t_a161F
+                                  t_a161G =
+    Let1627651441Interleave' t_a161A t_a161B t_a161C t_a161D t_a161E t_a161F t_a161G
+instance SuppressUnusedWarnings Let1627651441Interleave'Sym6 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441Interleave'Sym6KindInference ())
+data Let1627651441Interleave'Sym6 l_a1629
+                                  l_a162a
+                                  l_a162b
+                                  l_a162c
+                                  l_a162d
+                                  l_a162e
+                                  l_a1628
+  = forall arg_a162f. KindOf (Apply (Let1627651441Interleave'Sym6 l_a1629 l_a162a l_a162b l_a162c l_a162d l_a162e) arg_a162f) ~ KindOf (Let1627651441Interleave'Sym7 l_a1629 l_a162a l_a162b l_a162c l_a162d l_a162e arg_a162f) =>
+    Let1627651441Interleave'Sym6KindInference
+type instance Apply (Let1627651441Interleave'Sym6 l_a1629 l_a162a l_a162b l_a162c l_a162d l_a162e) l_a1628 = Let1627651441Interleave'Sym7 l_a1629 l_a162a l_a162b l_a162c l_a162d l_a162e l_a1628
+instance SuppressUnusedWarnings Let1627651441Interleave'Sym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441Interleave'Sym5KindInference ())
+data Let1627651441Interleave'Sym5 l_a1622
+                                  l_a1623
+                                  l_a1624
+                                  l_a1625
+                                  l_a1626
+                                  l_a1621
+  = forall arg_a1627. KindOf (Apply (Let1627651441Interleave'Sym5 l_a1622 l_a1623 l_a1624 l_a1625 l_a1626) arg_a1627) ~ KindOf (Let1627651441Interleave'Sym6 l_a1622 l_a1623 l_a1624 l_a1625 l_a1626 arg_a1627) =>
+    Let1627651441Interleave'Sym5KindInference
+type instance Apply (Let1627651441Interleave'Sym5 l_a1622 l_a1623 l_a1624 l_a1625 l_a1626) l_a1621 = Let1627651441Interleave'Sym6 l_a1622 l_a1623 l_a1624 l_a1625 l_a1626 l_a1621
+instance SuppressUnusedWarnings Let1627651441Interleave'Sym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441Interleave'Sym4KindInference ())
+data Let1627651441Interleave'Sym4 l_a161W
+                                  l_a161X
+                                  l_a161Y
+                                  l_a161Z
+                                  l_a161V
+  = forall arg_a1620. KindOf (Apply (Let1627651441Interleave'Sym4 l_a161W l_a161X l_a161Y l_a161Z) arg_a1620) ~ KindOf (Let1627651441Interleave'Sym5 l_a161W l_a161X l_a161Y l_a161Z arg_a1620) =>
+    Let1627651441Interleave'Sym4KindInference
+type instance Apply (Let1627651441Interleave'Sym4 l_a161W l_a161X l_a161Y l_a161Z) l_a161V = Let1627651441Interleave'Sym5 l_a161W l_a161X l_a161Y l_a161Z l_a161V
+instance SuppressUnusedWarnings Let1627651441Interleave'Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441Interleave'Sym3KindInference ())
+data Let1627651441Interleave'Sym3 l_a161R l_a161S l_a161T l_a161Q
+  = forall arg_a161U. KindOf (Apply (Let1627651441Interleave'Sym3 l_a161R l_a161S l_a161T) arg_a161U) ~ KindOf (Let1627651441Interleave'Sym4 l_a161R l_a161S l_a161T arg_a161U) =>
+    Let1627651441Interleave'Sym3KindInference
+type instance Apply (Let1627651441Interleave'Sym3 l_a161R l_a161S l_a161T) l_a161Q = Let1627651441Interleave'Sym4 l_a161R l_a161S l_a161T l_a161Q
+instance SuppressUnusedWarnings Let1627651441Interleave'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441Interleave'Sym2KindInference ())
+data Let1627651441Interleave'Sym2 l_a161N l_a161O l_a161M
+  = forall arg_a161P. KindOf (Apply (Let1627651441Interleave'Sym2 l_a161N l_a161O) arg_a161P) ~ KindOf (Let1627651441Interleave'Sym3 l_a161N l_a161O arg_a161P) =>
+    Let1627651441Interleave'Sym2KindInference
+type instance Apply (Let1627651441Interleave'Sym2 l_a161N l_a161O) l_a161M = Let1627651441Interleave'Sym3 l_a161N l_a161O l_a161M
+instance SuppressUnusedWarnings Let1627651441Interleave'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441Interleave'Sym1KindInference ())
+data Let1627651441Interleave'Sym1 l_a161K l_a161J
+  = forall arg_a161L. KindOf (Apply (Let1627651441Interleave'Sym1 l_a161K) arg_a161L) ~ KindOf (Let1627651441Interleave'Sym2 l_a161K arg_a161L) =>
+    Let1627651441Interleave'Sym1KindInference
+type instance Apply (Let1627651441Interleave'Sym1 l_a161K) l_a161J = Let1627651441Interleave'Sym2 l_a161K l_a161J
+instance SuppressUnusedWarnings Let1627651441Interleave'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441Interleave'Sym0KindInference ())
+data Let1627651441Interleave'Sym0 l_a161H
+  = forall arg_a161I. KindOf (Apply Let1627651441Interleave'Sym0 arg_a161I) ~ KindOf (Let1627651441Interleave'Sym1 arg_a161I) =>
+    Let1627651441Interleave'Sym0KindInference
+type instance Apply Let1627651441Interleave'Sym0 l_a161H = Let1627651441Interleave'Sym1 l_a161H
+type Let1627651441InterleaveSym6 t_a165i
+                                  t_a165j
+                                  t_a165k
+                                  t_a165l
+                                  t_a165m
+                                  t_a165n =
+    Let1627651441Interleave t_a165i t_a165j t_a165k t_a165l t_a165m t_a165n
+instance SuppressUnusedWarnings Let1627651441InterleaveSym5 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441InterleaveSym5KindInference ())
+data Let1627651441InterleaveSym5 l_a165J
+                                  l_a165K
+                                  l_a165L
+                                  l_a165M
+                                  l_a165N
+                                  l_a165I
+  = forall arg_a165O. KindOf (Apply (Let1627651441InterleaveSym5 l_a165J l_a165K l_a165L l_a165M l_a165N) arg_a165O) ~ KindOf (Let1627651441InterleaveSym6 l_a165J l_a165K l_a165L l_a165M l_a165N arg_a165O) =>
+    Let1627651441InterleaveSym5KindInference
+type instance Apply (Let1627651441InterleaveSym5 l_a165J l_a165K l_a165L l_a165M l_a165N) l_a165I = Let1627651441InterleaveSym6 l_a165J l_a165K l_a165L l_a165M l_a165N l_a165I
+instance SuppressUnusedWarnings Let1627651441InterleaveSym4 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441InterleaveSym4KindInference ())
+data Let1627651441InterleaveSym4 l_a165D
+                                  l_a165E
+                                  l_a165F
+                                  l_a165G
+                                  l_a165C
+  = forall arg_a165H. KindOf (Apply (Let1627651441InterleaveSym4 l_a165D l_a165E l_a165F l_a165G) arg_a165H) ~ KindOf (Let1627651441InterleaveSym5 l_a165D l_a165E l_a165F l_a165G arg_a165H) =>
+    Let1627651441InterleaveSym4KindInference
+type instance Apply (Let1627651441InterleaveSym4 l_a165D l_a165E l_a165F l_a165G) l_a165C = Let1627651441InterleaveSym5 l_a165D l_a165E l_a165F l_a165G l_a165C
+instance SuppressUnusedWarnings Let1627651441InterleaveSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441InterleaveSym3KindInference ())
+data Let1627651441InterleaveSym3 l_a165y l_a165z l_a165A l_a165x
+  = forall arg_a165B. KindOf (Apply (Let1627651441InterleaveSym3 l_a165y l_a165z l_a165A) arg_a165B) ~ KindOf (Let1627651441InterleaveSym4 l_a165y l_a165z l_a165A arg_a165B) =>
+    Let1627651441InterleaveSym3KindInference
+type instance Apply (Let1627651441InterleaveSym3 l_a165y l_a165z l_a165A) l_a165x = Let1627651441InterleaveSym4 l_a165y l_a165z l_a165A l_a165x
+instance SuppressUnusedWarnings Let1627651441InterleaveSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441InterleaveSym2KindInference ())
+data Let1627651441InterleaveSym2 l_a165u l_a165v l_a165t
+  = forall arg_a165w. KindOf (Apply (Let1627651441InterleaveSym2 l_a165u l_a165v) arg_a165w) ~ KindOf (Let1627651441InterleaveSym3 l_a165u l_a165v arg_a165w) =>
+    Let1627651441InterleaveSym2KindInference
+type instance Apply (Let1627651441InterleaveSym2 l_a165u l_a165v) l_a165t = Let1627651441InterleaveSym3 l_a165u l_a165v l_a165t
+instance SuppressUnusedWarnings Let1627651441InterleaveSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441InterleaveSym1KindInference ())
+data Let1627651441InterleaveSym1 l_a165r l_a165q
+  = forall arg_a165s. KindOf (Apply (Let1627651441InterleaveSym1 l_a165r) arg_a165s) ~ KindOf (Let1627651441InterleaveSym2 l_a165r arg_a165s) =>
+    Let1627651441InterleaveSym1KindInference
+type instance Apply (Let1627651441InterleaveSym1 l_a165r) l_a165q = Let1627651441InterleaveSym2 l_a165r l_a165q
+instance SuppressUnusedWarnings Let1627651441InterleaveSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651441InterleaveSym0KindInference ())
+data Let1627651441InterleaveSym0 l_a165o
+  = forall arg_a165p. KindOf (Apply Let1627651441InterleaveSym0 arg_a165p) ~ KindOf (Let1627651441InterleaveSym1 arg_a165p) =>
+    Let1627651441InterleaveSym0KindInference
+type instance Apply Let1627651441InterleaveSym0 l_a165o = Let1627651441InterleaveSym1 l_a165o
+type family Let1627651441Interleave' xs0_a161d
+                                      t_a161w
+                                      ts_a161x
+                                      is_a161y
+                                      a_a162g
+                                      a_a162h
+                                      a_a162i where
+  Let1627651441Interleave' xs0_a161d t_a161w ts_a161x is_a161y _z_1627651487_a162l '[] r_a162m = Apply (Apply Tuple2Sym0 ts_a161x) r_a162m
+  Let1627651441Interleave' xs0_a161d t_a161w ts_a161x is_a161y f_a162n (y_a162o ': ys_a162p) r_a162q = Apply (Apply Tuple2Sym0 (Apply (Apply (:$) y_a162o) (Let1627651495UsSym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q))) (Apply (Apply (:$) (Apply f_a162n (Apply (Apply (:$) t_a161w) (Apply (Apply (:$) y_a162o) (Let1627651495UsSym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q))))) (Let1627651495ZsSym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q))
+type family Let1627651441Interleave xs0_a161d
+                                    t_a161w
+                                    ts_a161x
+                                    is_a161y
+                                    a_a165P
+                                    a_a165Q where
+  Let1627651441Interleave xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S = Let1627651709ZsSym6 xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S
+type Let1627651420PermsSym3 t_a161f t_a161g t_a161h =
+    Let1627651420Perms t_a161f t_a161g t_a161h
+instance SuppressUnusedWarnings Let1627651420PermsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651420PermsSym2KindInference ())
+data Let1627651420PermsSym2 l_a161o l_a161p l_a161n
+  = forall arg_a161q. KindOf (Apply (Let1627651420PermsSym2 l_a161o l_a161p) arg_a161q) ~ KindOf (Let1627651420PermsSym3 l_a161o l_a161p arg_a161q) =>
+    Let1627651420PermsSym2KindInference
+type instance Apply (Let1627651420PermsSym2 l_a161o l_a161p) l_a161n = Let1627651420PermsSym3 l_a161o l_a161p l_a161n
+instance SuppressUnusedWarnings Let1627651420PermsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651420PermsSym1KindInference ())
+data Let1627651420PermsSym1 l_a161l l_a161k
+  = forall arg_a161m. KindOf (Apply (Let1627651420PermsSym1 l_a161l) arg_a161m) ~ KindOf (Let1627651420PermsSym2 l_a161l arg_a161m) =>
+    Let1627651420PermsSym1KindInference
+type instance Apply (Let1627651420PermsSym1 l_a161l) l_a161k = Let1627651420PermsSym2 l_a161l l_a161k
+instance SuppressUnusedWarnings Let1627651420PermsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651420PermsSym0KindInference ())
+data Let1627651420PermsSym0 l_a161i
+  = forall arg_a161j. KindOf (Apply Let1627651420PermsSym0 arg_a161j) ~ KindOf (Let1627651420PermsSym1 arg_a161j) =>
+    Let1627651420PermsSym0KindInference
+type instance Apply Let1627651420PermsSym0 l_a161i = Let1627651420PermsSym1 l_a161i
+type family Let1627651420Perms xs0_a161d a_a161r a_a161s where
+  Let1627651420Perms xs0_a161d '[] _z_1627651435_a161v = '[]
+  Let1627651420Perms xs0_a161d (t_a161w ': ts_a161x) is_a161y = Apply (Apply (Apply FoldrSym0 (Let1627651441InterleaveSym4 xs0_a161d t_a161w ts_a161x is_a161y)) (Apply (Apply (Let1627651420PermsSym1 xs0_a161d) ts_a161x) (Apply (Apply (:$) t_a161w) is_a161y))) (Apply PermutationsSym0 is_a161y)
+type Let1627651808FSym4 t_a167v t_a167w t_a167x t_a167y =
+    Let1627651808F t_a167v t_a167w t_a167x t_a167y
+instance SuppressUnusedWarnings Let1627651808FSym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651808FSym3KindInference ())
+data Let1627651808FSym3 l_a167J l_a167K l_a167L l_a167I
+  = forall arg_a167M. KindOf (Apply (Let1627651808FSym3 l_a167J l_a167K l_a167L) arg_a167M) ~ KindOf (Let1627651808FSym4 l_a167J l_a167K l_a167L arg_a167M) =>
+    Let1627651808FSym3KindInference
+type instance Apply (Let1627651808FSym3 l_a167J l_a167K l_a167L) l_a167I = Let1627651808FSym4 l_a167J l_a167K l_a167L l_a167I
+instance SuppressUnusedWarnings Let1627651808FSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651808FSym2KindInference ())
+data Let1627651808FSym2 l_a167F l_a167G l_a167E
+  = forall arg_a167H. KindOf (Apply (Let1627651808FSym2 l_a167F l_a167G) arg_a167H) ~ KindOf (Let1627651808FSym3 l_a167F l_a167G arg_a167H) =>
+    Let1627651808FSym2KindInference
+type instance Apply (Let1627651808FSym2 l_a167F l_a167G) l_a167E = Let1627651808FSym3 l_a167F l_a167G l_a167E
+instance SuppressUnusedWarnings Let1627651808FSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651808FSym1KindInference ())
+data Let1627651808FSym1 l_a167C l_a167B
+  = forall arg_a167D. KindOf (Apply (Let1627651808FSym1 l_a167C) arg_a167D) ~ KindOf (Let1627651808FSym2 l_a167C arg_a167D) =>
+    Let1627651808FSym1KindInference
+type instance Apply (Let1627651808FSym1 l_a167C) l_a167B = Let1627651808FSym2 l_a167C l_a167B
+instance SuppressUnusedWarnings Let1627651808FSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651808FSym0KindInference ())
+data Let1627651808FSym0 l_a167z
+  = forall arg_a167A. KindOf (Apply Let1627651808FSym0 arg_a167A) ~ KindOf (Let1627651808FSym1 arg_a167A) =>
+    Let1627651808FSym0KindInference
+type instance Apply Let1627651808FSym0 l_a167z = Let1627651808FSym1 l_a167z
+type family Let1627651808F x_a167s xs_a167t a_a167N a_a167O where
+  Let1627651808F x_a167s xs_a167t ys_a167P r_a167Q = Apply (Apply (:$) ys_a167P) (Apply (Apply (:$) (Apply (Apply (:$) x_a167s) ys_a167P)) r_a167Q)
+type Let1627651867RevSym3 t_a168s
+                          (t_a168t :: [a_a158B])
+                          (t_a168u :: [a_a158B]) =
+    Let1627651867Rev t_a168s t_a168t t_a168u
+instance SuppressUnusedWarnings Let1627651867RevSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651867RevSym2KindInference ())
+data Let1627651867RevSym2 l_a168B
+                          (l_a168C :: [a_a158B])
+                          (l_a168A :: TyFun [a_a158B] [a_a158B])
+  = forall arg_a168D. KindOf (Apply (Let1627651867RevSym2 l_a168B l_a168C) arg_a168D) ~ KindOf (Let1627651867RevSym3 l_a168B l_a168C arg_a168D) =>
+    Let1627651867RevSym2KindInference
+type instance Apply (Let1627651867RevSym2 l_a168B l_a168C) l_a168A = Let1627651867RevSym3 l_a168B l_a168C l_a168A
+instance SuppressUnusedWarnings Let1627651867RevSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651867RevSym1KindInference ())
+data Let1627651867RevSym1 l_a168y
+                          (l_a168x :: TyFun [a_a158B] (TyFun [a_a158B] [a_a158B] -> *))
+  = forall arg_a168z. KindOf (Apply (Let1627651867RevSym1 l_a168y) arg_a168z) ~ KindOf (Let1627651867RevSym2 l_a168y arg_a168z) =>
+    Let1627651867RevSym1KindInference
+type instance Apply (Let1627651867RevSym1 l_a168y) l_a168x = Let1627651867RevSym2 l_a168y l_a168x
+instance SuppressUnusedWarnings Let1627651867RevSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651867RevSym0KindInference ())
+data Let1627651867RevSym0 l_a168v
+  = forall arg_a168w. KindOf (Apply Let1627651867RevSym0 arg_a168w) ~ KindOf (Let1627651867RevSym1 arg_a168w) =>
+    Let1627651867RevSym0KindInference
+type instance Apply Let1627651867RevSym0 l_a168v = Let1627651867RevSym1 l_a168v
+type family Let1627651867Rev l_a168q
+                              (a_a168E :: [a_a158B])
+                              (a_a168F :: [a_a158B]) :: [a_a158B] where
+  Let1627651867Rev l_a168q '[] a_a168G = a_a168G
+  Let1627651867Rev l_a168q (x_a168H ': xs_a168I) a_a168J = Apply (Apply (Let1627651867RevSym1 l_a168q) xs_a168I) (Apply (Apply (:$) x_a168H) a_a168J)
+type Let1627651924Scrutinee_1627648562Sym4 t_a169n
+                                            t_a169o
+                                            t_a169p
+                                            t_a169q =
+    Let1627651924Scrutinee_1627648562 t_a169n t_a169o t_a169p t_a169q
+instance SuppressUnusedWarnings Let1627651924Scrutinee_1627648562Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651924Scrutinee_1627648562Sym3KindInference ())
+data Let1627651924Scrutinee_1627648562Sym3 l_a169B
+                                            l_a169C
+                                            l_a169D
+                                            l_a169A
+  = forall arg_a169E. KindOf (Apply (Let1627651924Scrutinee_1627648562Sym3 l_a169B l_a169C l_a169D) arg_a169E) ~ KindOf (Let1627651924Scrutinee_1627648562Sym4 l_a169B l_a169C l_a169D arg_a169E) =>
+    Let1627651924Scrutinee_1627648562Sym3KindInference
+type instance Apply (Let1627651924Scrutinee_1627648562Sym3 l_a169B l_a169C l_a169D) l_a169A = Let1627651924Scrutinee_1627648562Sym4 l_a169B l_a169C l_a169D l_a169A
+instance SuppressUnusedWarnings Let1627651924Scrutinee_1627648562Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651924Scrutinee_1627648562Sym2KindInference ())
+data Let1627651924Scrutinee_1627648562Sym2 l_a169x l_a169y l_a169w
+  = forall arg_a169z. KindOf (Apply (Let1627651924Scrutinee_1627648562Sym2 l_a169x l_a169y) arg_a169z) ~ KindOf (Let1627651924Scrutinee_1627648562Sym3 l_a169x l_a169y arg_a169z) =>
+    Let1627651924Scrutinee_1627648562Sym2KindInference
+type instance Apply (Let1627651924Scrutinee_1627648562Sym2 l_a169x l_a169y) l_a169w = Let1627651924Scrutinee_1627648562Sym3 l_a169x l_a169y l_a169w
+instance SuppressUnusedWarnings Let1627651924Scrutinee_1627648562Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651924Scrutinee_1627648562Sym1KindInference ())
+data Let1627651924Scrutinee_1627648562Sym1 l_a169u l_a169t
+  = forall arg_a169v. KindOf (Apply (Let1627651924Scrutinee_1627648562Sym1 l_a169u) arg_a169v) ~ KindOf (Let1627651924Scrutinee_1627648562Sym2 l_a169u arg_a169v) =>
+    Let1627651924Scrutinee_1627648562Sym1KindInference
+type instance Apply (Let1627651924Scrutinee_1627648562Sym1 l_a169u) l_a169t = Let1627651924Scrutinee_1627648562Sym2 l_a169u l_a169t
+instance SuppressUnusedWarnings Let1627651924Scrutinee_1627648562Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651924Scrutinee_1627648562Sym0KindInference ())
+data Let1627651924Scrutinee_1627648562Sym0 l_a169r
+  = forall arg_a169s. KindOf (Apply Let1627651924Scrutinee_1627648562Sym0 arg_a169s) ~ KindOf (Let1627651924Scrutinee_1627648562Sym1 arg_a169s) =>
+    Let1627651924Scrutinee_1627648562Sym0KindInference
+type instance Apply Let1627651924Scrutinee_1627648562Sym0 l_a169r = Let1627651924Scrutinee_1627648562Sym1 l_a169r
+type family Let1627651924Scrutinee_1627648562 p_a169g
+                                              x_a169k
+                                              xs_a169l
+                                              a_1627651916_a169h where
+  Let1627651924Scrutinee_1627648562 p_a169g x_a169k xs_a169l a_1627651916_a169h = Apply (Apply (:&&$) (Apply p_a169g x_a169k)) (Apply NullSym0 xs_a169l)
+type family Case_1627651943_a169G p_a169g
+                                  x_a169k
+                                  xs_a169l
+                                  a_1627651916_a169h
+                                  t_a169H where
+  Case_1627651943_a169G p_a169g x_a169k xs_a169l a_1627651916_a169h 'True = '[]
+  Case_1627651943_a169G p_a169g x_a169k xs_a169l a_1627651916_a169h 'False = Apply (Apply (:$) x_a169k) xs_a169l
+type family Lambda_1627651920_a169j p_a169g
+                                    a_1627651916_a169h
+                                    t_a169I
+                                    t_a169J where
+  Lambda_1627651920_a169j p_a169g a_1627651916_a169h x_a169k xs_a169l = Case_1627651943_a169G p_a169g x_a169k xs_a169l a_1627651916_a169h (Let1627651924Scrutinee_1627648562Sym4 p_a169g x_a169k xs_a169l a_1627651916_a169h)
+type Lambda_1627651920Sym4 t_a169K t_a169L t_a169M t_a169N =
+    Lambda_1627651920_a169j t_a169K t_a169L t_a169M t_a169N
+instance SuppressUnusedWarnings Lambda_1627651920Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627651920Sym3KindInference ())
+data Lambda_1627651920Sym3 l_a169Y l_a169Z l_a16a0 l_a169X
+  = forall arg_a16a1. KindOf (Apply (Lambda_1627651920Sym3 l_a169Y l_a169Z l_a16a0) arg_a16a1) ~ KindOf (Lambda_1627651920Sym4 l_a169Y l_a169Z l_a16a0 arg_a16a1) =>
+    Lambda_1627651920Sym3KindInference
+type instance Apply (Lambda_1627651920Sym3 l_a169Y l_a169Z l_a16a0) l_a169X = Lambda_1627651920Sym4 l_a169Y l_a169Z l_a16a0 l_a169X
+instance SuppressUnusedWarnings Lambda_1627651920Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627651920Sym2KindInference ())
+data Lambda_1627651920Sym2 l_a169U l_a169V l_a169T
+  = forall arg_a169W. KindOf (Apply (Lambda_1627651920Sym2 l_a169U l_a169V) arg_a169W) ~ KindOf (Lambda_1627651920Sym3 l_a169U l_a169V arg_a169W) =>
+    Lambda_1627651920Sym2KindInference
+type instance Apply (Lambda_1627651920Sym2 l_a169U l_a169V) l_a169T = Lambda_1627651920Sym3 l_a169U l_a169V l_a169T
+instance SuppressUnusedWarnings Lambda_1627651920Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627651920Sym1KindInference ())
+data Lambda_1627651920Sym1 l_a169R l_a169Q
+  = forall arg_a169S. KindOf (Apply (Lambda_1627651920Sym1 l_a169R) arg_a169S) ~ KindOf (Lambda_1627651920Sym2 l_a169R arg_a169S) =>
+    Lambda_1627651920Sym1KindInference
+type instance Apply (Lambda_1627651920Sym1 l_a169R) l_a169Q = Lambda_1627651920Sym2 l_a169R l_a169Q
+instance SuppressUnusedWarnings Lambda_1627651920Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Lambda_1627651920Sym0KindInference ())
+data Lambda_1627651920Sym0 l_a169O
+  = forall arg_a169P. KindOf (Apply Lambda_1627651920Sym0 arg_a169P) ~ KindOf (Lambda_1627651920Sym1 arg_a169P) =>
+    Lambda_1627651920Sym0KindInference
+type instance Apply Lambda_1627651920Sym0 l_a169O = Lambda_1627651920Sym1 l_a169O
+type Let1627651972Init'Sym4 t_a16a9
+                            t_a16aa
+                            (t_a16ab :: a_a158t)
+                            (t_a16ac :: [a_a158t]) =
+    Let1627651972Init' t_a16a9 t_a16aa t_a16ab t_a16ac
+instance SuppressUnusedWarnings Let1627651972Init'Sym3 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651972Init'Sym3KindInference ())
+data Let1627651972Init'Sym3 l_a16an
+                            l_a16ao
+                            (l_a16ap :: a_a158t)
+                            (l_a16am :: TyFun [a_a158t] [a_a158t])
+  = forall arg_a16aq. KindOf (Apply (Let1627651972Init'Sym3 l_a16an l_a16ao l_a16ap) arg_a16aq) ~ KindOf (Let1627651972Init'Sym4 l_a16an l_a16ao l_a16ap arg_a16aq) =>
+    Let1627651972Init'Sym3KindInference
+type instance Apply (Let1627651972Init'Sym3 l_a16an l_a16ao l_a16ap) l_a16am = Let1627651972Init'Sym4 l_a16an l_a16ao l_a16ap l_a16am
+instance SuppressUnusedWarnings Let1627651972Init'Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651972Init'Sym2KindInference ())
+data Let1627651972Init'Sym2 l_a16aj
+                            l_a16ak
+                            (l_a16ai :: TyFun a_a158t (TyFun [a_a158t] [a_a158t] -> *))
+  = forall arg_a16al. KindOf (Apply (Let1627651972Init'Sym2 l_a16aj l_a16ak) arg_a16al) ~ KindOf (Let1627651972Init'Sym3 l_a16aj l_a16ak arg_a16al) =>
+    Let1627651972Init'Sym2KindInference
+type instance Apply (Let1627651972Init'Sym2 l_a16aj l_a16ak) l_a16ai = Let1627651972Init'Sym3 l_a16aj l_a16ak l_a16ai
+instance SuppressUnusedWarnings Let1627651972Init'Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651972Init'Sym1KindInference ())
+data Let1627651972Init'Sym1 l_a16ag l_a16af
+  = forall arg_a16ah. KindOf (Apply (Let1627651972Init'Sym1 l_a16ag) arg_a16ah) ~ KindOf (Let1627651972Init'Sym2 l_a16ag arg_a16ah) =>
+    Let1627651972Init'Sym1KindInference
+type instance Apply (Let1627651972Init'Sym1 l_a16ag) l_a16af = Let1627651972Init'Sym2 l_a16ag l_a16af
+instance SuppressUnusedWarnings Let1627651972Init'Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627651972Init'Sym0KindInference ())
+data Let1627651972Init'Sym0 l_a16ad
+  = forall arg_a16ae. KindOf (Apply Let1627651972Init'Sym0 arg_a16ae) ~ KindOf (Let1627651972Init'Sym1 arg_a16ae) =>
+    Let1627651972Init'Sym0KindInference
+type instance Apply Let1627651972Init'Sym0 l_a16ad = Let1627651972Init'Sym1 l_a16ad
+type family Let1627651972Init' x_a16a6
+                                xs_a16a7
+                                (a_a16ar :: a_a158t)
+                                (a_a16as :: [a_a158t]) :: [a_a158t] where
+  Let1627651972Init' x_a16a6 xs_a16a7 _z_1627651993_a16av '[] = '[]
+  Let1627651972Init' x_a16a6 xs_a16a7 y_a16aw (z_a16ax ': zs_a16ay) = Apply (Apply (:$) y_a16aw) (Apply (Apply (Let1627651972Init'Sym2 x_a16a6 xs_a16a7) z_a16ax) zs_a16ay)
+type GenericLengthSym1 (t_a15iH :: [a_a15fX]) =
+    GenericLength t_a15iH
+instance SuppressUnusedWarnings GenericLengthSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) GenericLengthSym0KindInference ())
+data GenericLengthSym0 (l_a15iI :: TyFun [a_a15fX] i_a15fY)
+  = forall arg_a15iJ. KindOf (Apply GenericLengthSym0 arg_a15iJ) ~ KindOf (GenericLengthSym1 arg_a15iJ) =>
+    GenericLengthSym0KindInference
+type instance Apply GenericLengthSym0 l_a15iI = GenericLengthSym1 l_a15iI
+type Elem_bySym3 (t_a15iP :: TyFun a_a15fN (TyFun a_a15fN Bool
+                                            -> *)
+                              -> *)
+                  (t_a15iQ :: a_a15fN)
+                  (t_a15iR :: [a_a15fN]) =
+    Elem_by t_a15iP t_a15iQ t_a15iR
+instance SuppressUnusedWarnings Elem_bySym2 where
+  suppressUnusedWarnings _ = snd ((,) Elem_bySym2KindInference ())
+data Elem_bySym2 (l_a15iY :: TyFun a_a15fN (TyFun a_a15fN Bool
+                                            -> *)
+                              -> *)
+                  (l_a15iZ :: a_a15fN)
+                  (l_a15iX :: TyFun [a_a15fN] Bool)
+  = forall arg_a15j0. KindOf (Apply (Elem_bySym2 l_a15iY l_a15iZ) arg_a15j0) ~ KindOf (Elem_bySym3 l_a15iY l_a15iZ arg_a15j0) =>
+    Elem_bySym2KindInference
+type instance Apply (Elem_bySym2 l_a15iY l_a15iZ) l_a15iX = Elem_bySym3 l_a15iY l_a15iZ l_a15iX
+instance SuppressUnusedWarnings Elem_bySym1 where
+  suppressUnusedWarnings _ = snd ((,) Elem_bySym1KindInference ())
+data Elem_bySym1 (l_a15iV :: TyFun a_a15fN (TyFun a_a15fN Bool
+                                            -> *)
+                              -> *)
+                  (l_a15iU :: TyFun a_a15fN (TyFun [a_a15fN] Bool -> *))
+  = forall arg_a15iW. KindOf (Apply (Elem_bySym1 l_a15iV) arg_a15iW) ~ KindOf (Elem_bySym2 l_a15iV arg_a15iW) =>
+    Elem_bySym1KindInference
+type instance Apply (Elem_bySym1 l_a15iV) l_a15iU = Elem_bySym2 l_a15iV l_a15iU
+instance SuppressUnusedWarnings Elem_bySym0 where
+  suppressUnusedWarnings _ = snd ((,) Elem_bySym0KindInference ())
+data Elem_bySym0 (l_a15iS :: TyFun (TyFun a_a15fN (TyFun a_a15fN Bool
+                                                    -> *)
+                                    -> *) (TyFun a_a15fN (TyFun [a_a15fN] Bool -> *) -> *))
+  = forall arg_a15iT. KindOf (Apply Elem_bySym0 arg_a15iT) ~ KindOf (Elem_bySym1 arg_a15iT) =>
+    Elem_bySym0KindInference
+type instance Apply Elem_bySym0 l_a15iS = Elem_bySym1 l_a15iS
+type NubBySym2 (t_a15je :: TyFun a_a15fG (TyFun a_a15fG Bool -> *)
+                            -> *)
+                (t_a15jf :: [a_a15fG]) =
+    NubBy t_a15je t_a15jf
+instance SuppressUnusedWarnings NubBySym1 where
+  suppressUnusedWarnings _ = snd ((,) NubBySym1KindInference ())
+data NubBySym1 (l_a15jj :: TyFun a_a15fG (TyFun a_a15fG Bool -> *)
+                            -> *)
+                (l_a15ji :: TyFun [a_a15fG] [a_a15fG])
+  = forall arg_a15jk. KindOf (Apply (NubBySym1 l_a15jj) arg_a15jk) ~ KindOf (NubBySym2 l_a15jj arg_a15jk) =>
+    NubBySym1KindInference
+type instance Apply (NubBySym1 l_a15jj) l_a15ji = NubBySym2 l_a15jj l_a15ji
+instance SuppressUnusedWarnings NubBySym0 where
+  suppressUnusedWarnings _ = snd ((,) NubBySym0KindInference ())
+data NubBySym0 (l_a15jg :: TyFun (TyFun a_a15fG (TyFun a_a15fG Bool
+                                                  -> *)
+                                  -> *) (TyFun [a_a15fG] [a_a15fG] -> *))
+  = forall arg_a15jh. KindOf (Apply NubBySym0 arg_a15jh) ~ KindOf (NubBySym1 arg_a15jh) =>
+    NubBySym0KindInference
+type instance Apply NubBySym0 l_a15jg = NubBySym1 l_a15jg
+type (:!!$$$) (t_a15kj :: [a_a15fx]) (t_a15kk :: Nat) =
+    (:!!) t_a15kj t_a15kk
+instance SuppressUnusedWarnings (:!!$$) where
+  suppressUnusedWarnings _ = snd ((,) (:!!$$###) ())
+data (:!!$$) (l_a15ko :: [a_a15fx]) (l_a15kn :: TyFun Nat a_a15fx)
+  = forall arg_a15kp. KindOf (Apply ((:!!$$) l_a15ko) arg_a15kp) ~ KindOf ((:!!$$$) l_a15ko arg_a15kp) =>
+    (:!!$$###)
+type instance Apply ((:!!$$) l_a15ko) l_a15kn = (:!!$$$) l_a15ko l_a15kn
+instance SuppressUnusedWarnings (:!!$) where
+  suppressUnusedWarnings _ = snd ((,) (:!!$###) ())
+data (:!!$) (l_a15kl :: TyFun [a_a15fx] (TyFun Nat a_a15fx -> *))
+  = forall arg_a15km. KindOf (Apply (:!!$) arg_a15km) ~ KindOf ((:!!$$) arg_a15km) =>
+    (:!!$###)
+type instance Apply (:!!$) l_a15kl = (:!!$$) l_a15kl
+type ReplicateSym2 (t_a15kO :: Nat) (t_a15kP :: a_a15fp) =
+    Replicate t_a15kO t_a15kP
+instance SuppressUnusedWarnings ReplicateSym1 where
+  suppressUnusedWarnings _ = snd ((,) ReplicateSym1KindInference ())
+data ReplicateSym1 (l_a15kT :: Nat)
+                    (l_a15kS :: TyFun a_a15fp [a_a15fp])
+  = forall arg_a15kU. KindOf (Apply (ReplicateSym1 l_a15kT) arg_a15kU) ~ KindOf (ReplicateSym2 l_a15kT arg_a15kU) =>
+    ReplicateSym1KindInference
+type instance Apply (ReplicateSym1 l_a15kT) l_a15kS = ReplicateSym2 l_a15kT l_a15kS
+instance SuppressUnusedWarnings ReplicateSym0 where
+  suppressUnusedWarnings _ = snd ((,) ReplicateSym0KindInference ())
+data ReplicateSym0 (l_a15kQ :: TyFun Nat (TyFun a_a15fp [a_a15fp]
+                                          -> *))
+  = forall arg_a15kR. KindOf (Apply ReplicateSym0 arg_a15kR) ~ KindOf (ReplicateSym1 arg_a15kR) =>
+    ReplicateSym0KindInference
+type instance Apply ReplicateSym0 l_a15kQ = ReplicateSym1 l_a15kQ
+type LengthSym1 (t_a15la :: [a_a15fn]) = Length t_a15la
+instance SuppressUnusedWarnings LengthSym0 where
+  suppressUnusedWarnings _ = snd ((,) LengthSym0KindInference ())
+data LengthSym0 (l_a15lb :: TyFun [a_a15fn] Nat)
+  = forall arg_a15lc. KindOf (Apply LengthSym0 arg_a15lc) ~ KindOf (LengthSym1 arg_a15lc) =>
+    LengthSym0KindInference
+type instance Apply LengthSym0 l_a15lb = LengthSym1 l_a15lb
+type ProductSym1 (t_a15li :: [a_a156L]) = Product t_a15li
+instance SuppressUnusedWarnings ProductSym0 where
+  suppressUnusedWarnings _ = snd ((,) ProductSym0KindInference ())
+data ProductSym0 (l_a15lj :: TyFun [a_a156L] a_a156L)
+  = forall arg_a15lk. KindOf (Apply ProductSym0 arg_a15lk) ~ KindOf (ProductSym1 arg_a15lk) =>
+    ProductSym0KindInference
+type instance Apply ProductSym0 l_a15lj = ProductSym1 l_a15lj
+type SumSym1 (t_a15lG :: [a_a156M]) = Sum t_a15lG
+instance SuppressUnusedWarnings SumSym0 where
+  suppressUnusedWarnings _ = snd ((,) SumSym0KindInference ())
+data SumSym0 (l_a15lH :: TyFun [a_a156M] a_a156M)
+  = forall arg_a15lI. KindOf (Apply SumSym0 arg_a15lI) ~ KindOf (SumSym1 arg_a15lI) =>
+    SumSym0KindInference
+type instance Apply SumSym0 l_a15lH = SumSym1 l_a15lH
+type SelectSym3 (t_a15m4 :: TyFun a_a15f6 Bool -> *)
+                (t_a15m5 :: a_a15f6)
+                (t_a15m6 :: ([a_a15f6], [a_a15f6])) =
+    Select t_a15m4 t_a15m5 t_a15m6
+instance SuppressUnusedWarnings SelectSym2 where
+  suppressUnusedWarnings _ = snd ((,) SelectSym2KindInference ())
+data SelectSym2 (l_a15md :: TyFun a_a15f6 Bool -> *)
+                (l_a15me :: a_a15f6)
+                (l_a15mc :: TyFun ([a_a15f6], [a_a15f6]) ([a_a15f6], [a_a15f6]))
+  = forall arg_a15mf. KindOf (Apply (SelectSym2 l_a15md l_a15me) arg_a15mf) ~ KindOf (SelectSym3 l_a15md l_a15me arg_a15mf) =>
+    SelectSym2KindInference
+type instance Apply (SelectSym2 l_a15md l_a15me) l_a15mc = SelectSym3 l_a15md l_a15me l_a15mc
+instance SuppressUnusedWarnings SelectSym1 where
+  suppressUnusedWarnings _ = snd ((,) SelectSym1KindInference ())
+data SelectSym1 (l_a15ma :: TyFun a_a15f6 Bool -> *)
+                (l_a15m9 :: TyFun a_a15f6 (TyFun ([a_a15f6], [a_a15f6]) ([a_a15f6],
+                                                                          [a_a15f6])
+                                            -> *))
+  = forall arg_a15mb. KindOf (Apply (SelectSym1 l_a15ma) arg_a15mb) ~ KindOf (SelectSym2 l_a15ma arg_a15mb) =>
+    SelectSym1KindInference
+type instance Apply (SelectSym1 l_a15ma) l_a15m9 = SelectSym2 l_a15ma l_a15m9
+instance SuppressUnusedWarnings SelectSym0 where
+  suppressUnusedWarnings _ = snd ((,) SelectSym0KindInference ())
+data SelectSym0 (l_a15m7 :: TyFun (TyFun a_a15f6 Bool
+                                    -> *) (TyFun a_a15f6 (TyFun ([a_a15f6],
+                                                                [a_a15f6]) ([a_a15f6],
+                                                                            [a_a15f6])
+                                                          -> *)
+                                          -> *))
+  = forall arg_a15m8. KindOf (Apply SelectSym0 arg_a15m8) ~ KindOf (SelectSym1 arg_a15m8) =>
+    SelectSym0KindInference
+type instance Apply SelectSym0 l_a15m7 = SelectSym1 l_a15m7
+type PartitionSym2 (t_a15mJ :: TyFun a_a15f3 Bool -> *)
+                    (t_a15mK :: [a_a15f3]) =
+    Partition t_a15mJ t_a15mK
+instance SuppressUnusedWarnings PartitionSym1 where
+  suppressUnusedWarnings _ = snd ((,) PartitionSym1KindInference ())
+data PartitionSym1 (l_a15mO :: TyFun a_a15f3 Bool -> *)
+                    (l_a15mN :: TyFun [a_a15f3] ([a_a15f3], [a_a15f3]))
+  = forall arg_a15mP. KindOf (Apply (PartitionSym1 l_a15mO) arg_a15mP) ~ KindOf (PartitionSym2 l_a15mO arg_a15mP) =>
+    PartitionSym1KindInference
+type instance Apply (PartitionSym1 l_a15mO) l_a15mN = PartitionSym2 l_a15mO l_a15mN
+instance SuppressUnusedWarnings PartitionSym0 where
+  suppressUnusedWarnings _ = snd ((,) PartitionSym0KindInference ())
+data PartitionSym0 (l_a15mL :: TyFun (TyFun a_a15f3 Bool
+                                      -> *) (TyFun [a_a15f3] ([a_a15f3], [a_a15f3]) -> *))
+  = forall arg_a15mM. KindOf (Apply PartitionSym0 arg_a15mM) ~ KindOf (PartitionSym1 arg_a15mM) =>
+    PartitionSym0KindInference
+type instance Apply PartitionSym0 l_a15mL = PartitionSym1 l_a15mL
+type LookupSym2 (t_a15mU :: a_a15eW)
+                (t_a15mV :: [(a_a15eW, b_a15eX)]) =
+    Lookup t_a15mU t_a15mV
+instance SuppressUnusedWarnings LookupSym1 where
+  suppressUnusedWarnings _ = snd ((,) LookupSym1KindInference ())
+data LookupSym1 (l_a15mZ :: a_a15eW)
+                (l_a15mY :: TyFun [(a_a15eW, b_a15eX)] (Maybe b_a15eX))
+  = forall arg_a15n0. KindOf (Apply (LookupSym1 l_a15mZ) arg_a15n0) ~ KindOf (LookupSym2 l_a15mZ arg_a15n0) =>
+    LookupSym1KindInference
+type instance Apply (LookupSym1 l_a15mZ) l_a15mY = LookupSym2 l_a15mZ l_a15mY
+instance SuppressUnusedWarnings LookupSym0 where
+  suppressUnusedWarnings _ = snd ((,) LookupSym0KindInference ())
+data LookupSym0 (l_a15mW :: TyFun a_a15eW (TyFun [(a_a15eW,
+                                                    b_a15eX)] (Maybe b_a15eX)
+                                            -> *))
+  = forall arg_a15mX. KindOf (Apply LookupSym0 arg_a15mX) ~ KindOf (LookupSym1 arg_a15mX) =>
+    LookupSym0KindInference
+type instance Apply LookupSym0 l_a15mW = LookupSym1 l_a15mW
+type DropSym2 (t_a15nu :: Nat) (t_a15nv :: [a_a15ez]) =
+    Drop t_a15nu t_a15nv
+instance SuppressUnusedWarnings DropSym1 where
+  suppressUnusedWarnings _ = snd ((,) DropSym1KindInference ())
+data DropSym1 (l_a15nz :: Nat)
+              (l_a15ny :: TyFun [a_a15ez] [a_a15ez])
+  = forall arg_a15nA. KindOf (Apply (DropSym1 l_a15nz) arg_a15nA) ~ KindOf (DropSym2 l_a15nz arg_a15nA) =>
+    DropSym1KindInference
+type instance Apply (DropSym1 l_a15nz) l_a15ny = DropSym2 l_a15nz l_a15ny
+instance SuppressUnusedWarnings DropSym0 where
+  suppressUnusedWarnings _ = snd ((,) DropSym0KindInference ())
+data DropSym0 (l_a15nw :: TyFun Nat (TyFun [a_a15ez] [a_a15ez]
+                                      -> *))
+  = forall arg_a15nx. KindOf (Apply DropSym0 arg_a15nx) ~ KindOf (DropSym1 arg_a15nx) =>
+    DropSym0KindInference
+type instance Apply DropSym0 l_a15nw = DropSym1 l_a15nw
+type TakeSym2 (t_a15nZ :: Nat) (t_a15o0 :: [a_a15ev]) =
+    Take t_a15nZ t_a15o0
+instance SuppressUnusedWarnings TakeSym1 where
+  suppressUnusedWarnings _ = snd ((,) TakeSym1KindInference ())
+data TakeSym1 (l_a15o4 :: Nat)
+              (l_a15o3 :: TyFun [a_a15ev] [a_a15ev])
+  = forall arg_a15o5. KindOf (Apply (TakeSym1 l_a15o4) arg_a15o5) ~ KindOf (TakeSym2 l_a15o4 arg_a15o5) =>
+    TakeSym1KindInference
+type instance Apply (TakeSym1 l_a15o4) l_a15o3 = TakeSym2 l_a15o4 l_a15o3
+instance SuppressUnusedWarnings TakeSym0 where
+  suppressUnusedWarnings _ = snd ((,) TakeSym0KindInference ())
+data TakeSym0 (l_a15o1 :: TyFun Nat (TyFun [a_a15ev] [a_a15ev]
+                                      -> *))
+  = forall arg_a15o2. KindOf (Apply TakeSym0 arg_a15o2) ~ KindOf (TakeSym1 arg_a15o2) =>
+    TakeSym0KindInference
+type instance Apply TakeSym0 l_a15o1 = TakeSym1 l_a15o1
+type SplitAtSym2 (t_a15ou :: Nat) (t_a15ov :: [a_a15eD]) =
+    SplitAt t_a15ou t_a15ov
+instance SuppressUnusedWarnings SplitAtSym1 where
+  suppressUnusedWarnings _ = snd ((,) SplitAtSym1KindInference ())
+data SplitAtSym1 (l_a15oz :: Nat)
+                  (l_a15oy :: TyFun [a_a15eD] ([a_a15eD], [a_a15eD]))
+  = forall arg_a15oA. KindOf (Apply (SplitAtSym1 l_a15oz) arg_a15oA) ~ KindOf (SplitAtSym2 l_a15oz arg_a15oA) =>
+    SplitAtSym1KindInference
+type instance Apply (SplitAtSym1 l_a15oz) l_a15oy = SplitAtSym2 l_a15oz l_a15oy
+instance SuppressUnusedWarnings SplitAtSym0 where
+  suppressUnusedWarnings _ = snd ((,) SplitAtSym0KindInference ())
+data SplitAtSym0 (l_a15ow :: TyFun Nat (TyFun [a_a15eD] ([a_a15eD],
+                                                          [a_a15eD])
+                                        -> *))
+  = forall arg_a15ox. KindOf (Apply SplitAtSym0 arg_a15ox) ~ KindOf (SplitAtSym1 arg_a15ox) =>
+    SplitAtSym0KindInference
+type instance Apply SplitAtSym0 l_a15ow = SplitAtSym1 l_a15ow
+type BreakSym2 (t_a15oF :: TyFun a_a15en Bool -> *)
+                (t_a15oG :: [a_a15en]) =
+    Break t_a15oF t_a15oG
+instance SuppressUnusedWarnings BreakSym1 where
+  suppressUnusedWarnings _ = snd ((,) BreakSym1KindInference ())
+data BreakSym1 (l_a15oK :: TyFun a_a15en Bool -> *)
+                (l_a15oJ :: TyFun [a_a15en] ([a_a15en], [a_a15en]))
+  = forall arg_a15oL. KindOf (Apply (BreakSym1 l_a15oK) arg_a15oL) ~ KindOf (BreakSym2 l_a15oK arg_a15oL) =>
+    BreakSym1KindInference
+type instance Apply (BreakSym1 l_a15oK) l_a15oJ = BreakSym2 l_a15oK l_a15oJ
+instance SuppressUnusedWarnings BreakSym0 where
+  suppressUnusedWarnings _ = snd ((,) BreakSym0KindInference ())
+data BreakSym0 (l_a15oH :: TyFun (TyFun a_a15en Bool
+                                  -> *) (TyFun [a_a15en] ([a_a15en], [a_a15en]) -> *))
+  = forall arg_a15oI. KindOf (Apply BreakSym0 arg_a15oI) ~ KindOf (BreakSym1 arg_a15oI) =>
+    BreakSym0KindInference
+type instance Apply BreakSym0 l_a15oH = BreakSym1 l_a15oH
+type SpanSym2 (t_a15qm :: TyFun a_a15ef Bool -> *)
+              (t_a15qn :: [a_a15ef]) =
+    Span t_a15qm t_a15qn
+instance SuppressUnusedWarnings SpanSym1 where
+  suppressUnusedWarnings _ = snd ((,) SpanSym1KindInference ())
+data SpanSym1 (l_a15qr :: TyFun a_a15ef Bool -> *)
+              (l_a15qq :: TyFun [a_a15ef] ([a_a15ef], [a_a15ef]))
+  = forall arg_a15qs. KindOf (Apply (SpanSym1 l_a15qr) arg_a15qs) ~ KindOf (SpanSym2 l_a15qr arg_a15qs) =>
+    SpanSym1KindInference
+type instance Apply (SpanSym1 l_a15qr) l_a15qq = SpanSym2 l_a15qr l_a15qq
+instance SuppressUnusedWarnings SpanSym0 where
+  suppressUnusedWarnings _ = snd ((,) SpanSym0KindInference ())
+data SpanSym0 (l_a15qo :: TyFun (TyFun a_a15ef Bool
+                                  -> *) (TyFun [a_a15ef] ([a_a15ef], [a_a15ef]) -> *))
+  = forall arg_a15qp. KindOf (Apply SpanSym0 arg_a15qp) ~ KindOf (SpanSym1 arg_a15qp) =>
+    SpanSym0KindInference
+type instance Apply SpanSym0 l_a15qo = SpanSym1 l_a15qo
+type GroupBySym2 (t_a15s3 :: TyFun a_a15eQ (TyFun a_a15eQ Bool
+                                            -> *)
+                              -> *)
+                  (t_a15s4 :: [a_a15eQ]) =
+    GroupBy t_a15s3 t_a15s4
+instance SuppressUnusedWarnings GroupBySym1 where
+  suppressUnusedWarnings _ = snd ((,) GroupBySym1KindInference ())
+data GroupBySym1 (l_a15s8 :: TyFun a_a15eQ (TyFun a_a15eQ Bool
+                                            -> *)
+                              -> *)
+                  (l_a15s7 :: TyFun [a_a15eQ] [[a_a15eQ]])
+  = forall arg_a15s9. KindOf (Apply (GroupBySym1 l_a15s8) arg_a15s9) ~ KindOf (GroupBySym2 l_a15s8 arg_a15s9) =>
+    GroupBySym1KindInference
+type instance Apply (GroupBySym1 l_a15s8) l_a15s7 = GroupBySym2 l_a15s8 l_a15s7
+instance SuppressUnusedWarnings GroupBySym0 where
+  suppressUnusedWarnings _ = snd ((,) GroupBySym0KindInference ())
+data GroupBySym0 (l_a15s5 :: TyFun (TyFun a_a15eQ (TyFun a_a15eQ Bool
+                                                    -> *)
+                                    -> *) (TyFun [a_a15eQ] [[a_a15eQ]] -> *))
+  = forall arg_a15s6. KindOf (Apply GroupBySym0 arg_a15s6) ~ KindOf (GroupBySym1 arg_a15s6) =>
+    GroupBySym0KindInference
+type instance Apply GroupBySym0 l_a15s5 = GroupBySym1 l_a15s5
+type GroupSym1 (t_a15td :: [a_a15eG]) = Group t_a15td
+instance SuppressUnusedWarnings GroupSym0 where
+  suppressUnusedWarnings _ = snd ((,) GroupSym0KindInference ())
+data GroupSym0 (l_a15te :: TyFun [a_a15eG] [[a_a15eG]])
+  = forall arg_a15tf. KindOf (Apply GroupSym0 arg_a15tf) ~ KindOf (GroupSym1 arg_a15tf) =>
+    GroupSym0KindInference
+type instance Apply GroupSym0 l_a15te = GroupSym1 l_a15te
+type DropWhileSym2 (t_a15ti :: TyFun a_a15e6 Bool -> *)
+                    (t_a15tj :: [a_a15e6]) =
+    DropWhile t_a15ti t_a15tj
+instance SuppressUnusedWarnings DropWhileSym1 where
+  suppressUnusedWarnings _ = snd ((,) DropWhileSym1KindInference ())
+data DropWhileSym1 (l_a15tn :: TyFun a_a15e6 Bool -> *)
+                    (l_a15tm :: TyFun [a_a15e6] [a_a15e6])
+  = forall arg_a15to. KindOf (Apply (DropWhileSym1 l_a15tn) arg_a15to) ~ KindOf (DropWhileSym2 l_a15tn arg_a15to) =>
+    DropWhileSym1KindInference
+type instance Apply (DropWhileSym1 l_a15tn) l_a15tm = DropWhileSym2 l_a15tn l_a15tm
+instance SuppressUnusedWarnings DropWhileSym0 where
+  suppressUnusedWarnings _ = snd ((,) DropWhileSym0KindInference ())
+data DropWhileSym0 (l_a15tk :: TyFun (TyFun a_a15e6 Bool
+                                      -> *) (TyFun [a_a15e6] [a_a15e6] -> *))
+  = forall arg_a15tl. KindOf (Apply DropWhileSym0 arg_a15tl) ~ KindOf (DropWhileSym1 arg_a15tl) =>
+    DropWhileSym0KindInference
+type instance Apply DropWhileSym0 l_a15tk = DropWhileSym1 l_a15tk
+type TakeWhileSym2 (t_a15u0 :: TyFun a_a15e2 Bool -> *)
+                    (t_a15u1 :: [a_a15e2]) =
+    TakeWhile t_a15u0 t_a15u1
+instance SuppressUnusedWarnings TakeWhileSym1 where
+  suppressUnusedWarnings _ = snd ((,) TakeWhileSym1KindInference ())
+data TakeWhileSym1 (l_a15u5 :: TyFun a_a15e2 Bool -> *)
+                    (l_a15u4 :: TyFun [a_a15e2] [a_a15e2])
+  = forall arg_a15u6. KindOf (Apply (TakeWhileSym1 l_a15u5) arg_a15u6) ~ KindOf (TakeWhileSym2 l_a15u5 arg_a15u6) =>
+    TakeWhileSym1KindInference
+type instance Apply (TakeWhileSym1 l_a15u5) l_a15u4 = TakeWhileSym2 l_a15u5 l_a15u4
+instance SuppressUnusedWarnings TakeWhileSym0 where
+  suppressUnusedWarnings _ = snd ((,) TakeWhileSym0KindInference ())
+data TakeWhileSym0 (l_a15u2 :: TyFun (TyFun a_a15e2 Bool
+                                      -> *) (TyFun [a_a15e2] [a_a15e2] -> *))
+  = forall arg_a15u3. KindOf (Apply TakeWhileSym0 arg_a15u3) ~ KindOf (TakeWhileSym1 arg_a15u3) =>
+    TakeWhileSym0KindInference
+type instance Apply TakeWhileSym0 l_a15u2 = TakeWhileSym1 l_a15u2
+type FilterSym2 (t_a15uv :: TyFun a_a15dB Bool -> *)
+                (t_a15uw :: [a_a15dB]) =
+    Filter t_a15uv t_a15uw
+instance SuppressUnusedWarnings FilterSym1 where
+  suppressUnusedWarnings _ = snd ((,) FilterSym1KindInference ())
+data FilterSym1 (l_a15uA :: TyFun a_a15dB Bool -> *)
+                (l_a15uz :: TyFun [a_a15dB] [a_a15dB])
+  = forall arg_a15uB. KindOf (Apply (FilterSym1 l_a15uA) arg_a15uB) ~ KindOf (FilterSym2 l_a15uA arg_a15uB) =>
+    FilterSym1KindInference
+type instance Apply (FilterSym1 l_a15uA) l_a15uz = FilterSym2 l_a15uA l_a15uz
+instance SuppressUnusedWarnings FilterSym0 where
+  suppressUnusedWarnings _ = snd ((,) FilterSym0KindInference ())
+data FilterSym0 (l_a15ux :: TyFun (TyFun a_a15dB Bool
+                                    -> *) (TyFun [a_a15dB] [a_a15dB] -> *))
+  = forall arg_a15uy. KindOf (Apply FilterSym0 arg_a15uy) ~ KindOf (FilterSym1 arg_a15uy) =>
+    FilterSym0KindInference
+type instance Apply FilterSym0 l_a15ux = FilterSym1 l_a15ux
+type FindSym2 (t_a15uY :: TyFun a_a15dG Bool -> *)
+              (t_a15uZ :: [a_a15dG]) =
+    Find t_a15uY t_a15uZ
+instance SuppressUnusedWarnings FindSym1 where
+  suppressUnusedWarnings _ = snd ((,) FindSym1KindInference ())
+data FindSym1 (l_a15v3 :: TyFun a_a15dG Bool -> *)
+              (l_a15v2 :: TyFun [a_a15dG] (Maybe a_a15dG))
+  = forall arg_a15v4. KindOf (Apply (FindSym1 l_a15v3) arg_a15v4) ~ KindOf (FindSym2 l_a15v3 arg_a15v4) =>
+    FindSym1KindInference
+type instance Apply (FindSym1 l_a15v3) l_a15v2 = FindSym2 l_a15v3 l_a15v2
+instance SuppressUnusedWarnings FindSym0 where
+  suppressUnusedWarnings _ = snd ((,) FindSym0KindInference ())
+data FindSym0 (l_a15v0 :: TyFun (TyFun a_a15dG Bool
+                                  -> *) (TyFun [a_a15dG] (Maybe a_a15dG) -> *))
+  = forall arg_a15v1. KindOf (Apply FindSym0 arg_a15v1) ~ KindOf (FindSym1 arg_a15v1) =>
+    FindSym0KindInference
+type instance Apply FindSym0 l_a15v0 = FindSym1 l_a15v0
+type IntersectBySym3 (t_a15vb :: TyFun a_a15dX (TyFun a_a15dX Bool
+                                                -> *)
+                                  -> *)
+                      (t_a15vc :: [a_a15dX])
+                      (t_a15vd :: [a_a15dX]) =
+    IntersectBy t_a15vb t_a15vc t_a15vd
+instance SuppressUnusedWarnings IntersectBySym2 where
+  suppressUnusedWarnings _
+    = snd ((,) IntersectBySym2KindInference ())
+data IntersectBySym2 (l_a15vk :: TyFun a_a15dX (TyFun a_a15dX Bool
+                                                -> *)
+                                  -> *)
+                      (l_a15vl :: [a_a15dX])
+                      (l_a15vj :: TyFun [a_a15dX] [a_a15dX])
+  = forall arg_a15vm. KindOf (Apply (IntersectBySym2 l_a15vk l_a15vl) arg_a15vm) ~ KindOf (IntersectBySym3 l_a15vk l_a15vl arg_a15vm) =>
+    IntersectBySym2KindInference
+type instance Apply (IntersectBySym2 l_a15vk l_a15vl) l_a15vj = IntersectBySym3 l_a15vk l_a15vl l_a15vj
+instance SuppressUnusedWarnings IntersectBySym1 where
+  suppressUnusedWarnings _
+    = snd ((,) IntersectBySym1KindInference ())
+data IntersectBySym1 (l_a15vh :: TyFun a_a15dX (TyFun a_a15dX Bool
+                                                -> *)
+                                  -> *)
+                      (l_a15vg :: TyFun [a_a15dX] (TyFun [a_a15dX] [a_a15dX] -> *))
+  = forall arg_a15vi. KindOf (Apply (IntersectBySym1 l_a15vh) arg_a15vi) ~ KindOf (IntersectBySym2 l_a15vh arg_a15vi) =>
+    IntersectBySym1KindInference
+type instance Apply (IntersectBySym1 l_a15vh) l_a15vg = IntersectBySym2 l_a15vh l_a15vg
+instance SuppressUnusedWarnings IntersectBySym0 where
+  suppressUnusedWarnings _
+    = snd ((,) IntersectBySym0KindInference ())
+data IntersectBySym0 (l_a15ve :: TyFun (TyFun a_a15dX (TyFun a_a15dX Bool
+                                                        -> *)
+                                        -> *) (TyFun [a_a15dX] (TyFun [a_a15dX] [a_a15dX] -> *)
+                                                -> *))
+  = forall arg_a15vf. KindOf (Apply IntersectBySym0 arg_a15vf) ~ KindOf (IntersectBySym1 arg_a15vf) =>
+    IntersectBySym0KindInference
+type instance Apply IntersectBySym0 l_a15ve = IntersectBySym1 l_a15ve
+type IntersectSym2 (t_a15xk :: [a_a15dW]) (t_a15xl :: [a_a15dW]) =
+    Intersect t_a15xk t_a15xl
+instance SuppressUnusedWarnings IntersectSym1 where
+  suppressUnusedWarnings _ = snd ((,) IntersectSym1KindInference ())
+data IntersectSym1 (l_a15xp :: [a_a15dW])
+                    (l_a15xo :: TyFun [a_a15dW] [a_a15dW])
+  = forall arg_a15xq. KindOf (Apply (IntersectSym1 l_a15xp) arg_a15xq) ~ KindOf (IntersectSym2 l_a15xp arg_a15xq) =>
+    IntersectSym1KindInference
+type instance Apply (IntersectSym1 l_a15xp) l_a15xo = IntersectSym2 l_a15xp l_a15xo
+instance SuppressUnusedWarnings IntersectSym0 where
+  suppressUnusedWarnings _ = snd ((,) IntersectSym0KindInference ())
+data IntersectSym0 (l_a15xm :: TyFun [a_a15dW] (TyFun [a_a15dW] [a_a15dW]
+                                                -> *))
+  = forall arg_a15xn. KindOf (Apply IntersectSym0 arg_a15xn) ~ KindOf (IntersectSym1 arg_a15xn) =>
+    IntersectSym0KindInference
+type instance Apply IntersectSym0 l_a15xm = IntersectSym1 l_a15xm
+type InsertBySym3 (t_a15xv :: TyFun a_a15di (TyFun a_a15di Ordering
+                                              -> *)
+                              -> *)
+                  (t_a15xw :: a_a15di)
+                  (t_a15xx :: [a_a15di]) =
+    InsertBy t_a15xv t_a15xw t_a15xx
+instance SuppressUnusedWarnings InsertBySym2 where
+  suppressUnusedWarnings _ = snd ((,) InsertBySym2KindInference ())
+data InsertBySym2 (l_a15xE :: TyFun a_a15di (TyFun a_a15di Ordering
+                                              -> *)
+                              -> *)
+                  (l_a15xF :: a_a15di)
+                  (l_a15xD :: TyFun [a_a15di] [a_a15di])
+  = forall arg_a15xG. KindOf (Apply (InsertBySym2 l_a15xE l_a15xF) arg_a15xG) ~ KindOf (InsertBySym3 l_a15xE l_a15xF arg_a15xG) =>
+    InsertBySym2KindInference
+type instance Apply (InsertBySym2 l_a15xE l_a15xF) l_a15xD = InsertBySym3 l_a15xE l_a15xF l_a15xD
+instance SuppressUnusedWarnings InsertBySym1 where
+  suppressUnusedWarnings _ = snd ((,) InsertBySym1KindInference ())
+data InsertBySym1 (l_a15xB :: TyFun a_a15di (TyFun a_a15di Ordering
+                                              -> *)
+                              -> *)
+                  (l_a15xA :: TyFun a_a15di (TyFun [a_a15di] [a_a15di] -> *))
+  = forall arg_a15xC. KindOf (Apply (InsertBySym1 l_a15xB) arg_a15xC) ~ KindOf (InsertBySym2 l_a15xB arg_a15xC) =>
+    InsertBySym1KindInference
+type instance Apply (InsertBySym1 l_a15xB) l_a15xA = InsertBySym2 l_a15xB l_a15xA
+instance SuppressUnusedWarnings InsertBySym0 where
+  suppressUnusedWarnings _ = snd ((,) InsertBySym0KindInference ())
+data InsertBySym0 (l_a15xy :: TyFun (TyFun a_a15di (TyFun a_a15di Ordering
+                                                    -> *)
+                                      -> *) (TyFun a_a15di (TyFun [a_a15di] [a_a15di] -> *)
+                                            -> *))
+  = forall arg_a15xz. KindOf (Apply InsertBySym0 arg_a15xz) ~ KindOf (InsertBySym1 arg_a15xz) =>
+    InsertBySym0KindInference
+type instance Apply InsertBySym0 l_a15xy = InsertBySym1 l_a15xy
+type InsertSym2 (t_a15yx :: a_a15eM) (t_a15yy :: [a_a15eM]) =
+    Insert t_a15yx t_a15yy
+instance SuppressUnusedWarnings InsertSym1 where
+  suppressUnusedWarnings _ = snd ((,) InsertSym1KindInference ())
+data InsertSym1 (l_a15yC :: a_a15eM)
+                (l_a15yB :: TyFun [a_a15eM] [a_a15eM])
+  = forall arg_a15yD. KindOf (Apply (InsertSym1 l_a15yC) arg_a15yD) ~ KindOf (InsertSym2 l_a15yC arg_a15yD) =>
+    InsertSym1KindInference
+type instance Apply (InsertSym1 l_a15yC) l_a15yB = InsertSym2 l_a15yC l_a15yB
+instance SuppressUnusedWarnings InsertSym0 where
+  suppressUnusedWarnings _ = snd ((,) InsertSym0KindInference ())
+data InsertSym0 (l_a15yz :: TyFun a_a15eM (TyFun [a_a15eM] [a_a15eM]
+                                            -> *))
+  = forall arg_a15yA. KindOf (Apply InsertSym0 arg_a15yA) ~ KindOf (InsertSym1 arg_a15yA) =>
+    InsertSym0KindInference
+type instance Apply InsertSym0 l_a15yz = InsertSym1 l_a15yz
+type SortBySym2 (t_a15yI :: TyFun a_a15dg (TyFun a_a15dg Ordering
+                                            -> *)
+                            -> *)
+                (t_a15yJ :: [a_a15dg]) =
+    SortBy t_a15yI t_a15yJ
+instance SuppressUnusedWarnings SortBySym1 where
+  suppressUnusedWarnings _ = snd ((,) SortBySym1KindInference ())
+data SortBySym1 (l_a15yN :: TyFun a_a15dg (TyFun a_a15dg Ordering
+                                            -> *)
+                            -> *)
+                (l_a15yM :: TyFun [a_a15dg] [a_a15dg])
+  = forall arg_a15yO. KindOf (Apply (SortBySym1 l_a15yN) arg_a15yO) ~ KindOf (SortBySym2 l_a15yN arg_a15yO) =>
+    SortBySym1KindInference
+type instance Apply (SortBySym1 l_a15yN) l_a15yM = SortBySym2 l_a15yN l_a15yM
+instance SuppressUnusedWarnings SortBySym0 where
+  suppressUnusedWarnings _ = snd ((,) SortBySym0KindInference ())
+data SortBySym0 (l_a15yK :: TyFun (TyFun a_a15dg (TyFun a_a15dg Ordering
+                                                  -> *)
+                                    -> *) (TyFun [a_a15dg] [a_a15dg] -> *))
+  = forall arg_a15yL. KindOf (Apply SortBySym0 arg_a15yL) ~ KindOf (SortBySym1 arg_a15yL) =>
+    SortBySym0KindInference
+type instance Apply SortBySym0 l_a15yK = SortBySym1 l_a15yK
+type SortSym1 (t_a15yX :: [a_a15eP]) = Sort t_a15yX
+instance SuppressUnusedWarnings SortSym0 where
+  suppressUnusedWarnings _ = snd ((,) SortSym0KindInference ())
+data SortSym0 (l_a15yY :: TyFun [a_a15eP] [a_a15eP])
+  = forall arg_a15yZ. KindOf (Apply SortSym0 arg_a15yZ) ~ KindOf (SortSym1 arg_a15yZ) =>
+    SortSym0KindInference
+type instance Apply SortSym0 l_a15yY = SortSym1 l_a15yY
+type DeleteBySym3 (t_a15z2 :: TyFun a_a15d9 (TyFun a_a15d9 Bool
+                                              -> *)
+                              -> *)
+                  (t_a15z3 :: a_a15d9)
+                  (t_a15z4 :: [a_a15d9]) =
+    DeleteBy t_a15z2 t_a15z3 t_a15z4
+instance SuppressUnusedWarnings DeleteBySym2 where
+  suppressUnusedWarnings _ = snd ((,) DeleteBySym2KindInference ())
+data DeleteBySym2 (l_a15zb :: TyFun a_a15d9 (TyFun a_a15d9 Bool
+                                              -> *)
+                              -> *)
+                  (l_a15zc :: a_a15d9)
+                  (l_a15za :: TyFun [a_a15d9] [a_a15d9])
+  = forall arg_a15zd. KindOf (Apply (DeleteBySym2 l_a15zb l_a15zc) arg_a15zd) ~ KindOf (DeleteBySym3 l_a15zb l_a15zc arg_a15zd) =>
+    DeleteBySym2KindInference
+type instance Apply (DeleteBySym2 l_a15zb l_a15zc) l_a15za = DeleteBySym3 l_a15zb l_a15zc l_a15za
+instance SuppressUnusedWarnings DeleteBySym1 where
+  suppressUnusedWarnings _ = snd ((,) DeleteBySym1KindInference ())
+data DeleteBySym1 (l_a15z8 :: TyFun a_a15d9 (TyFun a_a15d9 Bool
+                                              -> *)
+                              -> *)
+                  (l_a15z7 :: TyFun a_a15d9 (TyFun [a_a15d9] [a_a15d9] -> *))
+  = forall arg_a15z9. KindOf (Apply (DeleteBySym1 l_a15z8) arg_a15z9) ~ KindOf (DeleteBySym2 l_a15z8 arg_a15z9) =>
+    DeleteBySym1KindInference
+type instance Apply (DeleteBySym1 l_a15z8) l_a15z7 = DeleteBySym2 l_a15z8 l_a15z7
+instance SuppressUnusedWarnings DeleteBySym0 where
+  suppressUnusedWarnings _ = snd ((,) DeleteBySym0KindInference ())
+data DeleteBySym0 (l_a15z5 :: TyFun (TyFun a_a15d9 (TyFun a_a15d9 Bool
+                                                    -> *)
+                                      -> *) (TyFun a_a15d9 (TyFun [a_a15d9] [a_a15d9] -> *)
+                                            -> *))
+  = forall arg_a15z6. KindOf (Apply DeleteBySym0 arg_a15z6) ~ KindOf (DeleteBySym1 arg_a15z6) =>
+    DeleteBySym0KindInference
+type instance Apply DeleteBySym0 l_a15z5 = DeleteBySym1 l_a15z5
+type DeleteFirstsBySym3 (t_a15zN :: TyFun a_a15de (TyFun a_a15de Bool
+                                                    -> *)
+                                    -> *)
+                        (t_a15zO :: [a_a15de])
+                        (t_a15zP :: [a_a15de]) =
+    DeleteFirstsBy t_a15zN t_a15zO t_a15zP
+instance SuppressUnusedWarnings DeleteFirstsBySym2 where
+  suppressUnusedWarnings _
+    = snd ((,) DeleteFirstsBySym2KindInference ())
+data DeleteFirstsBySym2 (l_a15zW :: TyFun a_a15de (TyFun a_a15de Bool
+                                                    -> *)
+                                    -> *)
+                        (l_a15zX :: [a_a15de])
+                        (l_a15zV :: TyFun [a_a15de] [a_a15de])
+  = forall arg_a15zY. KindOf (Apply (DeleteFirstsBySym2 l_a15zW l_a15zX) arg_a15zY) ~ KindOf (DeleteFirstsBySym3 l_a15zW l_a15zX arg_a15zY) =>
+    DeleteFirstsBySym2KindInference
+type instance Apply (DeleteFirstsBySym2 l_a15zW l_a15zX) l_a15zV = DeleteFirstsBySym3 l_a15zW l_a15zX l_a15zV
+instance SuppressUnusedWarnings DeleteFirstsBySym1 where
+  suppressUnusedWarnings _
+    = snd ((,) DeleteFirstsBySym1KindInference ())
+data DeleteFirstsBySym1 (l_a15zT :: TyFun a_a15de (TyFun a_a15de Bool
+                                                    -> *)
+                                    -> *)
+                        (l_a15zS :: TyFun [a_a15de] (TyFun [a_a15de] [a_a15de] -> *))
+  = forall arg_a15zU. KindOf (Apply (DeleteFirstsBySym1 l_a15zT) arg_a15zU) ~ KindOf (DeleteFirstsBySym2 l_a15zT arg_a15zU) =>
+    DeleteFirstsBySym1KindInference
+type instance Apply (DeleteFirstsBySym1 l_a15zT) l_a15zS = DeleteFirstsBySym2 l_a15zT l_a15zS
+instance SuppressUnusedWarnings DeleteFirstsBySym0 where
+  suppressUnusedWarnings _
+    = snd ((,) DeleteFirstsBySym0KindInference ())
+data DeleteFirstsBySym0 (l_a15zQ :: TyFun (TyFun a_a15de (TyFun a_a15de Bool
+                                                          -> *)
+                                            -> *) (TyFun [a_a15de] (TyFun [a_a15de] [a_a15de]
+                                                                    -> *)
+                                                  -> *))
+  = forall arg_a15zR. KindOf (Apply DeleteFirstsBySym0 arg_a15zR) ~ KindOf (DeleteFirstsBySym1 arg_a15zR) =>
+    DeleteFirstsBySym0KindInference
+type instance Apply DeleteFirstsBySym0 l_a15zQ = DeleteFirstsBySym1 l_a15zQ
+type UnionBySym3 (t_a15A9 :: TyFun a_a15fS (TyFun a_a15fS Bool
+                                            -> *)
+                              -> *)
+                  (t_a15Aa :: [a_a15fS])
+                  (t_a15Ab :: [a_a15fS]) =
+    UnionBy t_a15A9 t_a15Aa t_a15Ab
+instance SuppressUnusedWarnings UnionBySym2 where
+  suppressUnusedWarnings _ = snd ((,) UnionBySym2KindInference ())
+data UnionBySym2 (l_a15Ai :: TyFun a_a15fS (TyFun a_a15fS Bool
+                                            -> *)
+                              -> *)
+                  (l_a15Aj :: [a_a15fS])
+                  (l_a15Ah :: TyFun [a_a15fS] [a_a15fS])
+  = forall arg_a15Ak. KindOf (Apply (UnionBySym2 l_a15Ai l_a15Aj) arg_a15Ak) ~ KindOf (UnionBySym3 l_a15Ai l_a15Aj arg_a15Ak) =>
+    UnionBySym2KindInference
+type instance Apply (UnionBySym2 l_a15Ai l_a15Aj) l_a15Ah = UnionBySym3 l_a15Ai l_a15Aj l_a15Ah
+instance SuppressUnusedWarnings UnionBySym1 where
+  suppressUnusedWarnings _ = snd ((,) UnionBySym1KindInference ())
+data UnionBySym1 (l_a15Af :: TyFun a_a15fS (TyFun a_a15fS Bool
+                                            -> *)
+                              -> *)
+                  (l_a15Ae :: TyFun [a_a15fS] (TyFun [a_a15fS] [a_a15fS] -> *))
+  = forall arg_a15Ag. KindOf (Apply (UnionBySym1 l_a15Af) arg_a15Ag) ~ KindOf (UnionBySym2 l_a15Af arg_a15Ag) =>
+    UnionBySym1KindInference
+type instance Apply (UnionBySym1 l_a15Af) l_a15Ae = UnionBySym2 l_a15Af l_a15Ae
+instance SuppressUnusedWarnings UnionBySym0 where
+  suppressUnusedWarnings _ = snd ((,) UnionBySym0KindInference ())
+data UnionBySym0 (l_a15Ac :: TyFun (TyFun a_a15fS (TyFun a_a15fS Bool
+                                                    -> *)
+                                    -> *) (TyFun [a_a15fS] (TyFun [a_a15fS] [a_a15fS] -> *)
+                                            -> *))
+  = forall arg_a15Ad. KindOf (Apply UnionBySym0 arg_a15Ad) ~ KindOf (UnionBySym1 arg_a15Ad) =>
+    UnionBySym0KindInference
+type instance Apply UnionBySym0 l_a15Ac = UnionBySym1 l_a15Ac
+type UnionSym2 (t_a15Av :: [a_a15fW]) (t_a15Aw :: [a_a15fW]) =
+    Union t_a15Av t_a15Aw
+instance SuppressUnusedWarnings UnionSym1 where
+  suppressUnusedWarnings _ = snd ((,) UnionSym1KindInference ())
+data UnionSym1 (l_a15AA :: [a_a15fW])
+                (l_a15Az :: TyFun [a_a15fW] [a_a15fW])
+  = forall arg_a15AB. KindOf (Apply (UnionSym1 l_a15AA) arg_a15AB) ~ KindOf (UnionSym2 l_a15AA arg_a15AB) =>
+    UnionSym1KindInference
+type instance Apply (UnionSym1 l_a15AA) l_a15Az = UnionSym2 l_a15AA l_a15Az
+instance SuppressUnusedWarnings UnionSym0 where
+  suppressUnusedWarnings _ = snd ((,) UnionSym0KindInference ())
+data UnionSym0 (l_a15Ax :: TyFun [a_a15fW] (TyFun [a_a15fW] [a_a15fW]
+                                            -> *))
+  = forall arg_a15Ay. KindOf (Apply UnionSym0 arg_a15Ay) ~ KindOf (UnionSym1 arg_a15Ay) =>
+    UnionSym0KindInference
+type instance Apply UnionSym0 l_a15Ax = UnionSym1 l_a15Ax
+type DeleteSym2 (t_a15AK :: a_a15d7) (t_a15AL :: [a_a15d7]) =
+    Delete t_a15AK t_a15AL
+instance SuppressUnusedWarnings DeleteSym1 where
+  suppressUnusedWarnings _ = snd ((,) DeleteSym1KindInference ())
+data DeleteSym1 (l_a15AP :: a_a15d7)
+                (l_a15AO :: TyFun [a_a15d7] [a_a15d7])
+  = forall arg_a15AQ. KindOf (Apply (DeleteSym1 l_a15AP) arg_a15AQ) ~ KindOf (DeleteSym2 l_a15AP arg_a15AQ) =>
+    DeleteSym1KindInference
+type instance Apply (DeleteSym1 l_a15AP) l_a15AO = DeleteSym2 l_a15AP l_a15AO
+instance SuppressUnusedWarnings DeleteSym0 where
+  suppressUnusedWarnings _ = snd ((,) DeleteSym0KindInference ())
+data DeleteSym0 (l_a15AM :: TyFun a_a15d7 (TyFun [a_a15d7] [a_a15d7]
+                                            -> *))
+  = forall arg_a15AN. KindOf (Apply DeleteSym0 arg_a15AN) ~ KindOf (DeleteSym1 arg_a15AN) =>
+    DeleteSym0KindInference
+type instance Apply DeleteSym0 l_a15AM = DeleteSym1 l_a15AM
+type (:\\$$$) (t_a15AZ :: [a_a15d8]) (t_a15B0 :: [a_a15d8]) =
+    (:\\) t_a15AZ t_a15B0
+instance SuppressUnusedWarnings (:\\$$) where
+  suppressUnusedWarnings _ = snd ((,) (:\\$$###) ())
+data (:\\$$) (l_a15B4 :: [a_a15d8])
+              (l_a15B3 :: TyFun [a_a15d8] [a_a15d8])
+  = forall arg_a15B5. KindOf (Apply ((:\\$$) l_a15B4) arg_a15B5) ~ KindOf ((:\\$$$) l_a15B4 arg_a15B5) =>
+    (:\\$$###)
+type instance Apply ((:\\$$) l_a15B4) l_a15B3 = (:\\$$$) l_a15B4 l_a15B3
+instance SuppressUnusedWarnings (:\\$) where
+  suppressUnusedWarnings _ = snd ((,) (:\\$###) ())
+data (:\\$) (l_a15B1 :: TyFun [a_a15d8] (TyFun [a_a15d8] [a_a15d8]
+                                          -> *))
+  = forall arg_a15B2. KindOf (Apply (:\\$) arg_a15B2) ~ KindOf ((:\\$$) arg_a15B2) =>
+    (:\\$###)
+type instance Apply (:\\$) l_a15B1 = (:\\$$) l_a15B1
+type Unzip7Sym1 (t_a15Ba :: [(a_a15cL,
+                              b_a15cM,
+                              c_a15cN,
+                              d_a15cO,
+                              e_a15cP,
+                              f_a15cQ,
+                              g_a15cR)]) =
+    Unzip7 t_a15Ba
+instance SuppressUnusedWarnings Unzip7Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Unzip7Sym0KindInference ())
+data Unzip7Sym0 (l_a15Bb :: TyFun [(a_a15cL,
+                                    b_a15cM,
+                                    c_a15cN,
+                                    d_a15cO,
+                                    e_a15cP,
+                                    f_a15cQ,
+                                    g_a15cR)] ([a_a15cL],
+                                                [b_a15cM],
+                                                [c_a15cN],
+                                                [d_a15cO],
+                                                [e_a15cP],
+                                                [f_a15cQ],
+                                                [g_a15cR]))
+  = forall arg_a15Bc. KindOf (Apply Unzip7Sym0 arg_a15Bc) ~ KindOf (Unzip7Sym1 arg_a15Bc) =>
+    Unzip7Sym0KindInference
+type instance Apply Unzip7Sym0 l_a15Bb = Unzip7Sym1 l_a15Bb
+type Unzip6Sym1 (t_a15BO :: [(a_a15cs,
+                              b_a15ct,
+                              c_a15cu,
+                              d_a15cv,
+                              e_a15cw,
+                              f_a15cx)]) =
+    Unzip6 t_a15BO
+instance SuppressUnusedWarnings Unzip6Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Unzip6Sym0KindInference ())
+data Unzip6Sym0 (l_a15BP :: TyFun [(a_a15cs,
+                                    b_a15ct,
+                                    c_a15cu,
+                                    d_a15cv,
+                                    e_a15cw,
+                                    f_a15cx)] ([a_a15cs],
+                                                [b_a15ct],
+                                                [c_a15cu],
+                                                [d_a15cv],
+                                                [e_a15cw],
+                                                [f_a15cx]))
+  = forall arg_a15BQ. KindOf (Apply Unzip6Sym0 arg_a15BQ) ~ KindOf (Unzip6Sym1 arg_a15BQ) =>
+    Unzip6Sym0KindInference
+type instance Apply Unzip6Sym0 l_a15BP = Unzip6Sym1 l_a15BP
+type Unzip5Sym1 (t_a15Cq :: [(a_a15cc,
+                              b_a15cd,
+                              c_a15ce,
+                              d_a15cf,
+                              e_a15cg)]) =
+    Unzip5 t_a15Cq
+instance SuppressUnusedWarnings Unzip5Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Unzip5Sym0KindInference ())
+data Unzip5Sym0 (l_a15Cr :: TyFun [(a_a15cc,
+                                    b_a15cd,
+                                    c_a15ce,
+                                    d_a15cf,
+                                    e_a15cg)] ([a_a15cc],
+                                                [b_a15cd],
+                                                [c_a15ce],
+                                                [d_a15cf],
+                                                [e_a15cg]))
+  = forall arg_a15Cs. KindOf (Apply Unzip5Sym0 arg_a15Cs) ~ KindOf (Unzip5Sym1 arg_a15Cs) =>
+    Unzip5Sym0KindInference
+type instance Apply Unzip5Sym0 l_a15Cr = Unzip5Sym1 l_a15Cr
+type Unzip4Sym1 (t_a15D0 :: [(a_a15bZ,
+                              b_a15c0,
+                              c_a15c1,
+                              d_a15c2)]) =
+    Unzip4 t_a15D0
+instance SuppressUnusedWarnings Unzip4Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Unzip4Sym0KindInference ())
+data Unzip4Sym0 (l_a15D1 :: TyFun [(a_a15bZ,
+                                    b_a15c0,
+                                    c_a15c1,
+                                    d_a15c2)] ([a_a15bZ], [b_a15c0], [c_a15c1], [d_a15c2]))
+  = forall arg_a15D2. KindOf (Apply Unzip4Sym0 arg_a15D2) ~ KindOf (Unzip4Sym1 arg_a15D2) =>
+    Unzip4Sym0KindInference
+type instance Apply Unzip4Sym0 l_a15D1 = Unzip4Sym1 l_a15D1
+type Unzip3Sym1 (t_a15Dy :: [(a_a15bP, b_a15bQ, c_a15bR)]) =
+    Unzip3 t_a15Dy
+instance SuppressUnusedWarnings Unzip3Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Unzip3Sym0KindInference ())
+data Unzip3Sym0 (l_a15Dz :: TyFun [(a_a15bP,
+                                    b_a15bQ,
+                                    c_a15bR)] ([a_a15bP], [b_a15bQ], [c_a15bR]))
+  = forall arg_a15DA. KindOf (Apply Unzip3Sym0 arg_a15DA) ~ KindOf (Unzip3Sym1 arg_a15DA) =>
+    Unzip3Sym0KindInference
+type instance Apply Unzip3Sym0 l_a15Dz = Unzip3Sym1 l_a15Dz
+type UnzipSym1 (t_a15E4 :: [(a_a15bI, b_a15bJ)]) = Unzip t_a15E4
+instance SuppressUnusedWarnings UnzipSym0 where
+  suppressUnusedWarnings _ = snd ((,) UnzipSym0KindInference ())
+data UnzipSym0 (l_a15E5 :: TyFun [(a_a15bI, b_a15bJ)] ([a_a15bI],
+                                                        [b_a15bJ]))
+  = forall arg_a15E6. KindOf (Apply UnzipSym0 arg_a15E6) ~ KindOf (UnzipSym1 arg_a15E6) =>
+    UnzipSym0KindInference
+type instance Apply UnzipSym0 l_a15E5 = UnzipSym1 l_a15E5
+type ZipWith3Sym4 (t_a15Ey :: TyFun a_a15bx (TyFun b_a15by (TyFun c_a15bz d_a15bA
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (t_a15Ez :: [a_a15bx])
+                  (t_a15EA :: [b_a15by])
+                  (t_a15EB :: [c_a15bz]) =
+    ZipWith3 t_a15Ey t_a15Ez t_a15EA t_a15EB
+instance SuppressUnusedWarnings ZipWith3Sym3 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith3Sym3KindInference ())
+data ZipWith3Sym3 (l_a15EM :: TyFun a_a15bx (TyFun b_a15by (TyFun c_a15bz d_a15bA
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a15EN :: [a_a15bx])
+                  (l_a15EO :: [b_a15by])
+                  (l_a15EL :: TyFun [c_a15bz] [d_a15bA])
+  = forall arg_a15EP. KindOf (Apply (ZipWith3Sym3 l_a15EM l_a15EN l_a15EO) arg_a15EP) ~ KindOf (ZipWith3Sym4 l_a15EM l_a15EN l_a15EO arg_a15EP) =>
+    ZipWith3Sym3KindInference
+type instance Apply (ZipWith3Sym3 l_a15EM l_a15EN l_a15EO) l_a15EL = ZipWith3Sym4 l_a15EM l_a15EN l_a15EO l_a15EL
+instance SuppressUnusedWarnings ZipWith3Sym2 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith3Sym2KindInference ())
+data ZipWith3Sym2 (l_a15EI :: TyFun a_a15bx (TyFun b_a15by (TyFun c_a15bz d_a15bA
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a15EJ :: [a_a15bx])
+                  (l_a15EH :: TyFun [b_a15by] (TyFun [c_a15bz] [d_a15bA] -> *))
+  = forall arg_a15EK. KindOf (Apply (ZipWith3Sym2 l_a15EI l_a15EJ) arg_a15EK) ~ KindOf (ZipWith3Sym3 l_a15EI l_a15EJ arg_a15EK) =>
+    ZipWith3Sym2KindInference
+type instance Apply (ZipWith3Sym2 l_a15EI l_a15EJ) l_a15EH = ZipWith3Sym3 l_a15EI l_a15EJ l_a15EH
+instance SuppressUnusedWarnings ZipWith3Sym1 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith3Sym1KindInference ())
+data ZipWith3Sym1 (l_a15EF :: TyFun a_a15bx (TyFun b_a15by (TyFun c_a15bz d_a15bA
+                                                            -> *)
+                                              -> *)
+                              -> *)
+                  (l_a15EE :: TyFun [a_a15bx] (TyFun [b_a15by] (TyFun [c_a15bz] [d_a15bA]
+                                                                -> *)
+                                                -> *))
+  = forall arg_a15EG. KindOf (Apply (ZipWith3Sym1 l_a15EF) arg_a15EG) ~ KindOf (ZipWith3Sym2 l_a15EF arg_a15EG) =>
+    ZipWith3Sym1KindInference
+type instance Apply (ZipWith3Sym1 l_a15EF) l_a15EE = ZipWith3Sym2 l_a15EF l_a15EE
+instance SuppressUnusedWarnings ZipWith3Sym0 where
+  suppressUnusedWarnings _ = snd ((,) ZipWith3Sym0KindInference ())
+data ZipWith3Sym0 (l_a15EC :: TyFun (TyFun a_a15bx (TyFun b_a15by (TyFun c_a15bz d_a15bA
+                                                                    -> *)
+                                                    -> *)
+                                      -> *) (TyFun [a_a15bx] (TyFun [b_a15by] (TyFun [c_a15bz] [d_a15bA]
+                                                                              -> *)
+                                                              -> *)
+                                            -> *))
+  = forall arg_a15ED. KindOf (Apply ZipWith3Sym0 arg_a15ED) ~ KindOf (ZipWith3Sym1 arg_a15ED) =>
+    ZipWith3Sym0KindInference
+type instance Apply ZipWith3Sym0 l_a15EC = ZipWith3Sym1 l_a15EC
+type ZipWithSym3 (t_a15Ge :: TyFun a_a15bp (TyFun b_a15bq c_a15br
+                                            -> *)
+                              -> *)
+                  (t_a15Gf :: [a_a15bp])
+                  (t_a15Gg :: [b_a15bq]) =
+    ZipWith t_a15Ge t_a15Gf t_a15Gg
+instance SuppressUnusedWarnings ZipWithSym2 where
+  suppressUnusedWarnings _ = snd ((,) ZipWithSym2KindInference ())
+data ZipWithSym2 (l_a15Gn :: TyFun a_a15bp (TyFun b_a15bq c_a15br
+                                            -> *)
+                              -> *)
+                  (l_a15Go :: [a_a15bp])
+                  (l_a15Gm :: TyFun [b_a15bq] [c_a15br])
+  = forall arg_a15Gp. KindOf (Apply (ZipWithSym2 l_a15Gn l_a15Go) arg_a15Gp) ~ KindOf (ZipWithSym3 l_a15Gn l_a15Go arg_a15Gp) =>
+    ZipWithSym2KindInference
+type instance Apply (ZipWithSym2 l_a15Gn l_a15Go) l_a15Gm = ZipWithSym3 l_a15Gn l_a15Go l_a15Gm
+instance SuppressUnusedWarnings ZipWithSym1 where
+  suppressUnusedWarnings _ = snd ((,) ZipWithSym1KindInference ())
+data ZipWithSym1 (l_a15Gk :: TyFun a_a15bp (TyFun b_a15bq c_a15br
+                                            -> *)
+                              -> *)
+                  (l_a15Gj :: TyFun [a_a15bp] (TyFun [b_a15bq] [c_a15br] -> *))
+  = forall arg_a15Gl. KindOf (Apply (ZipWithSym1 l_a15Gk) arg_a15Gl) ~ KindOf (ZipWithSym2 l_a15Gk arg_a15Gl) =>
+    ZipWithSym1KindInference
+type instance Apply (ZipWithSym1 l_a15Gk) l_a15Gj = ZipWithSym2 l_a15Gk l_a15Gj
+instance SuppressUnusedWarnings ZipWithSym0 where
+  suppressUnusedWarnings _ = snd ((,) ZipWithSym0KindInference ())
+data ZipWithSym0 (l_a15Gh :: TyFun (TyFun a_a15bp (TyFun b_a15bq c_a15br
+                                                    -> *)
+                                    -> *) (TyFun [a_a15bp] (TyFun [b_a15bq] [c_a15br] -> *)
+                                            -> *))
+  = forall arg_a15Gi. KindOf (Apply ZipWithSym0 arg_a15Gi) ~ KindOf (ZipWithSym1 arg_a15Gi) =>
+    ZipWithSym0KindInference
+type instance Apply ZipWithSym0 l_a15Gh = ZipWithSym1 l_a15Gh
+type Zip3Sym3 (t_a15GT :: [a_a15bg])
+              (t_a15GU :: [b_a15bh])
+              (t_a15GV :: [c_a15bi]) =
+    Zip3 t_a15GT t_a15GU t_a15GV
+instance SuppressUnusedWarnings Zip3Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Zip3Sym2KindInference ())
+data Zip3Sym2 (l_a15H2 :: [a_a15bg])
+              (l_a15H3 :: [b_a15bh])
+              (l_a15H1 :: TyFun [c_a15bi] [(a_a15bg, b_a15bh, c_a15bi)])
+  = forall arg_a15H4. KindOf (Apply (Zip3Sym2 l_a15H2 l_a15H3) arg_a15H4) ~ KindOf (Zip3Sym3 l_a15H2 l_a15H3 arg_a15H4) =>
+    Zip3Sym2KindInference
+type instance Apply (Zip3Sym2 l_a15H2 l_a15H3) l_a15H1 = Zip3Sym3 l_a15H2 l_a15H3 l_a15H1
+instance SuppressUnusedWarnings Zip3Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Zip3Sym1KindInference ())
+data Zip3Sym1 (l_a15GZ :: [a_a15bg])
+              (l_a15GY :: TyFun [b_a15bh] (TyFun [c_a15bi] [(a_a15bg,
+                                                              b_a15bh,
+                                                              c_a15bi)]
+                                            -> *))
+  = forall arg_a15H0. KindOf (Apply (Zip3Sym1 l_a15GZ) arg_a15H0) ~ KindOf (Zip3Sym2 l_a15GZ arg_a15H0) =>
+    Zip3Sym1KindInference
+type instance Apply (Zip3Sym1 l_a15GZ) l_a15GY = Zip3Sym2 l_a15GZ l_a15GY
+instance SuppressUnusedWarnings Zip3Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Zip3Sym0KindInference ())
+data Zip3Sym0 (l_a15GW :: TyFun [a_a15bg] (TyFun [b_a15bh] (TyFun [c_a15bi] [(a_a15bg,
+                                                                              b_a15bh,
+                                                                              c_a15bi)]
+                                                            -> *)
+                                            -> *))
+  = forall arg_a15GX. KindOf (Apply Zip3Sym0 arg_a15GX) ~ KindOf (Zip3Sym1 arg_a15GX) =>
+    Zip3Sym0KindInference
+type instance Apply Zip3Sym0 l_a15GW = Zip3Sym1 l_a15GW
+type ZipSym2 (t_a15I6 :: [a_a15ba]) (t_a15I7 :: [b_a15bb]) =
+    Zip t_a15I6 t_a15I7
+instance SuppressUnusedWarnings ZipSym1 where
+  suppressUnusedWarnings _ = snd ((,) ZipSym1KindInference ())
+data ZipSym1 (l_a15Ib :: [a_a15ba])
+              (l_a15Ia :: TyFun [b_a15bb] [(a_a15ba, b_a15bb)])
+  = forall arg_a15Ic. KindOf (Apply (ZipSym1 l_a15Ib) arg_a15Ic) ~ KindOf (ZipSym2 l_a15Ib arg_a15Ic) =>
+    ZipSym1KindInference
+type instance Apply (ZipSym1 l_a15Ib) l_a15Ia = ZipSym2 l_a15Ib l_a15Ia
+instance SuppressUnusedWarnings ZipSym0 where
+  suppressUnusedWarnings _ = snd ((,) ZipSym0KindInference ())
+data ZipSym0 (l_a15I8 :: TyFun [a_a15ba] (TyFun [b_a15bb] [(a_a15ba,
+                                                            b_a15bb)]
+                                          -> *))
+  = forall arg_a15I9. KindOf (Apply ZipSym0 arg_a15I9) ~ KindOf (ZipSym1 arg_a15I9) =>
+    ZipSym0KindInference
+type instance Apply ZipSym0 l_a15I8 = ZipSym1 l_a15I8
+type FindIndicesSym2 (t_a15Iv :: TyFun a_a15dO Bool -> *)
+                      (t_a15Iw :: [a_a15dO]) =
+    FindIndices t_a15Iv t_a15Iw
+instance SuppressUnusedWarnings FindIndicesSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) FindIndicesSym1KindInference ())
+data FindIndicesSym1 (l_a15IA :: TyFun a_a15dO Bool -> *)
+                      (l_a15Iz :: TyFun [a_a15dO] [Nat])
+  = forall arg_a15IB. KindOf (Apply (FindIndicesSym1 l_a15IA) arg_a15IB) ~ KindOf (FindIndicesSym2 l_a15IA arg_a15IB) =>
+    FindIndicesSym1KindInference
+type instance Apply (FindIndicesSym1 l_a15IA) l_a15Iz = FindIndicesSym2 l_a15IA l_a15Iz
+instance SuppressUnusedWarnings FindIndicesSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) FindIndicesSym0KindInference ())
+data FindIndicesSym0 (l_a15Ix :: TyFun (TyFun a_a15dO Bool
+                                        -> *) (TyFun [a_a15dO] [Nat] -> *))
+  = forall arg_a15Iy. KindOf (Apply FindIndicesSym0 arg_a15Iy) ~ KindOf (FindIndicesSym1 arg_a15Iy) =>
+    FindIndicesSym0KindInference
+type instance Apply FindIndicesSym0 l_a15Ix = FindIndicesSym1 l_a15Ix
+type ElemIndicesSym2 (t_a15Jw :: a_a15dK) (t_a15Jx :: [a_a15dK]) =
+    ElemIndices t_a15Jw t_a15Jx
+instance SuppressUnusedWarnings ElemIndicesSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) ElemIndicesSym1KindInference ())
+data ElemIndicesSym1 (l_a15JB :: a_a15dK)
+                      (l_a15JA :: TyFun [a_a15dK] [Nat])
+  = forall arg_a15JC. KindOf (Apply (ElemIndicesSym1 l_a15JB) arg_a15JC) ~ KindOf (ElemIndicesSym2 l_a15JB arg_a15JC) =>
+    ElemIndicesSym1KindInference
+type instance Apply (ElemIndicesSym1 l_a15JB) l_a15JA = ElemIndicesSym2 l_a15JB l_a15JA
+instance SuppressUnusedWarnings ElemIndicesSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) ElemIndicesSym0KindInference ())
+data ElemIndicesSym0 (l_a15Jy :: TyFun a_a15dK (TyFun [a_a15dK] [Nat]
+                                                -> *))
+  = forall arg_a15Jz. KindOf (Apply ElemIndicesSym0 arg_a15Jz) ~ KindOf (ElemIndicesSym1 arg_a15Jz) =>
+    ElemIndicesSym0KindInference
+type instance Apply ElemIndicesSym0 l_a15Jy = ElemIndicesSym1 l_a15Jy
+type FindIndexSym2 (t_a15JJ :: TyFun a_a15dM Bool -> *)
+                    (t_a15JK :: [a_a15dM]) =
+    FindIndex t_a15JJ t_a15JK
+instance SuppressUnusedWarnings FindIndexSym1 where
+  suppressUnusedWarnings _ = snd ((,) FindIndexSym1KindInference ())
+data FindIndexSym1 (l_a15JO :: TyFun a_a15dM Bool -> *)
+                    (l_a15JN :: TyFun [a_a15dM] (Maybe Nat))
+  = forall arg_a15JP. KindOf (Apply (FindIndexSym1 l_a15JO) arg_a15JP) ~ KindOf (FindIndexSym2 l_a15JO arg_a15JP) =>
+    FindIndexSym1KindInference
+type instance Apply (FindIndexSym1 l_a15JO) l_a15JN = FindIndexSym2 l_a15JO l_a15JN
+instance SuppressUnusedWarnings FindIndexSym0 where
+  suppressUnusedWarnings _ = snd ((,) FindIndexSym0KindInference ())
+data FindIndexSym0 (l_a15JL :: TyFun (TyFun a_a15dM Bool
+                                      -> *) (TyFun [a_a15dM] (Maybe Nat) -> *))
+  = forall arg_a15JM. KindOf (Apply FindIndexSym0 arg_a15JM) ~ KindOf (FindIndexSym1 arg_a15JM) =>
+    FindIndexSym0KindInference
+type instance Apply FindIndexSym0 l_a15JL = FindIndexSym1 l_a15JL
+type ElemIndexSym2 (t_a15JW :: a_a15dI) (t_a15JX :: [a_a15dI]) =
+    ElemIndex t_a15JW t_a15JX
+instance SuppressUnusedWarnings ElemIndexSym1 where
+  suppressUnusedWarnings _ = snd ((,) ElemIndexSym1KindInference ())
+data ElemIndexSym1 (l_a15K1 :: a_a15dI)
+                    (l_a15K0 :: TyFun [a_a15dI] (Maybe Nat))
+  = forall arg_a15K2. KindOf (Apply (ElemIndexSym1 l_a15K1) arg_a15K2) ~ KindOf (ElemIndexSym2 l_a15K1 arg_a15K2) =>
+    ElemIndexSym1KindInference
+type instance Apply (ElemIndexSym1 l_a15K1) l_a15K0 = ElemIndexSym2 l_a15K1 l_a15K0
+instance SuppressUnusedWarnings ElemIndexSym0 where
+  suppressUnusedWarnings _ = snd ((,) ElemIndexSym0KindInference ())
+data ElemIndexSym0 (l_a15JY :: TyFun a_a15dI (TyFun [a_a15dI] (Maybe Nat)
+                                              -> *))
+  = forall arg_a15JZ. KindOf (Apply ElemIndexSym0 arg_a15JZ) ~ KindOf (ElemIndexSym1 arg_a15JZ) =>
+    ElemIndexSym0KindInference
+type instance Apply ElemIndexSym0 l_a15JY = ElemIndexSym1 l_a15JY
+type NotElemSym2 (t_a15K9 :: a_a15b6) (t_a15Ka :: [a_a15b6]) =
+    NotElem t_a15K9 t_a15Ka
+instance SuppressUnusedWarnings NotElemSym1 where
+  suppressUnusedWarnings _ = snd ((,) NotElemSym1KindInference ())
+data NotElemSym1 (l_a15Ke :: a_a15b6)
+                  (l_a15Kd :: TyFun [a_a15b6] Bool)
+  = forall arg_a15Kf. KindOf (Apply (NotElemSym1 l_a15Ke) arg_a15Kf) ~ KindOf (NotElemSym2 l_a15Ke arg_a15Kf) =>
+    NotElemSym1KindInference
+type instance Apply (NotElemSym1 l_a15Ke) l_a15Kd = NotElemSym2 l_a15Ke l_a15Kd
+instance SuppressUnusedWarnings NotElemSym0 where
+  suppressUnusedWarnings _ = snd ((,) NotElemSym0KindInference ())
+data NotElemSym0 (l_a15Kb :: TyFun a_a15b6 (TyFun [a_a15b6] Bool
+                                            -> *))
+  = forall arg_a15Kc. KindOf (Apply NotElemSym0 arg_a15Kc) ~ KindOf (NotElemSym1 arg_a15Kc) =>
+    NotElemSym0KindInference
+type instance Apply NotElemSym0 l_a15Kb = NotElemSym1 l_a15Kb
+type ElemSym2 (t_a15Ko :: a_a15b2) (t_a15Kp :: [a_a15b2]) =
+    Elem t_a15Ko t_a15Kp
+instance SuppressUnusedWarnings ElemSym1 where
+  suppressUnusedWarnings _ = snd ((,) ElemSym1KindInference ())
+data ElemSym1 (l_a15Kt :: a_a15b2)
+              (l_a15Ks :: TyFun [a_a15b2] Bool)
+  = forall arg_a15Ku. KindOf (Apply (ElemSym1 l_a15Kt) arg_a15Ku) ~ KindOf (ElemSym2 l_a15Kt arg_a15Ku) =>
+    ElemSym1KindInference
+type instance Apply (ElemSym1 l_a15Kt) l_a15Ks = ElemSym2 l_a15Kt l_a15Ks
+instance SuppressUnusedWarnings ElemSym0 where
+  suppressUnusedWarnings _ = snd ((,) ElemSym0KindInference ())
+data ElemSym0 (l_a15Kq :: TyFun a_a15b2 (TyFun [a_a15b2] Bool
+                                          -> *))
+  = forall arg_a15Kr. KindOf (Apply ElemSym0 arg_a15Kr) ~ KindOf (ElemSym1 arg_a15Kr) =>
+    ElemSym0KindInference
+type instance Apply ElemSym0 l_a15Kq = ElemSym1 l_a15Kq
+type NubSym1 (t_a15KD :: [a_a156K]) = Nub t_a15KD
+instance SuppressUnusedWarnings NubSym0 where
+  suppressUnusedWarnings _ = snd ((,) NubSym0KindInference ())
+data NubSym0 (l_a15KE :: TyFun [a_a156K] [a_a156K])
+  = forall arg_a15KF. KindOf (Apply NubSym0 arg_a15KF) ~ KindOf (NubSym1 arg_a15KF) =>
+    NubSym0KindInference
+type instance Apply NubSym0 l_a15KE = NubSym1 l_a15KE
+type IsPrefixOfSym2 (t_a15Lp :: [a_a15aR]) (t_a15Lq :: [a_a15aR]) =
+    IsPrefixOf t_a15Lp t_a15Lq
+instance SuppressUnusedWarnings IsPrefixOfSym1 where
+  suppressUnusedWarnings _ = snd ((,) IsPrefixOfSym1KindInference ())
+data IsPrefixOfSym1 (l_a15Lu :: [a_a15aR])
+                    (l_a15Lt :: TyFun [a_a15aR] Bool)
+  = forall arg_a15Lv. KindOf (Apply (IsPrefixOfSym1 l_a15Lu) arg_a15Lv) ~ KindOf (IsPrefixOfSym2 l_a15Lu arg_a15Lv) =>
+    IsPrefixOfSym1KindInference
+type instance Apply (IsPrefixOfSym1 l_a15Lu) l_a15Lt = IsPrefixOfSym2 l_a15Lu l_a15Lt
+instance SuppressUnusedWarnings IsPrefixOfSym0 where
+  suppressUnusedWarnings _ = snd ((,) IsPrefixOfSym0KindInference ())
+data IsPrefixOfSym0 (l_a15Lr :: TyFun [a_a15aR] (TyFun [a_a15aR] Bool
+                                                  -> *))
+  = forall arg_a15Ls. KindOf (Apply IsPrefixOfSym0 arg_a15Ls) ~ KindOf (IsPrefixOfSym1 arg_a15Ls) =>
+    IsPrefixOfSym0KindInference
+type instance Apply IsPrefixOfSym0 l_a15Lr = IsPrefixOfSym1 l_a15Lr
+type TailsSym1 (t_a15LO :: [a_a15aO]) = Tails t_a15LO
+instance SuppressUnusedWarnings TailsSym0 where
+  suppressUnusedWarnings _ = snd ((,) TailsSym0KindInference ())
+data TailsSym0 (l_a15LP :: TyFun [a_a15aO] [[a_a15aO]])
+  = forall arg_a15LQ. KindOf (Apply TailsSym0 arg_a15LQ) ~ KindOf (TailsSym1 arg_a15LQ) =>
+    TailsSym0KindInference
+type instance Apply TailsSym0 l_a15LP = TailsSym1 l_a15LP
+type IsInfixOfSym2 (t_a15M0 :: [a_a15aZ]) (t_a15M1 :: [a_a15aZ]) =
+    IsInfixOf t_a15M0 t_a15M1
+instance SuppressUnusedWarnings IsInfixOfSym1 where
+  suppressUnusedWarnings _ = snd ((,) IsInfixOfSym1KindInference ())
+data IsInfixOfSym1 (l_a15M5 :: [a_a15aZ])
+                    (l_a15M4 :: TyFun [a_a15aZ] Bool)
+  = forall arg_a15M6. KindOf (Apply (IsInfixOfSym1 l_a15M5) arg_a15M6) ~ KindOf (IsInfixOfSym2 l_a15M5 arg_a15M6) =>
+    IsInfixOfSym1KindInference
+type instance Apply (IsInfixOfSym1 l_a15M5) l_a15M4 = IsInfixOfSym2 l_a15M5 l_a15M4
+instance SuppressUnusedWarnings IsInfixOfSym0 where
+  suppressUnusedWarnings _ = snd ((,) IsInfixOfSym0KindInference ())
+data IsInfixOfSym0 (l_a15M2 :: TyFun [a_a15aZ] (TyFun [a_a15aZ] Bool
+                                                -> *))
+  = forall arg_a15M3. KindOf (Apply IsInfixOfSym0 arg_a15M3) ~ KindOf (IsInfixOfSym1 arg_a15M3) =>
+    IsInfixOfSym0KindInference
+type instance Apply IsInfixOfSym0 l_a15M2 = IsInfixOfSym1 l_a15M2
+type InitsSym1 (t_a15Mb :: [a_a15aK]) = Inits t_a15Mb
+instance SuppressUnusedWarnings InitsSym0 where
+  suppressUnusedWarnings _ = snd ((,) InitsSym0KindInference ())
+data InitsSym0 (l_a15Mc :: TyFun [a_a15aK] [[a_a15aK]])
+  = forall arg_a15Md. KindOf (Apply InitsSym0 arg_a15Md) ~ KindOf (InitsSym1 arg_a15Md) =>
+    InitsSym0KindInference
+type instance Apply InitsSym0 l_a15Mc = InitsSym1 l_a15Mc
+type UnfoldrSym2 (t_a15Ml :: TyFun b_a15aE (Maybe (a_a15aF,
+                                                    b_a15aE))
+                              -> *)
+                  (t_a15Mm :: b_a15aE) =
+    Unfoldr t_a15Ml t_a15Mm
+instance SuppressUnusedWarnings UnfoldrSym1 where
+  suppressUnusedWarnings _ = snd ((,) UnfoldrSym1KindInference ())
+data UnfoldrSym1 (l_a15Mq :: TyFun b_a15aE (Maybe (a_a15aF,
+                                                    b_a15aE))
+                              -> *)
+                  (l_a15Mp :: TyFun b_a15aE [a_a15aF])
+  = forall arg_a15Mr. KindOf (Apply (UnfoldrSym1 l_a15Mq) arg_a15Mr) ~ KindOf (UnfoldrSym2 l_a15Mq arg_a15Mr) =>
+    UnfoldrSym1KindInference
+type instance Apply (UnfoldrSym1 l_a15Mq) l_a15Mp = UnfoldrSym2 l_a15Mq l_a15Mp
+instance SuppressUnusedWarnings UnfoldrSym0 where
+  suppressUnusedWarnings _ = snd ((,) UnfoldrSym0KindInference ())
+data UnfoldrSym0 (l_a15Mn :: TyFun (TyFun b_a15aE (Maybe (a_a15aF,
+                                                          b_a15aE))
+                                    -> *) (TyFun b_a15aE [a_a15aF] -> *))
+  = forall arg_a15Mo. KindOf (Apply UnfoldrSym0 arg_a15Mo) ~ KindOf (UnfoldrSym1 arg_a15Mo) =>
+    UnfoldrSym0KindInference
+type instance Apply UnfoldrSym0 l_a15Mn = UnfoldrSym1 l_a15Mn
+type MapAccumRSym3 (t_a15MJ :: TyFun acc_a15as (TyFun x_a15at (acc_a15as,
+                                                                y_a15au)
+                                                -> *)
+                                -> *)
+                    (t_a15MK :: acc_a15as)
+                    (t_a15ML :: [x_a15at]) =
+    MapAccumR t_a15MJ t_a15MK t_a15ML
+instance SuppressUnusedWarnings MapAccumRSym2 where
+  suppressUnusedWarnings _ = snd ((,) MapAccumRSym2KindInference ())
+data MapAccumRSym2 (l_a15MS :: TyFun acc_a15as (TyFun x_a15at (acc_a15as,
+                                                                y_a15au)
+                                                -> *)
+                                -> *)
+                    (l_a15MT :: acc_a15as)
+                    (l_a15MR :: TyFun [x_a15at] (acc_a15as, [y_a15au]))
+  = forall arg_a15MU. KindOf (Apply (MapAccumRSym2 l_a15MS l_a15MT) arg_a15MU) ~ KindOf (MapAccumRSym3 l_a15MS l_a15MT arg_a15MU) =>
+    MapAccumRSym2KindInference
+type instance Apply (MapAccumRSym2 l_a15MS l_a15MT) l_a15MR = MapAccumRSym3 l_a15MS l_a15MT l_a15MR
+instance SuppressUnusedWarnings MapAccumRSym1 where
+  suppressUnusedWarnings _ = snd ((,) MapAccumRSym1KindInference ())
+data MapAccumRSym1 (l_a15MP :: TyFun acc_a15as (TyFun x_a15at (acc_a15as,
+                                                                y_a15au)
+                                                -> *)
+                                -> *)
+                    (l_a15MO :: TyFun acc_a15as (TyFun [x_a15at] (acc_a15as, [y_a15au])
+                                                -> *))
+  = forall arg_a15MQ. KindOf (Apply (MapAccumRSym1 l_a15MP) arg_a15MQ) ~ KindOf (MapAccumRSym2 l_a15MP arg_a15MQ) =>
+    MapAccumRSym1KindInference
+type instance Apply (MapAccumRSym1 l_a15MP) l_a15MO = MapAccumRSym2 l_a15MP l_a15MO
+instance SuppressUnusedWarnings MapAccumRSym0 where
+  suppressUnusedWarnings _ = snd ((,) MapAccumRSym0KindInference ())
+data MapAccumRSym0 (l_a15MM :: TyFun (TyFun acc_a15as (TyFun x_a15at (acc_a15as,
+                                                                      y_a15au)
+                                                        -> *)
+                                      -> *) (TyFun acc_a15as (TyFun [x_a15at] (acc_a15as,
+                                                                                [y_a15au])
+                                                              -> *)
+                                              -> *))
+  = forall arg_a15MN. KindOf (Apply MapAccumRSym0 arg_a15MN) ~ KindOf (MapAccumRSym1 arg_a15MN) =>
+    MapAccumRSym0KindInference
+type instance Apply MapAccumRSym0 l_a15MM = MapAccumRSym1 l_a15MM
+type MapAccumLSym3 (t_a15Pv :: TyFun acc_a15ag (TyFun x_a15ah (acc_a15ag,
+                                                                y_a15ai)
+                                                -> *)
+                                -> *)
+                    (t_a15Pw :: acc_a15ag)
+                    (t_a15Px :: [x_a15ah]) =
+    MapAccumL t_a15Pv t_a15Pw t_a15Px
+instance SuppressUnusedWarnings MapAccumLSym2 where
+  suppressUnusedWarnings _ = snd ((,) MapAccumLSym2KindInference ())
+data MapAccumLSym2 (l_a15PE :: TyFun acc_a15ag (TyFun x_a15ah (acc_a15ag,
+                                                                y_a15ai)
+                                                -> *)
+                                -> *)
+                    (l_a15PF :: acc_a15ag)
+                    (l_a15PD :: TyFun [x_a15ah] (acc_a15ag, [y_a15ai]))
+  = forall arg_a15PG. KindOf (Apply (MapAccumLSym2 l_a15PE l_a15PF) arg_a15PG) ~ KindOf (MapAccumLSym3 l_a15PE l_a15PF arg_a15PG) =>
+    MapAccumLSym2KindInference
+type instance Apply (MapAccumLSym2 l_a15PE l_a15PF) l_a15PD = MapAccumLSym3 l_a15PE l_a15PF l_a15PD
+instance SuppressUnusedWarnings MapAccumLSym1 where
+  suppressUnusedWarnings _ = snd ((,) MapAccumLSym1KindInference ())
+data MapAccumLSym1 (l_a15PB :: TyFun acc_a15ag (TyFun x_a15ah (acc_a15ag,
+                                                                y_a15ai)
+                                                -> *)
+                                -> *)
+                    (l_a15PA :: TyFun acc_a15ag (TyFun [x_a15ah] (acc_a15ag, [y_a15ai])
+                                                -> *))
+  = forall arg_a15PC. KindOf (Apply (MapAccumLSym1 l_a15PB) arg_a15PC) ~ KindOf (MapAccumLSym2 l_a15PB arg_a15PC) =>
+    MapAccumLSym1KindInference
+type instance Apply (MapAccumLSym1 l_a15PB) l_a15PA = MapAccumLSym2 l_a15PB l_a15PA
+instance SuppressUnusedWarnings MapAccumLSym0 where
+  suppressUnusedWarnings _ = snd ((,) MapAccumLSym0KindInference ())
+data MapAccumLSym0 (l_a15Py :: TyFun (TyFun acc_a15ag (TyFun x_a15ah (acc_a15ag,
+                                                                      y_a15ai)
+                                                        -> *)
+                                      -> *) (TyFun acc_a15ag (TyFun [x_a15ah] (acc_a15ag,
+                                                                                [y_a15ai])
+                                                              -> *)
+                                              -> *))
+  = forall arg_a15Pz. KindOf (Apply MapAccumLSym0 arg_a15Pz) ~ KindOf (MapAccumLSym1 arg_a15Pz) =>
+    MapAccumLSym0KindInference
+type instance Apply MapAccumLSym0 l_a15Py = MapAccumLSym1 l_a15Py
+type Scanr1Sym2 (t_a15Sh :: TyFun a_a15a9 (TyFun a_a15a9 a_a15a9
+                                            -> *)
+                            -> *)
+                (t_a15Si :: [a_a15a9]) =
+    Scanr1 t_a15Sh t_a15Si
+instance SuppressUnusedWarnings Scanr1Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Scanr1Sym1KindInference ())
+data Scanr1Sym1 (l_a15Sm :: TyFun a_a15a9 (TyFun a_a15a9 a_a15a9
+                                            -> *)
+                            -> *)
+                (l_a15Sl :: TyFun [a_a15a9] [a_a15a9])
+  = forall arg_a15Sn. KindOf (Apply (Scanr1Sym1 l_a15Sm) arg_a15Sn) ~ KindOf (Scanr1Sym2 l_a15Sm arg_a15Sn) =>
+    Scanr1Sym1KindInference
+type instance Apply (Scanr1Sym1 l_a15Sm) l_a15Sl = Scanr1Sym2 l_a15Sm l_a15Sl
+instance SuppressUnusedWarnings Scanr1Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Scanr1Sym0KindInference ())
+data Scanr1Sym0 (l_a15Sj :: TyFun (TyFun a_a15a9 (TyFun a_a15a9 a_a15a9
+                                                  -> *)
+                                    -> *) (TyFun [a_a15a9] [a_a15a9] -> *))
+  = forall arg_a15Sk. KindOf (Apply Scanr1Sym0 arg_a15Sk) ~ KindOf (Scanr1Sym1 arg_a15Sk) =>
+    Scanr1Sym0KindInference
+type instance Apply Scanr1Sym0 l_a15Sj = Scanr1Sym1 l_a15Sj
+type ScanrSym3 (t_a15Ti :: TyFun a_a15a0 (TyFun b_a15a1 b_a15a1
+                                          -> *)
+                            -> *)
+                (t_a15Tj :: b_a15a1)
+                (t_a15Tk :: [a_a15a0]) =
+    Scanr t_a15Ti t_a15Tj t_a15Tk
+instance SuppressUnusedWarnings ScanrSym2 where
+  suppressUnusedWarnings _ = snd ((,) ScanrSym2KindInference ())
+data ScanrSym2 (l_a15Tr :: TyFun a_a15a0 (TyFun b_a15a1 b_a15a1
+                                          -> *)
+                            -> *)
+                (l_a15Ts :: b_a15a1)
+                (l_a15Tq :: TyFun [a_a15a0] [b_a15a1])
+  = forall arg_a15Tt. KindOf (Apply (ScanrSym2 l_a15Tr l_a15Ts) arg_a15Tt) ~ KindOf (ScanrSym3 l_a15Tr l_a15Ts arg_a15Tt) =>
+    ScanrSym2KindInference
+type instance Apply (ScanrSym2 l_a15Tr l_a15Ts) l_a15Tq = ScanrSym3 l_a15Tr l_a15Ts l_a15Tq
+instance SuppressUnusedWarnings ScanrSym1 where
+  suppressUnusedWarnings _ = snd ((,) ScanrSym1KindInference ())
+data ScanrSym1 (l_a15To :: TyFun a_a15a0 (TyFun b_a15a1 b_a15a1
+                                          -> *)
+                            -> *)
+                (l_a15Tn :: TyFun b_a15a1 (TyFun [a_a15a0] [b_a15a1] -> *))
+  = forall arg_a15Tp. KindOf (Apply (ScanrSym1 l_a15To) arg_a15Tp) ~ KindOf (ScanrSym2 l_a15To arg_a15Tp) =>
+    ScanrSym1KindInference
+type instance Apply (ScanrSym1 l_a15To) l_a15Tn = ScanrSym2 l_a15To l_a15Tn
+instance SuppressUnusedWarnings ScanrSym0 where
+  suppressUnusedWarnings _ = snd ((,) ScanrSym0KindInference ())
+data ScanrSym0 (l_a15Tl :: TyFun (TyFun a_a15a0 (TyFun b_a15a1 b_a15a1
+                                                  -> *)
+                                  -> *) (TyFun b_a15a1 (TyFun [a_a15a0] [b_a15a1] -> *) -> *))
+  = forall arg_a15Tm. KindOf (Apply ScanrSym0 arg_a15Tm) ~ KindOf (ScanrSym1 arg_a15Tm) =>
+    ScanrSym0KindInference
+type instance Apply ScanrSym0 l_a15Tl = ScanrSym1 l_a15Tl
+type ScanlSym3 (t_a15U3 :: TyFun b_a159P (TyFun a_a159Q b_a159P
+                                          -> *)
+                            -> *)
+                (t_a15U4 :: b_a159P)
+                (t_a15U5 :: [a_a159Q]) =
+    Scanl t_a15U3 t_a15U4 t_a15U5
+instance SuppressUnusedWarnings ScanlSym2 where
+  suppressUnusedWarnings _ = snd ((,) ScanlSym2KindInference ())
+data ScanlSym2 (l_a15Uc :: TyFun b_a159P (TyFun a_a159Q b_a159P
+                                          -> *)
+                            -> *)
+                (l_a15Ud :: b_a159P)
+                (l_a15Ub :: TyFun [a_a159Q] [b_a159P])
+  = forall arg_a15Ue. KindOf (Apply (ScanlSym2 l_a15Uc l_a15Ud) arg_a15Ue) ~ KindOf (ScanlSym3 l_a15Uc l_a15Ud arg_a15Ue) =>
+    ScanlSym2KindInference
+type instance Apply (ScanlSym2 l_a15Uc l_a15Ud) l_a15Ub = ScanlSym3 l_a15Uc l_a15Ud l_a15Ub
+instance SuppressUnusedWarnings ScanlSym1 where
+  suppressUnusedWarnings _ = snd ((,) ScanlSym1KindInference ())
+data ScanlSym1 (l_a15U9 :: TyFun b_a159P (TyFun a_a159Q b_a159P
+                                          -> *)
+                            -> *)
+                (l_a15U8 :: TyFun b_a159P (TyFun [a_a159Q] [b_a159P] -> *))
+  = forall arg_a15Ua. KindOf (Apply (ScanlSym1 l_a15U9) arg_a15Ua) ~ KindOf (ScanlSym2 l_a15U9 arg_a15Ua) =>
+    ScanlSym1KindInference
+type instance Apply (ScanlSym1 l_a15U9) l_a15U8 = ScanlSym2 l_a15U9 l_a15U8
+instance SuppressUnusedWarnings ScanlSym0 where
+  suppressUnusedWarnings _ = snd ((,) ScanlSym0KindInference ())
+data ScanlSym0 (l_a15U6 :: TyFun (TyFun b_a159P (TyFun a_a159Q b_a159P
+                                                  -> *)
+                                  -> *) (TyFun b_a159P (TyFun [a_a159Q] [b_a159P] -> *) -> *))
+  = forall arg_a15U7. KindOf (Apply ScanlSym0 arg_a15U7) ~ KindOf (ScanlSym1 arg_a15U7) =>
+    ScanlSym0KindInference
+type instance Apply ScanlSym0 l_a15U6 = ScanlSym1 l_a15U6
+type Scanl1Sym2 (t_a15Uq :: TyFun a_a159W (TyFun a_a159W a_a159W
+                                            -> *)
+                            -> *)
+                (t_a15Ur :: [a_a159W]) =
+    Scanl1 t_a15Uq t_a15Ur
+instance SuppressUnusedWarnings Scanl1Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Scanl1Sym1KindInference ())
+data Scanl1Sym1 (l_a15Uv :: TyFun a_a159W (TyFun a_a159W a_a159W
+                                            -> *)
+                            -> *)
+                (l_a15Uu :: TyFun [a_a159W] [a_a159W])
+  = forall arg_a15Uw. KindOf (Apply (Scanl1Sym1 l_a15Uv) arg_a15Uw) ~ KindOf (Scanl1Sym2 l_a15Uv arg_a15Uw) =>
+    Scanl1Sym1KindInference
+type instance Apply (Scanl1Sym1 l_a15Uv) l_a15Uu = Scanl1Sym2 l_a15Uv l_a15Uu
+instance SuppressUnusedWarnings Scanl1Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Scanl1Sym0KindInference ())
+data Scanl1Sym0 (l_a15Us :: TyFun (TyFun a_a159W (TyFun a_a159W a_a159W
+                                                  -> *)
+                                    -> *) (TyFun [a_a159W] [a_a159W] -> *))
+  = forall arg_a15Ut. KindOf (Apply Scanl1Sym0 arg_a15Ut) ~ KindOf (Scanl1Sym1 arg_a15Ut) =>
+    Scanl1Sym0KindInference
+type instance Apply Scanl1Sym0 l_a15Us = Scanl1Sym1 l_a15Us
+type AllSym2 (t_a15UF :: TyFun a_a159L Bool -> *)
+              (t_a15UG :: [a_a159L]) =
+    All t_a15UF t_a15UG
+instance SuppressUnusedWarnings AllSym1 where
+  suppressUnusedWarnings _ = snd ((,) AllSym1KindInference ())
+data AllSym1 (l_a15UK :: TyFun a_a159L Bool -> *)
+              (l_a15UJ :: TyFun [a_a159L] Bool)
+  = forall arg_a15UL. KindOf (Apply (AllSym1 l_a15UK) arg_a15UL) ~ KindOf (AllSym2 l_a15UK arg_a15UL) =>
+    AllSym1KindInference
+type instance Apply (AllSym1 l_a15UK) l_a15UJ = AllSym2 l_a15UK l_a15UJ
+instance SuppressUnusedWarnings AllSym0 where
+  suppressUnusedWarnings _ = snd ((,) AllSym0KindInference ())
+data AllSym0 (l_a15UH :: TyFun (TyFun a_a159L Bool
+                                -> *) (TyFun [a_a159L] Bool -> *))
+  = forall arg_a15UI. KindOf (Apply AllSym0 arg_a15UI) ~ KindOf (AllSym1 arg_a15UI) =>
+    AllSym0KindInference
+type instance Apply AllSym0 l_a15UH = AllSym1 l_a15UH
+type OrSym1 (t_a15UU :: [Bool]) = Or t_a15UU
+instance SuppressUnusedWarnings OrSym0 where
+  suppressUnusedWarnings _ = snd ((,) OrSym0KindInference ())
+data OrSym0 (l_a15UV :: TyFun [Bool] Bool)
+  = forall arg_a15UW. KindOf (Apply OrSym0 arg_a15UW) ~ KindOf (OrSym1 arg_a15UW) =>
+    OrSym0KindInference
+type instance Apply OrSym0 l_a15UV = OrSym1 l_a15UV
+type AndSym1 (t_a15V0 :: [Bool]) = And t_a15V0
+instance SuppressUnusedWarnings AndSym0 where
+  suppressUnusedWarnings _ = snd ((,) AndSym0KindInference ())
+data AndSym0 (l_a15V1 :: TyFun [Bool] Bool)
+  = forall arg_a15V2. KindOf (Apply AndSym0 arg_a15V2) ~ KindOf (AndSym1 arg_a15V2) =>
+    AndSym0KindInference
+type instance Apply AndSym0 l_a15V1 = AndSym1 l_a15V1
+type ConcatMapSym2 (t_a15V6 :: TyFun a_a159E [b_a159F] -> *)
+                    (t_a15V7 :: [a_a159E]) =
+    ConcatMap t_a15V6 t_a15V7
+instance SuppressUnusedWarnings ConcatMapSym1 where
+  suppressUnusedWarnings _ = snd ((,) ConcatMapSym1KindInference ())
+data ConcatMapSym1 (l_a15Vb :: TyFun a_a159E [b_a159F] -> *)
+                    (l_a15Va :: TyFun [a_a159E] [b_a159F])
+  = forall arg_a15Vc. KindOf (Apply (ConcatMapSym1 l_a15Vb) arg_a15Vc) ~ KindOf (ConcatMapSym2 l_a15Vb arg_a15Vc) =>
+    ConcatMapSym1KindInference
+type instance Apply (ConcatMapSym1 l_a15Vb) l_a15Va = ConcatMapSym2 l_a15Vb l_a15Va
+instance SuppressUnusedWarnings ConcatMapSym0 where
+  suppressUnusedWarnings _ = snd ((,) ConcatMapSym0KindInference ())
+data ConcatMapSym0 (l_a15V8 :: TyFun (TyFun a_a159E [b_a159F]
+                                      -> *) (TyFun [a_a159E] [b_a159F] -> *))
+  = forall arg_a15V9. KindOf (Apply ConcatMapSym0 arg_a15V9) ~ KindOf (ConcatMapSym1 arg_a15V9) =>
+    ConcatMapSym0KindInference
+type instance Apply ConcatMapSym0 l_a15V8 = ConcatMapSym1 l_a15V8
+type ConcatSym1 (t_a15Vl :: [[a_a159D]]) = Concat t_a15Vl
+instance SuppressUnusedWarnings ConcatSym0 where
+  suppressUnusedWarnings _ = snd ((,) ConcatSym0KindInference ())
+data ConcatSym0 (l_a15Vm :: TyFun [[a_a159D]] [a_a159D])
+  = forall arg_a15Vn. KindOf (Apply ConcatSym0 arg_a15Vn) ~ KindOf (ConcatSym1 arg_a15Vn) =>
+    ConcatSym0KindInference
+type instance Apply ConcatSym0 l_a15Vm = ConcatSym1 l_a15Vm
+type Foldr1Sym2 (t_a15Vq :: TyFun a_a159y (TyFun a_a159y a_a159y
+                                            -> *)
+                            -> *)
+                (t_a15Vr :: [a_a159y]) =
+    Foldr1 t_a15Vq t_a15Vr
+instance SuppressUnusedWarnings Foldr1Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Foldr1Sym1KindInference ())
+data Foldr1Sym1 (l_a15Vv :: TyFun a_a159y (TyFun a_a159y a_a159y
+                                            -> *)
+                            -> *)
+                (l_a15Vu :: TyFun [a_a159y] a_a159y)
+  = forall arg_a15Vw. KindOf (Apply (Foldr1Sym1 l_a15Vv) arg_a15Vw) ~ KindOf (Foldr1Sym2 l_a15Vv arg_a15Vw) =>
+    Foldr1Sym1KindInference
+type instance Apply (Foldr1Sym1 l_a15Vv) l_a15Vu = Foldr1Sym2 l_a15Vv l_a15Vu
+instance SuppressUnusedWarnings Foldr1Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Foldr1Sym0KindInference ())
+data Foldr1Sym0 (l_a15Vs :: TyFun (TyFun a_a159y (TyFun a_a159y a_a159y
+                                                  -> *)
+                                    -> *) (TyFun [a_a159y] a_a159y -> *))
+  = forall arg_a15Vt. KindOf (Apply Foldr1Sym0 arg_a15Vt) ~ KindOf (Foldr1Sym1 arg_a15Vt) =>
+    Foldr1Sym0KindInference
+type instance Apply Foldr1Sym0 l_a15Vs = Foldr1Sym1 l_a15Vs
+type Foldl1Sym2 (t_a15W3 :: TyFun a_a159q (TyFun a_a159q a_a159q
+                                            -> *)
+                            -> *)
+                (t_a15W4 :: [a_a159q]) =
+    Foldl1 t_a15W3 t_a15W4
+instance SuppressUnusedWarnings Foldl1Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Foldl1Sym1KindInference ())
+data Foldl1Sym1 (l_a15W8 :: TyFun a_a159q (TyFun a_a159q a_a159q
+                                            -> *)
+                            -> *)
+                (l_a15W7 :: TyFun [a_a159q] a_a159q)
+  = forall arg_a15W9. KindOf (Apply (Foldl1Sym1 l_a15W8) arg_a15W9) ~ KindOf (Foldl1Sym2 l_a15W8 arg_a15W9) =>
+    Foldl1Sym1KindInference
+type instance Apply (Foldl1Sym1 l_a15W8) l_a15W7 = Foldl1Sym2 l_a15W8 l_a15W7
+instance SuppressUnusedWarnings Foldl1Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Foldl1Sym0KindInference ())
+data Foldl1Sym0 (l_a15W5 :: TyFun (TyFun a_a159q (TyFun a_a159q a_a159q
+                                                  -> *)
+                                    -> *) (TyFun [a_a159q] a_a159q -> *))
+  = forall arg_a15W6. KindOf (Apply Foldl1Sym0 arg_a15W6) ~ KindOf (Foldl1Sym1 arg_a15W6) =>
+    Foldl1Sym0KindInference
+type instance Apply Foldl1Sym0 l_a15W5 = Foldl1Sym1 l_a15W5
+type MaximumBySym2 (t_a15Wi :: TyFun a_a15dp (TyFun a_a15dp Ordering
+                                              -> *)
+                                -> *)
+                    (t_a15Wj :: [a_a15dp]) =
+    MaximumBy t_a15Wi t_a15Wj
+instance SuppressUnusedWarnings MaximumBySym1 where
+  suppressUnusedWarnings _ = snd ((,) MaximumBySym1KindInference ())
+data MaximumBySym1 (l_a15Wn :: TyFun a_a15dp (TyFun a_a15dp Ordering
+                                              -> *)
+                                -> *)
+                    (l_a15Wm :: TyFun [a_a15dp] a_a15dp)
+  = forall arg_a15Wo. KindOf (Apply (MaximumBySym1 l_a15Wn) arg_a15Wo) ~ KindOf (MaximumBySym2 l_a15Wn arg_a15Wo) =>
+    MaximumBySym1KindInference
+type instance Apply (MaximumBySym1 l_a15Wn) l_a15Wm = MaximumBySym2 l_a15Wn l_a15Wm
+instance SuppressUnusedWarnings MaximumBySym0 where
+  suppressUnusedWarnings _ = snd ((,) MaximumBySym0KindInference ())
+data MaximumBySym0 (l_a15Wk :: TyFun (TyFun a_a15dp (TyFun a_a15dp Ordering
+                                                      -> *)
+                                      -> *) (TyFun [a_a15dp] a_a15dp -> *))
+  = forall arg_a15Wl. KindOf (Apply MaximumBySym0 arg_a15Wl) ~ KindOf (MaximumBySym1 arg_a15Wl) =>
+    MaximumBySym0KindInference
+type instance Apply MaximumBySym0 l_a15Wk = MaximumBySym1 l_a15Wk
+type MinimumBySym2 (t_a15XH :: TyFun a_a15dv (TyFun a_a15dv Ordering
+                                              -> *)
+                                -> *)
+                    (t_a15XI :: [a_a15dv]) =
+    MinimumBy t_a15XH t_a15XI
+instance SuppressUnusedWarnings MinimumBySym1 where
+  suppressUnusedWarnings _ = snd ((,) MinimumBySym1KindInference ())
+data MinimumBySym1 (l_a15XM :: TyFun a_a15dv (TyFun a_a15dv Ordering
+                                              -> *)
+                                -> *)
+                    (l_a15XL :: TyFun [a_a15dv] a_a15dv)
+  = forall arg_a15XN. KindOf (Apply (MinimumBySym1 l_a15XM) arg_a15XN) ~ KindOf (MinimumBySym2 l_a15XM arg_a15XN) =>
+    MinimumBySym1KindInference
+type instance Apply (MinimumBySym1 l_a15XM) l_a15XL = MinimumBySym2 l_a15XM l_a15XL
+instance SuppressUnusedWarnings MinimumBySym0 where
+  suppressUnusedWarnings _ = snd ((,) MinimumBySym0KindInference ())
+data MinimumBySym0 (l_a15XJ :: TyFun (TyFun a_a15dv (TyFun a_a15dv Ordering
+                                                      -> *)
+                                      -> *) (TyFun [a_a15dv] a_a15dv -> *))
+  = forall arg_a15XK. KindOf (Apply MinimumBySym0 arg_a15XK) ~ KindOf (MinimumBySym1 arg_a15XK) =>
+    MinimumBySym0KindInference
+type instance Apply MinimumBySym0 l_a15XJ = MinimumBySym1 l_a15XJ
+type MaximumSym1 (t_a15Z6 :: [a_a15eI]) = Maximum t_a15Z6
+instance SuppressUnusedWarnings MaximumSym0 where
+  suppressUnusedWarnings _ = snd ((,) MaximumSym0KindInference ())
+data MaximumSym0 (l_a15Z7 :: TyFun [a_a15eI] a_a15eI)
+  = forall arg_a15Z8. KindOf (Apply MaximumSym0 arg_a15Z8) ~ KindOf (MaximumSym1 arg_a15Z8) =>
+    MaximumSym0KindInference
+type instance Apply MaximumSym0 l_a15Z7 = MaximumSym1 l_a15Z7
+type MinimumSym1 (t_a15Zk :: [a_a15eK]) = Minimum t_a15Zk
+instance SuppressUnusedWarnings MinimumSym0 where
+  suppressUnusedWarnings _ = snd ((,) MinimumSym0KindInference ())
+data MinimumSym0 (l_a15Zl :: TyFun [a_a15eK] a_a15eK)
+  = forall arg_a15Zm. KindOf (Apply MinimumSym0 arg_a15Zm) ~ KindOf (MinimumSym1 arg_a15Zm) =>
+    MinimumSym0KindInference
+type instance Apply MinimumSym0 l_a15Zl = MinimumSym1 l_a15Zl
+type Foldl'Sym3 (t_a15Zy :: TyFun b_a156O (TyFun a_a156N b_a156O
+                                            -> *)
+                            -> *)
+                (t_a15Zz :: b_a156O)
+                (t_a15ZA :: [a_a156N]) =
+    Foldl' t_a15Zy t_a15Zz t_a15ZA
+instance SuppressUnusedWarnings Foldl'Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Foldl'Sym2KindInference ())
+data Foldl'Sym2 (l_a15ZH :: TyFun b_a156O (TyFun a_a156N b_a156O
+                                            -> *)
+                            -> *)
+                (l_a15ZI :: b_a156O)
+                (l_a15ZG :: TyFun [a_a156N] b_a156O)
+  = forall arg_a15ZJ. KindOf (Apply (Foldl'Sym2 l_a15ZH l_a15ZI) arg_a15ZJ) ~ KindOf (Foldl'Sym3 l_a15ZH l_a15ZI arg_a15ZJ) =>
+    Foldl'Sym2KindInference
+type instance Apply (Foldl'Sym2 l_a15ZH l_a15ZI) l_a15ZG = Foldl'Sym3 l_a15ZH l_a15ZI l_a15ZG
+instance SuppressUnusedWarnings Foldl'Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Foldl'Sym1KindInference ())
+data Foldl'Sym1 (l_a15ZE :: TyFun b_a156O (TyFun a_a156N b_a156O
+                                            -> *)
+                            -> *)
+                (l_a15ZD :: TyFun b_a156O (TyFun [a_a156N] b_a156O -> *))
+  = forall arg_a15ZF. KindOf (Apply (Foldl'Sym1 l_a15ZE) arg_a15ZF) ~ KindOf (Foldl'Sym2 l_a15ZE arg_a15ZF) =>
+    Foldl'Sym1KindInference
+type instance Apply (Foldl'Sym1 l_a15ZE) l_a15ZD = Foldl'Sym2 l_a15ZE l_a15ZD
+instance SuppressUnusedWarnings Foldl'Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Foldl'Sym0KindInference ())
+data Foldl'Sym0 (l_a15ZB :: TyFun (TyFun b_a156O (TyFun a_a156N b_a156O
+                                                  -> *)
+                                    -> *) (TyFun b_a156O (TyFun [a_a156N] b_a156O -> *) -> *))
+  = forall arg_a15ZC. KindOf (Apply Foldl'Sym0 arg_a15ZC) ~ KindOf (Foldl'Sym1 arg_a15ZC) =>
+    Foldl'Sym0KindInference
+type instance Apply Foldl'Sym0 l_a15ZB = Foldl'Sym1 l_a15ZB
+type Foldl1'Sym2 (t_a160U :: TyFun a_a159u (TyFun a_a159u a_a159u
+                                            -> *)
+                              -> *)
+                  (t_a160V :: [a_a159u]) =
+    Foldl1' t_a160U t_a160V
+instance SuppressUnusedWarnings Foldl1'Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Foldl1'Sym1KindInference ())
+data Foldl1'Sym1 (l_a160Z :: TyFun a_a159u (TyFun a_a159u a_a159u
+                                            -> *)
+                              -> *)
+                  (l_a160Y :: TyFun [a_a159u] a_a159u)
+  = forall arg_a1610. KindOf (Apply (Foldl1'Sym1 l_a160Z) arg_a1610) ~ KindOf (Foldl1'Sym2 l_a160Z arg_a1610) =>
+    Foldl1'Sym1KindInference
+type instance Apply (Foldl1'Sym1 l_a160Z) l_a160Y = Foldl1'Sym2 l_a160Z l_a160Y
+instance SuppressUnusedWarnings Foldl1'Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Foldl1'Sym0KindInference ())
+data Foldl1'Sym0 (l_a160W :: TyFun (TyFun a_a159u (TyFun a_a159u a_a159u
+                                                    -> *)
+                                    -> *) (TyFun [a_a159u] a_a159u -> *))
+  = forall arg_a160X. KindOf (Apply Foldl1'Sym0 arg_a160X) ~ KindOf (Foldl1'Sym1 arg_a160X) =>
+    Foldl1'Sym0KindInference
+type instance Apply Foldl1'Sym0 l_a160W = Foldl1'Sym1 l_a160W
+type PermutationsSym1 (t_a1619 :: [a_a158Z]) = Permutations t_a1619
+instance SuppressUnusedWarnings PermutationsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) PermutationsSym0KindInference ())
+data PermutationsSym0 (l_a161a :: TyFun [a_a158Z] [[a_a158Z]])
+  = forall arg_a161b. KindOf (Apply PermutationsSym0 arg_a161b) ~ KindOf (PermutationsSym1 arg_a161b) =>
+    PermutationsSym0KindInference
+type instance Apply PermutationsSym0 l_a161a = PermutationsSym1 l_a161a
+type PrependToAllSym2 (t_a1679 :: a_a158V) (t_a167a :: [a_a158V]) =
+    PrependToAll t_a1679 t_a167a
+instance SuppressUnusedWarnings PrependToAllSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) PrependToAllSym1KindInference ())
+data PrependToAllSym1 (l_a167e :: a_a158V)
+                      (l_a167d :: TyFun [a_a158V] [a_a158V])
+  = forall arg_a167f. KindOf (Apply (PrependToAllSym1 l_a167e) arg_a167f) ~ KindOf (PrependToAllSym2 l_a167e arg_a167f) =>
+    PrependToAllSym1KindInference
+type instance Apply (PrependToAllSym1 l_a167e) l_a167d = PrependToAllSym2 l_a167e l_a167d
+instance SuppressUnusedWarnings PrependToAllSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) PrependToAllSym0KindInference ())
+data PrependToAllSym0 (l_a167b :: TyFun a_a158V (TyFun [a_a158V] [a_a158V]
+                                                  -> *))
+  = forall arg_a167c. KindOf (Apply PrependToAllSym0 arg_a167c) ~ KindOf (PrependToAllSym1 arg_a167c) =>
+    PrependToAllSym0KindInference
+type instance Apply PrependToAllSym0 l_a167b = PrependToAllSym1 l_a167b
+type NonEmptySubsequencesSym1 (t_a167o :: [a_a158P]) =
+    NonEmptySubsequences t_a167o
+instance SuppressUnusedWarnings NonEmptySubsequencesSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) NonEmptySubsequencesSym0KindInference ())
+data NonEmptySubsequencesSym0 (l_a167p :: TyFun [a_a158P] [[a_a158P]])
+  = forall arg_a167q. KindOf (Apply NonEmptySubsequencesSym0 arg_a167q) ~ KindOf (NonEmptySubsequencesSym1 arg_a167q) =>
+    NonEmptySubsequencesSym0KindInference
+type instance Apply NonEmptySubsequencesSym0 l_a167p = NonEmptySubsequencesSym1 l_a167p
+type SubsequencesSym1 (t_a167R :: [a_a158N]) = Subsequences t_a167R
+instance SuppressUnusedWarnings SubsequencesSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) SubsequencesSym0KindInference ())
+data SubsequencesSym0 (l_a167S :: TyFun [a_a158N] [[a_a158N]])
+  = forall arg_a167T. KindOf (Apply SubsequencesSym0 arg_a167T) ~ KindOf (SubsequencesSym1 arg_a167T) =>
+    SubsequencesSym0KindInference
+type instance Apply SubsequencesSym0 l_a167S = SubsequencesSym1 l_a167S
+type IntersperseSym2 (t_a167W :: a_a158G) (t_a167X :: [a_a158G]) =
+    Intersperse t_a167W t_a167X
+instance SuppressUnusedWarnings IntersperseSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) IntersperseSym1KindInference ())
+data IntersperseSym1 (l_a1681 :: a_a158G)
+                      (l_a1680 :: TyFun [a_a158G] [a_a158G])
+  = forall arg_a1682. KindOf (Apply (IntersperseSym1 l_a1681) arg_a1682) ~ KindOf (IntersperseSym2 l_a1681 arg_a1682) =>
+    IntersperseSym1KindInference
+type instance Apply (IntersperseSym1 l_a1681) l_a1680 = IntersperseSym2 l_a1681 l_a1680
+instance SuppressUnusedWarnings IntersperseSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) IntersperseSym0KindInference ())
+data IntersperseSym0 (l_a167Y :: TyFun a_a158G (TyFun [a_a158G] [a_a158G]
+                                                -> *))
+  = forall arg_a167Z. KindOf (Apply IntersperseSym0 arg_a167Z) ~ KindOf (IntersperseSym1 arg_a167Z) =>
+    IntersperseSym0KindInference
+type instance Apply IntersperseSym0 l_a167Y = IntersperseSym1 l_a167Y
+type IntercalateSym2 (t_a168b :: [a_a158K])
+                      (t_a168c :: [[a_a158K]]) =
+    Intercalate t_a168b t_a168c
+instance SuppressUnusedWarnings IntercalateSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) IntercalateSym1KindInference ())
+data IntercalateSym1 (l_a168g :: [a_a158K])
+                      (l_a168f :: TyFun [[a_a158K]] [a_a158K])
+  = forall arg_a168h. KindOf (Apply (IntercalateSym1 l_a168g) arg_a168h) ~ KindOf (IntercalateSym2 l_a168g arg_a168h) =>
+    IntercalateSym1KindInference
+type instance Apply (IntercalateSym1 l_a168g) l_a168f = IntercalateSym2 l_a168g l_a168f
+instance SuppressUnusedWarnings IntercalateSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) IntercalateSym0KindInference ())
+data IntercalateSym0 (l_a168d :: TyFun [a_a158K] (TyFun [[a_a158K]] [a_a158K]
+                                                  -> *))
+  = forall arg_a168e. KindOf (Apply IntercalateSym0 arg_a168e) ~ KindOf (IntercalateSym1 arg_a168e) =>
+    IntercalateSym0KindInference
+type instance Apply IntercalateSym0 l_a168d = IntercalateSym1 l_a168d
+type ReverseSym1 (t_a168m :: [a_a158y]) = Reverse t_a168m
+instance SuppressUnusedWarnings ReverseSym0 where
+  suppressUnusedWarnings _ = snd ((,) ReverseSym0KindInference ())
+data ReverseSym0 (l_a168n :: TyFun [a_a158y] [a_a158y])
+  = forall arg_a168o. KindOf (Apply ReverseSym0 arg_a168o) ~ KindOf (ReverseSym1 arg_a168o) =>
+    ReverseSym0KindInference
+type instance Apply ReverseSym0 l_a168n = ReverseSym1 l_a168n
+type IsSuffixOfSym2 (t_a168K :: [a_a15aW]) (t_a168L :: [a_a15aW]) =
+    IsSuffixOf t_a168K t_a168L
+instance SuppressUnusedWarnings IsSuffixOfSym1 where
+  suppressUnusedWarnings _ = snd ((,) IsSuffixOfSym1KindInference ())
+data IsSuffixOfSym1 (l_a168P :: [a_a15aW])
+                    (l_a168O :: TyFun [a_a15aW] Bool)
+  = forall arg_a168Q. KindOf (Apply (IsSuffixOfSym1 l_a168P) arg_a168Q) ~ KindOf (IsSuffixOfSym2 l_a168P arg_a168Q) =>
+    IsSuffixOfSym1KindInference
+type instance Apply (IsSuffixOfSym1 l_a168P) l_a168O = IsSuffixOfSym2 l_a168P l_a168O
+instance SuppressUnusedWarnings IsSuffixOfSym0 where
+  suppressUnusedWarnings _ = snd ((,) IsSuffixOfSym0KindInference ())
+data IsSuffixOfSym0 (l_a168M :: TyFun [a_a15aW] (TyFun [a_a15aW] Bool
+                                                  -> *))
+  = forall arg_a168N. KindOf (Apply IsSuffixOfSym0 arg_a168N) ~ KindOf (IsSuffixOfSym1 arg_a168N) =>
+    IsSuffixOfSym0KindInference
+type instance Apply IsSuffixOfSym0 l_a168M = IsSuffixOfSym1 l_a168M
+type NullSym1 (t_a168V :: [a_a158x]) = Null t_a168V
+instance SuppressUnusedWarnings NullSym0 where
+  suppressUnusedWarnings _ = snd ((,) NullSym0KindInference ())
+data NullSym0 (l_a168W :: TyFun [a_a158x] Bool)
+  = forall arg_a168X. KindOf (Apply NullSym0 arg_a168X) ~ KindOf (NullSym1 arg_a168X) =>
+    NullSym0KindInference
+type instance Apply NullSym0 l_a168W = NullSym1 l_a168W
+type DropWhileEndSym2 (t_a1695 :: TyFun a_a15eb Bool -> *)
+                      (t_a1696 :: [a_a15eb]) =
+    DropWhileEnd t_a1695 t_a1696
+instance SuppressUnusedWarnings DropWhileEndSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) DropWhileEndSym1KindInference ())
+data DropWhileEndSym1 (l_a169a :: TyFun a_a15eb Bool -> *)
+                      (l_a1699 :: TyFun [a_a15eb] [a_a15eb])
+  = forall arg_a169b. KindOf (Apply (DropWhileEndSym1 l_a169a) arg_a169b) ~ KindOf (DropWhileEndSym2 l_a169a arg_a169b) =>
+    DropWhileEndSym1KindInference
+type instance Apply (DropWhileEndSym1 l_a169a) l_a1699 = DropWhileEndSym2 l_a169a l_a1699
+instance SuppressUnusedWarnings DropWhileEndSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) DropWhileEndSym0KindInference ())
+data DropWhileEndSym0 (l_a1697 :: TyFun (TyFun a_a15eb Bool
+                                          -> *) (TyFun [a_a15eb] [a_a15eb] -> *))
+  = forall arg_a1698. KindOf (Apply DropWhileEndSym0 arg_a1698) ~ KindOf (DropWhileEndSym1 arg_a1698) =>
+    DropWhileEndSym0KindInference
+type instance Apply DropWhileEndSym0 l_a1697 = DropWhileEndSym1 l_a1697
+type InitSym1 (t_a16a2 :: [a_a158p]) = Init t_a16a2
+instance SuppressUnusedWarnings InitSym0 where
+  suppressUnusedWarnings _ = snd ((,) InitSym0KindInference ())
+data InitSym0 (l_a16a3 :: TyFun [a_a158p] [a_a158p])
+  = forall arg_a16a4. KindOf (Apply InitSym0 arg_a16a4) ~ KindOf (InitSym1 arg_a16a4) =>
+    InitSym0KindInference
+type instance Apply InitSym0 l_a16a3 = InitSym1 l_a16a3
+type TailSym1 (t_a16az :: [a_a158n]) = Tail t_a16az
+instance SuppressUnusedWarnings TailSym0 where
+  suppressUnusedWarnings _ = snd ((,) TailSym0KindInference ())
+data TailSym0 (l_a16aA :: TyFun [a_a158n] [a_a158n])
+  = forall arg_a16aB. KindOf (Apply TailSym0 arg_a16aB) ~ KindOf (TailSym1 arg_a16aB) =>
+    TailSym0KindInference
+type instance Apply TailSym0 l_a16aA = TailSym1 l_a16aA
+type LastSym1 (t_a16aH :: [a_a158j]) = Last t_a16aH
+instance SuppressUnusedWarnings LastSym0 where
+  suppressUnusedWarnings _ = snd ((,) LastSym0KindInference ())
+data LastSym0 (l_a16aI :: TyFun [a_a158j] a_a158j)
+  = forall arg_a16aJ. KindOf (Apply LastSym0 arg_a16aJ) ~ KindOf (LastSym1 arg_a16aJ) =>
+    LastSym0KindInference
+type instance Apply LastSym0 l_a16aI = LastSym1 l_a16aI
+type HeadSym1 (t_a16aR :: [a_a158h]) = Head t_a16aR
+instance SuppressUnusedWarnings HeadSym0 where
+  suppressUnusedWarnings _ = snd ((,) HeadSym0KindInference ())
+data HeadSym0 (l_a16aS :: TyFun [a_a158h] a_a158h)
+  = forall arg_a16aT. KindOf (Apply HeadSym0 arg_a16aT) ~ KindOf (HeadSym1 arg_a16aT) =>
+    HeadSym0KindInference
+type instance Apply HeadSym0 l_a16aS = HeadSym1 l_a16aS
+type TransposeSym1 (t_a16aZ :: [[a_a15fs]]) = Transpose t_a16aZ
+instance SuppressUnusedWarnings TransposeSym0 where
+  suppressUnusedWarnings _ = snd ((,) TransposeSym0KindInference ())
+data TransposeSym0 (l_a16b0 :: TyFun [[a_a15fs]] [[a_a15fs]])
+  = forall arg_a16b1. KindOf (Apply TransposeSym0 arg_a16b1) ~ KindOf (TransposeSym1 arg_a16b1) =>
+    TransposeSym0KindInference
+type instance Apply TransposeSym0 l_a16b0 = TransposeSym1 l_a16b0
+type family GenericLength (a_a15iK :: [a_a15fX]) :: i_a15fY where
+  GenericLength '[] = FromInteger 0
+  GenericLength (_z_1627648663_a15iN ': xs_a15iO) = Apply (Apply (:+$) (FromInteger 1)) (Apply GenericLengthSym0 xs_a15iO)
+type family Elem_by (a_a15j1 :: TyFun a_a15fN (TyFun a_a15fN Bool
+                                                -> *)
+                                -> *)
+                    (a_a15j2 :: a_a15fN)
+                    (a_a15j3 :: [a_a15fN]) :: Bool where
+  Elem_by _z_1627648682_a15j6 _z_1627648685_a15j9 '[] = FalseSym0
+  Elem_by eq_a15ja y_a15jb (x_a15jc ': xs_a15jd) = Apply (Apply (:||$) (Apply (Apply eq_a15ja y_a15jb) x_a15jc)) (Apply (Apply (Apply Elem_bySym0 eq_a15ja) y_a15jb) xs_a15jd)
+type family NubBy (a_a15jl :: TyFun a_a15fG (TyFun a_a15fG Bool
+                                              -> *)
+                              -> *)
+                  (a_a15jm :: [a_a15fG]) :: [a_a15fG] where
+  NubBy eq_a15jn l_a15jo = Apply (Apply (Let1627648703NubBy'Sym2 eq_a15jn l_a15jo) l_a15jo) '[]
+type family (:!!) (a_a15kq :: [a_a15fx])
+                  (a_a15kr :: Nat) :: a_a15fx where
+  (:!!) '[] _z_1627648768_a15ku = Apply ErrorSym0 "Data.Singletons.List.!!: index too large"
+  (:!!) (x_a15kv ': xs_a15kw) n_a15kx = Case_1627648787_a15kM x_a15kv xs_a15kw n_a15kx (Let1627648774Scrutinee_1627648586Sym3 x_a15kv xs_a15kw n_a15kx)
+type family Replicate (a_a15kV :: Nat)
+                      (a_a15kW :: a_a15fp) :: [a_a15fp] where
+  Replicate n_a15kX x_a15kY = Case_1627648809_a15l8 n_a15kX x_a15kY (Let1627648801Scrutinee_1627648584Sym2 n_a15kX x_a15kY)
+type family Length (a_a15ld :: [a_a15fn]) :: Nat where
+  Length '[] = FromInteger 0
+  Length (_z_1627648816_a15lg ': xs_a15lh) = Apply (Apply (:+$) (FromInteger 1)) (Apply LengthSym0 xs_a15lh)
+type family Product (a_a15ll :: [a_a156L]) :: a_a156L where
+  Product l_a15lm = Apply (Apply (Let1627648825ProdSym1 l_a15lm) l_a15lm) (FromInteger 1)
+type family Sum (a_a15lJ :: [a_a156M]) :: a_a156M where
+  Sum l_a15lK = Apply (Apply (Let1627648849Sum'Sym1 l_a15lK) l_a15lK) (FromInteger 0)
+type family Select (a_a15mg :: TyFun a_a15f6 Bool -> *)
+                    (a_a15mh :: a_a15f6)
+                    (a_a15mi :: ([a_a15f6], [a_a15f6])) :: ([a_a15f6], [a_a15f6]) where
+  Select p_a15mj x_a15mk '(ts_a15ml,
+                            fs_a15mm) = Case_1627648906_a15mH p_a15mj x_a15mk ts_a15ml fs_a15mm (Let1627648887Scrutinee_1627648582Sym4 p_a15mj x_a15mk ts_a15ml fs_a15mm)
+type family Partition (a_a15mQ :: TyFun a_a15f3 Bool -> *)
+                      (a_a15mR :: [a_a15f3]) :: ([a_a15f3], [a_a15f3]) where
+  Partition p_a15mS xs_a15mT = Apply (Apply (Apply FoldrSym0 (Apply SelectSym0 p_a15mS)) (Apply (Apply Tuple2Sym0 '[]) '[])) xs_a15mT
+type family Lookup (a_a15n1 :: a_a15eW)
+                    (a_a15n2 :: [(a_a15eW, b_a15eX)]) :: Maybe b_a15eX where
+  Lookup _key_a15n3 '[] = NothingSym0
+  Lookup key_a15n4 ( '(x_a15n5,
+                          y_a15n6) ': xys_a15n7) = Case_1627648953_a15ns key_a15n4 x_a15n5 y_a15n6 xys_a15n7 (Let1627648934Scrutinee_1627648580Sym4 key_a15n4 x_a15n5 y_a15n6 xys_a15n7)
+type family Drop (a_a15nB :: Nat)
+                  (a_a15nC :: [a_a15ez]) :: [a_a15ez] where
+  Drop _z_1627648965_a15nF '[] = '[]
+  Drop n_a15nG (x_a15nH ': xs_a15nI) = Case_1627648984_a15nX n_a15nG x_a15nH xs_a15nI (Let1627648971Scrutinee_1627648570Sym3 n_a15nG x_a15nH xs_a15nI)
+type family Take (a_a15o6 :: Nat)
+                  (a_a15o7 :: [a_a15ev]) :: [a_a15ev] where
+  Take _z_1627648996_a15oa '[] = '[]
+  Take n_a15ob (x_a15oc ': xs_a15od) = Case_1627649015_a15os n_a15ob x_a15oc xs_a15od (Let1627649002Scrutinee_1627648568Sym3 n_a15ob x_a15oc xs_a15od)
+type family SplitAt (a_a15oB :: Nat)
+                    (a_a15oC :: [a_a15eD]) :: ([a_a15eD], [a_a15eD]) where
+  SplitAt n_a15oD xs_a15oE = Apply (Apply Tuple2Sym0 (Apply (Apply TakeSym0 n_a15oD) xs_a15oE)) (Apply (Apply DropSym0 n_a15oD) xs_a15oE)
+type family Break (a_a15oM :: TyFun a_a15en Bool -> *)
+                  (a_a15oN :: [a_a15en]) :: ([a_a15en], [a_a15en]) where
+  Break _z_1627649038_a15oQ '[] = Apply (Apply Tuple2Sym0 (Let1627649041XsSym1 _z_1627649038_a15oQ)) (Let1627649041XsSym1 _z_1627649038_a15oQ)
+  Break p_a15oV (x_a15oW ': xs'_a15oX) = Case_1627649074_a15pp p_a15oV x_a15oW xs'_a15oX (Let1627649061Scrutinee_1627648566Sym3 p_a15oV x_a15oW xs'_a15oX)
+type family Span (a_a15qt :: TyFun a_a15ef Bool -> *)
+                  (a_a15qu :: [a_a15ef]) :: ([a_a15ef], [a_a15ef]) where
+  Span _z_1627649143_a15qx '[] = Apply (Apply Tuple2Sym0 (Let1627649146XsSym1 _z_1627649143_a15qx)) (Let1627649146XsSym1 _z_1627649143_a15qx)
+  Span p_a15qC (x_a15qD ': xs'_a15qE) = Case_1627649179_a15r6 p_a15qC x_a15qD xs'_a15qE (Let1627649166Scrutinee_1627648564Sym3 p_a15qC x_a15qD xs'_a15qE)
+type family GroupBy (a_a15sa :: TyFun a_a15eQ (TyFun a_a15eQ Bool
+                                                -> *)
+                                -> *)
+                    (a_a15sb :: [a_a15eQ]) :: [[a_a15eQ]] where
+  GroupBy _z_1627649248_a15se '[] = '[]
+  GroupBy eq_a15sf (x_a15sg ': xs_a15sh) = Apply (Apply (:$) (Apply (Apply (:$) x_a15sg) (Let1627649254YsSym3 eq_a15sf x_a15sg xs_a15sh))) (Apply (Apply GroupBySym0 eq_a15sf) (Let1627649254ZsSym3 eq_a15sf x_a15sg xs_a15sh))
+type family Group (a_a15tg :: [a_a15eG]) :: [[a_a15eG]] where
+  Group xs_a15th = Apply (Apply GroupBySym0 (:==$)) xs_a15th
+type family DropWhile (a_a15tp :: TyFun a_a15e6 Bool -> *)
+                      (a_a15tq :: [a_a15e6]) :: [a_a15e6] where
+  DropWhile _z_1627649325_a15tt '[] = '[]
+  DropWhile p_a15tu (x_a15tv ': xs'_a15tw) = Case_1627649357_a15tY p_a15tu x_a15tv xs'_a15tw (Let1627649344Scrutinee_1627648560Sym3 p_a15tu x_a15tv xs'_a15tw)
+type family TakeWhile (a_a15u7 :: TyFun a_a15e2 Bool -> *)
+                      (a_a15u8 :: [a_a15e2]) :: [a_a15e2] where
+  TakeWhile _z_1627649369_a15ub '[] = '[]
+  TakeWhile p_a15uc (x_a15ud ': xs_a15ue) = Case_1627649388_a15ut p_a15uc x_a15ud xs_a15ue (Let1627649375Scrutinee_1627648558Sym3 p_a15uc x_a15ud xs_a15ue)
+type family Filter (a_a15uC :: TyFun a_a15dB Bool -> *)
+                    (a_a15uD :: [a_a15dB]) :: [a_a15dB] where
+  Filter _p_a15uE '[] = '[]
+  Filter p_a15uF (x_a15uG ': xs_a15uH) = Case_1627649417_a15uW p_a15uF x_a15uG xs_a15uH (Let1627649404Scrutinee_1627648546Sym3 p_a15uF x_a15uG xs_a15uH)
+type family Find (a_a15v5 :: TyFun a_a15dG Bool -> *)
+                  (a_a15v6 :: [a_a15dG]) :: Maybe a_a15dG where
+  Find p_a15v9 a_1627649429_a15va = Apply (Apply (Apply (:.$) ListToMaybeSym0) (Apply FilterSym0 p_a15v9)) a_1627649429_a15va
+type family IntersectBy (a_a15vn :: TyFun a_a15dX (TyFun a_a15dX Bool
+                                                    -> *)
+                                    -> *)
+                        (a_a15vo :: [a_a15dX])
+                        (a_a15vp :: [a_a15dX]) :: [a_a15dX] where
+  IntersectBy _z_1627649448_a15vs '[] '[] = '[]
+  IntersectBy _z_1627649451_a15vv '[] (_z_1627649454_a15vy ': _z_1627649457_a15vB) = '[]
+  IntersectBy _z_1627649460_a15vE (_z_1627649463_a15vH ': _z_1627649466_a15vK) '[] = '[]
+  IntersectBy eq_a15vL (wild_1627648550_a15vM ': wild_1627648552_a15vN) (wild_1627648554_a15vO ': wild_1627648556_a15vP) = Apply (Apply FilterSym0 (Apply (Apply (Apply (Apply (Apply Lambda_1627649525Sym0 eq_a15vL) wild_1627648550_a15vM) wild_1627648552_a15vN) wild_1627648554_a15vO) wild_1627648556_a15vP)) (Let1627649474XsSym5 eq_a15vL wild_1627648550_a15vM wild_1627648552_a15vN wild_1627648554_a15vO wild_1627648556_a15vP)
+type family Intersect (a_a15xr :: [a_a15dW])
+                      (a_a15xs :: [a_a15dW]) :: [a_a15dW] where
+  Intersect a_1627649562_a15xt a_1627649564_a15xu = Apply (Apply (Apply IntersectBySym0 (:==$)) a_1627649562_a15xt) a_1627649564_a15xu
+type family InsertBy (a_a15xH :: TyFun a_a15di (TyFun a_a15di Ordering
+                                                -> *)
+                                  -> *)
+                      (a_a15xI :: a_a15di)
+                      (a_a15xJ :: [a_a15di]) :: [a_a15di] where
+  InsertBy _z_1627649592_a15xM x_a15xN '[] = Apply (Apply (:$) x_a15xN) '[]
+  InsertBy cmp_a15xO x_a15xP (y_a15xQ ': ys'_a15xR) = Case_1627649638_a15yv cmp_a15xO x_a15xP y_a15xQ ys'_a15xR (Let1627649619Scrutinee_1627648532Sym4 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR)
+type family Insert (a_a15yE :: a_a15eM)
+                    (a_a15yF :: [a_a15eM]) :: [a_a15eM] where
+  Insert e_a15yG ls_a15yH = Apply (Apply (Apply InsertBySym0 CompareSym0) e_a15yG) ls_a15yH
+type family SortBy (a_a15yP :: TyFun a_a15dg (TyFun a_a15dg Ordering
+                                              -> *)
+                                -> *)
+                    (a_a15yQ :: [a_a15dg]) :: [a_a15dg] where
+  SortBy cmp_a15yT a_1627649661_a15yU = Apply (Apply (Apply FoldrSym0 (Apply InsertBySym0 cmp_a15yT)) '[]) a_1627649661_a15yU
+type family Sort (a_a15z0 :: [a_a15eP]) :: [a_a15eP] where
+  Sort a_1627649665_a15z1 = Apply (Apply SortBySym0 CompareSym0) a_1627649665_a15z1
+type family DeleteBy (a_a15ze :: TyFun a_a15d9 (TyFun a_a15d9 Bool
+                                                -> *)
+                                  -> *)
+                      (a_a15zf :: a_a15d9)
+                      (a_a15zg :: [a_a15d9]) :: [a_a15d9] where
+  DeleteBy _z_1627649687_a15zj _z_1627649690_a15zm '[] = '[]
+  DeleteBy eq_a15zn x_a15zo (y_a15zp ': ys_a15zq) = Case_1627649716_a15zL eq_a15zn x_a15zo y_a15zp ys_a15zq (Let1627649697Scrutinee_1627648530Sym4 eq_a15zn x_a15zo y_a15zp ys_a15zq)
+type family DeleteFirstsBy (a_a15zZ :: TyFun a_a15de (TyFun a_a15de Bool
+                                                      -> *)
+                                        -> *)
+                            (a_a15A0 :: [a_a15de])
+                            (a_a15A1 :: [a_a15de]) :: [a_a15de] where
+  DeleteFirstsBy eq_a15A6 a_1627649734_a15A7 a_1627649736_a15A8 = Apply (Apply (Apply FoldlSym0 (Apply FlipSym0 (Apply DeleteBySym0 eq_a15A6))) a_1627649734_a15A7) a_1627649736_a15A8
+type family UnionBy (a_a15Al :: TyFun a_a15fS (TyFun a_a15fS Bool
+                                                -> *)
+                                -> *)
+                    (a_a15Am :: [a_a15fS])
+                    (a_a15An :: [a_a15fS]) :: [a_a15fS] where
+  UnionBy eq_a15Ao xs_a15Ap ys_a15Aq = Apply (Apply (:++$) xs_a15Ap) (Apply (Apply (Apply FoldlSym0 (Apply FlipSym0 (Apply DeleteBySym0 eq_a15Ao))) (Apply (Apply NubBySym0 eq_a15Ao) ys_a15Aq)) xs_a15Ap)
+type family Union (a_a15AC :: [a_a15fW])
+                  (a_a15AD :: [a_a15fW]) :: [a_a15fW] where
+  Union a_1627649759_a15AE a_1627649761_a15AF = Apply (Apply (Apply UnionBySym0 (:==$)) a_1627649759_a15AE) a_1627649761_a15AF
+type family Delete (a_a15AR :: a_a15d7)
+                    (a_a15AS :: [a_a15d7]) :: [a_a15d7] where
+  Delete a_1627649774_a15AT a_1627649776_a15AU = Apply (Apply (Apply DeleteBySym0 (:==$)) a_1627649774_a15AT) a_1627649776_a15AU
+type family (:\\) (a_a15B6 :: [a_a15d8])
+                  (a_a15B7 :: [a_a15d8]) :: [a_a15d8] where
+  (:\\) a_1627649789_a15B8 a_1627649791_a15B9 = Apply (Apply (Apply FoldlSym0 (Apply FlipSym0 DeleteSym0)) a_1627649789_a15B8) a_1627649791_a15B9
+type family Unzip7 (a_a15Bd :: [(a_a15cL,
+                                  b_a15cM,
+                                  c_a15cN,
+                                  d_a15cO,
+                                  e_a15cP,
+                                  f_a15cQ,
+                                  g_a15cR)]) :: ([a_a15cL],
+                                                [b_a15cM],
+                                                [c_a15cN],
+                                                [d_a15cO],
+                                                [e_a15cP],
+                                                [f_a15cQ],
+                                                [g_a15cR]) where
+  Unzip7 xs_a15Be = Apply (Apply (Apply FoldrSym0 (Apply Lambda_1627649809Sym0 xs_a15Be)) (Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 '[]) '[]) '[]) '[]) '[]) '[]) '[])) xs_a15Be
+type family Unzip6 (a_a15BR :: [(a_a15cs,
+                                  b_a15ct,
+                                  c_a15cu,
+                                  d_a15cv,
+                                  e_a15cw,
+                                  f_a15cx)]) :: ([a_a15cs],
+                                                [b_a15ct],
+                                                [c_a15cu],
+                                                [d_a15cv],
+                                                [e_a15cw],
+                                                [f_a15cx]) where
+  Unzip6 xs_a15BS = Apply (Apply (Apply FoldrSym0 (Apply Lambda_1627649849Sym0 xs_a15BS)) (Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 '[]) '[]) '[]) '[]) '[]) '[])) xs_a15BS
+type family Unzip5 (a_a15Ct :: [(a_a15cc,
+                                  b_a15cd,
+                                  c_a15ce,
+                                  d_a15cf,
+                                  e_a15cg)]) :: ([a_a15cc],
+                                                [b_a15cd],
+                                                [c_a15ce],
+                                                [d_a15cf],
+                                                [e_a15cg]) where
+  Unzip5 xs_a15Cu = Apply (Apply (Apply FoldrSym0 (Apply Lambda_1627649887Sym0 xs_a15Cu)) (Apply (Apply (Apply (Apply (Apply Tuple5Sym0 '[]) '[]) '[]) '[]) '[])) xs_a15Cu
+type family Unzip4 (a_a15D3 :: [(a_a15bZ,
+                                  b_a15c0,
+                                  c_a15c1,
+                                  d_a15c2)]) :: ([a_a15bZ],
+                                                [b_a15c0],
+                                                [c_a15c1],
+                                                [d_a15c2]) where
+  Unzip4 xs_a15D4 = Apply (Apply (Apply FoldrSym0 (Apply Lambda_1627649923Sym0 xs_a15D4)) (Apply (Apply (Apply (Apply Tuple4Sym0 '[]) '[]) '[]) '[])) xs_a15D4
+type family Unzip3 (a_a15DB :: [(a_a15bP,
+                                  b_a15bQ,
+                                  c_a15bR)]) :: ([a_a15bP], [b_a15bQ], [c_a15bR]) where
+  Unzip3 xs_a15DC = Apply (Apply (Apply FoldrSym0 (Apply Lambda_1627649957Sym0 xs_a15DC)) (Apply (Apply (Apply Tuple3Sym0 '[]) '[]) '[])) xs_a15DC
+type family Unzip (a_a15E7 :: [(a_a15bI, b_a15bJ)]) :: ([a_a15bI],
+                                                        [b_a15bJ]) where
+  Unzip xs_a15E8 = Apply (Apply (Apply FoldrSym0 (Apply Lambda_1627649989Sym0 xs_a15E8)) (Apply (Apply Tuple2Sym0 '[]) '[])) xs_a15E8
+type family ZipWith3 (a_a15EQ :: TyFun a_a15bx (TyFun b_a15by (TyFun c_a15bz d_a15bA
+                                                                -> *)
+                                                -> *)
+                                  -> *)
+                      (a_a15ER :: [a_a15bx])
+                      (a_a15ES :: [b_a15by])
+                      (a_a15ET :: [c_a15bz]) :: [d_a15bA] where
+  ZipWith3 z_a15EU (a_a15EV ': as_a15EW) (b_a15EX ': bs_a15EY) (c_a15EZ ': cs_a15F0) = Apply (Apply (:$) (Apply (Apply (Apply z_a15EU a_a15EV) b_a15EX) c_a15EZ)) (Apply (Apply (Apply (Apply ZipWith3Sym0 z_a15EU) as_a15EW) bs_a15EY) cs_a15F0)
+  ZipWith3 _z_1627650043_a15F3 '[] '[] '[] = '[]
+  ZipWith3 _z_1627650046_a15F6 '[] '[] (_z_1627650049_a15F9 ': _z_1627650052_a15Fc) = '[]
+  ZipWith3 _z_1627650055_a15Ff '[] (_z_1627650058_a15Fi ': _z_1627650061_a15Fl) '[] = '[]
+  ZipWith3 _z_1627650064_a15Fo '[] (_z_1627650067_a15Fr ': _z_1627650070_a15Fu) (_z_1627650073_a15Fx ': _z_1627650076_a15FA) = '[]
+  ZipWith3 _z_1627650079_a15FD (_z_1627650082_a15FG ': _z_1627650085_a15FJ) '[] '[] = '[]
+  ZipWith3 _z_1627650088_a15FM (_z_1627650091_a15FP ': _z_1627650094_a15FS) '[] (_z_1627650097_a15FV ': _z_1627650100_a15FY) = '[]
+  ZipWith3 _z_1627650103_a15G1 (_z_1627650106_a15G4 ': _z_1627650109_a15G7) (_z_1627650112_a15Ga ': _z_1627650115_a15Gd) '[] = '[]
+type family ZipWith (a_a15Gq :: TyFun a_a15bp (TyFun b_a15bq c_a15br
+                                                -> *)
+                                -> *)
+                    (a_a15Gr :: [a_a15bp])
+                    (a_a15Gs :: [b_a15bq]) :: [c_a15br] where
+  ZipWith f_a15Gt (x_a15Gu ': xs_a15Gv) (y_a15Gw ': ys_a15Gx) = Apply (Apply (:$) (Apply (Apply f_a15Gt x_a15Gu) y_a15Gw)) (Apply (Apply (Apply ZipWithSym0 f_a15Gt) xs_a15Gv) ys_a15Gx)
+  ZipWith _z_1627650138_a15GA '[] '[] = '[]
+  ZipWith _z_1627650141_a15GD (_z_1627650144_a15GG ': _z_1627650147_a15GJ) '[] = '[]
+  ZipWith _z_1627650150_a15GM '[] (_z_1627650153_a15GP ': _z_1627650156_a15GS) = '[]
+type family Zip3 (a_a15H5 :: [a_a15bg])
+                  (a_a15H6 :: [b_a15bh])
+                  (a_a15H7 :: [c_a15bi]) :: [(a_a15bg, b_a15bh, c_a15bi)] where
+  Zip3 (a_a15H8 ': as_a15H9) (b_a15Ha ': bs_a15Hb) (c_a15Hc ': cs_a15Hd) = Apply (Apply (:$) (Apply (Apply (Apply Tuple3Sym0 a_a15H8) b_a15Ha) c_a15Hc)) (Apply (Apply (Apply Zip3Sym0 as_a15H9) bs_a15Hb) cs_a15Hd)
+  Zip3 '[] '[] '[] = '[]
+  Zip3 '[] '[] (_z_1627650180_a15Hg ': _z_1627650183_a15Hj) = '[]
+  Zip3 '[] (_z_1627650186_a15Hm ': _z_1627650189_a15Hp) '[] = '[]
+  Zip3 '[] (_z_1627650192_a15Hs ': _z_1627650195_a15Hv) (_z_1627650198_a15Hy ': _z_1627650201_a15HB) = '[]
+  Zip3 (_z_1627650204_a15HE ': _z_1627650207_a15HH) '[] '[] = '[]
+  Zip3 (_z_1627650210_a15HK ': _z_1627650213_a15HN) '[] (_z_1627650216_a15HQ ': _z_1627650219_a15HT) = '[]
+  Zip3 (_z_1627650222_a15HW ': _z_1627650225_a15HZ) (_z_1627650228_a15I2 ': _z_1627650231_a15I5) '[] = '[]
+type family Zip (a_a15Id :: [a_a15ba])
+                (a_a15Ie :: [b_a15bb]) :: [(a_a15ba, b_a15bb)] where
+  Zip (x_a15If ': xs_a15Ig) (y_a15Ih ': ys_a15Ii) = Apply (Apply (:$) (Apply (Apply Tuple2Sym0 x_a15If) y_a15Ih)) (Apply (Apply ZipSym0 xs_a15Ig) ys_a15Ii)
+  Zip '[] '[] = '[]
+  Zip (_z_1627650247_a15Il ': _z_1627650250_a15Io) '[] = '[]
+  Zip '[] (_z_1627650253_a15Ir ': _z_1627650256_a15Iu) = '[]
+type family FindIndices (a_a15IC :: TyFun a_a15dO Bool -> *)
+                        (a_a15ID :: [a_a15dO]) :: [Nat] where
+  FindIndices p_a15IE xs_a15IF = Apply (Apply MapSym0 SndSym0) (Apply (Apply FilterSym0 (Apply (Apply Lambda_1627650299Sym0 p_a15IE) xs_a15IF)) (Apply (Apply ZipSym0 xs_a15IF) (Apply (Apply (Let1627650270BuildListSym2 p_a15IE xs_a15IF) (FromInteger 0)) xs_a15IF)))
+type family ElemIndices (a_a15JD :: a_a15dK)
+                        (a_a15JE :: [a_a15dK]) :: [Nat] where
+  ElemIndices x_a15JH a_1627650331_a15JI = Apply (Apply FindIndicesSym0 (Apply (:==$) x_a15JH)) a_1627650331_a15JI
+type family FindIndex (a_a15JQ :: TyFun a_a15dM Bool -> *)
+                      (a_a15JR :: [a_a15dM]) :: Maybe Nat where
+  FindIndex p_a15JU a_1627650344_a15JV = Apply (Apply (Apply (:.$) ListToMaybeSym0) (Apply FindIndicesSym0 p_a15JU)) a_1627650344_a15JV
+type family ElemIndex (a_a15K3 :: a_a15dI)
+                      (a_a15K4 :: [a_a15dI]) :: Maybe Nat where
+  ElemIndex x_a15K7 a_1627650357_a15K8 = Apply (Apply FindIndexSym0 (Apply (:==$) x_a15K7)) a_1627650357_a15K8
+type family NotElem (a_a15Kg :: a_a15b6)
+                    (a_a15Kh :: [a_a15b6]) :: Bool where
+  NotElem _z_1627650370_a15Kk '[] = TrueSym0
+  NotElem x_a15Kl (y_a15Km ': ys_a15Kn) = Apply (Apply (:&&$) (Apply (Apply (:/=$) x_a15Kl) y_a15Km)) (Apply (Apply NotElemSym0 x_a15Kl) ys_a15Kn)
+type family Elem (a_a15Kv :: a_a15b2)
+                  (a_a15Kw :: [a_a15b2]) :: Bool where
+  Elem _z_1627650385_a15Kz '[] = FalseSym0
+  Elem x_a15KA (y_a15KB ': ys_a15KC) = Apply (Apply (:||$) (Apply (Apply (:==$) x_a15KA) y_a15KB)) (Apply (Apply ElemSym0 x_a15KA) ys_a15KC)
+type family Nub (a_a15KG :: [a_a156K]) :: [a_a156K] where
+  Nub l_a15KH = Apply (Apply (Let1627650396Nub'Sym1 l_a15KH) l_a15KH) '[]
+type family IsPrefixOf (a_a15Lw :: [a_a15aR])
+                        (a_a15Lx :: [a_a15aR]) :: Bool where
+  IsPrefixOf '[] '[] = TrueSym0
+  IsPrefixOf '[] (_z_1627650448_a15LA ': _z_1627650451_a15LD) = TrueSym0
+  IsPrefixOf (_z_1627650454_a15LG ': _z_1627650457_a15LJ) '[] = FalseSym0
+  IsPrefixOf (x_a15LK ': xs_a15LL) (y_a15LM ': ys_a15LN) = Apply (Apply (:&&$) (Apply (Apply (:==$) x_a15LK) y_a15LM)) (Apply (Apply IsPrefixOfSym0 xs_a15LL) ys_a15LN)
+type family Tails (a_a15LR :: [a_a15aO]) :: [[a_a15aO]] where
+  Tails xs_a15LS = Apply (Apply (:$) xs_a15LS) (Case_1627650469_a15LU xs_a15LS xs_a15LS)
+type family IsInfixOf (a_a15M7 :: [a_a15aZ])
+                      (a_a15M8 :: [a_a15aZ]) :: Bool where
+  IsInfixOf needle_a15M9 haystack_a15Ma = Apply (Apply Any_Sym0 (Apply IsPrefixOfSym0 needle_a15M9)) (Apply TailsSym0 haystack_a15Ma)
+type family Inits (a_a15Me :: [a_a15aK]) :: [[a_a15aK]] where
+  Inits xs_a15Mf = Apply (Apply (:$) '[]) (Case_1627650492_a15Mh xs_a15Mf xs_a15Mf)
+type family Unfoldr (a_a15Ms :: TyFun b_a15aE (Maybe (a_a15aF,
+                                                      b_a15aE))
+                                -> *)
+                    (a_a15Mt :: b_a15aE) :: [a_a15aF] where
+  Unfoldr f_a15Mu b_a15Mv = Case_1627650516_a15MF f_a15Mu b_a15Mv (Let1627650508Scrutinee_1627648504Sym2 f_a15Mu b_a15Mv)
+type family MapAccumR (a_a15MV :: TyFun acc_a15as (TyFun x_a15at (acc_a15as,
+                                                                  y_a15au)
+                                                    -> *)
+                                  -> *)
+                      (a_a15MW :: acc_a15as)
+                      (a_a15MX :: [x_a15at]) :: (acc_a15as, [y_a15au]) where
+  MapAccumR _z_1627650536_a15N0 s_a15N1 '[] = Apply (Apply Tuple2Sym0 s_a15N1) '[]
+  MapAccumR f_a15N2 s_a15N3 (x_a15N4 ': xs_a15N5) = Apply (Apply Tuple2Sym0 (Let1627650544S''Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)) (Apply (Apply (:$) (Let1627650544YSym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)) (Let1627650544YsSym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5))
+type family MapAccumL (a_a15PH :: TyFun acc_a15ag (TyFun x_a15ah (acc_a15ag,
+                                                                  y_a15ai)
+                                                    -> *)
+                                  -> *)
+                      (a_a15PI :: acc_a15ag)
+                      (a_a15PJ :: [x_a15ah]) :: (acc_a15ag, [y_a15ai]) where
+  MapAccumL _z_1627650708_a15PM s_a15PN '[] = Apply (Apply Tuple2Sym0 s_a15PN) '[]
+  MapAccumL f_a15PO s_a15PP (x_a15PQ ': xs_a15PR) = Apply (Apply Tuple2Sym0 (Let1627650716S''Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)) (Apply (Apply (:$) (Let1627650716YSym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)) (Let1627650716YsSym4 f_a15PO s_a15PP x_a15PQ xs_a15PR))
+type family Scanr1 (a_a15So :: TyFun a_a15a9 (TyFun a_a15a9 a_a15a9
+                                              -> *)
+                                -> *)
+                    (a_a15Sp :: [a_a15a9]) :: [a_a15a9] where
+  Scanr1 _z_1627650874_a15Ss '[] = '[]
+  Scanr1 _z_1627650877_a15Sv '[x_a15Sw] = Apply (Apply (:$) x_a15Sw) '[]
+  Scanr1 f_a15Sx (x_a15Sy ': (wild_1627648500_a15Sz ': wild_1627648502_a15SA)) = Case_1627650923_a15Te f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA (Let1627650904Scrutinee_1627648498Sym4 f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA)
+type family Scanr (a_a15Tu :: TyFun a_a15a0 (TyFun b_a15a1 b_a15a1
+                                              -> *)
+                              -> *)
+                  (a_a15Tv :: b_a15a1)
+                  (a_a15Tw :: [a_a15a0]) :: [b_a15a1] where
+  Scanr _z_1627650943_a15Tz q0_a15TA '[] = Apply (Apply (:$) q0_a15TA) '[]
+  Scanr f_a15TB q0_a15TC (x_a15TD ': xs_a15TE) = Case_1627650970_a15TZ f_a15TB q0_a15TC x_a15TD xs_a15TE (Let1627650951Scrutinee_1627648496Sym4 f_a15TB q0_a15TC x_a15TD xs_a15TE)
+type family Scanl (a_a15Uf :: TyFun b_a159P (TyFun a_a159Q b_a159P
+                                              -> *)
+                              -> *)
+                  (a_a15Ug :: b_a159P)
+                  (a_a15Uh :: [a_a159Q]) :: [b_a159P] where
+  Scanl f_a15Ui q_a15Uj ls_a15Uk = Apply (Apply (:$) q_a15Uj) (Case_1627650993_a15Um f_a15Ui q_a15Uj ls_a15Uk ls_a15Uk)
+type family Scanl1 (a_a15Ux :: TyFun a_a159W (TyFun a_a159W a_a159W
+                                              -> *)
+                                -> *)
+                    (a_a15Uy :: [a_a159W]) :: [a_a159W] where
+  Scanl1 f_a15Uz (x_a15UA ': xs_a15UB) = Apply (Apply (Apply ScanlSym0 f_a15Uz) x_a15UA) xs_a15UB
+  Scanl1 _z_1627651010_a15UE '[] = '[]
+type family All (a_a15UM :: TyFun a_a159L Bool -> *)
+                (a_a15UN :: [a_a159L]) :: Bool where
+  All _z_1627651022_a15UQ '[] = TrueSym0
+  All p_a15UR (x_a15US ': xs_a15UT) = Apply (Apply (:&&$) (Apply p_a15UR x_a15US)) (Apply (Apply AllSym0 p_a15UR) xs_a15UT)
+type family Or (a_a15UX :: [Bool]) :: Bool where
+  Or '[] = FalseSym0
+  Or (x_a15UY ': xs_a15UZ) = Apply (Apply (:||$) x_a15UY) (Apply OrSym0 xs_a15UZ)
+type family And (a_a15V3 :: [Bool]) :: Bool where
+  And '[] = TrueSym0
+  And (x_a15V4 ': xs_a15V5) = Apply (Apply (:&&$) x_a15V4) (Apply AndSym0 xs_a15V5)
+type family ConcatMap (a_a15Vd :: TyFun a_a159E [b_a159F] -> *)
+                      (a_a15Ve :: [a_a159E]) :: [b_a159F] where
+  ConcatMap f_a15Vh a_1627651049_a15Vi = Apply (Apply (Apply FoldrSym0 (Apply (Apply (:.$) (:++$)) f_a15Vh)) '[]) a_1627651049_a15Vi
+type family Concat (a_a15Vo :: [[a_a159D]]) :: [a_a159D] where
+  Concat a_1627651053_a15Vp = Apply (Apply (Apply FoldrSym0 (:++$)) '[]) a_1627651053_a15Vp
+type family Foldr1 (a_a15Vx :: TyFun a_a159y (TyFun a_a159y a_a159y
+                                              -> *)
+                                -> *)
+                    (a_a15Vy :: [a_a159y]) :: a_a159y where
+  Foldr1 _z_1627651069_a15VB '[x_a15VC] = x_a15VC
+  Foldr1 f_a15VD (x_a15VE ': (wild_1627648492_a15VF ': wild_1627648494_a15VG)) = Apply (Apply f_a15VD x_a15VE) (Apply (Apply Foldr1Sym0 f_a15VD) (Let1627651077XsSym4 f_a15VD x_a15VE wild_1627648492_a15VF wild_1627648494_a15VG))
+  Foldr1 _z_1627651096_a15W2 '[] = Apply ErrorSym0 "Data.Singletons.List.foldr1: empty list"
+type family Foldl1 (a_a15Wa :: TyFun a_a159q (TyFun a_a159q a_a159q
+                                              -> *)
+                                -> *)
+                    (a_a15Wb :: [a_a159q]) :: a_a159q where
+  Foldl1 f_a15Wc (x_a15Wd ': xs_a15We) = Apply (Apply (Apply FoldlSym0 f_a15Wc) x_a15Wd) xs_a15We
+  Foldl1 _z_1627651111_a15Wh '[] = Apply ErrorSym0 "Data.Singletons.List.foldl1: empty list"
+type family MaximumBy (a_a15Wp :: TyFun a_a15dp (TyFun a_a15dp Ordering
+                                                  -> *)
+                                  -> *)
+                      (a_a15Wq :: [a_a15dp]) :: a_a15dp where
+  MaximumBy _z_1627651123_a15Wt '[] = Apply ErrorSym0 "Data.Singletons.List.maximumBy: empty list"
+  MaximumBy cmp_a15Wu (wild_1627648536_a15Wv ': wild_1627648538_a15Ww) = Apply (Apply Foldl1Sym0 (Let1627651142MaxBySym3 cmp_a15Wu wild_1627648536_a15Wv wild_1627648538_a15Ww)) (Let1627651129XsSym3 cmp_a15Wu wild_1627648536_a15Wv wild_1627648538_a15Ww)
+type family MinimumBy (a_a15XO :: TyFun a_a15dv (TyFun a_a15dv Ordering
+                                                  -> *)
+                                  -> *)
+                      (a_a15XP :: [a_a15dv]) :: a_a15dv where
+  MinimumBy _z_1627651210_a15XS '[] = Apply ErrorSym0 "Data.Singletons.List.minimumBy: empty list"
+  MinimumBy cmp_a15XT (wild_1627648542_a15XU ': wild_1627648544_a15XV) = Apply (Apply Foldl1Sym0 (Let1627651229MinBySym3 cmp_a15XT wild_1627648542_a15XU wild_1627648544_a15XV)) (Let1627651216XsSym3 cmp_a15XT wild_1627648542_a15XU wild_1627648544_a15XV)
+type family Maximum (a_a15Z9 :: [a_a15eI]) :: a_a15eI where
+  Maximum '[] = Apply ErrorSym0 "Data.Singletons.List.maximum: empty list"
+  Maximum (wild_1627648572_a15Za ': wild_1627648574_a15Zb) = Apply (Apply Foldl1Sym0 MaxSym0) (Let1627651294XsSym2 wild_1627648572_a15Za wild_1627648574_a15Zb)
+type family Minimum (a_a15Zn :: [a_a15eK]) :: a_a15eK where
+  Minimum '[] = Apply ErrorSym0 "Data.Singletons.List.minimum: empty list"
+  Minimum (wild_1627648576_a15Zo ': wild_1627648578_a15Zp) = Apply (Apply Foldl1Sym0 MinSym0) (Let1627651308XsSym2 wild_1627648576_a15Zo wild_1627648578_a15Zp)
+type family Foldl' (a_a15ZK :: TyFun b_a156O (TyFun a_a156N b_a156O
+                                              -> *)
+                                -> *)
+                    (a_a15ZL :: b_a156O)
+                    (a_a15ZM :: [a_a156N]) :: b_a156O where
+  Foldl' f_a15ZN z0_a15ZO xs0_a15ZP = Apply (Apply (Let1627651334LgoSym3 f_a15ZN z0_a15ZO xs0_a15ZP) z0_a15ZO) xs0_a15ZP
+type family Foldl1' (a_a1611 :: TyFun a_a159u (TyFun a_a159u a_a159u
+                                                -> *)
+                                -> *)
+                    (a_a1612 :: [a_a159u]) :: a_a159u where
+  Foldl1' f_a1613 (x_a1614 ': xs_a1615) = Apply (Apply (Apply Foldl'Sym0 f_a1613) x_a1614) xs_a1615
+  Foldl1' _z_1627651412_a1618 '[] = Apply ErrorSym0 "Data.Singletons.List.foldl1': empty list"
+type family Permutations (a_a161c :: [a_a158Z]) :: [[a_a158Z]] where
+  Permutations xs0_a161d = Apply (Apply (:$) xs0_a161d) (Apply (Apply (Let1627651420PermsSym1 xs0_a161d) xs0_a161d) '[])
+type family PrependToAll (a_a167g :: a_a158V)
+                          (a_a167h :: [a_a158V]) :: [a_a158V] where
+  PrependToAll _z_1627651796_a167k '[] = '[]
+  PrependToAll sep_a167l (x_a167m ': xs_a167n) = Apply (Apply (:$) sep_a167l) (Apply (Apply (:$) x_a167m) (Apply (Apply PrependToAllSym0 sep_a167l) xs_a167n))
+type family NonEmptySubsequences (a_a167r :: [a_a158P]) :: [[a_a158P]] where
+  NonEmptySubsequences '[] = '[]
+  NonEmptySubsequences (x_a167s ': xs_a167t) = Apply (Apply (:$) (Apply (Apply (:$) x_a167s) '[])) (Apply (Apply (Apply FoldrSym0 (Let1627651808FSym2 x_a167s xs_a167t)) '[]) (Apply NonEmptySubsequencesSym0 xs_a167t))
+type family Subsequences (a_a167U :: [a_a158N]) :: [[a_a158N]] where
+  Subsequences xs_a167V = Apply (Apply (:$) '[]) (Apply NonEmptySubsequencesSym0 xs_a167V)
+type family Intersperse (a_a1683 :: a_a158G)
+                        (a_a1684 :: [a_a158G]) :: [a_a158G] where
+  Intersperse _z_1627651845_a1687 '[] = '[]
+  Intersperse sep_a1688 (x_a1689 ': xs_a168a) = Apply (Apply (:$) x_a1689) (Apply (Apply PrependToAllSym0 sep_a1688) xs_a168a)
+type family Intercalate (a_a168i :: [a_a158K])
+                        (a_a168j :: [[a_a158K]]) :: [a_a158K] where
+  Intercalate xs_a168k xss_a168l = Apply ConcatSym0 (Apply (Apply IntersperseSym0 xs_a168k) xss_a168l)
+type family Reverse (a_a168p :: [a_a158y]) :: [a_a158y] where
+  Reverse l_a168q = Apply (Apply (Let1627651867RevSym1 l_a168q) l_a168q) '[]
+type family IsSuffixOf (a_a168R :: [a_a15aW])
+                        (a_a168S :: [a_a15aW]) :: Bool where
+  IsSuffixOf x_a168T y_a168U = Apply (Apply IsPrefixOfSym0 (Apply ReverseSym0 x_a168T)) (Apply ReverseSym0 y_a168U)
+type family Null (a_a168Y :: [a_a158x]) :: Bool where
+  Null '[] = TrueSym0
+  Null (_z_1627651901_a1691 ': _z_1627651904_a1694) = FalseSym0
+type family DropWhileEnd (a_a169c :: TyFun a_a15eb Bool -> *)
+                          (a_a169d :: [a_a15eb]) :: [a_a15eb] where
+  DropWhileEnd p_a169g a_1627651916_a169h = Apply (Apply (Apply FoldrSym0 (Apply (Apply Lambda_1627651920Sym0 p_a169g) a_1627651916_a169h)) '[]) a_1627651916_a169h
+type family Init (a_a16a5 :: [a_a158p]) :: [a_a158p] where
+  Init '[] = Apply ErrorSym0 "Data.Singletons.List.init: empty list"
+  Init (x_a16a6 ': xs_a16a7) = Apply (Apply (Let1627651972Init'Sym2 x_a16a6 xs_a16a7) x_a16a6) xs_a16a7
+type family Tail (a_a16aC :: [a_a158n]) :: [a_a158n] where
+  Tail (_z_1627652003_a16aF ': t_a16aG) = t_a16aG
+  Tail '[] = Apply ErrorSym0 "Data.Singletons.List.tail: empty list"
+type family Last (a_a16aK :: [a_a158j]) :: a_a158j where
+  Last '[] = Apply ErrorSym0 "Data.Singletons.List.last: empty list"
+  Last '[x_a16aL] = x_a16aL
+  Last (_z_1627652012_a16aO ': (x_a16aP ': xs_a16aQ)) = Apply LastSym0 (Apply (Apply (:$) x_a16aP) xs_a16aQ)
+type family Head (a_a16aU :: [a_a158h]) :: a_a158h where
+  Head (a_a16aV ': _z_1627652022_a16aY) = a_a16aV
+  Head '[] = Apply ErrorSym0 "Data.Singletons.List.head: empty list"
+type family Transpose (a_a16b2 :: [[a_a15fs]]) :: [[a_a15fs]] where
+  Transpose '[] = '[]
+  Transpose ('[] ': xss_a16b3) = Apply TransposeSym0 xss_a16b3
+  Transpose ((x_a16b4 ': xs_a16b5) ': xss_a16b6) = Apply (Apply (:$) (Apply (Apply (:$) x_a16b4) (Apply (Apply MapSym0 HeadSym0) xss_a16b6))) (Apply TransposeSym0 (Apply (Apply (:$) xs_a16b5) (Apply (Apply MapSym0 TailSym0) xss_a16b6)))
+infix 5 :\\
+infix 5 %:\\
+sGenericLength ::
+  forall (t_a16b7 :: [a_a15fX]). SNum ('KProxy :: KProxy i_a15fY) =>
+  Sing t_a16b7 -> Sing (Apply GenericLengthSym0 t_a16b7 :: i_a15fY)
+sElem_by ::
+  forall (t_a16b8 :: TyFun a_a15fN (TyFun a_a15fN Bool -> *) -> *)
+          (t_a16b9 :: a_a15fN)
+          (t_a16ba :: [a_a15fN]).
+  Sing t_a16b8
+  -> Sing t_a16b9
+      -> Sing t_a16ba
+        -> Sing (Apply (Apply (Apply Elem_bySym0 t_a16b8) t_a16b9) t_a16ba :: Bool)
+sNubBy ::
+  forall (t_a16bb :: TyFun a_a15fG (TyFun a_a15fG Bool -> *) -> *)
+          (t_a16bc :: [a_a15fG]).
+  Sing t_a16bb
+  -> Sing t_a16bc
+      -> Sing (Apply (Apply NubBySym0 t_a16bb) t_a16bc :: [a_a15fG])
+(%:!!) ::
+  forall (t_a16bd :: [a_a15fx]) (t_a16be :: Nat).
+  Sing t_a16bd
+  -> Sing t_a16be
+      -> Sing (Apply (Apply (:!!$) t_a16bd) t_a16be :: a_a15fx)
+sReplicate ::
+  forall (t_a16bf :: Nat) (t_a16bg :: a_a15fp).
+  Sing t_a16bf
+  -> Sing t_a16bg
+      -> Sing (Apply (Apply ReplicateSym0 t_a16bf) t_a16bg :: [a_a15fp])
+sLength ::
+  forall (t_a16bh :: [a_a15fn]).
+  Sing t_a16bh -> Sing (Apply LengthSym0 t_a16bh :: Nat)
+sProduct ::
+  forall (t_a16bi :: [a_a156L]). SNum ('KProxy :: KProxy a_a156L) =>
+  Sing t_a16bi -> Sing (Apply ProductSym0 t_a16bi :: a_a156L)
+sSum ::
+  forall (t_a16bj :: [a_a156M]). SNum ('KProxy :: KProxy a_a156M) =>
+  Sing t_a16bj -> Sing (Apply SumSym0 t_a16bj :: a_a156M)
+sSelect ::
+  forall (t_a16bk :: TyFun a_a15f6 Bool -> *)
+          (t_a16bl :: a_a15f6)
+          (t_a16bm :: ([a_a15f6], [a_a15f6])).
+  Sing t_a16bk
+  -> Sing t_a16bl
+      -> Sing t_a16bm
+        -> Sing (Apply (Apply (Apply SelectSym0 t_a16bk) t_a16bl) t_a16bm :: ([a_a15f6],
+                                                                              [a_a15f6]))
+sPartition ::
+  forall (t_a16bn :: TyFun a_a15f3 Bool -> *) (t_a16bo :: [a_a15f3]).
+  Sing t_a16bn
+  -> Sing t_a16bo
+      -> Sing (Apply (Apply PartitionSym0 t_a16bn) t_a16bo :: ([a_a15f3],
+                                                              [a_a15f3]))
+sLookup ::
+  forall (t_a16bp :: a_a15eW)
+          (t_a16bq :: [(a_a15eW,
+                        b_a15eX)]). SEq ('KProxy :: KProxy a_a15eW) =>
+  Sing t_a16bp
+  -> Sing t_a16bq
+      -> Sing (Apply (Apply LookupSym0 t_a16bp) t_a16bq :: Maybe b_a15eX)
+sDrop ::
+  forall (t_a16br :: Nat) (t_a16bs :: [a_a15ez]).
+  Sing t_a16br
+  -> Sing t_a16bs
+      -> Sing (Apply (Apply DropSym0 t_a16br) t_a16bs :: [a_a15ez])
+sTake ::
+  forall (t_a16bt :: Nat) (t_a16bu :: [a_a15ev]).
+  Sing t_a16bt
+  -> Sing t_a16bu
+      -> Sing (Apply (Apply TakeSym0 t_a16bt) t_a16bu :: [a_a15ev])
+sSplitAt ::
+  forall (t_a16bv :: Nat) (t_a16bw :: [a_a15eD]).
+  Sing t_a16bv
+  -> Sing t_a16bw
+      -> Sing (Apply (Apply SplitAtSym0 t_a16bv) t_a16bw :: ([a_a15eD],
+                                                            [a_a15eD]))
+sBreak ::
+  forall (t_a16bx :: TyFun a_a15en Bool -> *) (t_a16by :: [a_a15en]).
+  Sing t_a16bx
+  -> Sing t_a16by
+      -> Sing (Apply (Apply BreakSym0 t_a16bx) t_a16by :: ([a_a15en],
+                                                          [a_a15en]))
+sSpan ::
+  forall (t_a16bz :: TyFun a_a15ef Bool -> *) (t_a16bA :: [a_a15ef]).
+  Sing t_a16bz
+  -> Sing t_a16bA
+      -> Sing (Apply (Apply SpanSym0 t_a16bz) t_a16bA :: ([a_a15ef],
+                                                          [a_a15ef]))
+sGroupBy ::
+  forall (t_a16bB :: TyFun a_a15eQ (TyFun a_a15eQ Bool -> *) -> *)
+          (t_a16bC :: [a_a15eQ]).
+  Sing t_a16bB
+  -> Sing t_a16bC
+      -> Sing (Apply (Apply GroupBySym0 t_a16bB) t_a16bC :: [[a_a15eQ]])
+sGroup ::
+  forall (t_a16bD :: [a_a15eG]). SEq ('KProxy :: KProxy a_a15eG) =>
+  Sing t_a16bD -> Sing (Apply GroupSym0 t_a16bD :: [[a_a15eG]])
+sDropWhile ::
+  forall (t_a16bE :: TyFun a_a15e6 Bool -> *) (t_a16bF :: [a_a15e6]).
+  Sing t_a16bE
+  -> Sing t_a16bF
+      -> Sing (Apply (Apply DropWhileSym0 t_a16bE) t_a16bF :: [a_a15e6])
+sTakeWhile ::
+  forall (t_a16bG :: TyFun a_a15e2 Bool -> *) (t_a16bH :: [a_a15e2]).
+  Sing t_a16bG
+  -> Sing t_a16bH
+      -> Sing (Apply (Apply TakeWhileSym0 t_a16bG) t_a16bH :: [a_a15e2])
+sFilter ::
+  forall (t_a16bI :: TyFun a_a15dB Bool -> *) (t_a16bJ :: [a_a15dB]).
+  Sing t_a16bI
+  -> Sing t_a16bJ
+      -> Sing (Apply (Apply FilterSym0 t_a16bI) t_a16bJ :: [a_a15dB])
+sFind ::
+  forall (t_a16bK :: TyFun a_a15dG Bool -> *) (t_a16bL :: [a_a15dG]).
+  Sing t_a16bK
+  -> Sing t_a16bL
+      -> Sing (Apply (Apply FindSym0 t_a16bK) t_a16bL :: Maybe a_a15dG)
+sIntersectBy ::
+  forall (t_a16bM :: TyFun a_a15dX (TyFun a_a15dX Bool -> *) -> *)
+          (t_a16bN :: [a_a15dX])
+          (t_a16bO :: [a_a15dX]).
+  Sing t_a16bM
+  -> Sing t_a16bN
+      -> Sing t_a16bO
+        -> Sing (Apply (Apply (Apply IntersectBySym0 t_a16bM) t_a16bN) t_a16bO :: [a_a15dX])
+sIntersect ::
+  forall (t_a16bP :: [a_a15dW])
+          (t_a16bQ :: [a_a15dW]). SEq ('KProxy :: KProxy a_a15dW) =>
+  Sing t_a16bP
+  -> Sing t_a16bQ
+      -> Sing (Apply (Apply IntersectSym0 t_a16bP) t_a16bQ :: [a_a15dW])
+sInsertBy ::
+  forall (t_a16bR :: TyFun a_a15di (TyFun a_a15di Ordering -> *)
+                      -> *)
+          (t_a16bS :: a_a15di)
+          (t_a16bT :: [a_a15di]).
+  Sing t_a16bR
+  -> Sing t_a16bS
+      -> Sing t_a16bT
+        -> Sing (Apply (Apply (Apply InsertBySym0 t_a16bR) t_a16bS) t_a16bT :: [a_a15di])
+sInsert ::
+  forall (t_a16bU :: a_a15eM)
+          (t_a16bV :: [a_a15eM]). SOrd ('KProxy :: KProxy a_a15eM) =>
+  Sing t_a16bU
+  -> Sing t_a16bV
+      -> Sing (Apply (Apply InsertSym0 t_a16bU) t_a16bV :: [a_a15eM])
+sSortBy ::
+  forall (t_a16bW :: TyFun a_a15dg (TyFun a_a15dg Ordering -> *)
+                      -> *)
+          (t_a16bX :: [a_a15dg]).
+  Sing t_a16bW
+  -> Sing t_a16bX
+      -> Sing (Apply (Apply SortBySym0 t_a16bW) t_a16bX :: [a_a15dg])
+sSort ::
+  forall (t_a16bY :: [a_a15eP]). SOrd ('KProxy :: KProxy a_a15eP) =>
+  Sing t_a16bY -> Sing (Apply SortSym0 t_a16bY :: [a_a15eP])
+sDeleteBy ::
+  forall (t_a16bZ :: TyFun a_a15d9 (TyFun a_a15d9 Bool -> *) -> *)
+          (t_a16c0 :: a_a15d9)
+          (t_a16c1 :: [a_a15d9]).
+  Sing t_a16bZ
+  -> Sing t_a16c0
+      -> Sing t_a16c1
+        -> Sing (Apply (Apply (Apply DeleteBySym0 t_a16bZ) t_a16c0) t_a16c1 :: [a_a15d9])
+sDeleteFirstsBy ::
+  forall (t_a16c2 :: TyFun a_a15de (TyFun a_a15de Bool -> *) -> *)
+          (t_a16c3 :: [a_a15de])
+          (t_a16c4 :: [a_a15de]).
+  Sing t_a16c2
+  -> Sing t_a16c3
+      -> Sing t_a16c4
+        -> Sing (Apply (Apply (Apply DeleteFirstsBySym0 t_a16c2) t_a16c3) t_a16c4 :: [a_a15de])
+sUnionBy ::
+  forall (t_a16c5 :: TyFun a_a15fS (TyFun a_a15fS Bool -> *) -> *)
+          (t_a16c6 :: [a_a15fS])
+          (t_a16c7 :: [a_a15fS]).
+  Sing t_a16c5
+  -> Sing t_a16c6
+      -> Sing t_a16c7
+        -> Sing (Apply (Apply (Apply UnionBySym0 t_a16c5) t_a16c6) t_a16c7 :: [a_a15fS])
+sUnion ::
+  forall (t_a16c8 :: [a_a15fW])
+          (t_a16c9 :: [a_a15fW]). SEq ('KProxy :: KProxy a_a15fW) =>
+  Sing t_a16c8
+  -> Sing t_a16c9
+      -> Sing (Apply (Apply UnionSym0 t_a16c8) t_a16c9 :: [a_a15fW])
+sDelete ::
+  forall (t_a16ca :: a_a15d7)
+          (t_a16cb :: [a_a15d7]). SEq ('KProxy :: KProxy a_a15d7) =>
+  Sing t_a16ca
+  -> Sing t_a16cb
+      -> Sing (Apply (Apply DeleteSym0 t_a16ca) t_a16cb :: [a_a15d7])
+(%:\\) ::
+  forall (t_a16cc :: [a_a15d8])
+          (t_a16cd :: [a_a15d8]). SEq ('KProxy :: KProxy a_a15d8) =>
+  Sing t_a16cc
+  -> Sing t_a16cd
+      -> Sing (Apply (Apply (:\\$) t_a16cc) t_a16cd :: [a_a15d8])
+sUnzip7 ::
+  forall (t_a16ce :: [(a_a15cL,
+                        b_a15cM,
+                        c_a15cN,
+                        d_a15cO,
+                        e_a15cP,
+                        f_a15cQ,
+                        g_a15cR)]).
+  Sing t_a16ce
+  -> Sing (Apply Unzip7Sym0 t_a16ce :: ([a_a15cL],
+                                        [b_a15cM],
+                                        [c_a15cN],
+                                        [d_a15cO],
+                                        [e_a15cP],
+                                        [f_a15cQ],
+                                        [g_a15cR]))
+sUnzip6 ::
+  forall (t_a16cf :: [(a_a15cs,
+                        b_a15ct,
+                        c_a15cu,
+                        d_a15cv,
+                        e_a15cw,
+                        f_a15cx)]).
+  Sing t_a16cf
+  -> Sing (Apply Unzip6Sym0 t_a16cf :: ([a_a15cs],
+                                        [b_a15ct],
+                                        [c_a15cu],
+                                        [d_a15cv],
+                                        [e_a15cw],
+                                        [f_a15cx]))
+sUnzip5 ::
+  forall (t_a16cg :: [(a_a15cc,
+                        b_a15cd,
+                        c_a15ce,
+                        d_a15cf,
+                        e_a15cg)]).
+  Sing t_a16cg
+  -> Sing (Apply Unzip5Sym0 t_a16cg :: ([a_a15cc],
+                                        [b_a15cd],
+                                        [c_a15ce],
+                                        [d_a15cf],
+                                        [e_a15cg]))
+sUnzip4 ::
+  forall (t_a16ch :: [(a_a15bZ, b_a15c0, c_a15c1, d_a15c2)]).
+  Sing t_a16ch
+  -> Sing (Apply Unzip4Sym0 t_a16ch :: ([a_a15bZ],
+                                        [b_a15c0],
+                                        [c_a15c1],
+                                        [d_a15c2]))
+sUnzip3 ::
+  forall (t_a16ci :: [(a_a15bP, b_a15bQ, c_a15bR)]).
+  Sing t_a16ci
+  -> Sing (Apply Unzip3Sym0 t_a16ci :: ([a_a15bP],
+                                        [b_a15bQ],
+                                        [c_a15bR]))
+sUnzip ::
+  forall (t_a16cj :: [(a_a15bI, b_a15bJ)]).
+  Sing t_a16cj
+  -> Sing (Apply UnzipSym0 t_a16cj :: ([a_a15bI], [b_a15bJ]))
+sZipWith3 ::
+  forall (t_a16ck :: TyFun a_a15bx (TyFun b_a15by (TyFun c_a15bz d_a15bA
+                                                    -> *)
+                                    -> *)
+                      -> *)
+          (t_a16cl :: [a_a15bx])
+          (t_a16cm :: [b_a15by])
+          (t_a16cn :: [c_a15bz]).
+  Sing t_a16ck
+  -> Sing t_a16cl
+      -> Sing t_a16cm
+        -> Sing t_a16cn
+            -> Sing (Apply (Apply (Apply (Apply ZipWith3Sym0 t_a16ck) t_a16cl) t_a16cm) t_a16cn :: [d_a15bA])
+sZipWith ::
+  forall (t_a16co :: TyFun a_a15bp (TyFun b_a15bq c_a15br -> *) -> *)
+          (t_a16cp :: [a_a15bp])
+          (t_a16cq :: [b_a15bq]).
+  Sing t_a16co
+  -> Sing t_a16cp
+      -> Sing t_a16cq
+        -> Sing (Apply (Apply (Apply ZipWithSym0 t_a16co) t_a16cp) t_a16cq :: [c_a15br])
+sZip3 ::
+  forall (t_a16cr :: [a_a15bg])
+          (t_a16cs :: [b_a15bh])
+          (t_a16ct :: [c_a15bi]).
+  Sing t_a16cr
+  -> Sing t_a16cs
+      -> Sing t_a16ct
+        -> Sing (Apply (Apply (Apply Zip3Sym0 t_a16cr) t_a16cs) t_a16ct :: [(a_a15bg,
+                                                                              b_a15bh,
+                                                                              c_a15bi)])
+sZip ::
+  forall (t_a16cu :: [a_a15ba]) (t_a16cv :: [b_a15bb]).
+  Sing t_a16cu
+  -> Sing t_a16cv
+      -> Sing (Apply (Apply ZipSym0 t_a16cu) t_a16cv :: [(a_a15ba,
+                                                          b_a15bb)])
+sFindIndices ::
+  forall (t_a16cw :: TyFun a_a15dO Bool -> *) (t_a16cx :: [a_a15dO]).
+  Sing t_a16cw
+  -> Sing t_a16cx
+      -> Sing (Apply (Apply FindIndicesSym0 t_a16cw) t_a16cx :: [Nat])
+sElemIndices ::
+  forall (t_a16cy :: a_a15dK)
+          (t_a16cz :: [a_a15dK]). SEq ('KProxy :: KProxy a_a15dK) =>
+  Sing t_a16cy
+  -> Sing t_a16cz
+      -> Sing (Apply (Apply ElemIndicesSym0 t_a16cy) t_a16cz :: [Nat])
+sFindIndex ::
+  forall (t_a16cA :: TyFun a_a15dM Bool -> *) (t_a16cB :: [a_a15dM]).
+  Sing t_a16cA
+  -> Sing t_a16cB
+      -> Sing (Apply (Apply FindIndexSym0 t_a16cA) t_a16cB :: Maybe Nat)
+sElemIndex ::
+  forall (t_a16cC :: a_a15dI)
+          (t_a16cD :: [a_a15dI]). SEq ('KProxy :: KProxy a_a15dI) =>
+  Sing t_a16cC
+  -> Sing t_a16cD
+      -> Sing (Apply (Apply ElemIndexSym0 t_a16cC) t_a16cD :: Maybe Nat)
+sNotElem ::
+  forall (t_a16cE :: a_a15b6)
+          (t_a16cF :: [a_a15b6]). SEq ('KProxy :: KProxy a_a15b6) =>
+  Sing t_a16cE
+  -> Sing t_a16cF
+      -> Sing (Apply (Apply NotElemSym0 t_a16cE) t_a16cF :: Bool)
+sElem ::
+  forall (t_a16cG :: a_a15b2)
+          (t_a16cH :: [a_a15b2]). SEq ('KProxy :: KProxy a_a15b2) =>
+  Sing t_a16cG
+  -> Sing t_a16cH
+      -> Sing (Apply (Apply ElemSym0 t_a16cG) t_a16cH :: Bool)
+sNub ::
+  forall (t_a16cI :: [a_a156K]). SEq ('KProxy :: KProxy a_a156K) =>
+  Sing t_a16cI -> Sing (Apply NubSym0 t_a16cI :: [a_a156K])
+sIsPrefixOf ::
+  forall (t_a16cJ :: [a_a15aR])
+          (t_a16cK :: [a_a15aR]). SEq ('KProxy :: KProxy a_a15aR) =>
+  Sing t_a16cJ
+  -> Sing t_a16cK
+      -> Sing (Apply (Apply IsPrefixOfSym0 t_a16cJ) t_a16cK :: Bool)
+sTails ::
+  forall (t_a16cL :: [a_a15aO]).
+  Sing t_a16cL -> Sing (Apply TailsSym0 t_a16cL :: [[a_a15aO]])
+sIsInfixOf ::
+  forall (t_a16cM :: [a_a15aZ])
+          (t_a16cN :: [a_a15aZ]). SEq ('KProxy :: KProxy a_a15aZ) =>
+  Sing t_a16cM
+  -> Sing t_a16cN
+      -> Sing (Apply (Apply IsInfixOfSym0 t_a16cM) t_a16cN :: Bool)
+sInits ::
+  forall (t_a16cO :: [a_a15aK]).
+  Sing t_a16cO -> Sing (Apply InitsSym0 t_a16cO :: [[a_a15aK]])
+sUnfoldr ::
+  forall (t_a16cP :: TyFun b_a15aE (Maybe (a_a15aF, b_a15aE)) -> *)
+          (t_a16cQ :: b_a15aE).
+  Sing t_a16cP
+  -> Sing t_a16cQ
+      -> Sing (Apply (Apply UnfoldrSym0 t_a16cP) t_a16cQ :: [a_a15aF])
+sMapAccumR ::
+  forall (t_a16cR :: TyFun acc_a15as (TyFun x_a15at (acc_a15as,
+                                                      y_a15au)
+                                      -> *)
+                      -> *)
+          (t_a16cS :: acc_a15as)
+          (t_a16cT :: [x_a15at]).
+  Sing t_a16cR
+  -> Sing t_a16cS
+      -> Sing t_a16cT
+        -> Sing (Apply (Apply (Apply MapAccumRSym0 t_a16cR) t_a16cS) t_a16cT :: (acc_a15as,
+                                                                                  [y_a15au]))
+sMapAccumL ::
+  forall (t_a16cU :: TyFun acc_a15ag (TyFun x_a15ah (acc_a15ag,
+                                                      y_a15ai)
+                                      -> *)
+                      -> *)
+          (t_a16cV :: acc_a15ag)
+          (t_a16cW :: [x_a15ah]).
+  Sing t_a16cU
+  -> Sing t_a16cV
+      -> Sing t_a16cW
+        -> Sing (Apply (Apply (Apply MapAccumLSym0 t_a16cU) t_a16cV) t_a16cW :: (acc_a15ag,
+                                                                                  [y_a15ai]))
+sScanr1 ::
+  forall (t_a16cX :: TyFun a_a15a9 (TyFun a_a15a9 a_a15a9 -> *) -> *)
+          (t_a16cY :: [a_a15a9]).
+  Sing t_a16cX
+  -> Sing t_a16cY
+      -> Sing (Apply (Apply Scanr1Sym0 t_a16cX) t_a16cY :: [a_a15a9])
+sScanr ::
+  forall (t_a16cZ :: TyFun a_a15a0 (TyFun b_a15a1 b_a15a1 -> *) -> *)
+          (t_a16d0 :: b_a15a1)
+          (t_a16d1 :: [a_a15a0]).
+  Sing t_a16cZ
+  -> Sing t_a16d0
+      -> Sing t_a16d1
+        -> Sing (Apply (Apply (Apply ScanrSym0 t_a16cZ) t_a16d0) t_a16d1 :: [b_a15a1])
+sScanl ::
+  forall (t_a16d2 :: TyFun b_a159P (TyFun a_a159Q b_a159P -> *) -> *)
+          (t_a16d3 :: b_a159P)
+          (t_a16d4 :: [a_a159Q]).
+  Sing t_a16d2
+  -> Sing t_a16d3
+      -> Sing t_a16d4
+        -> Sing (Apply (Apply (Apply ScanlSym0 t_a16d2) t_a16d3) t_a16d4 :: [b_a159P])
+sScanl1 ::
+  forall (t_a16d5 :: TyFun a_a159W (TyFun a_a159W a_a159W -> *) -> *)
+          (t_a16d6 :: [a_a159W]).
+  Sing t_a16d5
+  -> Sing t_a16d6
+      -> Sing (Apply (Apply Scanl1Sym0 t_a16d5) t_a16d6 :: [a_a159W])
+sAll ::
+  forall (t_a16d7 :: TyFun a_a159L Bool -> *) (t_a16d8 :: [a_a159L]).
+  Sing t_a16d7
+  -> Sing t_a16d8
+      -> Sing (Apply (Apply AllSym0 t_a16d7) t_a16d8 :: Bool)
+sOr ::
+  forall (t_a16d9 :: [Bool]).
+  Sing t_a16d9 -> Sing (Apply OrSym0 t_a16d9 :: Bool)
+sAnd ::
+  forall (t_a16da :: [Bool]).
+  Sing t_a16da -> Sing (Apply AndSym0 t_a16da :: Bool)
+sConcatMap ::
+  forall (t_a16db :: TyFun a_a159E [b_a159F] -> *)
+          (t_a16dc :: [a_a159E]).
+  Sing t_a16db
+  -> Sing t_a16dc
+      -> Sing (Apply (Apply ConcatMapSym0 t_a16db) t_a16dc :: [b_a159F])
+sConcat ::
+  forall (t_a16dd :: [[a_a159D]]).
+  Sing t_a16dd -> Sing (Apply ConcatSym0 t_a16dd :: [a_a159D])
+sFoldr1 ::
+  forall (t_a16de :: TyFun a_a159y (TyFun a_a159y a_a159y -> *) -> *)
+          (t_a16df :: [a_a159y]).
+  Sing t_a16de
+  -> Sing t_a16df
+      -> Sing (Apply (Apply Foldr1Sym0 t_a16de) t_a16df :: a_a159y)
+sFoldl1 ::
+  forall (t_a16dg :: TyFun a_a159q (TyFun a_a159q a_a159q -> *) -> *)
+          (t_a16dh :: [a_a159q]).
+  Sing t_a16dg
+  -> Sing t_a16dh
+      -> Sing (Apply (Apply Foldl1Sym0 t_a16dg) t_a16dh :: a_a159q)
+sMaximumBy ::
+  forall (t_a16di :: TyFun a_a15dp (TyFun a_a15dp Ordering -> *)
+                      -> *)
+          (t_a16dj :: [a_a15dp]).
+  Sing t_a16di
+  -> Sing t_a16dj
+      -> Sing (Apply (Apply MaximumBySym0 t_a16di) t_a16dj :: a_a15dp)
+sMinimumBy ::
+  forall (t_a16dk :: TyFun a_a15dv (TyFun a_a15dv Ordering -> *)
+                      -> *)
+          (t_a16dl :: [a_a15dv]).
+  Sing t_a16dk
+  -> Sing t_a16dl
+      -> Sing (Apply (Apply MinimumBySym0 t_a16dk) t_a16dl :: a_a15dv)
+sMaximum ::
+  forall (t_a16dm :: [a_a15eI]). SOrd ('KProxy :: KProxy a_a15eI) =>
+  Sing t_a16dm -> Sing (Apply MaximumSym0 t_a16dm :: a_a15eI)
+sMinimum ::
+  forall (t_a16dn :: [a_a15eK]). SOrd ('KProxy :: KProxy a_a15eK) =>
+  Sing t_a16dn -> Sing (Apply MinimumSym0 t_a16dn :: a_a15eK)
+sFoldl' ::
+  forall (t_a16do :: TyFun b_a156O (TyFun a_a156N b_a156O -> *) -> *)
+          (t_a16dp :: b_a156O)
+          (t_a16dq :: [a_a156N]).
+  Sing t_a16do
+  -> Sing t_a16dp
+      -> Sing t_a16dq
+        -> Sing (Apply (Apply (Apply Foldl'Sym0 t_a16do) t_a16dp) t_a16dq :: b_a156O)
+sFoldl1' ::
+  forall (t_a16dr :: TyFun a_a159u (TyFun a_a159u a_a159u -> *) -> *)
+          (t_a16ds :: [a_a159u]).
+  Sing t_a16dr
+  -> Sing t_a16ds
+      -> Sing (Apply (Apply Foldl1'Sym0 t_a16dr) t_a16ds :: a_a159u)
+sPermutations ::
+  forall (t_a16dt :: [a_a158Z]).
+  Sing t_a16dt
+  -> Sing (Apply PermutationsSym0 t_a16dt :: [[a_a158Z]])
+sPrependToAll ::
+  forall (t_a16du :: a_a158V) (t_a16dv :: [a_a158V]).
+  Sing t_a16du
+  -> Sing t_a16dv
+      -> Sing (Apply (Apply PrependToAllSym0 t_a16du) t_a16dv :: [a_a158V])
+sNonEmptySubsequences ::
+  forall (t_a16dw :: [a_a158P]).
+  Sing t_a16dw
+  -> Sing (Apply NonEmptySubsequencesSym0 t_a16dw :: [[a_a158P]])
+sSubsequences ::
+  forall (t_a16dx :: [a_a158N]).
+  Sing t_a16dx
+  -> Sing (Apply SubsequencesSym0 t_a16dx :: [[a_a158N]])
+sIntersperse ::
+  forall (t_a16dy :: a_a158G) (t_a16dz :: [a_a158G]).
+  Sing t_a16dy
+  -> Sing t_a16dz
+      -> Sing (Apply (Apply IntersperseSym0 t_a16dy) t_a16dz :: [a_a158G])
+sIntercalate ::
+  forall (t_a16dA :: [a_a158K]) (t_a16dB :: [[a_a158K]]).
+  Sing t_a16dA
+  -> Sing t_a16dB
+      -> Sing (Apply (Apply IntercalateSym0 t_a16dA) t_a16dB :: [a_a158K])
+sReverse ::
+  forall (t_a16dC :: [a_a158y]).
+  Sing t_a16dC -> Sing (Apply ReverseSym0 t_a16dC :: [a_a158y])
+sIsSuffixOf ::
+  forall (t_a16dD :: [a_a15aW])
+          (t_a16dE :: [a_a15aW]). SEq ('KProxy :: KProxy a_a15aW) =>
+  Sing t_a16dD
+  -> Sing t_a16dE
+      -> Sing (Apply (Apply IsSuffixOfSym0 t_a16dD) t_a16dE :: Bool)
+sNull ::
+  forall (t_a16dF :: [a_a158x]).
+  Sing t_a16dF -> Sing (Apply NullSym0 t_a16dF :: Bool)
+sDropWhileEnd ::
+  forall (t_a16dG :: TyFun a_a15eb Bool -> *) (t_a16dH :: [a_a15eb]).
+  Sing t_a16dG
+  -> Sing t_a16dH
+      -> Sing (Apply (Apply DropWhileEndSym0 t_a16dG) t_a16dH :: [a_a15eb])
+sInit ::
+  forall (t_a16dI :: [a_a158p]).
+  Sing t_a16dI -> Sing (Apply InitSym0 t_a16dI :: [a_a158p])
+sTail ::
+  forall (t_a16dJ :: [a_a158n]).
+  Sing t_a16dJ -> Sing (Apply TailSym0 t_a16dJ :: [a_a158n])
+sLast ::
+  forall (t_a16dK :: [a_a158j]).
+  Sing t_a16dK -> Sing (Apply LastSym0 t_a16dK :: a_a158j)
+sHead ::
+  forall (t_a16dL :: [a_a158h]).
+  Sing t_a16dL -> Sing (Apply HeadSym0 t_a16dL :: a_a158h)
+sTranspose ::
+  forall (t_a16dM :: [[a_a15fs]]).
+  Sing t_a16dM -> Sing (Apply TransposeSym0 t_a16dM :: [[a_a15fs]])
+sGenericLength SNil
+  = let
+      lambda_a16dN ::
+        t_a16b7 ~ '[] => Sing (Apply GenericLengthSym0 '[] :: i_a15fY)
+      lambda_a16dN = sFromInteger (sing :: Sing 0)
+    in lambda_a16dN
+sGenericLength (SCons _s_z_1627648663 sXs)
+  = let
+      lambda_a16dO ::
+        forall _z_1627648663_a15iN
+                xs_a15iO. t_a16b7 ~ Apply (Apply (:$) _z_1627648663_a15iN) xs_a15iO =>
+        Sing _z_1627648663_a15iN
+        -> Sing xs_a15iO
+            -> Sing (Apply GenericLengthSym0 (Apply (Apply (:$) _z_1627648663_a15iN) xs_a15iO) :: i_a15fY)
+      lambda_a16dO _z_1627648663_a16dP xs_a16dQ
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:+$)) (%:+))
+                (sFromInteger (sing :: Sing 1)))
+            (applySing
+                (singFun1 (Proxy :: Proxy GenericLengthSym0) sGenericLength)
+                xs_a16dQ)
+    in lambda_a16dO _s_z_1627648663 sXs
+sElem_by _s_z_1627648682 _s_z_1627648685 SNil
+  = let
+      lambda_a16dR ::
+        forall _z_1627648682_a15j6
+                _z_1627648685_a15j9. (t_a16b8 ~ _z_1627648682_a15j6,
+                                      t_a16b9 ~ _z_1627648685_a15j9,
+                                      t_a16ba ~ '[]) =>
+        Sing _z_1627648682_a15j6
+        -> Sing _z_1627648685_a15j9
+            -> Sing (Apply (Apply (Apply Elem_bySym0 _z_1627648682_a15j6) _z_1627648685_a15j9) '[] :: Bool)
+      lambda_a16dR _z_1627648682_a16dS _z_1627648685_a16dT = SFalse
+    in lambda_a16dR _s_z_1627648682 _s_z_1627648685
+sElem_by sEq sY (SCons sX sXs)
+  = let
+      lambda_a16dU ::
+        forall eq_a15ja y_a15jb x_a15jc xs_a15jd. (t_a16b8 ~ eq_a15ja,
+                                                    t_a16b9 ~ y_a15jb,
+                                                    t_a16ba ~ Apply (Apply (:$) x_a15jc) xs_a15jd) =>
+        Sing eq_a15ja
+        -> Sing y_a15jb
+            -> Sing x_a15jc
+              -> Sing xs_a15jd
+                  -> Sing (Apply (Apply (Apply Elem_bySym0 eq_a15ja) y_a15jb) (Apply (Apply (:$) x_a15jc) xs_a15jd) :: Bool)
+      lambda_a16dU eq_a16dV y_a16dW x_a16dX xs_a16dY
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:||$)) (%:||))
+                (applySing (applySing eq_a16dV y_a16dW) x_a16dX))
+            (applySing
+                (applySing
+                  (applySing
+                      (singFun3 (Proxy :: Proxy Elem_bySym0) sElem_by) eq_a16dV)
+                  y_a16dW)
+                xs_a16dY)
+    in lambda_a16dU sEq sY sX sXs
+sNubBy sEq sL
+  = let
+      lambda_a16dZ ::
+        forall eq_a15jn l_a15jo. (t_a16bb ~ eq_a15jn, t_a16bc ~ l_a15jo) =>
+        Sing eq_a15jn
+        -> Sing l_a15jo
+            -> Sing (Apply (Apply NubBySym0 eq_a15jn) l_a15jo :: [a_a15fG])
+      lambda_a16dZ eq_a16e0 l_a16e1
+        = let
+            sNubBy' ::
+              forall arg_a16e2 arg_a16e3.
+              Sing arg_a16e2
+              -> Sing arg_a16e3
+                  -> Sing (Apply (Apply (Let1627648703NubBy'Sym2 eq_a15jn l_a15jo) arg_a16e2) arg_a16e3)
+            sNubBy' SNil _s_z_1627648724
+              = let
+                  lambda_a16e4 ::
+                    forall _z_1627648724_a15jM. (arg_a16e2 ~ '[],
+                                                  arg_a16e3 ~ _z_1627648724_a15jM) =>
+                    Sing _z_1627648724_a15jM
+                    -> Sing (Apply (Apply (Let1627648703NubBy'Sym2 eq_a15jn l_a15jo) '[]) _z_1627648724_a15jM)
+                  lambda_a16e4 _z_1627648724_a16e5 = SNil
+                in lambda_a16e4 _s_z_1627648724
+            sNubBy' (SCons sY sYs) sXs
+              = let
+                  lambda_a16e6 ::
+                    forall y_a15jN
+                            ys_a15jO
+                            xs_a15jP. (arg_a16e2 ~ Apply (Apply (:$) y_a15jN) ys_a15jO,
+                                      arg_a16e3 ~ xs_a15jP) =>
+                    Sing y_a15jN
+                    -> Sing ys_a15jO
+                        -> Sing xs_a15jP
+                          -> Sing (Apply (Apply (Let1627648703NubBy'Sym2 eq_a15jn l_a15jo) (Apply (Apply (:$) y_a15jN) ys_a15jO)) xs_a15jP)
+                  lambda_a16e6 y_a16e7 ys_a16e8 xs_a16e9
+                    = let
+                        sScrutinee_1627648590 ::
+                          Sing (Let1627648730Scrutinee_1627648590Sym5 eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP)
+                        sScrutinee_1627648590
+                          = applySing
+                              (applySing
+                                  (applySing
+                                    (singFun3 (Proxy :: Proxy Elem_bySym0) sElem_by) eq_a16e0)
+                                  y_a16e7)
+                              xs_a16e9
+                      in  case sScrutinee_1627648590 of {
+                            STrue
+                              -> let
+                                    lambda_a16ea ::
+                                      TrueSym0 ~ Let1627648730Scrutinee_1627648590Sym5 eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP =>
+                                      Sing (Case_1627648756_a15kh eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP TrueSym0)
+                                    lambda_a16ea
+                                      = applySing
+                                          (applySing
+                                            (singFun2
+                                                (Proxy ::
+                                                  Proxy (Let1627648703NubBy'Sym2 eq_a15jn l_a15jo))
+                                                sNubBy')
+                                            ys_a16e8)
+                                          xs_a16e9
+                                  in lambda_a16ea;
+                            SFalse
+                              -> let
+                                    lambda_a16eb ::
+                                      FalseSym0 ~ Let1627648730Scrutinee_1627648590Sym5 eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP =>
+                                      Sing (Case_1627648756_a15kh eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP FalseSym0)
+                                    lambda_a16eb
+                                      = applySing
+                                          (applySing
+                                            (singFun2 (Proxy :: Proxy (:$)) SCons) y_a16e7)
+                                          (applySing
+                                            (applySing
+                                                (singFun2
+                                                  (Proxy ::
+                                                      Proxy (Let1627648703NubBy'Sym2 eq_a15jn l_a15jo))
+                                                  sNubBy')
+                                                ys_a16e8)
+                                            (applySing
+                                                (applySing
+                                                  (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                  y_a16e7)
+                                                xs_a16e9))
+                                  in lambda_a16eb } ::
+                            Sing (Case_1627648756_a15kh eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP (Let1627648730Scrutinee_1627648590Sym5 eq_a15jn l_a15jo y_a15jN ys_a15jO xs_a15jP))
+                in lambda_a16e6 sY sYs sXs
+          in
+            applySing
+              (applySing
+                  (singFun2
+                    (Proxy :: Proxy (Let1627648703NubBy'Sym2 eq_a15jn l_a15jo))
+                    sNubBy')
+                  l_a16e1)
+              SNil
+    in lambda_a16dZ sEq sL
+(%:!!) SNil _s_z_1627648768
+  = let
+      lambda_a16ec ::
+        forall _z_1627648768_a15ku. (t_a16bd ~ '[],
+                                      t_a16be ~ _z_1627648768_a15ku) =>
+        Sing _z_1627648768_a15ku
+        -> Sing (Apply (Apply (:!!$) '[]) _z_1627648768_a15ku :: a_a15fx)
+      lambda_a16ec _z_1627648768_a16ed
+        = sError (sing :: Sing "Data.Singletons.List.!!: index too large")
+    in lambda_a16ec _s_z_1627648768
+(%:!!) (SCons sX sXs) sN
+  = let
+      lambda_a16ee ::
+        forall x_a15kv
+                xs_a15kw
+                n_a15kx. (t_a16bd ~ Apply (Apply (:$) x_a15kv) xs_a15kw,
+                          t_a16be ~ n_a15kx) =>
+        Sing x_a15kv
+        -> Sing xs_a15kw
+            -> Sing n_a15kx
+              -> Sing (Apply (Apply (:!!$) (Apply (Apply (:$) x_a15kv) xs_a15kw)) n_a15kx :: a_a15fx)
+      lambda_a16ee x_a16ef xs_a16eg n_a16eh
+        = let
+            sScrutinee_1627648586 ::
+              Sing (Let1627648774Scrutinee_1627648586Sym3 x_a15kv xs_a15kw n_a15kx)
+            sScrutinee_1627648586
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_a16eh)
+                  (sFromInteger (sing :: Sing 0))
+          in  case sScrutinee_1627648586 of {
+                STrue
+                  -> let
+                        lambda_a16ei ::
+                          TrueSym0 ~ Let1627648774Scrutinee_1627648586Sym3 x_a15kv xs_a15kw n_a15kx =>
+                          Sing (Case_1627648787_a15kM x_a15kv xs_a15kw n_a15kx TrueSym0)
+                        lambda_a16ei = x_a16ef
+                      in lambda_a16ei;
+                SFalse
+                  -> let
+                        lambda_a16ej ::
+                          FalseSym0 ~ Let1627648774Scrutinee_1627648586Sym3 x_a15kv xs_a15kw n_a15kx =>
+                          Sing (Case_1627648787_a15kM x_a15kv xs_a15kw n_a15kx FalseSym0)
+                        lambda_a16ej
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:!!$)) (%:!!)) xs_a16eg)
+                              (applySing
+                                (applySing (singFun2 (Proxy :: Proxy (:-$)) (%:-)) n_a16eh)
+                                (sFromInteger (sing :: Sing 1)))
+                      in lambda_a16ej } ::
+                Sing (Case_1627648787_a15kM x_a15kv xs_a15kw n_a15kx (Let1627648774Scrutinee_1627648586Sym3 x_a15kv xs_a15kw n_a15kx))
+    in lambda_a16ee sX sXs sN
+sReplicate sN sX
+  = let
+      lambda_a16ek ::
+        forall n_a15kX x_a15kY. (t_a16bf ~ n_a15kX, t_a16bg ~ x_a15kY) =>
+        Sing n_a15kX
+        -> Sing x_a15kY
+            -> Sing (Apply (Apply ReplicateSym0 n_a15kX) x_a15kY :: [a_a15fp])
+      lambda_a16ek n_a16el x_a16em
+        = let
+            sScrutinee_1627648584 ::
+              Sing (Let1627648801Scrutinee_1627648584Sym2 n_a15kX x_a15kY)
+            sScrutinee_1627648584
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_a16el)
+                  (sFromInteger (sing :: Sing 0))
+          in  case sScrutinee_1627648584 of {
+                STrue
+                  -> let
+                        lambda_a16en ::
+                          TrueSym0 ~ Let1627648801Scrutinee_1627648584Sym2 n_a15kX x_a15kY =>
+                          Sing (Case_1627648809_a15l8 n_a15kX x_a15kY TrueSym0)
+                        lambda_a16en = SNil
+                      in lambda_a16en;
+                SFalse
+                  -> let
+                        lambda_a16eo ::
+                          FalseSym0 ~ Let1627648801Scrutinee_1627648584Sym2 n_a15kX x_a15kY =>
+                          Sing (Case_1627648809_a15l8 n_a15kX x_a15kY FalseSym0)
+                        lambda_a16eo
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16em)
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy ReplicateSym0) sReplicate)
+                                    (applySing
+                                      (applySing
+                                          (singFun2 (Proxy :: Proxy (:-$)) (%:-)) n_a16el)
+                                      (sFromInteger (sing :: Sing 1))))
+                                x_a16em)
+                      in lambda_a16eo } ::
+                Sing (Case_1627648809_a15l8 n_a15kX x_a15kY (Let1627648801Scrutinee_1627648584Sym2 n_a15kX x_a15kY))
+    in lambda_a16ek sN sX
+sLength SNil
+  = let
+      lambda_a16ep :: t_a16bh ~ '[] => Sing (Apply LengthSym0 '[] :: Nat)
+      lambda_a16ep = sFromInteger (sing :: Sing 0)
+    in lambda_a16ep
+sLength (SCons _s_z_1627648816 sXs)
+  = let
+      lambda_a16eq ::
+        forall _z_1627648816_a15lg
+                xs_a15lh. t_a16bh ~ Apply (Apply (:$) _z_1627648816_a15lg) xs_a15lh =>
+        Sing _z_1627648816_a15lg
+        -> Sing xs_a15lh
+            -> Sing (Apply LengthSym0 (Apply (Apply (:$) _z_1627648816_a15lg) xs_a15lh) :: Nat)
+      lambda_a16eq _z_1627648816_a16er xs_a16es
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:+$)) (%:+))
+                (sFromInteger (sing :: Sing 1)))
+            (applySing (singFun1 (Proxy :: Proxy LengthSym0) sLength) xs_a16es)
+    in lambda_a16eq _s_z_1627648816 sXs
+sProduct sL
+  = let
+      lambda_a16et ::
+        forall l_a15lm. t_a16bi ~ l_a15lm =>
+        Sing l_a15lm -> Sing (Apply ProductSym0 l_a15lm :: a_a156L)
+      lambda_a16et l_a16eu
+        = let
+            sProd ::
+              forall (t_a16ev :: [a_a156L]) (t_a16ew :: a_a156L).
+              Sing t_a16ev
+              -> Sing t_a16ew
+                  -> Sing (Apply (Apply (Let1627648825ProdSym1 l_a15lm) t_a16ev) t_a16ew :: a_a156L)
+            sProd SNil sA
+              = let
+                  lambda_a16ex ::
+                    forall a_a15lC. (t_a16ev ~ '[], t_a16ew ~ a_a15lC) =>
+                    Sing a_a15lC
+                    -> Sing (Apply (Apply (Let1627648825ProdSym1 l_a15lm) '[]) a_a15lC :: a_a156L)
+                  lambda_a16ex a_a16ey = a_a16ey
+                in lambda_a16ex sA
+            sProd (SCons sX sXs) sA
+              = let
+                  lambda_a16ez ::
+                    forall x_a15lD
+                            xs_a15lE
+                            a_a15lF. (t_a16ev ~ Apply (Apply (:$) x_a15lD) xs_a15lE,
+                                      t_a16ew ~ a_a15lF) =>
+                    Sing x_a15lD
+                    -> Sing xs_a15lE
+                        -> Sing a_a15lF
+                          -> Sing (Apply (Apply (Let1627648825ProdSym1 l_a15lm) (Apply (Apply (:$) x_a15lD) xs_a15lE)) a_a15lF :: a_a156L)
+                  lambda_a16ez x_a16eA xs_a16eB a_a16eC
+                    = applySing
+                        (applySing
+                            (singFun2 (Proxy :: Proxy (Let1627648825ProdSym1 l_a15lm)) sProd)
+                            xs_a16eB)
+                        (applySing
+                            (applySing (singFun2 (Proxy :: Proxy (:*$)) (%:*)) a_a16eC)
+                            x_a16eA)
+                in lambda_a16ez sX sXs sA
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy (Let1627648825ProdSym1 l_a15lm)) sProd)
+                  l_a16eu)
+              (sFromInteger (sing :: Sing 1))
+    in lambda_a16et sL
+sSum sL
+  = let
+      lambda_a16eD ::
+        forall l_a15lK. t_a16bj ~ l_a15lK =>
+        Sing l_a15lK -> Sing (Apply SumSym0 l_a15lK :: a_a156M)
+      lambda_a16eD l_a16eE
+        = let
+            sSum' ::
+              forall (t_a16eF :: [a_a156M]) (t_a16eG :: a_a156M).
+              Sing t_a16eF
+              -> Sing t_a16eG
+                  -> Sing (Apply (Apply (Let1627648849Sum'Sym1 l_a15lK) t_a16eF) t_a16eG :: a_a156M)
+            sSum' SNil sA
+              = let
+                  lambda_a16eH ::
+                    forall a_a15m0. (t_a16eF ~ '[], t_a16eG ~ a_a15m0) =>
+                    Sing a_a15m0
+                    -> Sing (Apply (Apply (Let1627648849Sum'Sym1 l_a15lK) '[]) a_a15m0 :: a_a156M)
+                  lambda_a16eH a_a16eI = a_a16eI
+                in lambda_a16eH sA
+            sSum' (SCons sX sXs) sA
+              = let
+                  lambda_a16eJ ::
+                    forall x_a15m1
+                            xs_a15m2
+                            a_a15m3. (t_a16eF ~ Apply (Apply (:$) x_a15m1) xs_a15m2,
+                                      t_a16eG ~ a_a15m3) =>
+                    Sing x_a15m1
+                    -> Sing xs_a15m2
+                        -> Sing a_a15m3
+                          -> Sing (Apply (Apply (Let1627648849Sum'Sym1 l_a15lK) (Apply (Apply (:$) x_a15m1) xs_a15m2)) a_a15m3 :: a_a156M)
+                  lambda_a16eJ x_a16eK xs_a16eL a_a16eM
+                    = applySing
+                        (applySing
+                            (singFun2 (Proxy :: Proxy (Let1627648849Sum'Sym1 l_a15lK)) sSum')
+                            xs_a16eL)
+                        (applySing
+                            (applySing (singFun2 (Proxy :: Proxy (:+$)) (%:+)) a_a16eM)
+                            x_a16eK)
+                in lambda_a16eJ sX sXs sA
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy (Let1627648849Sum'Sym1 l_a15lK)) sSum')
+                  l_a16eE)
+              (sFromInteger (sing :: Sing 0))
+    in lambda_a16eD sL
+sSelect sP sX (STuple2 sTs sFs)
+  = let
+      lambda_a16eN ::
+        forall p_a15mj x_a15mk ts_a15ml fs_a15mm. (t_a16bk ~ p_a15mj,
+                                                    t_a16bl ~ x_a15mk,
+                                                    t_a16bm ~ Apply (Apply Tuple2Sym0 ts_a15ml) fs_a15mm) =>
+        Sing p_a15mj
+        -> Sing x_a15mk
+            -> Sing ts_a15ml
+              -> Sing fs_a15mm
+                  -> Sing (Apply (Apply (Apply SelectSym0 p_a15mj) x_a15mk) (Apply (Apply Tuple2Sym0 ts_a15ml) fs_a15mm) :: ([a_a15f6],
+                                                                                                                            [a_a15f6]))
+      lambda_a16eN p_a16eO x_a16eP ts_a16eQ fs_a16eR
+        = let
+            sScrutinee_1627648582 ::
+              Sing (Let1627648887Scrutinee_1627648582Sym4 p_a15mj x_a15mk ts_a15ml fs_a15mm)
+            sScrutinee_1627648582 = applySing p_a16eO x_a16eP
+          in  case sScrutinee_1627648582 of {
+                STrue
+                  -> let
+                        lambda_a16eS ::
+                          TrueSym0 ~ Let1627648887Scrutinee_1627648582Sym4 p_a15mj x_a15mk ts_a15ml fs_a15mm =>
+                          Sing (Case_1627648906_a15mH p_a15mj x_a15mk ts_a15ml fs_a15mm TrueSym0)
+                        lambda_a16eS
+                          = applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                (applySing
+                                    (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16eP)
+                                    ts_a16eQ))
+                              fs_a16eR
+                      in lambda_a16eS;
+                SFalse
+                  -> let
+                        lambda_a16eT ::
+                          FalseSym0 ~ Let1627648887Scrutinee_1627648582Sym4 p_a15mj x_a15mk ts_a15ml fs_a15mm =>
+                          Sing (Case_1627648906_a15mH p_a15mj x_a15mk ts_a15ml fs_a15mm FalseSym0)
+                        lambda_a16eT
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) ts_a16eQ)
+                              (applySing
+                                (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16eP)
+                                fs_a16eR)
+                      in lambda_a16eT } ::
+                Sing (Case_1627648906_a15mH p_a15mj x_a15mk ts_a15ml fs_a15mm (Let1627648887Scrutinee_1627648582Sym4 p_a15mj x_a15mk ts_a15ml fs_a15mm))
+    in lambda_a16eN sP sX sTs sFs
+sPartition sP sXs
+  = let
+      lambda_a16eU ::
+        forall p_a15mS xs_a15mT. (t_a16bn ~ p_a15mS, t_a16bo ~ xs_a15mT) =>
+        Sing p_a15mS
+        -> Sing xs_a15mT
+            -> Sing (Apply (Apply PartitionSym0 p_a15mS) xs_a15mT :: ([a_a15f3],
+                                                                      [a_a15f3]))
+      lambda_a16eU p_a16eV xs_a16eW
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (applySing (singFun3 (Proxy :: Proxy SelectSym0) sSelect) p_a16eV))
+                (applySing
+                  (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) SNil)
+                  SNil))
+            xs_a16eW
+    in lambda_a16eU sP sXs
+sLookup _s_key SNil
+  = let
+      lambda_a16eZ ::
+        forall _key_a15n3. (t_a16bp ~ _key_a15n3, t_a16bq ~ '[]) =>
+        Sing _key_a15n3
+        -> Sing (Apply (Apply LookupSym0 _key_a15n3) '[] :: Maybe b_a15eX)
+      lambda_a16eZ _key_a16f0 = SNothing
+    in lambda_a16eZ _s_key
+sLookup sKey (SCons (STuple2 sX sY) sXys)
+  = let
+      lambda_a16f1 ::
+        forall key_a15n4 x_a15n5 y_a15n6 xys_a15n7. (t_a16bp ~ key_a15n4,
+                                                      t_a16bq ~ Apply (Apply (:$) (Apply (Apply Tuple2Sym0 x_a15n5) y_a15n6)) xys_a15n7) =>
+        Sing key_a15n4
+        -> Sing x_a15n5
+            -> Sing y_a15n6
+              -> Sing xys_a15n7
+                  -> Sing (Apply (Apply LookupSym0 key_a15n4) (Apply (Apply (:$) (Apply (Apply Tuple2Sym0 x_a15n5) y_a15n6)) xys_a15n7) :: Maybe b_a15eX)
+      lambda_a16f1 key_a16f2 x_a16f3 y_a16f4 xys_a16f5
+        = let
+            sScrutinee_1627648580 ::
+              Sing (Let1627648934Scrutinee_1627648580Sym4 key_a15n4 x_a15n5 y_a15n6 xys_a15n7)
+            sScrutinee_1627648580
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) key_a16f2)
+                  x_a16f3
+          in  case sScrutinee_1627648580 of {
+                STrue
+                  -> let
+                        lambda_a16f6 ::
+                          TrueSym0 ~ Let1627648934Scrutinee_1627648580Sym4 key_a15n4 x_a15n5 y_a15n6 xys_a15n7 =>
+                          Sing (Case_1627648953_a15ns key_a15n4 x_a15n5 y_a15n6 xys_a15n7 TrueSym0)
+                        lambda_a16f6
+                          = applySing (singFun1 (Proxy :: Proxy JustSym0) SJust) y_a16f4
+                      in lambda_a16f6;
+                SFalse
+                  -> let
+                        lambda_a16f7 ::
+                          FalseSym0 ~ Let1627648934Scrutinee_1627648580Sym4 key_a15n4 x_a15n5 y_a15n6 xys_a15n7 =>
+                          Sing (Case_1627648953_a15ns key_a15n4 x_a15n5 y_a15n6 xys_a15n7 FalseSym0)
+                        lambda_a16f7
+                          = applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy LookupSym0) sLookup) key_a16f2)
+                              xys_a16f5
+                      in lambda_a16f7 } ::
+                Sing (Case_1627648953_a15ns key_a15n4 x_a15n5 y_a15n6 xys_a15n7 (Let1627648934Scrutinee_1627648580Sym4 key_a15n4 x_a15n5 y_a15n6 xys_a15n7))
+    in lambda_a16f1 sKey sX sY sXys
+sDrop _s_z_1627648965 SNil
+  = let
+      lambda_a16f8 ::
+        forall _z_1627648965_a15nF. (t_a16br ~ _z_1627648965_a15nF,
+                                      t_a16bs ~ '[]) =>
+        Sing _z_1627648965_a15nF
+        -> Sing (Apply (Apply DropSym0 _z_1627648965_a15nF) '[] :: [a_a15ez])
+      lambda_a16f8 _z_1627648965_a16f9 = SNil
+    in lambda_a16f8 _s_z_1627648965
+sDrop sN (SCons sX sXs)
+  = let
+      lambda_a16fa ::
+        forall n_a15nG x_a15nH xs_a15nI. (t_a16br ~ n_a15nG,
+                                          t_a16bs ~ Apply (Apply (:$) x_a15nH) xs_a15nI) =>
+        Sing n_a15nG
+        -> Sing x_a15nH
+            -> Sing xs_a15nI
+              -> Sing (Apply (Apply DropSym0 n_a15nG) (Apply (Apply (:$) x_a15nH) xs_a15nI) :: [a_a15ez])
+      lambda_a16fa n_a16fb x_a16fc xs_a16fd
+        = let
+            sScrutinee_1627648570 ::
+              Sing (Let1627648971Scrutinee_1627648570Sym3 n_a15nG x_a15nH xs_a15nI)
+            sScrutinee_1627648570
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_a16fb)
+                  (sFromInteger (sing :: Sing 0))
+          in  case sScrutinee_1627648570 of {
+                STrue
+                  -> let
+                        lambda_a16fe ::
+                          TrueSym0 ~ Let1627648971Scrutinee_1627648570Sym3 n_a15nG x_a15nH xs_a15nI =>
+                          Sing (Case_1627648984_a15nX n_a15nG x_a15nH xs_a15nI TrueSym0)
+                        lambda_a16fe
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16fc) xs_a16fd
+                      in lambda_a16fe;
+                SFalse
+                  -> let
+                        lambda_a16ff ::
+                          FalseSym0 ~ Let1627648971Scrutinee_1627648570Sym3 n_a15nG x_a15nH xs_a15nI =>
+                          Sing (Case_1627648984_a15nX n_a15nG x_a15nH xs_a15nI FalseSym0)
+                        lambda_a16ff
+                          = applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy DropSym0) sDrop)
+                                (applySing
+                                    (applySing (singFun2 (Proxy :: Proxy (:-$)) (%:-)) n_a16fb)
+                                    (sFromInteger (sing :: Sing 1))))
+                              xs_a16fd
+                      in lambda_a16ff } ::
+                Sing (Case_1627648984_a15nX n_a15nG x_a15nH xs_a15nI (Let1627648971Scrutinee_1627648570Sym3 n_a15nG x_a15nH xs_a15nI))
+    in lambda_a16fa sN sX sXs
+sTake _s_z_1627648996 SNil
+  = let
+      lambda_a16fg ::
+        forall _z_1627648996_a15oa. (t_a16bt ~ _z_1627648996_a15oa,
+                                      t_a16bu ~ '[]) =>
+        Sing _z_1627648996_a15oa
+        -> Sing (Apply (Apply TakeSym0 _z_1627648996_a15oa) '[] :: [a_a15ev])
+      lambda_a16fg _z_1627648996_a16fh = SNil
+    in lambda_a16fg _s_z_1627648996
+sTake sN (SCons sX sXs)
+  = let
+      lambda_a16fi ::
+        forall n_a15ob x_a15oc xs_a15od. (t_a16bt ~ n_a15ob,
+                                          t_a16bu ~ Apply (Apply (:$) x_a15oc) xs_a15od) =>
+        Sing n_a15ob
+        -> Sing x_a15oc
+            -> Sing xs_a15od
+              -> Sing (Apply (Apply TakeSym0 n_a15ob) (Apply (Apply (:$) x_a15oc) xs_a15od) :: [a_a15ev])
+      lambda_a16fi n_a16fj x_a16fk xs_a16fl
+        = let
+            sScrutinee_1627648568 ::
+              Sing (Let1627649002Scrutinee_1627648568Sym3 n_a15ob x_a15oc xs_a15od)
+            sScrutinee_1627648568
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) n_a16fj)
+                  (sFromInteger (sing :: Sing 0))
+          in  case sScrutinee_1627648568 of {
+                STrue
+                  -> let
+                        lambda_a16fm ::
+                          TrueSym0 ~ Let1627649002Scrutinee_1627648568Sym3 n_a15ob x_a15oc xs_a15od =>
+                          Sing (Case_1627649015_a15os n_a15ob x_a15oc xs_a15od TrueSym0)
+                        lambda_a16fm = SNil
+                      in lambda_a16fm;
+                SFalse
+                  -> let
+                        lambda_a16fn ::
+                          FalseSym0 ~ Let1627649002Scrutinee_1627648568Sym3 n_a15ob x_a15oc xs_a15od =>
+                          Sing (Case_1627649015_a15os n_a15ob x_a15oc xs_a15od FalseSym0)
+                        lambda_a16fn
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16fk)
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy TakeSym0) sTake)
+                                    (applySing
+                                      (applySing
+                                          (singFun2 (Proxy :: Proxy (:-$)) (%:-)) n_a16fj)
+                                      (sFromInteger (sing :: Sing 1))))
+                                xs_a16fl)
+                      in lambda_a16fn } ::
+                Sing (Case_1627649015_a15os n_a15ob x_a15oc xs_a15od (Let1627649002Scrutinee_1627648568Sym3 n_a15ob x_a15oc xs_a15od))
+    in lambda_a16fi sN sX sXs
+sSplitAt sN sXs
+  = let
+      lambda_a16fo ::
+        forall n_a15oD xs_a15oE. (t_a16bv ~ n_a15oD, t_a16bw ~ xs_a15oE) =>
+        Sing n_a15oD
+        -> Sing xs_a15oE
+            -> Sing (Apply (Apply SplitAtSym0 n_a15oD) xs_a15oE :: ([a_a15eD],
+                                                                    [a_a15eD]))
+      lambda_a16fo n_a16fp xs_a16fq
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                (applySing
+                  (applySing (singFun2 (Proxy :: Proxy TakeSym0) sTake) n_a16fp)
+                  xs_a16fq))
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy DropSym0) sDrop) n_a16fp)
+                xs_a16fq)
+    in lambda_a16fo sN sXs
+sBreak _s_z_1627649038 SNil
+  = let
+      lambda_a16fr ::
+        forall _z_1627649038_a15oQ. (t_a16bx ~ _z_1627649038_a15oQ,
+                                      t_a16by ~ '[]) =>
+        Sing _z_1627649038_a15oQ
+        -> Sing (Apply (Apply BreakSym0 _z_1627649038_a15oQ) '[] :: ([a_a15en],
+                                                                      [a_a15en]))
+      lambda_a16fr _z_1627649038_a16fs
+        = let
+            sXs :: Sing (Let1627649041XsSym1 _z_1627649038_a15oQ)
+            sXs = SNil
+          in
+            applySing
+              (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) sXs) sXs
+    in lambda_a16fr _s_z_1627649038
+sBreak sP (SCons sX sXs')
+  = let
+      lambda_a16ft ::
+        forall p_a15oV x_a15oW xs'_a15oX. (t_a16bx ~ p_a15oV,
+                                            t_a16by ~ Apply (Apply (:$) x_a15oW) xs'_a15oX) =>
+        Sing p_a15oV
+        -> Sing x_a15oW
+            -> Sing xs'_a15oX
+              -> Sing (Apply (Apply BreakSym0 p_a15oV) (Apply (Apply (:$) x_a15oW) xs'_a15oX) :: ([a_a15en],
+                                                                                                  [a_a15en]))
+      lambda_a16ft p_a16fu x_a16fv xs'_a16fw
+        = let
+            sXs :: Sing (Let1627649048XsSym3 p_a15oV x_a15oW xs'_a15oX)
+            sXs
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16fv)
+                  xs'_a16fw in
+          let
+            sScrutinee_1627648566 ::
+              Sing (Let1627649061Scrutinee_1627648566Sym3 p_a15oV x_a15oW xs'_a15oX)
+            sScrutinee_1627648566 = applySing p_a16fu x_a16fv
+          in  case sScrutinee_1627648566 of {
+                STrue
+                  -> let
+                        lambda_a16fx ::
+                          TrueSym0 ~ Let1627649061Scrutinee_1627648566Sym3 p_a15oV x_a15oW xs'_a15oX =>
+                          Sing (Case_1627649074_a15pp p_a15oV x_a15oW xs'_a15oX TrueSym0)
+                        lambda_a16fx
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) SNil) sXs
+                      in lambda_a16fx;
+                SFalse
+                  -> let
+                        lambda_a16fy ::
+                          FalseSym0 ~ Let1627649061Scrutinee_1627648566Sym3 p_a15oV x_a15oW xs'_a15oX =>
+                          Sing (Case_1627649074_a15pp p_a15oV x_a15oW xs'_a15oX FalseSym0)
+                        lambda_a16fy
+                          = let
+                              sYs :: Sing (Let1627649076YsSym3 p_a15oV x_a15oW xs'_a15oX)
+                              sZs :: Sing (Let1627649076ZsSym3 p_a15oV x_a15oW xs'_a15oX)
+                              sX_1627649077 ::
+                                Sing (Let1627649076X_1627649077Sym3 p_a15oV x_a15oW xs'_a15oX)
+                              sYs
+                                = case sX_1627649077 of {
+                                    STuple2 sY_1627649079 _s_z_1627649086
+                                      -> let
+                                          lambda_a16fz ::
+                                            forall y_1627649079_a15pz
+                                                    _z_1627649086_a15pC. Apply (Apply Tuple2Sym0 y_1627649079_a15pz) _z_1627649086_a15pC ~ Let1627649076X_1627649077Sym3 p_a15oV x_a15oW xs'_a15oX =>
+                                            Sing y_1627649079_a15pz
+                                            -> Sing _z_1627649086_a15pC
+                                                -> Sing (Case_1627649083_a15py p_a15oV x_a15oW xs'_a15oX (Apply (Apply Tuple2Sym0 y_1627649079_a15pz) _z_1627649086_a15pC))
+                                          lambda_a16fz y_1627649079_a16fA _z_1627649086_a16fB
+                                            = y_1627649079_a16fA
+                                        in lambda_a16fz sY_1627649079 _s_z_1627649086 } ::
+                                    Sing (Case_1627649083_a15py p_a15oV x_a15oW xs'_a15oX (Let1627649076X_1627649077Sym3 p_a15oV x_a15oW xs'_a15oX))
+                              sZs
+                                = case sX_1627649077 of {
+                                    STuple2 _s_z_1627649104 sY_1627649081
+                                      -> let
+                                          lambda_a16fC ::
+                                            forall _z_1627649104_a15pU
+                                                    y_1627649081_a15pV. Apply (Apply Tuple2Sym0 _z_1627649104_a15pU) y_1627649081_a15pV ~ Let1627649076X_1627649077Sym3 p_a15oV x_a15oW xs'_a15oX =>
+                                            Sing _z_1627649104_a15pU
+                                            -> Sing y_1627649081_a15pV
+                                                -> Sing (Case_1627649102_a15pR p_a15oV x_a15oW xs'_a15oX (Apply (Apply Tuple2Sym0 _z_1627649104_a15pU) y_1627649081_a15pV))
+                                          lambda_a16fC _z_1627649104_a16fD y_1627649081_a16fE
+                                            = y_1627649081_a16fE
+                                        in lambda_a16fC _s_z_1627649104 sY_1627649081 } ::
+                                    Sing (Case_1627649102_a15pR p_a15oV x_a15oW xs'_a15oX (Let1627649076X_1627649077Sym3 p_a15oV x_a15oW xs'_a15oX))
+                              sX_1627649077
+                                = applySing
+                                    (applySing
+                                      (singFun2 (Proxy :: Proxy BreakSym0) sBreak) p_a16fu)
+                                    xs'_a16fw
+                            in
+                              applySing
+                                (applySing
+                                  (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                  (applySing
+                                      (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16fv)
+                                      sYs))
+                                sZs
+                      in lambda_a16fy } ::
+                Sing (Case_1627649074_a15pp p_a15oV x_a15oW xs'_a15oX (Let1627649061Scrutinee_1627648566Sym3 p_a15oV x_a15oW xs'_a15oX))
+    in lambda_a16ft sP sX sXs'
+sSpan _s_z_1627649143 SNil
+  = let
+      lambda_a16fF ::
+        forall _z_1627649143_a15qx. (t_a16bz ~ _z_1627649143_a15qx,
+                                      t_a16bA ~ '[]) =>
+        Sing _z_1627649143_a15qx
+        -> Sing (Apply (Apply SpanSym0 _z_1627649143_a15qx) '[] :: ([a_a15ef],
+                                                                    [a_a15ef]))
+      lambda_a16fF _z_1627649143_a16fG
+        = let
+            sXs :: Sing (Let1627649146XsSym1 _z_1627649143_a15qx)
+            sXs = SNil
+          in
+            applySing
+              (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) sXs) sXs
+    in lambda_a16fF _s_z_1627649143
+sSpan sP (SCons sX sXs')
+  = let
+      lambda_a16fH ::
+        forall p_a15qC x_a15qD xs'_a15qE. (t_a16bz ~ p_a15qC,
+                                            t_a16bA ~ Apply (Apply (:$) x_a15qD) xs'_a15qE) =>
+        Sing p_a15qC
+        -> Sing x_a15qD
+            -> Sing xs'_a15qE
+              -> Sing (Apply (Apply SpanSym0 p_a15qC) (Apply (Apply (:$) x_a15qD) xs'_a15qE) :: ([a_a15ef],
+                                                                                                  [a_a15ef]))
+      lambda_a16fH p_a16fI x_a16fJ xs'_a16fK
+        = let
+            sXs :: Sing (Let1627649153XsSym3 p_a15qC x_a15qD xs'_a15qE)
+            sXs
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16fJ)
+                  xs'_a16fK in
+          let
+            sScrutinee_1627648564 ::
+              Sing (Let1627649166Scrutinee_1627648564Sym3 p_a15qC x_a15qD xs'_a15qE)
+            sScrutinee_1627648564 = applySing p_a16fI x_a16fJ
+          in  case sScrutinee_1627648564 of {
+                STrue
+                  -> let
+                        lambda_a16fL ::
+                          TrueSym0 ~ Let1627649166Scrutinee_1627648564Sym3 p_a15qC x_a15qD xs'_a15qE =>
+                          Sing (Case_1627649179_a15r6 p_a15qC x_a15qD xs'_a15qE TrueSym0)
+                        lambda_a16fL
+                          = let
+                              sYs :: Sing (Let1627649181YsSym3 p_a15qC x_a15qD xs'_a15qE)
+                              sZs :: Sing (Let1627649181ZsSym3 p_a15qC x_a15qD xs'_a15qE)
+                              sX_1627649182 ::
+                                Sing (Let1627649181X_1627649182Sym3 p_a15qC x_a15qD xs'_a15qE)
+                              sYs
+                                = case sX_1627649182 of {
+                                    STuple2 sY_1627649184 _s_z_1627649191
+                                      -> let
+                                          lambda_a16fM ::
+                                            forall y_1627649184_a15rg
+                                                    _z_1627649191_a15rj. Apply (Apply Tuple2Sym0 y_1627649184_a15rg) _z_1627649191_a15rj ~ Let1627649181X_1627649182Sym3 p_a15qC x_a15qD xs'_a15qE =>
+                                            Sing y_1627649184_a15rg
+                                            -> Sing _z_1627649191_a15rj
+                                                -> Sing (Case_1627649188_a15rf p_a15qC x_a15qD xs'_a15qE (Apply (Apply Tuple2Sym0 y_1627649184_a15rg) _z_1627649191_a15rj))
+                                          lambda_a16fM y_1627649184_a16fN _z_1627649191_a16fO
+                                            = y_1627649184_a16fN
+                                        in lambda_a16fM sY_1627649184 _s_z_1627649191 } ::
+                                    Sing (Case_1627649188_a15rf p_a15qC x_a15qD xs'_a15qE (Let1627649181X_1627649182Sym3 p_a15qC x_a15qD xs'_a15qE))
+                              sZs
+                                = case sX_1627649182 of {
+                                    STuple2 _s_z_1627649209 sY_1627649186
+                                      -> let
+                                          lambda_a16fP ::
+                                            forall _z_1627649209_a15rB
+                                                    y_1627649186_a15rC. Apply (Apply Tuple2Sym0 _z_1627649209_a15rB) y_1627649186_a15rC ~ Let1627649181X_1627649182Sym3 p_a15qC x_a15qD xs'_a15qE =>
+                                            Sing _z_1627649209_a15rB
+                                            -> Sing y_1627649186_a15rC
+                                                -> Sing (Case_1627649207_a15ry p_a15qC x_a15qD xs'_a15qE (Apply (Apply Tuple2Sym0 _z_1627649209_a15rB) y_1627649186_a15rC))
+                                          lambda_a16fP _z_1627649209_a16fQ y_1627649186_a16fR
+                                            = y_1627649186_a16fR
+                                        in lambda_a16fP _s_z_1627649209 sY_1627649186 } ::
+                                    Sing (Case_1627649207_a15ry p_a15qC x_a15qD xs'_a15qE (Let1627649181X_1627649182Sym3 p_a15qC x_a15qD xs'_a15qE))
+                              sX_1627649182
+                                = applySing
+                                    (applySing
+                                      (singFun2 (Proxy :: Proxy SpanSym0) sSpan) p_a16fI)
+                                    xs'_a16fK
+                            in
+                              applySing
+                                (applySing
+                                  (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                  (applySing
+                                      (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16fJ)
+                                      sYs))
+                                sZs
+                      in lambda_a16fL;
+                SFalse
+                  -> let
+                        lambda_a16fS ::
+                          FalseSym0 ~ Let1627649166Scrutinee_1627648564Sym3 p_a15qC x_a15qD xs'_a15qE =>
+                          Sing (Case_1627649179_a15r6 p_a15qC x_a15qD xs'_a15qE FalseSym0)
+                        lambda_a16fS
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) SNil) sXs
+                      in lambda_a16fS } ::
+                Sing (Case_1627649179_a15r6 p_a15qC x_a15qD xs'_a15qE (Let1627649166Scrutinee_1627648564Sym3 p_a15qC x_a15qD xs'_a15qE))
+    in lambda_a16fH sP sX sXs'
+sGroupBy _s_z_1627649248 SNil
+  = let
+      lambda_a16fT ::
+        forall _z_1627649248_a15se. (t_a16bB ~ _z_1627649248_a15se,
+                                      t_a16bC ~ '[]) =>
+        Sing _z_1627649248_a15se
+        -> Sing (Apply (Apply GroupBySym0 _z_1627649248_a15se) '[] :: [[a_a15eQ]])
+      lambda_a16fT _z_1627649248_a16fU = SNil
+    in lambda_a16fT _s_z_1627649248
+sGroupBy sEq (SCons sX sXs)
+  = let
+      lambda_a16fV ::
+        forall eq_a15sf x_a15sg xs_a15sh. (t_a16bB ~ eq_a15sf,
+                                            t_a16bC ~ Apply (Apply (:$) x_a15sg) xs_a15sh) =>
+        Sing eq_a15sf
+        -> Sing x_a15sg
+            -> Sing xs_a15sh
+              -> Sing (Apply (Apply GroupBySym0 eq_a15sf) (Apply (Apply (:$) x_a15sg) xs_a15sh) :: [[a_a15eQ]])
+      lambda_a16fV eq_a16fW x_a16fX xs_a16fY
+        = let
+            sYs :: Sing (Let1627649254YsSym3 eq_a15sf x_a15sg xs_a15sh)
+            sZs :: Sing (Let1627649254ZsSym3 eq_a15sf x_a15sg xs_a15sh)
+            sX_1627649255 ::
+              Sing (Let1627649254X_1627649255Sym3 eq_a15sf x_a15sg xs_a15sh)
+            sYs
+              = case sX_1627649255 of {
+                  STuple2 sY_1627649257 _s_z_1627649264
+                    -> let
+                          lambda_a16fZ ::
+                            forall y_1627649257_a15sr
+                                  _z_1627649264_a15su. Apply (Apply Tuple2Sym0 y_1627649257_a15sr) _z_1627649264_a15su ~ Let1627649254X_1627649255Sym3 eq_a15sf x_a15sg xs_a15sh =>
+                            Sing y_1627649257_a15sr
+                            -> Sing _z_1627649264_a15su
+                              -> Sing (Case_1627649261_a15sq eq_a15sf x_a15sg xs_a15sh (Apply (Apply Tuple2Sym0 y_1627649257_a15sr) _z_1627649264_a15su))
+                          lambda_a16fZ y_1627649257_a16g0 _z_1627649264_a16g1
+                            = y_1627649257_a16g0
+                        in lambda_a16fZ sY_1627649257 _s_z_1627649264 } ::
+                  Sing (Case_1627649261_a15sq eq_a15sf x_a15sg xs_a15sh (Let1627649254X_1627649255Sym3 eq_a15sf x_a15sg xs_a15sh))
+            sZs
+              = case sX_1627649255 of {
+                  STuple2 _s_z_1627649282 sY_1627649259
+                    -> let
+                          lambda_a16g2 ::
+                            forall _z_1627649282_a15sM
+                                  y_1627649259_a15sN. Apply (Apply Tuple2Sym0 _z_1627649282_a15sM) y_1627649259_a15sN ~ Let1627649254X_1627649255Sym3 eq_a15sf x_a15sg xs_a15sh =>
+                            Sing _z_1627649282_a15sM
+                            -> Sing y_1627649259_a15sN
+                              -> Sing (Case_1627649280_a15sJ eq_a15sf x_a15sg xs_a15sh (Apply (Apply Tuple2Sym0 _z_1627649282_a15sM) y_1627649259_a15sN))
+                          lambda_a16g2 _z_1627649282_a16g3 y_1627649259_a16g4
+                            = y_1627649259_a16g4
+                        in lambda_a16g2 _s_z_1627649282 sY_1627649259 } ::
+                  Sing (Case_1627649280_a15sJ eq_a15sf x_a15sg xs_a15sh (Let1627649254X_1627649255Sym3 eq_a15sf x_a15sg xs_a15sh))
+            sX_1627649255
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy SpanSym0) sSpan)
+                      (applySing eq_a16fW x_a16fX))
+                  xs_a16fY
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy (:$)) SCons)
+                  (applySing
+                    (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16fX) sYs))
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy GroupBySym0) sGroupBy) eq_a16fW)
+                  sZs)
+    in lambda_a16fV sEq sX sXs
+sGroup sXs
+  = let
+      lambda_a16g5 ::
+        forall xs_a15th. t_a16bD ~ xs_a15th =>
+        Sing xs_a15th -> Sing (Apply GroupSym0 xs_a15th :: [[a_a15eG]])
+      lambda_a16g5 xs_a16g6
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy GroupBySym0) sGroupBy)
+                (singFun2 (Proxy :: Proxy (:==$)) (%:==)))
+            xs_a16g6
+    in lambda_a16g5 sXs
+sDropWhile _s_z_1627649325 SNil
+  = let
+      lambda_a16g7 ::
+        forall _z_1627649325_a15tt. (t_a16bE ~ _z_1627649325_a15tt,
+                                      t_a16bF ~ '[]) =>
+        Sing _z_1627649325_a15tt
+        -> Sing (Apply (Apply DropWhileSym0 _z_1627649325_a15tt) '[] :: [a_a15e6])
+      lambda_a16g7 _z_1627649325_a16g8 = SNil
+    in lambda_a16g7 _s_z_1627649325
+sDropWhile sP (SCons sX sXs')
+  = let
+      lambda_a16g9 ::
+        forall p_a15tu x_a15tv xs'_a15tw. (t_a16bE ~ p_a15tu,
+                                            t_a16bF ~ Apply (Apply (:$) x_a15tv) xs'_a15tw) =>
+        Sing p_a15tu
+        -> Sing x_a15tv
+            -> Sing xs'_a15tw
+              -> Sing (Apply (Apply DropWhileSym0 p_a15tu) (Apply (Apply (:$) x_a15tv) xs'_a15tw) :: [a_a15e6])
+      lambda_a16g9 p_a16ga x_a16gb xs'_a16gc
+        = let
+            sXs :: Sing (Let1627649331XsSym3 p_a15tu x_a15tv xs'_a15tw)
+            sXs
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16gb)
+                  xs'_a16gc in
+          let
+            sScrutinee_1627648560 ::
+              Sing (Let1627649344Scrutinee_1627648560Sym3 p_a15tu x_a15tv xs'_a15tw)
+            sScrutinee_1627648560 = applySing p_a16ga x_a16gb
+          in  case sScrutinee_1627648560 of {
+                STrue
+                  -> let
+                        lambda_a16gd ::
+                          TrueSym0 ~ Let1627649344Scrutinee_1627648560Sym3 p_a15tu x_a15tv xs'_a15tw =>
+                          Sing (Case_1627649357_a15tY p_a15tu x_a15tv xs'_a15tw TrueSym0)
+                        lambda_a16gd
+                          = applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy DropWhileSym0) sDropWhile) p_a16ga)
+                              xs'_a16gc
+                      in lambda_a16gd;
+                SFalse
+                  -> let
+                        lambda_a16ge ::
+                          FalseSym0 ~ Let1627649344Scrutinee_1627648560Sym3 p_a15tu x_a15tv xs'_a15tw =>
+                          Sing (Case_1627649357_a15tY p_a15tu x_a15tv xs'_a15tw FalseSym0)
+                        lambda_a16ge = sXs
+                      in lambda_a16ge } ::
+                Sing (Case_1627649357_a15tY p_a15tu x_a15tv xs'_a15tw (Let1627649344Scrutinee_1627648560Sym3 p_a15tu x_a15tv xs'_a15tw))
+    in lambda_a16g9 sP sX sXs'
+sTakeWhile _s_z_1627649369 SNil
+  = let
+      lambda_a16gf ::
+        forall _z_1627649369_a15ub. (t_a16bG ~ _z_1627649369_a15ub,
+                                      t_a16bH ~ '[]) =>
+        Sing _z_1627649369_a15ub
+        -> Sing (Apply (Apply TakeWhileSym0 _z_1627649369_a15ub) '[] :: [a_a15e2])
+      lambda_a16gf _z_1627649369_a16gg = SNil
+    in lambda_a16gf _s_z_1627649369
+sTakeWhile sP (SCons sX sXs)
+  = let
+      lambda_a16gh ::
+        forall p_a15uc x_a15ud xs_a15ue. (t_a16bG ~ p_a15uc,
+                                          t_a16bH ~ Apply (Apply (:$) x_a15ud) xs_a15ue) =>
+        Sing p_a15uc
+        -> Sing x_a15ud
+            -> Sing xs_a15ue
+              -> Sing (Apply (Apply TakeWhileSym0 p_a15uc) (Apply (Apply (:$) x_a15ud) xs_a15ue) :: [a_a15e2])
+      lambda_a16gh p_a16gi x_a16gj xs_a16gk
+        = let
+            sScrutinee_1627648558 ::
+              Sing (Let1627649375Scrutinee_1627648558Sym3 p_a15uc x_a15ud xs_a15ue)
+            sScrutinee_1627648558 = applySing p_a16gi x_a16gj
+          in  case sScrutinee_1627648558 of {
+                STrue
+                  -> let
+                        lambda_a16gl ::
+                          TrueSym0 ~ Let1627649375Scrutinee_1627648558Sym3 p_a15uc x_a15ud xs_a15ue =>
+                          Sing (Case_1627649388_a15ut p_a15uc x_a15ud xs_a15ue TrueSym0)
+                        lambda_a16gl
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16gj)
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy TakeWhileSym0) sTakeWhile) p_a16gi)
+                                xs_a16gk)
+                      in lambda_a16gl;
+                SFalse
+                  -> let
+                        lambda_a16gm ::
+                          FalseSym0 ~ Let1627649375Scrutinee_1627648558Sym3 p_a15uc x_a15ud xs_a15ue =>
+                          Sing (Case_1627649388_a15ut p_a15uc x_a15ud xs_a15ue FalseSym0)
+                        lambda_a16gm = SNil
+                      in lambda_a16gm } ::
+                Sing (Case_1627649388_a15ut p_a15uc x_a15ud xs_a15ue (Let1627649375Scrutinee_1627648558Sym3 p_a15uc x_a15ud xs_a15ue))
+    in lambda_a16gh sP sX sXs
+sFilter _s_p SNil
+  = let
+      lambda_a16gn ::
+        forall _p_a15uE. (t_a16bI ~ _p_a15uE, t_a16bJ ~ '[]) =>
+        Sing _p_a15uE
+        -> Sing (Apply (Apply FilterSym0 _p_a15uE) '[] :: [a_a15dB])
+      lambda_a16gn _p_a16go = SNil
+    in lambda_a16gn _s_p
+sFilter sP (SCons sX sXs)
+  = let
+      lambda_a16gp ::
+        forall p_a15uF x_a15uG xs_a15uH. (t_a16bI ~ p_a15uF,
+                                          t_a16bJ ~ Apply (Apply (:$) x_a15uG) xs_a15uH) =>
+        Sing p_a15uF
+        -> Sing x_a15uG
+            -> Sing xs_a15uH
+              -> Sing (Apply (Apply FilterSym0 p_a15uF) (Apply (Apply (:$) x_a15uG) xs_a15uH) :: [a_a15dB])
+      lambda_a16gp p_a16gq x_a16gr xs_a16gs
+        = let
+            sScrutinee_1627648546 ::
+              Sing (Let1627649404Scrutinee_1627648546Sym3 p_a15uF x_a15uG xs_a15uH)
+            sScrutinee_1627648546 = applySing p_a16gq x_a16gr
+          in  case sScrutinee_1627648546 of {
+                STrue
+                  -> let
+                        lambda_a16gt ::
+                          TrueSym0 ~ Let1627649404Scrutinee_1627648546Sym3 p_a15uF x_a15uG xs_a15uH =>
+                          Sing (Case_1627649417_a15uW p_a15uF x_a15uG xs_a15uH TrueSym0)
+                        lambda_a16gt
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16gr)
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy FilterSym0) sFilter) p_a16gq)
+                                xs_a16gs)
+                      in lambda_a16gt;
+                SFalse
+                  -> let
+                        lambda_a16gu ::
+                          FalseSym0 ~ Let1627649404Scrutinee_1627648546Sym3 p_a15uF x_a15uG xs_a15uH =>
+                          Sing (Case_1627649417_a15uW p_a15uF x_a15uG xs_a15uH FalseSym0)
+                        lambda_a16gu
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy FilterSym0) sFilter) p_a16gq)
+                              xs_a16gs
+                      in lambda_a16gu } ::
+                Sing (Case_1627649417_a15uW p_a15uF x_a15uG xs_a15uH (Let1627649404Scrutinee_1627648546Sym3 p_a15uF x_a15uG xs_a15uH))
+    in lambda_a16gp sP sX sXs
+sFind sP sA_1627649429
+  = let
+      lambda_a16gv ::
+        forall p_a15v9 a_1627649429_a15va. (t_a16bK ~ p_a15v9,
+                                            t_a16bL ~ a_1627649429_a15va) =>
+        Sing p_a15v9
+        -> Sing a_1627649429_a15va
+            -> Sing (Apply (Apply FindSym0 p_a15v9) a_1627649429_a15va :: Maybe a_a15dG)
+      lambda_a16gv p_a16gw a_1627649429_a16gx
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy (:.$)) (%:.))
+                  (singFun1 (Proxy :: Proxy ListToMaybeSym0) sListToMaybe))
+                (applySing (singFun2 (Proxy :: Proxy FilterSym0) sFilter) p_a16gw))
+            a_1627649429_a16gx
+    in lambda_a16gv sP sA_1627649429
+sIntersectBy _s_z_1627649448 SNil SNil
+  = let
+      lambda_a16gA ::
+        forall _z_1627649448_a15vs. (t_a16bM ~ _z_1627649448_a15vs,
+                                      t_a16bN ~ '[],
+                                      t_a16bO ~ '[]) =>
+        Sing _z_1627649448_a15vs
+        -> Sing (Apply (Apply (Apply IntersectBySym0 _z_1627649448_a15vs) '[]) '[] :: [a_a15dX])
+      lambda_a16gA _z_1627649448_a16gB = SNil
+    in lambda_a16gA _s_z_1627649448
+sIntersectBy
+  _s_z_1627649451
+  SNil
+  (SCons _s_z_1627649454 _s_z_1627649457)
+  = let
+      lambda_a16gC ::
+        forall _z_1627649451_a15vv
+                _z_1627649454_a15vy
+                _z_1627649457_a15vB. (t_a16bM ~ _z_1627649451_a15vv,
+                                      t_a16bN ~ '[],
+                                      t_a16bO ~ Apply (Apply (:$) _z_1627649454_a15vy) _z_1627649457_a15vB) =>
+        Sing _z_1627649451_a15vv
+        -> Sing _z_1627649454_a15vy
+            -> Sing _z_1627649457_a15vB
+              -> Sing (Apply (Apply (Apply IntersectBySym0 _z_1627649451_a15vv) '[]) (Apply (Apply (:$) _z_1627649454_a15vy) _z_1627649457_a15vB) :: [a_a15dX])
+      lambda_a16gC
+        _z_1627649451_a16gD
+        _z_1627649454_a16gE
+        _z_1627649457_a16gF
+        = SNil
+    in lambda_a16gC _s_z_1627649451 _s_z_1627649454 _s_z_1627649457
+sIntersectBy
+  _s_z_1627649460
+  (SCons _s_z_1627649463 _s_z_1627649466)
+  SNil
+  = let
+      lambda_a16gG ::
+        forall _z_1627649460_a15vE
+                _z_1627649463_a15vH
+                _z_1627649466_a15vK. (t_a16bM ~ _z_1627649460_a15vE,
+                                      t_a16bN ~ Apply (Apply (:$) _z_1627649463_a15vH) _z_1627649466_a15vK,
+                                      t_a16bO ~ '[]) =>
+        Sing _z_1627649460_a15vE
+        -> Sing _z_1627649463_a15vH
+            -> Sing _z_1627649466_a15vK
+              -> Sing (Apply (Apply (Apply IntersectBySym0 _z_1627649460_a15vE) (Apply (Apply (:$) _z_1627649463_a15vH) _z_1627649466_a15vK)) '[] :: [a_a15dX])
+      lambda_a16gG
+        _z_1627649460_a16gH
+        _z_1627649463_a16gI
+        _z_1627649466_a16gJ
+        = SNil
+    in lambda_a16gG _s_z_1627649460 _s_z_1627649463 _s_z_1627649466
+sIntersectBy
+  sEq
+  (SCons sWild_1627648550 sWild_1627648552)
+  (SCons sWild_1627648554 sWild_1627648556)
+  = let
+      lambda_a16gK ::
+        forall eq_a15vL
+                wild_1627648550_a15vM
+                wild_1627648552_a15vN
+                wild_1627648554_a15vO
+                wild_1627648556_a15vP. (t_a16bM ~ eq_a15vL,
+                                        t_a16bN ~ Apply (Apply (:$) wild_1627648550_a15vM) wild_1627648552_a15vN,
+                                        t_a16bO ~ Apply (Apply (:$) wild_1627648554_a15vO) wild_1627648556_a15vP) =>
+        Sing eq_a15vL
+        -> Sing wild_1627648550_a15vM
+            -> Sing wild_1627648552_a15vN
+              -> Sing wild_1627648554_a15vO
+                  -> Sing wild_1627648556_a15vP
+                    -> Sing (Apply (Apply (Apply IntersectBySym0 eq_a15vL) (Apply (Apply (:$) wild_1627648550_a15vM) wild_1627648552_a15vN)) (Apply (Apply (:$) wild_1627648554_a15vO) wild_1627648556_a15vP) :: [a_a15dX])
+      lambda_a16gK
+        eq_a16gL
+        wild_1627648550_a16gM
+        wild_1627648552_a16gN
+        wild_1627648554_a16gO
+        wild_1627648556_a16gP
+        = let
+            sXs ::
+              Sing (Let1627649474XsSym5 eq_a15vL wild_1627648550_a15vM wild_1627648552_a15vN wild_1627648554_a15vO wild_1627648556_a15vP)
+            sYs ::
+              Sing (Let1627649474YsSym5 eq_a15vL wild_1627648550_a15vM wild_1627648552_a15vN wild_1627648554_a15vO wild_1627648556_a15vP)
+            sXs
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy (:$)) SCons) wild_1627648550_a16gM)
+                  wild_1627648552_a16gN
+            sYs
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy (:$)) SCons) wild_1627648554_a16gO)
+                  wild_1627648556_a16gP
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy FilterSym0) sFilter)
+                  (singFun1
+                    (Proxy ::
+                        Proxy (Apply (Apply (Apply (Apply (Apply Lambda_1627649525Sym0 eq_a15vL) wild_1627648550_a15vM) wild_1627648552_a15vN) wild_1627648554_a15vO) wild_1627648556_a15vP))
+                    (\ sX
+                        -> let
+                            lambda_a16gQ ::
+                              forall x_a15wH.
+                              Sing x_a15wH
+                              -> Sing (Apply (Apply (Apply (Apply (Apply (Apply Lambda_1627649525Sym0 eq_a15vL) wild_1627648550_a15vM) wild_1627648552_a15vN) wild_1627648554_a15vO) wild_1627648556_a15vP) x_a15wH)
+                            lambda_a16gQ x_a16gR
+                              = applySing
+                                  (applySing
+                                      (singFun2 (Proxy :: Proxy Any_Sym0) sAny_)
+                                      (applySing eq_a16gL x_a16gR))
+                                  sYs
+                          in lambda_a16gQ sX)))
+              sXs
+    in
+      lambda_a16gK
+        sEq
+        sWild_1627648550
+        sWild_1627648552
+        sWild_1627648554
+        sWild_1627648556
+sIntersect sA_1627649562 sA_1627649564
+  = let
+      lambda_a16gS ::
+        forall a_1627649562_a15xt
+                a_1627649564_a15xu. (t_a16bP ~ a_1627649562_a15xt,
+                                    t_a16bQ ~ a_1627649564_a15xu) =>
+        Sing a_1627649562_a15xt
+        -> Sing a_1627649564_a15xu
+            -> Sing (Apply (Apply IntersectSym0 a_1627649562_a15xt) a_1627649564_a15xu :: [a_a15dW])
+      lambda_a16gS a_1627649562_a16gT a_1627649564_a16gU
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy IntersectBySym0) sIntersectBy)
+                  (singFun2 (Proxy :: Proxy (:==$)) (%:==)))
+                a_1627649562_a16gT)
+            a_1627649564_a16gU
+    in lambda_a16gS sA_1627649562 sA_1627649564
+sInsertBy _s_z_1627649592 sX SNil
+  = let
+      lambda_a16gV ::
+        forall _z_1627649592_a15xM x_a15xN. (t_a16bR ~ _z_1627649592_a15xM,
+                                              t_a16bS ~ x_a15xN,
+                                              t_a16bT ~ '[]) =>
+        Sing _z_1627649592_a15xM
+        -> Sing x_a15xN
+            -> Sing (Apply (Apply (Apply InsertBySym0 _z_1627649592_a15xM) x_a15xN) '[] :: [a_a15di])
+      lambda_a16gV _z_1627649592_a16gW x_a16gX
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16gX) SNil
+    in lambda_a16gV _s_z_1627649592 sX
+sInsertBy sCmp sX (SCons sY sYs')
+  = let
+      lambda_a16gY ::
+        forall cmp_a15xO x_a15xP y_a15xQ ys'_a15xR. (t_a16bR ~ cmp_a15xO,
+                                                      t_a16bS ~ x_a15xP,
+                                                      t_a16bT ~ Apply (Apply (:$) y_a15xQ) ys'_a15xR) =>
+        Sing cmp_a15xO
+        -> Sing x_a15xP
+            -> Sing y_a15xQ
+              -> Sing ys'_a15xR
+                  -> Sing (Apply (Apply (Apply InsertBySym0 cmp_a15xO) x_a15xP) (Apply (Apply (:$) y_a15xQ) ys'_a15xR) :: [a_a15di])
+      lambda_a16gY cmp_a16gZ x_a16h0 y_a16h1 ys'_a16h2
+        = let
+            sYs ::
+              Sing (Let1627649600YsSym4 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR)
+            sYs
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) y_a16h1)
+                  ys'_a16h2 in
+          let
+            sScrutinee_1627648532 ::
+              Sing (Let1627649619Scrutinee_1627648532Sym4 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR)
+            sScrutinee_1627648532
+              = applySing (applySing cmp_a16gZ x_a16h0) y_a16h1
+          in  case sScrutinee_1627648532 of {
+                SGT
+                  -> let
+                        lambda_a16h3 ::
+                          GTSym0 ~ Let1627649619Scrutinee_1627648532Sym4 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR =>
+                          Sing (Case_1627649638_a15yv cmp_a15xO x_a15xP y_a15xQ ys'_a15xR GTSym0)
+                        lambda_a16h3
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) y_a16h1)
+                              (applySing
+                                (applySing
+                                    (applySing
+                                      (singFun3 (Proxy :: Proxy InsertBySym0) sInsertBy)
+                                      cmp_a16gZ)
+                                    x_a16h0)
+                                ys'_a16h2)
+                      in lambda_a16h3;
+                SLT
+                  -> let
+                        lambda_a16h4 ::
+                          LTSym0 ~ Let1627649619Scrutinee_1627648532Sym4 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR =>
+                          Sing (Case_1627649638_a15yv cmp_a15xO x_a15xP y_a15xQ ys'_a15xR LTSym0)
+                        lambda_a16h4
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16h0) sYs
+                      in lambda_a16h4;
+                SEQ
+                  -> let
+                        lambda_a16h5 ::
+                          EQSym0 ~ Let1627649619Scrutinee_1627648532Sym4 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR =>
+                          Sing (Case_1627649638_a15yv cmp_a15xO x_a15xP y_a15xQ ys'_a15xR EQSym0)
+                        lambda_a16h5
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16h0) sYs
+                      in lambda_a16h5 } ::
+                Sing (Case_1627649638_a15yv cmp_a15xO x_a15xP y_a15xQ ys'_a15xR (Let1627649619Scrutinee_1627648532Sym4 cmp_a15xO x_a15xP y_a15xQ ys'_a15xR))
+    in lambda_a16gY sCmp sX sY sYs'
+sInsert sE sLs
+  = let
+      lambda_a16h6 ::
+        forall e_a15yG ls_a15yH. (t_a16bU ~ e_a15yG, t_a16bV ~ ls_a15yH) =>
+        Sing e_a15yG
+        -> Sing ls_a15yH
+            -> Sing (Apply (Apply InsertSym0 e_a15yG) ls_a15yH :: [a_a15eM])
+      lambda_a16h6 e_a16h7 ls_a16h8
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy InsertBySym0) sInsertBy)
+                  (singFun2 (Proxy :: Proxy CompareSym0) sCompare))
+                e_a16h7)
+            ls_a16h8
+    in lambda_a16h6 sE sLs
+sSortBy sCmp sA_1627649661
+  = let
+      lambda_a16h9 ::
+        forall cmp_a15yT a_1627649661_a15yU. (t_a16bW ~ cmp_a15yT,
+                                              t_a16bX ~ a_1627649661_a15yU) =>
+        Sing cmp_a15yT
+        -> Sing a_1627649661_a15yU
+            -> Sing (Apply (Apply SortBySym0 cmp_a15yT) a_1627649661_a15yU :: [a_a15dg])
+      lambda_a16h9 cmp_a16ha a_1627649661_a16hb
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (applySing
+                      (singFun3 (Proxy :: Proxy InsertBySym0) sInsertBy) cmp_a16ha))
+                SNil)
+            a_1627649661_a16hb
+    in lambda_a16h9 sCmp sA_1627649661
+sSort sA_1627649665
+  = let
+      lambda_a16hc ::
+        forall a_1627649665_a15z1. t_a16bY ~ a_1627649665_a15z1 =>
+        Sing a_1627649665_a15z1
+        -> Sing (Apply SortSym0 a_1627649665_a15z1 :: [a_a15eP])
+      lambda_a16hc a_1627649665_a16hd
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy SortBySym0) sSortBy)
+                (singFun2 (Proxy :: Proxy CompareSym0) sCompare))
+            a_1627649665_a16hd
+    in lambda_a16hc sA_1627649665
+sDeleteBy _s_z_1627649687 _s_z_1627649690 SNil
+  = let
+      lambda_a16he ::
+        forall _z_1627649687_a15zj
+                _z_1627649690_a15zm. (t_a16bZ ~ _z_1627649687_a15zj,
+                                      t_a16c0 ~ _z_1627649690_a15zm,
+                                      t_a16c1 ~ '[]) =>
+        Sing _z_1627649687_a15zj
+        -> Sing _z_1627649690_a15zm
+            -> Sing (Apply (Apply (Apply DeleteBySym0 _z_1627649687_a15zj) _z_1627649690_a15zm) '[] :: [a_a15d9])
+      lambda_a16he _z_1627649687_a16hf _z_1627649690_a16hg = SNil
+    in lambda_a16he _s_z_1627649687 _s_z_1627649690
+sDeleteBy sEq sX (SCons sY sYs)
+  = let
+      lambda_a16hh ::
+        forall eq_a15zn x_a15zo y_a15zp ys_a15zq. (t_a16bZ ~ eq_a15zn,
+                                                    t_a16c0 ~ x_a15zo,
+                                                    t_a16c1 ~ Apply (Apply (:$) y_a15zp) ys_a15zq) =>
+        Sing eq_a15zn
+        -> Sing x_a15zo
+            -> Sing y_a15zp
+              -> Sing ys_a15zq
+                  -> Sing (Apply (Apply (Apply DeleteBySym0 eq_a15zn) x_a15zo) (Apply (Apply (:$) y_a15zp) ys_a15zq) :: [a_a15d9])
+      lambda_a16hh eq_a16hi x_a16hj y_a16hk ys_a16hl
+        = let
+            sScrutinee_1627648530 ::
+              Sing (Let1627649697Scrutinee_1627648530Sym4 eq_a15zn x_a15zo y_a15zp ys_a15zq)
+            sScrutinee_1627648530
+              = applySing (applySing eq_a16hi x_a16hj) y_a16hk
+          in  case sScrutinee_1627648530 of {
+                STrue
+                  -> let
+                        lambda_a16hm ::
+                          TrueSym0 ~ Let1627649697Scrutinee_1627648530Sym4 eq_a15zn x_a15zo y_a15zp ys_a15zq =>
+                          Sing (Case_1627649716_a15zL eq_a15zn x_a15zo y_a15zp ys_a15zq TrueSym0)
+                        lambda_a16hm = ys_a16hl
+                      in lambda_a16hm;
+                SFalse
+                  -> let
+                        lambda_a16hn ::
+                          FalseSym0 ~ Let1627649697Scrutinee_1627648530Sym4 eq_a15zn x_a15zo y_a15zp ys_a15zq =>
+                          Sing (Case_1627649716_a15zL eq_a15zn x_a15zo y_a15zp ys_a15zq FalseSym0)
+                        lambda_a16hn
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) y_a16hk)
+                              (applySing
+                                (applySing
+                                    (applySing
+                                      (singFun3 (Proxy :: Proxy DeleteBySym0) sDeleteBy)
+                                      eq_a16hi)
+                                    x_a16hj)
+                                ys_a16hl)
+                      in lambda_a16hn } ::
+                Sing (Case_1627649716_a15zL eq_a15zn x_a15zo y_a15zp ys_a15zq (Let1627649697Scrutinee_1627648530Sym4 eq_a15zn x_a15zo y_a15zp ys_a15zq))
+    in lambda_a16hh sEq sX sY sYs
+sDeleteFirstsBy sEq sA_1627649734 sA_1627649736
+  = let
+      lambda_a16ho ::
+        forall eq_a15A6
+                a_1627649734_a15A7
+                a_1627649736_a15A8. (t_a16c2 ~ eq_a15A6,
+                                    t_a16c3 ~ a_1627649734_a15A7,
+                                    t_a16c4 ~ a_1627649736_a15A8) =>
+        Sing eq_a15A6
+        -> Sing a_1627649734_a15A7
+            -> Sing a_1627649736_a15A8
+              -> Sing (Apply (Apply (Apply DeleteFirstsBySym0 eq_a15A6) a_1627649734_a15A7) a_1627649736_a15A8 :: [a_a15de])
+      lambda_a16ho eq_a16hp a_1627649734_a16hq a_1627649736_a16hr
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                  (applySing
+                      (singFun3 (Proxy :: Proxy FlipSym0) sFlip)
+                      (applySing
+                        (singFun3 (Proxy :: Proxy DeleteBySym0) sDeleteBy) eq_a16hp)))
+                a_1627649734_a16hq)
+            a_1627649736_a16hr
+    in lambda_a16ho sEq sA_1627649734 sA_1627649736
+sUnionBy sEq sXs sYs
+  = let
+      lambda_a16hw ::
+        forall eq_a15Ao xs_a15Ap ys_a15Aq. (t_a16c5 ~ eq_a15Ao,
+                                            t_a16c6 ~ xs_a15Ap,
+                                            t_a16c7 ~ ys_a15Aq) =>
+        Sing eq_a15Ao
+        -> Sing xs_a15Ap
+            -> Sing ys_a15Aq
+              -> Sing (Apply (Apply (Apply UnionBySym0 eq_a15Ao) xs_a15Ap) ys_a15Aq :: [a_a15fS])
+      lambda_a16hw eq_a16hx xs_a16hy ys_a16hz
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:++$)) (%:++)) xs_a16hy)
+            (applySing
+                (applySing
+                  (applySing
+                      (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                      (applySing
+                        (singFun3 (Proxy :: Proxy FlipSym0) sFlip)
+                        (applySing
+                            (singFun3 (Proxy :: Proxy DeleteBySym0) sDeleteBy) eq_a16hx)))
+                  (applySing
+                      (applySing (singFun2 (Proxy :: Proxy NubBySym0) sNubBy) eq_a16hx)
+                      ys_a16hz))
+                xs_a16hy)
+    in lambda_a16hw sEq sXs sYs
+sUnion sA_1627649759 sA_1627649761
+  = let
+      lambda_a16hA ::
+        forall a_1627649759_a15AE
+                a_1627649761_a15AF. (t_a16c8 ~ a_1627649759_a15AE,
+                                    t_a16c9 ~ a_1627649761_a15AF) =>
+        Sing a_1627649759_a15AE
+        -> Sing a_1627649761_a15AF
+            -> Sing (Apply (Apply UnionSym0 a_1627649759_a15AE) a_1627649761_a15AF :: [a_a15fW])
+      lambda_a16hA a_1627649759_a16hB a_1627649761_a16hC
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy UnionBySym0) sUnionBy)
+                  (singFun2 (Proxy :: Proxy (:==$)) (%:==)))
+                a_1627649759_a16hB)
+            a_1627649761_a16hC
+    in lambda_a16hA sA_1627649759 sA_1627649761
+sDelete sA_1627649774 sA_1627649776
+  = let
+      lambda_a16hD ::
+        forall a_1627649774_a15AT
+                a_1627649776_a15AU. (t_a16ca ~ a_1627649774_a15AT,
+                                    t_a16cb ~ a_1627649776_a15AU) =>
+        Sing a_1627649774_a15AT
+        -> Sing a_1627649776_a15AU
+            -> Sing (Apply (Apply DeleteSym0 a_1627649774_a15AT) a_1627649776_a15AU :: [a_a15d7])
+      lambda_a16hD a_1627649774_a16hE a_1627649776_a16hF
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy DeleteBySym0) sDeleteBy)
+                  (singFun2 (Proxy :: Proxy (:==$)) (%:==)))
+                a_1627649774_a16hE)
+            a_1627649776_a16hF
+    in lambda_a16hD sA_1627649774 sA_1627649776
+(%:\\) sA_1627649789 sA_1627649791
+  = let
+      lambda_a16hG ::
+        forall a_1627649789_a15B8
+                a_1627649791_a15B9. (t_a16cc ~ a_1627649789_a15B8,
+                                    t_a16cd ~ a_1627649791_a15B9) =>
+        Sing a_1627649789_a15B8
+        -> Sing a_1627649791_a15B9
+            -> Sing (Apply (Apply (:\\$) a_1627649789_a15B8) a_1627649791_a15B9 :: [a_a15d8])
+      lambda_a16hG a_1627649789_a16hH a_1627649791_a16hI
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                  (applySing
+                      (singFun3 (Proxy :: Proxy FlipSym0) sFlip)
+                      (singFun2 (Proxy :: Proxy DeleteSym0) sDelete)))
+                a_1627649789_a16hH)
+            a_1627649791_a16hI
+    in lambda_a16hG sA_1627649789 sA_1627649791
+sUnzip7 sXs
+  = let
+      lambda_a16hJ ::
+        forall xs_a15Be. t_a16ce ~ xs_a15Be =>
+        Sing xs_a15Be
+        -> Sing (Apply Unzip7Sym0 xs_a15Be :: ([a_a15cL],
+                                                [b_a15cM],
+                                                [c_a15cN],
+                                                [d_a15cO],
+                                                [e_a15cP],
+                                                [f_a15cQ],
+                                                [g_a15cR]))
+      lambda_a16hJ xs_a16hK
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (singFun2
+                      (Proxy :: Proxy (Apply Lambda_1627649809Sym0 xs_a15Be))
+                      (\ sArg_1627648526 sArg_1627648528
+                        -> let
+                              lambda_a16hL ::
+                                forall arg_1627648526_a15Bh arg_1627648528_a15Bi.
+                                Sing arg_1627648526_a15Bh
+                                -> Sing arg_1627648528_a15Bi
+                                  -> Sing (Apply (Apply (Apply Lambda_1627649809Sym0 xs_a15Be) arg_1627648526_a15Bh) arg_1627648528_a15Bi)
+                              lambda_a16hL arg_1627648526_a16hM arg_1627648528_a16hN
+                                = case
+                                      applySing
+                                        (applySing
+                                          (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                          arg_1627648526_a16hM)
+                                        arg_1627648528_a16hN
+                                  of {
+                                    STuple2 (STuple7 sA sB sC sD sE sF sG)
+                                            (STuple7 sAs sBs sCs sDs sEs sFs sGs)
+                                      -> let
+                                          lambda_a16hO ::
+                                            forall a_a15Bl
+                                                    b_a15Bm
+                                                    c_a15Bn
+                                                    d_a15Bo
+                                                    e_a15Bp
+                                                    f_a15Bq
+                                                    g_a15Br
+                                                    as_a15Bs
+                                                    bs_a15Bt
+                                                    cs_a15Bu
+                                                    ds_a15Bv
+                                                    es_a15Bw
+                                                    fs_a15Bx
+                                                    gs_a15By. Apply (Apply Tuple2Sym0 (Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 a_a15Bl) b_a15Bm) c_a15Bn) d_a15Bo) e_a15Bp) f_a15Bq) g_a15Br)) (Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 as_a15Bs) bs_a15Bt) cs_a15Bu) ds_a15Bv) es_a15Bw) fs_a15Bx) gs_a15By) ~ Apply (Apply Tuple2Sym0 arg_1627648526_a15Bh) arg_1627648528_a15Bi =>
+                                            Sing a_a15Bl
+                                            -> Sing b_a15Bm
+                                                -> Sing c_a15Bn
+                                                  -> Sing d_a15Bo
+                                                      -> Sing e_a15Bp
+                                                        -> Sing f_a15Bq
+                                                            -> Sing g_a15Br
+                                                              -> Sing as_a15Bs
+                                                                  -> Sing bs_a15Bt
+                                                                    -> Sing cs_a15Bu
+                                                                        -> Sing ds_a15Bv
+                                                                          -> Sing es_a15Bw
+                                                                              -> Sing fs_a15Bx
+                                                                                -> Sing gs_a15By
+                                                                                    -> Sing (Case_1627649813_a15Bk xs_a15Be arg_1627648526_a15Bh arg_1627648528_a15Bi (Apply (Apply Tuple2Sym0 (Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 a_a15Bl) b_a15Bm) c_a15Bn) d_a15Bo) e_a15Bp) f_a15Bq) g_a15Br)) (Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 as_a15Bs) bs_a15Bt) cs_a15Bu) ds_a15Bv) es_a15Bw) fs_a15Bx) gs_a15By)))
+                                          lambda_a16hO
+                                            a_a16hP
+                                            b_a16hQ
+                                            c_a16hR
+                                            d_a16hS
+                                            e_a16hT
+                                            f_a16hU
+                                            g_a16hV
+                                            as_a16hW
+                                            bs_a16hX
+                                            cs_a16hY
+                                            ds_a16hZ
+                                            es_a16i0
+                                            fs_a16i1
+                                            gs_a16i2
+                                            = applySing
+                                                (applySing
+                                                    (applySing
+                                                      (applySing
+                                                          (applySing
+                                                            (applySing
+                                                                (applySing
+                                                                  (singFun7
+                                                                      (Proxy :: Proxy Tuple7Sym0)
+                                                                      STuple7)
+                                                                  (applySing
+                                                                      (applySing
+                                                                        (singFun2
+                                                                            (Proxy :: Proxy (:$))
+                                                                            SCons)
+                                                                        a_a16hP)
+                                                                      as_a16hW))
+                                                                (applySing
+                                                                  (applySing
+                                                                      (singFun2
+                                                                        (Proxy :: Proxy (:$))
+                                                                        SCons)
+                                                                      b_a16hQ)
+                                                                  bs_a16hX))
+                                                            (applySing
+                                                                (applySing
+                                                                  (singFun2
+                                                                      (Proxy :: Proxy (:$))
+                                                                      SCons)
+                                                                  c_a16hR)
+                                                                cs_a16hY))
+                                                          (applySing
+                                                            (applySing
+                                                                (singFun2
+                                                                  (Proxy :: Proxy (:$)) SCons)
+                                                                d_a16hS)
+                                                            ds_a16hZ))
+                                                      (applySing
+                                                          (applySing
+                                                            (singFun2
+                                                                (Proxy :: Proxy (:$)) SCons)
+                                                            e_a16hT)
+                                                          es_a16i0))
+                                                    (applySing
+                                                      (applySing
+                                                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                          f_a16hU)
+                                                      fs_a16i1))
+                                                (applySing
+                                                    (applySing
+                                                      (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                      g_a16hV)
+                                                    gs_a16i2)
+                                        in
+                                          lambda_a16hO
+                                            sA
+                                            sB
+                                            sC
+                                            sD
+                                            sE
+                                            sF
+                                            sG
+                                            sAs
+                                            sBs
+                                            sCs
+                                            sDs
+                                            sEs
+                                            sFs
+                                            sGs } ::
+                                    Sing (Case_1627649813_a15Bk xs_a15Be arg_1627648526_a15Bh arg_1627648528_a15Bi (Apply (Apply Tuple2Sym0 arg_1627648526_a15Bh) arg_1627648528_a15Bi))
+                            in lambda_a16hL sArg_1627648526 sArg_1627648528)))
+                (applySing
+                  (applySing
+                      (applySing
+                        (applySing
+                            (applySing
+                              (applySing
+                                  (applySing (singFun7 (Proxy :: Proxy Tuple7Sym0) STuple7) SNil)
+                                  SNil)
+                              SNil)
+                            SNil)
+                        SNil)
+                      SNil)
+                  SNil))
+            xs_a16hK
+    in lambda_a16hJ sXs
+sUnzip6 sXs
+  = let
+      lambda_a16i3 ::
+        forall xs_a15BS. t_a16cf ~ xs_a15BS =>
+        Sing xs_a15BS
+        -> Sing (Apply Unzip6Sym0 xs_a15BS :: ([a_a15cs],
+                                                [b_a15ct],
+                                                [c_a15cu],
+                                                [d_a15cv],
+                                                [e_a15cw],
+                                                [f_a15cx]))
+      lambda_a16i3 xs_a16i4
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (singFun2
+                      (Proxy :: Proxy (Apply Lambda_1627649849Sym0 xs_a15BS))
+                      (\ sArg_1627648522 sArg_1627648524
+                        -> let
+                              lambda_a16i5 ::
+                                forall arg_1627648522_a15BV arg_1627648524_a15BW.
+                                Sing arg_1627648522_a15BV
+                                -> Sing arg_1627648524_a15BW
+                                  -> Sing (Apply (Apply (Apply Lambda_1627649849Sym0 xs_a15BS) arg_1627648522_a15BV) arg_1627648524_a15BW)
+                              lambda_a16i5 arg_1627648522_a16i6 arg_1627648524_a16i7
+                                = case
+                                      applySing
+                                        (applySing
+                                          (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                          arg_1627648522_a16i6)
+                                        arg_1627648524_a16i7
+                                  of {
+                                    STuple2 (STuple6 sA sB sC sD sE sF)
+                                            (STuple6 sAs sBs sCs sDs sEs sFs)
+                                      -> let
+                                          lambda_a16i8 ::
+                                            forall a_a15BZ
+                                                    b_a15C0
+                                                    c_a15C1
+                                                    d_a15C2
+                                                    e_a15C3
+                                                    f_a15C4
+                                                    as_a15C5
+                                                    bs_a15C6
+                                                    cs_a15C7
+                                                    ds_a15C8
+                                                    es_a15C9
+                                                    fs_a15Ca. Apply (Apply Tuple2Sym0 (Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 a_a15BZ) b_a15C0) c_a15C1) d_a15C2) e_a15C3) f_a15C4)) (Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 as_a15C5) bs_a15C6) cs_a15C7) ds_a15C8) es_a15C9) fs_a15Ca) ~ Apply (Apply Tuple2Sym0 arg_1627648522_a15BV) arg_1627648524_a15BW =>
+                                            Sing a_a15BZ
+                                            -> Sing b_a15C0
+                                                -> Sing c_a15C1
+                                                  -> Sing d_a15C2
+                                                      -> Sing e_a15C3
+                                                        -> Sing f_a15C4
+                                                            -> Sing as_a15C5
+                                                              -> Sing bs_a15C6
+                                                                  -> Sing cs_a15C7
+                                                                    -> Sing ds_a15C8
+                                                                        -> Sing es_a15C9
+                                                                          -> Sing fs_a15Ca
+                                                                              -> Sing (Case_1627649853_a15BY xs_a15BS arg_1627648522_a15BV arg_1627648524_a15BW (Apply (Apply Tuple2Sym0 (Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 a_a15BZ) b_a15C0) c_a15C1) d_a15C2) e_a15C3) f_a15C4)) (Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 as_a15C5) bs_a15C6) cs_a15C7) ds_a15C8) es_a15C9) fs_a15Ca)))
+                                          lambda_a16i8
+                                            a_a16i9
+                                            b_a16ia
+                                            c_a16ib
+                                            d_a16ic
+                                            e_a16id
+                                            f_a16ie
+                                            as_a16if
+                                            bs_a16ig
+                                            cs_a16ih
+                                            ds_a16ii
+                                            es_a16ij
+                                            fs_a16ik
+                                            = applySing
+                                                (applySing
+                                                    (applySing
+                                                      (applySing
+                                                          (applySing
+                                                            (applySing
+                                                                (singFun6
+                                                                  (Proxy :: Proxy Tuple6Sym0)
+                                                                  STuple6)
+                                                                (applySing
+                                                                  (applySing
+                                                                      (singFun2
+                                                                        (Proxy :: Proxy (:$))
+                                                                        SCons)
+                                                                      a_a16i9)
+                                                                  as_a16if))
+                                                            (applySing
+                                                                (applySing
+                                                                  (singFun2
+                                                                      (Proxy :: Proxy (:$))
+                                                                      SCons)
+                                                                  b_a16ia)
+                                                                bs_a16ig))
+                                                          (applySing
+                                                            (applySing
+                                                                (singFun2
+                                                                  (Proxy :: Proxy (:$)) SCons)
+                                                                c_a16ib)
+                                                            cs_a16ih))
+                                                      (applySing
+                                                          (applySing
+                                                            (singFun2
+                                                                (Proxy :: Proxy (:$)) SCons)
+                                                            d_a16ic)
+                                                          ds_a16ii))
+                                                    (applySing
+                                                      (applySing
+                                                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                          e_a16id)
+                                                      es_a16ij))
+                                                (applySing
+                                                    (applySing
+                                                      (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                      f_a16ie)
+                                                    fs_a16ik)
+                                        in
+                                          lambda_a16i8
+                                            sA sB sC sD sE sF sAs sBs sCs sDs sEs sFs } ::
+                                    Sing (Case_1627649853_a15BY xs_a15BS arg_1627648522_a15BV arg_1627648524_a15BW (Apply (Apply Tuple2Sym0 arg_1627648522_a15BV) arg_1627648524_a15BW))
+                            in lambda_a16i5 sArg_1627648522 sArg_1627648524)))
+                (applySing
+                  (applySing
+                      (applySing
+                        (applySing
+                            (applySing
+                              (applySing (singFun6 (Proxy :: Proxy Tuple6Sym0) STuple6) SNil)
+                              SNil)
+                            SNil)
+                        SNil)
+                      SNil)
+                  SNil))
+            xs_a16i4
+    in lambda_a16i3 sXs
+sUnzip5 sXs
+  = let
+      lambda_a16il ::
+        forall xs_a15Cu. t_a16cg ~ xs_a15Cu =>
+        Sing xs_a15Cu
+        -> Sing (Apply Unzip5Sym0 xs_a15Cu :: ([a_a15cc],
+                                                [b_a15cd],
+                                                [c_a15ce],
+                                                [d_a15cf],
+                                                [e_a15cg]))
+      lambda_a16il xs_a16im
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (singFun2
+                      (Proxy :: Proxy (Apply Lambda_1627649887Sym0 xs_a15Cu))
+                      (\ sArg_1627648518 sArg_1627648520
+                        -> let
+                              lambda_a16in ::
+                                forall arg_1627648518_a15Cx arg_1627648520_a15Cy.
+                                Sing arg_1627648518_a15Cx
+                                -> Sing arg_1627648520_a15Cy
+                                  -> Sing (Apply (Apply (Apply Lambda_1627649887Sym0 xs_a15Cu) arg_1627648518_a15Cx) arg_1627648520_a15Cy)
+                              lambda_a16in arg_1627648518_a16io arg_1627648520_a16ip
+                                = case
+                                      applySing
+                                        (applySing
+                                          (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                          arg_1627648518_a16io)
+                                        arg_1627648520_a16ip
+                                  of {
+                                    STuple2 (STuple5 sA sB sC sD sE)
+                                            (STuple5 sAs sBs sCs sDs sEs)
+                                      -> let
+                                          lambda_a16iq ::
+                                            forall a_a15CB
+                                                    b_a15CC
+                                                    c_a15CD
+                                                    d_a15CE
+                                                    e_a15CF
+                                                    as_a15CG
+                                                    bs_a15CH
+                                                    cs_a15CI
+                                                    ds_a15CJ
+                                                    es_a15CK. Apply (Apply Tuple2Sym0 (Apply (Apply (Apply (Apply (Apply Tuple5Sym0 a_a15CB) b_a15CC) c_a15CD) d_a15CE) e_a15CF)) (Apply (Apply (Apply (Apply (Apply Tuple5Sym0 as_a15CG) bs_a15CH) cs_a15CI) ds_a15CJ) es_a15CK) ~ Apply (Apply Tuple2Sym0 arg_1627648518_a15Cx) arg_1627648520_a15Cy =>
+                                            Sing a_a15CB
+                                            -> Sing b_a15CC
+                                                -> Sing c_a15CD
+                                                  -> Sing d_a15CE
+                                                      -> Sing e_a15CF
+                                                        -> Sing as_a15CG
+                                                            -> Sing bs_a15CH
+                                                              -> Sing cs_a15CI
+                                                                  -> Sing ds_a15CJ
+                                                                    -> Sing es_a15CK
+                                                                        -> Sing (Case_1627649891_a15CA xs_a15Cu arg_1627648518_a15Cx arg_1627648520_a15Cy (Apply (Apply Tuple2Sym0 (Apply (Apply (Apply (Apply (Apply Tuple5Sym0 a_a15CB) b_a15CC) c_a15CD) d_a15CE) e_a15CF)) (Apply (Apply (Apply (Apply (Apply Tuple5Sym0 as_a15CG) bs_a15CH) cs_a15CI) ds_a15CJ) es_a15CK)))
+                                          lambda_a16iq
+                                            a_a16ir
+                                            b_a16is
+                                            c_a16it
+                                            d_a16iu
+                                            e_a16iv
+                                            as_a16iw
+                                            bs_a16ix
+                                            cs_a16iy
+                                            ds_a16iz
+                                            es_a16iA
+                                            = applySing
+                                                (applySing
+                                                    (applySing
+                                                      (applySing
+                                                          (applySing
+                                                            (singFun5
+                                                                (Proxy :: Proxy Tuple5Sym0)
+                                                                STuple5)
+                                                            (applySing
+                                                                (applySing
+                                                                  (singFun2
+                                                                      (Proxy :: Proxy (:$))
+                                                                      SCons)
+                                                                  a_a16ir)
+                                                                as_a16iw))
+                                                          (applySing
+                                                            (applySing
+                                                                (singFun2
+                                                                  (Proxy :: Proxy (:$)) SCons)
+                                                                b_a16is)
+                                                            bs_a16ix))
+                                                      (applySing
+                                                          (applySing
+                                                            (singFun2
+                                                                (Proxy :: Proxy (:$)) SCons)
+                                                            c_a16it)
+                                                          cs_a16iy))
+                                                    (applySing
+                                                      (applySing
+                                                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                          d_a16iu)
+                                                      ds_a16iz))
+                                                (applySing
+                                                    (applySing
+                                                      (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                      e_a16iv)
+                                                    es_a16iA)
+                                        in lambda_a16iq sA sB sC sD sE sAs sBs sCs sDs sEs } ::
+                                    Sing (Case_1627649891_a15CA xs_a15Cu arg_1627648518_a15Cx arg_1627648520_a15Cy (Apply (Apply Tuple2Sym0 arg_1627648518_a15Cx) arg_1627648520_a15Cy))
+                            in lambda_a16in sArg_1627648518 sArg_1627648520)))
+                (applySing
+                  (applySing
+                      (applySing
+                        (applySing
+                            (applySing (singFun5 (Proxy :: Proxy Tuple5Sym0) STuple5) SNil)
+                            SNil)
+                        SNil)
+                      SNil)
+                  SNil))
+            xs_a16im
+    in lambda_a16il sXs
+sUnzip4 sXs
+  = let
+      lambda_a16iB ::
+        forall xs_a15D4. t_a16ch ~ xs_a15D4 =>
+        Sing xs_a15D4
+        -> Sing (Apply Unzip4Sym0 xs_a15D4 :: ([a_a15bZ],
+                                                [b_a15c0],
+                                                [c_a15c1],
+                                                [d_a15c2]))
+      lambda_a16iB xs_a16iC
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (singFun2
+                      (Proxy :: Proxy (Apply Lambda_1627649923Sym0 xs_a15D4))
+                      (\ sArg_1627648514 sArg_1627648516
+                        -> let
+                              lambda_a16iD ::
+                                forall arg_1627648514_a15D7 arg_1627648516_a15D8.
+                                Sing arg_1627648514_a15D7
+                                -> Sing arg_1627648516_a15D8
+                                  -> Sing (Apply (Apply (Apply Lambda_1627649923Sym0 xs_a15D4) arg_1627648514_a15D7) arg_1627648516_a15D8)
+                              lambda_a16iD arg_1627648514_a16iE arg_1627648516_a16iF
+                                = case
+                                      applySing
+                                        (applySing
+                                          (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                          arg_1627648514_a16iE)
+                                        arg_1627648516_a16iF
+                                  of {
+                                    STuple2 (STuple4 sA sB sC sD) (STuple4 sAs sBs sCs sDs)
+                                      -> let
+                                          lambda_a16iG ::
+                                            forall a_a15Db
+                                                    b_a15Dc
+                                                    c_a15Dd
+                                                    d_a15De
+                                                    as_a15Df
+                                                    bs_a15Dg
+                                                    cs_a15Dh
+                                                    ds_a15Di. Apply (Apply Tuple2Sym0 (Apply (Apply (Apply (Apply Tuple4Sym0 a_a15Db) b_a15Dc) c_a15Dd) d_a15De)) (Apply (Apply (Apply (Apply Tuple4Sym0 as_a15Df) bs_a15Dg) cs_a15Dh) ds_a15Di) ~ Apply (Apply Tuple2Sym0 arg_1627648514_a15D7) arg_1627648516_a15D8 =>
+                                            Sing a_a15Db
+                                            -> Sing b_a15Dc
+                                                -> Sing c_a15Dd
+                                                  -> Sing d_a15De
+                                                      -> Sing as_a15Df
+                                                        -> Sing bs_a15Dg
+                                                            -> Sing cs_a15Dh
+                                                              -> Sing ds_a15Di
+                                                                  -> Sing (Case_1627649927_a15Da xs_a15D4 arg_1627648514_a15D7 arg_1627648516_a15D8 (Apply (Apply Tuple2Sym0 (Apply (Apply (Apply (Apply Tuple4Sym0 a_a15Db) b_a15Dc) c_a15Dd) d_a15De)) (Apply (Apply (Apply (Apply Tuple4Sym0 as_a15Df) bs_a15Dg) cs_a15Dh) ds_a15Di)))
+                                          lambda_a16iG
+                                            a_a16iH
+                                            b_a16iI
+                                            c_a16iJ
+                                            d_a16iK
+                                            as_a16iL
+                                            bs_a16iM
+                                            cs_a16iN
+                                            ds_a16iO
+                                            = applySing
+                                                (applySing
+                                                    (applySing
+                                                      (applySing
+                                                          (singFun4
+                                                            (Proxy :: Proxy Tuple4Sym0) STuple4)
+                                                          (applySing
+                                                            (applySing
+                                                                (singFun2
+                                                                  (Proxy :: Proxy (:$)) SCons)
+                                                                a_a16iH)
+                                                            as_a16iL))
+                                                      (applySing
+                                                          (applySing
+                                                            (singFun2
+                                                                (Proxy :: Proxy (:$)) SCons)
+                                                            b_a16iI)
+                                                          bs_a16iM))
+                                                    (applySing
+                                                      (applySing
+                                                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                          c_a16iJ)
+                                                      cs_a16iN))
+                                                (applySing
+                                                    (applySing
+                                                      (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                      d_a16iK)
+                                                    ds_a16iO)
+                                        in lambda_a16iG sA sB sC sD sAs sBs sCs sDs } ::
+                                    Sing (Case_1627649927_a15Da xs_a15D4 arg_1627648514_a15D7 arg_1627648516_a15D8 (Apply (Apply Tuple2Sym0 arg_1627648514_a15D7) arg_1627648516_a15D8))
+                            in lambda_a16iD sArg_1627648514 sArg_1627648516)))
+                (applySing
+                  (applySing
+                      (applySing
+                        (applySing (singFun4 (Proxy :: Proxy Tuple4Sym0) STuple4) SNil)
+                        SNil)
+                      SNil)
+                  SNil))
+            xs_a16iC
+    in lambda_a16iB sXs
+sUnzip3 sXs
+  = let
+      lambda_a16iP ::
+        forall xs_a15DC. t_a16ci ~ xs_a15DC =>
+        Sing xs_a15DC
+        -> Sing (Apply Unzip3Sym0 xs_a15DC :: ([a_a15bP],
+                                                [b_a15bQ],
+                                                [c_a15bR]))
+      lambda_a16iP xs_a16iQ
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (singFun2
+                      (Proxy :: Proxy (Apply Lambda_1627649957Sym0 xs_a15DC))
+                      (\ sArg_1627648510 sArg_1627648512
+                        -> let
+                              lambda_a16iR ::
+                                forall arg_1627648510_a15DF arg_1627648512_a15DG.
+                                Sing arg_1627648510_a15DF
+                                -> Sing arg_1627648512_a15DG
+                                  -> Sing (Apply (Apply (Apply Lambda_1627649957Sym0 xs_a15DC) arg_1627648510_a15DF) arg_1627648512_a15DG)
+                              lambda_a16iR arg_1627648510_a16iS arg_1627648512_a16iT
+                                = case
+                                      applySing
+                                        (applySing
+                                          (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                          arg_1627648510_a16iS)
+                                        arg_1627648512_a16iT
+                                  of {
+                                    STuple2 (STuple3 sA sB sC) (STuple3 sAs sBs sCs)
+                                      -> let
+                                          lambda_a16iU ::
+                                            forall a_a15DJ
+                                                    b_a15DK
+                                                    c_a15DL
+                                                    as_a15DM
+                                                    bs_a15DN
+                                                    cs_a15DO. Apply (Apply Tuple2Sym0 (Apply (Apply (Apply Tuple3Sym0 a_a15DJ) b_a15DK) c_a15DL)) (Apply (Apply (Apply Tuple3Sym0 as_a15DM) bs_a15DN) cs_a15DO) ~ Apply (Apply Tuple2Sym0 arg_1627648510_a15DF) arg_1627648512_a15DG =>
+                                            Sing a_a15DJ
+                                            -> Sing b_a15DK
+                                                -> Sing c_a15DL
+                                                  -> Sing as_a15DM
+                                                      -> Sing bs_a15DN
+                                                        -> Sing cs_a15DO
+                                                            -> Sing (Case_1627649961_a15DI xs_a15DC arg_1627648510_a15DF arg_1627648512_a15DG (Apply (Apply Tuple2Sym0 (Apply (Apply (Apply Tuple3Sym0 a_a15DJ) b_a15DK) c_a15DL)) (Apply (Apply (Apply Tuple3Sym0 as_a15DM) bs_a15DN) cs_a15DO)))
+                                          lambda_a16iU
+                                            a_a16iV
+                                            b_a16iW
+                                            c_a16iX
+                                            as_a16iY
+                                            bs_a16iZ
+                                            cs_a16j0
+                                            = applySing
+                                                (applySing
+                                                    (applySing
+                                                      (singFun3
+                                                          (Proxy :: Proxy Tuple3Sym0) STuple3)
+                                                      (applySing
+                                                          (applySing
+                                                            (singFun2
+                                                                (Proxy :: Proxy (:$)) SCons)
+                                                            a_a16iV)
+                                                          as_a16iY))
+                                                    (applySing
+                                                      (applySing
+                                                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                          b_a16iW)
+                                                      bs_a16iZ))
+                                                (applySing
+                                                    (applySing
+                                                      (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                      c_a16iX)
+                                                    cs_a16j0)
+                                        in lambda_a16iU sA sB sC sAs sBs sCs } ::
+                                    Sing (Case_1627649961_a15DI xs_a15DC arg_1627648510_a15DF arg_1627648512_a15DG (Apply (Apply Tuple2Sym0 arg_1627648510_a15DF) arg_1627648512_a15DG))
+                            in lambda_a16iR sArg_1627648510 sArg_1627648512)))
+                (applySing
+                  (applySing
+                      (applySing (singFun3 (Proxy :: Proxy Tuple3Sym0) STuple3) SNil)
+                      SNil)
+                  SNil))
+            xs_a16iQ
+    in lambda_a16iP sXs
+sUnzip sXs
+  = let
+      lambda_a16j1 ::
+        forall xs_a15E8. t_a16cj ~ xs_a15E8 =>
+        Sing xs_a15E8
+        -> Sing (Apply UnzipSym0 xs_a15E8 :: ([a_a15bI], [b_a15bJ]))
+      lambda_a16j1 xs_a16j2
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (singFun2
+                      (Proxy :: Proxy (Apply Lambda_1627649989Sym0 xs_a15E8))
+                      (\ sArg_1627648506 sArg_1627648508
+                        -> let
+                              lambda_a16j3 ::
+                                forall arg_1627648506_a15Eb arg_1627648508_a15Ec.
+                                Sing arg_1627648506_a15Eb
+                                -> Sing arg_1627648508_a15Ec
+                                  -> Sing (Apply (Apply (Apply Lambda_1627649989Sym0 xs_a15E8) arg_1627648506_a15Eb) arg_1627648508_a15Ec)
+                              lambda_a16j3 arg_1627648506_a16j4 arg_1627648508_a16j5
+                                = case
+                                      applySing
+                                        (applySing
+                                          (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                          arg_1627648506_a16j4)
+                                        arg_1627648508_a16j5
+                                  of {
+                                    STuple2 (STuple2 sA sB) (STuple2 sAs sBs)
+                                      -> let
+                                          lambda_a16j6 ::
+                                            forall a_a15Ef
+                                                    b_a15Eg
+                                                    as_a15Eh
+                                                    bs_a15Ei. Apply (Apply Tuple2Sym0 (Apply (Apply Tuple2Sym0 a_a15Ef) b_a15Eg)) (Apply (Apply Tuple2Sym0 as_a15Eh) bs_a15Ei) ~ Apply (Apply Tuple2Sym0 arg_1627648506_a15Eb) arg_1627648508_a15Ec =>
+                                            Sing a_a15Ef
+                                            -> Sing b_a15Eg
+                                                -> Sing as_a15Eh
+                                                  -> Sing bs_a15Ei
+                                                      -> Sing (Case_1627649993_a15Ee xs_a15E8 arg_1627648506_a15Eb arg_1627648508_a15Ec (Apply (Apply Tuple2Sym0 (Apply (Apply Tuple2Sym0 a_a15Ef) b_a15Eg)) (Apply (Apply Tuple2Sym0 as_a15Eh) bs_a15Ei)))
+                                          lambda_a16j6 a_a16j7 b_a16j8 as_a16j9 bs_a16ja
+                                            = applySing
+                                                (applySing
+                                                    (singFun2
+                                                      (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                                    (applySing
+                                                      (applySing
+                                                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                          a_a16j7)
+                                                      as_a16j9))
+                                                (applySing
+                                                    (applySing
+                                                      (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                      b_a16j8)
+                                                    bs_a16ja)
+                                        in lambda_a16j6 sA sB sAs sBs } ::
+                                    Sing (Case_1627649993_a15Ee xs_a15E8 arg_1627648506_a15Eb arg_1627648508_a15Ec (Apply (Apply Tuple2Sym0 arg_1627648506_a15Eb) arg_1627648508_a15Ec))
+                            in lambda_a16j3 sArg_1627648506 sArg_1627648508)))
+                (applySing
+                  (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) SNil)
+                  SNil))
+            xs_a16j2
+    in lambda_a16j1 sXs
+sZipWith3 sZ (SCons sA sAs) (SCons sB sBs) (SCons sC sCs)
+  = let
+      lambda_a16jb ::
+        forall z_a15EU
+                a_a15EV
+                as_a15EW
+                b_a15EX
+                bs_a15EY
+                c_a15EZ
+                cs_a15F0. (t_a16ck ~ z_a15EU,
+                          t_a16cl ~ Apply (Apply (:$) a_a15EV) as_a15EW,
+                          t_a16cm ~ Apply (Apply (:$) b_a15EX) bs_a15EY,
+                          t_a16cn ~ Apply (Apply (:$) c_a15EZ) cs_a15F0) =>
+        Sing z_a15EU
+        -> Sing a_a15EV
+            -> Sing as_a15EW
+              -> Sing b_a15EX
+                  -> Sing bs_a15EY
+                    -> Sing c_a15EZ
+                        -> Sing cs_a15F0
+                          -> Sing (Apply (Apply (Apply (Apply ZipWith3Sym0 z_a15EU) (Apply (Apply (:$) a_a15EV) as_a15EW)) (Apply (Apply (:$) b_a15EX) bs_a15EY)) (Apply (Apply (:$) c_a15EZ) cs_a15F0) :: [d_a15bA])
+      lambda_a16jb
+        z_a16jc
+        a_a16jd
+        as_a16je
+        b_a16jf
+        bs_a16jg
+        c_a16jh
+        cs_a16ji
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                (applySing
+                  (applySing (applySing z_a16jc a_a16jd) b_a16jf) c_a16jh))
+            (applySing
+                (applySing
+                  (applySing
+                      (applySing
+                        (singFun4 (Proxy :: Proxy ZipWith3Sym0) sZipWith3) z_a16jc)
+                      as_a16je)
+                  bs_a16jg)
+                cs_a16ji)
+    in lambda_a16jb sZ sA sAs sB sBs sC sCs
+sZipWith3 _s_z_1627650043 SNil SNil SNil
+  = let
+      lambda_a16jj ::
+        forall _z_1627650043_a15F3. (t_a16ck ~ _z_1627650043_a15F3,
+                                      t_a16cl ~ '[],
+                                      t_a16cm ~ '[],
+                                      t_a16cn ~ '[]) =>
+        Sing _z_1627650043_a15F3
+        -> Sing (Apply (Apply (Apply (Apply ZipWith3Sym0 _z_1627650043_a15F3) '[]) '[]) '[] :: [d_a15bA])
+      lambda_a16jj _z_1627650043_a16jk = SNil
+    in lambda_a16jj _s_z_1627650043
+sZipWith3
+  _s_z_1627650046
+  SNil
+  SNil
+  (SCons _s_z_1627650049 _s_z_1627650052)
+  = let
+      lambda_a16jl ::
+        forall _z_1627650046_a15F6
+                _z_1627650049_a15F9
+                _z_1627650052_a15Fc. (t_a16ck ~ _z_1627650046_a15F6,
+                                      t_a16cl ~ '[],
+                                      t_a16cm ~ '[],
+                                      t_a16cn ~ Apply (Apply (:$) _z_1627650049_a15F9) _z_1627650052_a15Fc) =>
+        Sing _z_1627650046_a15F6
+        -> Sing _z_1627650049_a15F9
+            -> Sing _z_1627650052_a15Fc
+              -> Sing (Apply (Apply (Apply (Apply ZipWith3Sym0 _z_1627650046_a15F6) '[]) '[]) (Apply (Apply (:$) _z_1627650049_a15F9) _z_1627650052_a15Fc) :: [d_a15bA])
+      lambda_a16jl
+        _z_1627650046_a16jm
+        _z_1627650049_a16jn
+        _z_1627650052_a16jo
+        = SNil
+    in lambda_a16jl _s_z_1627650046 _s_z_1627650049 _s_z_1627650052
+sZipWith3
+  _s_z_1627650055
+  SNil
+  (SCons _s_z_1627650058 _s_z_1627650061)
+  SNil
+  = let
+      lambda_a16jp ::
+        forall _z_1627650055_a15Ff
+                _z_1627650058_a15Fi
+                _z_1627650061_a15Fl. (t_a16ck ~ _z_1627650055_a15Ff,
+                                      t_a16cl ~ '[],
+                                      t_a16cm ~ Apply (Apply (:$) _z_1627650058_a15Fi) _z_1627650061_a15Fl,
+                                      t_a16cn ~ '[]) =>
+        Sing _z_1627650055_a15Ff
+        -> Sing _z_1627650058_a15Fi
+            -> Sing _z_1627650061_a15Fl
+              -> Sing (Apply (Apply (Apply (Apply ZipWith3Sym0 _z_1627650055_a15Ff) '[]) (Apply (Apply (:$) _z_1627650058_a15Fi) _z_1627650061_a15Fl)) '[] :: [d_a15bA])
+      lambda_a16jp
+        _z_1627650055_a16jq
+        _z_1627650058_a16jr
+        _z_1627650061_a16js
+        = SNil
+    in lambda_a16jp _s_z_1627650055 _s_z_1627650058 _s_z_1627650061
+sZipWith3
+  _s_z_1627650064
+  SNil
+  (SCons _s_z_1627650067 _s_z_1627650070)
+  (SCons _s_z_1627650073 _s_z_1627650076)
+  = let
+      lambda_a16jt ::
+        forall _z_1627650064_a15Fo
+                _z_1627650067_a15Fr
+                _z_1627650070_a15Fu
+                _z_1627650073_a15Fx
+                _z_1627650076_a15FA. (t_a16ck ~ _z_1627650064_a15Fo,
+                                      t_a16cl ~ '[],
+                                      t_a16cm ~ Apply (Apply (:$) _z_1627650067_a15Fr) _z_1627650070_a15Fu,
+                                      t_a16cn ~ Apply (Apply (:$) _z_1627650073_a15Fx) _z_1627650076_a15FA) =>
+        Sing _z_1627650064_a15Fo
+        -> Sing _z_1627650067_a15Fr
+            -> Sing _z_1627650070_a15Fu
+              -> Sing _z_1627650073_a15Fx
+                  -> Sing _z_1627650076_a15FA
+                    -> Sing (Apply (Apply (Apply (Apply ZipWith3Sym0 _z_1627650064_a15Fo) '[]) (Apply (Apply (:$) _z_1627650067_a15Fr) _z_1627650070_a15Fu)) (Apply (Apply (:$) _z_1627650073_a15Fx) _z_1627650076_a15FA) :: [d_a15bA])
+      lambda_a16jt
+        _z_1627650064_a16ju
+        _z_1627650067_a16jv
+        _z_1627650070_a16jw
+        _z_1627650073_a16jx
+        _z_1627650076_a16jy
+        = SNil
+    in
+      lambda_a16jt
+        _s_z_1627650064
+        _s_z_1627650067
+        _s_z_1627650070
+        _s_z_1627650073
+        _s_z_1627650076
+sZipWith3
+  _s_z_1627650079
+  (SCons _s_z_1627650082 _s_z_1627650085)
+  SNil
+  SNil
+  = let
+      lambda_a16jz ::
+        forall _z_1627650079_a15FD
+                _z_1627650082_a15FG
+                _z_1627650085_a15FJ. (t_a16ck ~ _z_1627650079_a15FD,
+                                      t_a16cl ~ Apply (Apply (:$) _z_1627650082_a15FG) _z_1627650085_a15FJ,
+                                      t_a16cm ~ '[],
+                                      t_a16cn ~ '[]) =>
+        Sing _z_1627650079_a15FD
+        -> Sing _z_1627650082_a15FG
+            -> Sing _z_1627650085_a15FJ
+              -> Sing (Apply (Apply (Apply (Apply ZipWith3Sym0 _z_1627650079_a15FD) (Apply (Apply (:$) _z_1627650082_a15FG) _z_1627650085_a15FJ)) '[]) '[] :: [d_a15bA])
+      lambda_a16jz
+        _z_1627650079_a16jA
+        _z_1627650082_a16jB
+        _z_1627650085_a16jC
+        = SNil
+    in lambda_a16jz _s_z_1627650079 _s_z_1627650082 _s_z_1627650085
+sZipWith3
+  _s_z_1627650088
+  (SCons _s_z_1627650091 _s_z_1627650094)
+  SNil
+  (SCons _s_z_1627650097 _s_z_1627650100)
+  = let
+      lambda_a16jD ::
+        forall _z_1627650088_a15FM
+                _z_1627650091_a15FP
+                _z_1627650094_a15FS
+                _z_1627650097_a15FV
+                _z_1627650100_a15FY. (t_a16ck ~ _z_1627650088_a15FM,
+                                      t_a16cl ~ Apply (Apply (:$) _z_1627650091_a15FP) _z_1627650094_a15FS,
+                                      t_a16cm ~ '[],
+                                      t_a16cn ~ Apply (Apply (:$) _z_1627650097_a15FV) _z_1627650100_a15FY) =>
+        Sing _z_1627650088_a15FM
+        -> Sing _z_1627650091_a15FP
+            -> Sing _z_1627650094_a15FS
+              -> Sing _z_1627650097_a15FV
+                  -> Sing _z_1627650100_a15FY
+                    -> Sing (Apply (Apply (Apply (Apply ZipWith3Sym0 _z_1627650088_a15FM) (Apply (Apply (:$) _z_1627650091_a15FP) _z_1627650094_a15FS)) '[]) (Apply (Apply (:$) _z_1627650097_a15FV) _z_1627650100_a15FY) :: [d_a15bA])
+      lambda_a16jD
+        _z_1627650088_a16jE
+        _z_1627650091_a16jF
+        _z_1627650094_a16jG
+        _z_1627650097_a16jH
+        _z_1627650100_a16jI
+        = SNil
+    in
+      lambda_a16jD
+        _s_z_1627650088
+        _s_z_1627650091
+        _s_z_1627650094
+        _s_z_1627650097
+        _s_z_1627650100
+sZipWith3
+  _s_z_1627650103
+  (SCons _s_z_1627650106 _s_z_1627650109)
+  (SCons _s_z_1627650112 _s_z_1627650115)
+  SNil
+  = let
+      lambda_a16jJ ::
+        forall _z_1627650103_a15G1
+                _z_1627650106_a15G4
+                _z_1627650109_a15G7
+                _z_1627650112_a15Ga
+                _z_1627650115_a15Gd. (t_a16ck ~ _z_1627650103_a15G1,
+                                      t_a16cl ~ Apply (Apply (:$) _z_1627650106_a15G4) _z_1627650109_a15G7,
+                                      t_a16cm ~ Apply (Apply (:$) _z_1627650112_a15Ga) _z_1627650115_a15Gd,
+                                      t_a16cn ~ '[]) =>
+        Sing _z_1627650103_a15G1
+        -> Sing _z_1627650106_a15G4
+            -> Sing _z_1627650109_a15G7
+              -> Sing _z_1627650112_a15Ga
+                  -> Sing _z_1627650115_a15Gd
+                    -> Sing (Apply (Apply (Apply (Apply ZipWith3Sym0 _z_1627650103_a15G1) (Apply (Apply (:$) _z_1627650106_a15G4) _z_1627650109_a15G7)) (Apply (Apply (:$) _z_1627650112_a15Ga) _z_1627650115_a15Gd)) '[] :: [d_a15bA])
+      lambda_a16jJ
+        _z_1627650103_a16jK
+        _z_1627650106_a16jL
+        _z_1627650109_a16jM
+        _z_1627650112_a16jN
+        _z_1627650115_a16jO
+        = SNil
+    in
+      lambda_a16jJ
+        _s_z_1627650103
+        _s_z_1627650106
+        _s_z_1627650109
+        _s_z_1627650112
+        _s_z_1627650115
+sZipWith sF (SCons sX sXs) (SCons sY sYs)
+  = let
+      lambda_a16jP ::
+        forall f_a15Gt
+                x_a15Gu
+                xs_a15Gv
+                y_a15Gw
+                ys_a15Gx. (t_a16co ~ f_a15Gt,
+                          t_a16cp ~ Apply (Apply (:$) x_a15Gu) xs_a15Gv,
+                          t_a16cq ~ Apply (Apply (:$) y_a15Gw) ys_a15Gx) =>
+        Sing f_a15Gt
+        -> Sing x_a15Gu
+            -> Sing xs_a15Gv
+              -> Sing y_a15Gw
+                  -> Sing ys_a15Gx
+                    -> Sing (Apply (Apply (Apply ZipWithSym0 f_a15Gt) (Apply (Apply (:$) x_a15Gu) xs_a15Gv)) (Apply (Apply (:$) y_a15Gw) ys_a15Gx) :: [c_a15br])
+      lambda_a16jP f_a16jQ x_a16jR xs_a16jS y_a16jT ys_a16jU
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                (applySing (applySing f_a16jQ x_a16jR) y_a16jT))
+            (applySing
+                (applySing
+                  (applySing
+                      (singFun3 (Proxy :: Proxy ZipWithSym0) sZipWith) f_a16jQ)
+                  xs_a16jS)
+                ys_a16jU)
+    in lambda_a16jP sF sX sXs sY sYs
+sZipWith _s_z_1627650138 SNil SNil
+  = let
+      lambda_a16jV ::
+        forall _z_1627650138_a15GA. (t_a16co ~ _z_1627650138_a15GA,
+                                      t_a16cp ~ '[],
+                                      t_a16cq ~ '[]) =>
+        Sing _z_1627650138_a15GA
+        -> Sing (Apply (Apply (Apply ZipWithSym0 _z_1627650138_a15GA) '[]) '[] :: [c_a15br])
+      lambda_a16jV _z_1627650138_a16jW = SNil
+    in lambda_a16jV _s_z_1627650138
+sZipWith
+  _s_z_1627650141
+  (SCons _s_z_1627650144 _s_z_1627650147)
+  SNil
+  = let
+      lambda_a16jX ::
+        forall _z_1627650141_a15GD
+                _z_1627650144_a15GG
+                _z_1627650147_a15GJ. (t_a16co ~ _z_1627650141_a15GD,
+                                      t_a16cp ~ Apply (Apply (:$) _z_1627650144_a15GG) _z_1627650147_a15GJ,
+                                      t_a16cq ~ '[]) =>
+        Sing _z_1627650141_a15GD
+        -> Sing _z_1627650144_a15GG
+            -> Sing _z_1627650147_a15GJ
+              -> Sing (Apply (Apply (Apply ZipWithSym0 _z_1627650141_a15GD) (Apply (Apply (:$) _z_1627650144_a15GG) _z_1627650147_a15GJ)) '[] :: [c_a15br])
+      lambda_a16jX
+        _z_1627650141_a16jY
+        _z_1627650144_a16jZ
+        _z_1627650147_a16k0
+        = SNil
+    in lambda_a16jX _s_z_1627650141 _s_z_1627650144 _s_z_1627650147
+sZipWith
+  _s_z_1627650150
+  SNil
+  (SCons _s_z_1627650153 _s_z_1627650156)
+  = let
+      lambda_a16k1 ::
+        forall _z_1627650150_a15GM
+                _z_1627650153_a15GP
+                _z_1627650156_a15GS. (t_a16co ~ _z_1627650150_a15GM,
+                                      t_a16cp ~ '[],
+                                      t_a16cq ~ Apply (Apply (:$) _z_1627650153_a15GP) _z_1627650156_a15GS) =>
+        Sing _z_1627650150_a15GM
+        -> Sing _z_1627650153_a15GP
+            -> Sing _z_1627650156_a15GS
+              -> Sing (Apply (Apply (Apply ZipWithSym0 _z_1627650150_a15GM) '[]) (Apply (Apply (:$) _z_1627650153_a15GP) _z_1627650156_a15GS) :: [c_a15br])
+      lambda_a16k1
+        _z_1627650150_a16k2
+        _z_1627650153_a16k3
+        _z_1627650156_a16k4
+        = SNil
+    in lambda_a16k1 _s_z_1627650150 _s_z_1627650153 _s_z_1627650156
+sZip3 (SCons sA sAs) (SCons sB sBs) (SCons sC sCs)
+  = let
+      lambda_a16k5 ::
+        forall a_a15H8
+                as_a15H9
+                b_a15Ha
+                bs_a15Hb
+                c_a15Hc
+                cs_a15Hd. (t_a16cr ~ Apply (Apply (:$) a_a15H8) as_a15H9,
+                          t_a16cs ~ Apply (Apply (:$) b_a15Ha) bs_a15Hb,
+                          t_a16ct ~ Apply (Apply (:$) c_a15Hc) cs_a15Hd) =>
+        Sing a_a15H8
+        -> Sing as_a15H9
+            -> Sing b_a15Ha
+              -> Sing bs_a15Hb
+                  -> Sing c_a15Hc
+                    -> Sing cs_a15Hd
+                        -> Sing (Apply (Apply (Apply Zip3Sym0 (Apply (Apply (:$) a_a15H8) as_a15H9)) (Apply (Apply (:$) b_a15Ha) bs_a15Hb)) (Apply (Apply (:$) c_a15Hc) cs_a15Hd) :: [(a_a15bg,
+                                                                                                                                                                                      b_a15bh,
+                                                                                                                                                                                      c_a15bi)])
+      lambda_a16k5 a_a16k6 as_a16k7 b_a16k8 bs_a16k9 c_a16ka cs_a16kb
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                (applySing
+                  (applySing
+                      (applySing (singFun3 (Proxy :: Proxy Tuple3Sym0) STuple3) a_a16k6)
+                      b_a16k8)
+                  c_a16ka))
+            (applySing
+                (applySing
+                  (applySing (singFun3 (Proxy :: Proxy Zip3Sym0) sZip3) as_a16k7)
+                  bs_a16k9)
+                cs_a16kb)
+    in lambda_a16k5 sA sAs sB sBs sC sCs
+sZip3 SNil SNil SNil
+  = let
+      lambda_a16kc ::
+        (t_a16cr ~ '[], t_a16cs ~ '[], t_a16ct ~ '[]) =>
+        Sing (Apply (Apply (Apply Zip3Sym0 '[]) '[]) '[] :: [(a_a15bg,
+                                                              b_a15bh,
+                                                              c_a15bi)])
+      lambda_a16kc = SNil
+    in lambda_a16kc
+sZip3 SNil SNil (SCons _s_z_1627650180 _s_z_1627650183)
+  = let
+      lambda_a16kd ::
+        forall _z_1627650180_a15Hg _z_1627650183_a15Hj. (t_a16cr ~ '[],
+                                                          t_a16cs ~ '[],
+                                                          t_a16ct ~ Apply (Apply (:$) _z_1627650180_a15Hg) _z_1627650183_a15Hj) =>
+        Sing _z_1627650180_a15Hg
+        -> Sing _z_1627650183_a15Hj
+            -> Sing (Apply (Apply (Apply Zip3Sym0 '[]) '[]) (Apply (Apply (:$) _z_1627650180_a15Hg) _z_1627650183_a15Hj) :: [(a_a15bg,
+                                                                                                                              b_a15bh,
+                                                                                                                              c_a15bi)])
+      lambda_a16kd _z_1627650180_a16ke _z_1627650183_a16kf = SNil
+    in lambda_a16kd _s_z_1627650180 _s_z_1627650183
+sZip3 SNil (SCons _s_z_1627650186 _s_z_1627650189) SNil
+  = let
+      lambda_a16kg ::
+        forall _z_1627650186_a15Hm _z_1627650189_a15Hp. (t_a16cr ~ '[],
+                                                          t_a16cs ~ Apply (Apply (:$) _z_1627650186_a15Hm) _z_1627650189_a15Hp,
+                                                          t_a16ct ~ '[]) =>
+        Sing _z_1627650186_a15Hm
+        -> Sing _z_1627650189_a15Hp
+            -> Sing (Apply (Apply (Apply Zip3Sym0 '[]) (Apply (Apply (:$) _z_1627650186_a15Hm) _z_1627650189_a15Hp)) '[] :: [(a_a15bg,
+                                                                                                                              b_a15bh,
+                                                                                                                              c_a15bi)])
+      lambda_a16kg _z_1627650186_a16kh _z_1627650189_a16ki = SNil
+    in lambda_a16kg _s_z_1627650186 _s_z_1627650189
+sZip3
+  SNil
+  (SCons _s_z_1627650192 _s_z_1627650195)
+  (SCons _s_z_1627650198 _s_z_1627650201)
+  = let
+      lambda_a16kj ::
+        forall _z_1627650192_a15Hs
+                _z_1627650195_a15Hv
+                _z_1627650198_a15Hy
+                _z_1627650201_a15HB. (t_a16cr ~ '[],
+                                      t_a16cs ~ Apply (Apply (:$) _z_1627650192_a15Hs) _z_1627650195_a15Hv,
+                                      t_a16ct ~ Apply (Apply (:$) _z_1627650198_a15Hy) _z_1627650201_a15HB) =>
+        Sing _z_1627650192_a15Hs
+        -> Sing _z_1627650195_a15Hv
+            -> Sing _z_1627650198_a15Hy
+              -> Sing _z_1627650201_a15HB
+                  -> Sing (Apply (Apply (Apply Zip3Sym0 '[]) (Apply (Apply (:$) _z_1627650192_a15Hs) _z_1627650195_a15Hv)) (Apply (Apply (:$) _z_1627650198_a15Hy) _z_1627650201_a15HB) :: [(a_a15bg,
+                                                                                                                                                                                            b_a15bh,
+                                                                                                                                                                                            c_a15bi)])
+      lambda_a16kj
+        _z_1627650192_a16kk
+        _z_1627650195_a16kl
+        _z_1627650198_a16km
+        _z_1627650201_a16kn
+        = SNil
+    in
+      lambda_a16kj
+        _s_z_1627650192 _s_z_1627650195 _s_z_1627650198 _s_z_1627650201
+sZip3 (SCons _s_z_1627650204 _s_z_1627650207) SNil SNil
+  = let
+      lambda_a16ko ::
+        forall _z_1627650204_a15HE
+                _z_1627650207_a15HH. (t_a16cr ~ Apply (Apply (:$) _z_1627650204_a15HE) _z_1627650207_a15HH,
+                                      t_a16cs ~ '[],
+                                      t_a16ct ~ '[]) =>
+        Sing _z_1627650204_a15HE
+        -> Sing _z_1627650207_a15HH
+            -> Sing (Apply (Apply (Apply Zip3Sym0 (Apply (Apply (:$) _z_1627650204_a15HE) _z_1627650207_a15HH)) '[]) '[] :: [(a_a15bg,
+                                                                                                                              b_a15bh,
+                                                                                                                              c_a15bi)])
+      lambda_a16ko _z_1627650204_a16kp _z_1627650207_a16kq = SNil
+    in lambda_a16ko _s_z_1627650204 _s_z_1627650207
+sZip3
+  (SCons _s_z_1627650210 _s_z_1627650213)
+  SNil
+  (SCons _s_z_1627650216 _s_z_1627650219)
+  = let
+      lambda_a16kr ::
+        forall _z_1627650210_a15HK
+                _z_1627650213_a15HN
+                _z_1627650216_a15HQ
+                _z_1627650219_a15HT. (t_a16cr ~ Apply (Apply (:$) _z_1627650210_a15HK) _z_1627650213_a15HN,
+                                      t_a16cs ~ '[],
+                                      t_a16ct ~ Apply (Apply (:$) _z_1627650216_a15HQ) _z_1627650219_a15HT) =>
+        Sing _z_1627650210_a15HK
+        -> Sing _z_1627650213_a15HN
+            -> Sing _z_1627650216_a15HQ
+              -> Sing _z_1627650219_a15HT
+                  -> Sing (Apply (Apply (Apply Zip3Sym0 (Apply (Apply (:$) _z_1627650210_a15HK) _z_1627650213_a15HN)) '[]) (Apply (Apply (:$) _z_1627650216_a15HQ) _z_1627650219_a15HT) :: [(a_a15bg,
+                                                                                                                                                                                            b_a15bh,
+                                                                                                                                                                                            c_a15bi)])
+      lambda_a16kr
+        _z_1627650210_a16ks
+        _z_1627650213_a16kt
+        _z_1627650216_a16ku
+        _z_1627650219_a16kv
+        = SNil
+    in
+      lambda_a16kr
+        _s_z_1627650210 _s_z_1627650213 _s_z_1627650216 _s_z_1627650219
+sZip3
+  (SCons _s_z_1627650222 _s_z_1627650225)
+  (SCons _s_z_1627650228 _s_z_1627650231)
+  SNil
+  = let
+      lambda_a16kw ::
+        forall _z_1627650222_a15HW
+                _z_1627650225_a15HZ
+                _z_1627650228_a15I2
+                _z_1627650231_a15I5. (t_a16cr ~ Apply (Apply (:$) _z_1627650222_a15HW) _z_1627650225_a15HZ,
+                                      t_a16cs ~ Apply (Apply (:$) _z_1627650228_a15I2) _z_1627650231_a15I5,
+                                      t_a16ct ~ '[]) =>
+        Sing _z_1627650222_a15HW
+        -> Sing _z_1627650225_a15HZ
+            -> Sing _z_1627650228_a15I2
+              -> Sing _z_1627650231_a15I5
+                  -> Sing (Apply (Apply (Apply Zip3Sym0 (Apply (Apply (:$) _z_1627650222_a15HW) _z_1627650225_a15HZ)) (Apply (Apply (:$) _z_1627650228_a15I2) _z_1627650231_a15I5)) '[] :: [(a_a15bg,
+                                                                                                                                                                                            b_a15bh,
+                                                                                                                                                                                            c_a15bi)])
+      lambda_a16kw
+        _z_1627650222_a16kx
+        _z_1627650225_a16ky
+        _z_1627650228_a16kz
+        _z_1627650231_a16kA
+        = SNil
+    in
+      lambda_a16kw
+        _s_z_1627650222 _s_z_1627650225 _s_z_1627650228 _s_z_1627650231
+sZip (SCons sX sXs) (SCons sY sYs)
+  = let
+      lambda_a16kB ::
+        forall x_a15If
+                xs_a15Ig
+                y_a15Ih
+                ys_a15Ii. (t_a16cu ~ Apply (Apply (:$) x_a15If) xs_a15Ig,
+                          t_a16cv ~ Apply (Apply (:$) y_a15Ih) ys_a15Ii) =>
+        Sing x_a15If
+        -> Sing xs_a15Ig
+            -> Sing y_a15Ih
+              -> Sing ys_a15Ii
+                  -> Sing (Apply (Apply ZipSym0 (Apply (Apply (:$) x_a15If) xs_a15Ig)) (Apply (Apply (:$) y_a15Ih) ys_a15Ii) :: [(a_a15ba,
+                                                                                                                                  b_a15bb)])
+      lambda_a16kB x_a16kC xs_a16kD y_a16kE ys_a16kF
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                (applySing
+                  (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) x_a16kC)
+                  y_a16kE))
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy ZipSym0) sZip) xs_a16kD)
+                ys_a16kF)
+    in lambda_a16kB sX sXs sY sYs
+sZip SNil SNil
+  = let
+      lambda_a16kG ::
+        (t_a16cu ~ '[], t_a16cv ~ '[]) =>
+        Sing (Apply (Apply ZipSym0 '[]) '[] :: [(a_a15ba, b_a15bb)])
+      lambda_a16kG = SNil
+    in lambda_a16kG
+sZip (SCons _s_z_1627650247 _s_z_1627650250) SNil
+  = let
+      lambda_a16kH ::
+        forall _z_1627650247_a15Il
+                _z_1627650250_a15Io. (t_a16cu ~ Apply (Apply (:$) _z_1627650247_a15Il) _z_1627650250_a15Io,
+                                      t_a16cv ~ '[]) =>
+        Sing _z_1627650247_a15Il
+        -> Sing _z_1627650250_a15Io
+            -> Sing (Apply (Apply ZipSym0 (Apply (Apply (:$) _z_1627650247_a15Il) _z_1627650250_a15Io)) '[] :: [(a_a15ba,
+                                                                                                                b_a15bb)])
+      lambda_a16kH _z_1627650247_a16kI _z_1627650250_a16kJ = SNil
+    in lambda_a16kH _s_z_1627650247 _s_z_1627650250
+sZip SNil (SCons _s_z_1627650253 _s_z_1627650256)
+  = let
+      lambda_a16kK ::
+        forall _z_1627650253_a15Ir _z_1627650256_a15Iu. (t_a16cu ~ '[],
+                                                          t_a16cv ~ Apply (Apply (:$) _z_1627650253_a15Ir) _z_1627650256_a15Iu) =>
+        Sing _z_1627650253_a15Ir
+        -> Sing _z_1627650256_a15Iu
+            -> Sing (Apply (Apply ZipSym0 '[]) (Apply (Apply (:$) _z_1627650253_a15Ir) _z_1627650256_a15Iu) :: [(a_a15ba,
+                                                                                                                b_a15bb)])
+      lambda_a16kK _z_1627650253_a16kL _z_1627650256_a16kM = SNil
+    in lambda_a16kK _s_z_1627650253 _s_z_1627650256
+sFindIndices sP sXs
+  = let
+      lambda_a16kN ::
+        forall p_a15IE xs_a15IF. (t_a16cw ~ p_a15IE, t_a16cx ~ xs_a15IF) =>
+        Sing p_a15IE
+        -> Sing xs_a15IF
+            -> Sing (Apply (Apply FindIndicesSym0 p_a15IE) xs_a15IF :: [Nat])
+      lambda_a16kN p_a16kO xs_a16kP
+        = let
+            sBuildList ::
+              forall (t_a16kQ :: Nat) (t_a16kR :: [b_a15dT]).
+              Sing t_a16kQ
+              -> Sing t_a16kR
+                  -> Sing (Apply (Apply (Let1627650270BuildListSym2 p_a15IE xs_a15IF) t_a16kQ) t_a16kR :: [Nat])
+            sBuildList _s_z_1627650291 SNil
+              = let
+                  lambda_a16kS ::
+                    forall _z_1627650291_a15J3. (t_a16kQ ~ _z_1627650291_a15J3,
+                                                  t_a16kR ~ '[]) =>
+                    Sing _z_1627650291_a15J3
+                    -> Sing (Apply (Apply (Let1627650270BuildListSym2 p_a15IE xs_a15IF) _z_1627650291_a15J3) '[] :: [Nat])
+                  lambda_a16kS _z_1627650291_a16kT = SNil
+                in lambda_a16kS _s_z_1627650291
+            sBuildList sA (SCons _s_z_1627650295 sRest)
+              = let
+                  lambda_a16kU ::
+                    forall a_a15J4 _z_1627650295_a15J7 rest_a15J8. (t_a16kQ ~ a_a15J4,
+                                                                    t_a16kR ~ Apply (Apply (:$) _z_1627650295_a15J7) rest_a15J8) =>
+                    Sing a_a15J4
+                    -> Sing _z_1627650295_a15J7
+                        -> Sing rest_a15J8
+                          -> Sing (Apply (Apply (Let1627650270BuildListSym2 p_a15IE xs_a15IF) a_a15J4) (Apply (Apply (:$) _z_1627650295_a15J7) rest_a15J8) :: [Nat])
+                  lambda_a16kU a_a16kV _z_1627650295_a16kW rest_a16kX
+                    = applySing
+                        (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) a_a16kV)
+                        (applySing
+                            (applySing
+                              (singFun2
+                                  (Proxy :: Proxy (Let1627650270BuildListSym2 p_a15IE xs_a15IF))
+                                  sBuildList)
+                              (applySing
+                                  (applySing (singFun2 (Proxy :: Proxy (:+$)) (%:+)) a_a16kV)
+                                  (sFromInteger (sing :: Sing 1))))
+                            rest_a16kX)
+                in lambda_a16kU sA _s_z_1627650295 sRest
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy MapSym0) sMap)
+                  (singFun1 (Proxy :: Proxy SndSym0) sSnd))
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy FilterSym0) sFilter)
+                    (singFun1
+                        (Proxy ::
+                          Proxy (Apply (Apply Lambda_1627650299Sym0 p_a15IE) xs_a15IF))
+                        (\ sArg_1627648548
+                          -> let
+                                lambda_a16kY ::
+                                  forall arg_1627648548_a15Jb.
+                                  Sing arg_1627648548_a15Jb
+                                  -> Sing (Apply (Apply (Apply Lambda_1627650299Sym0 p_a15IE) xs_a15IF) arg_1627648548_a15Jb)
+                                lambda_a16kY arg_1627648548_a16kZ
+                                  = case arg_1627648548_a16kZ of {
+                                      STuple2 sX _s_z_1627650305
+                                        -> let
+                                            lambda_a16l0 ::
+                                              forall x_a15Je
+                                                      _z_1627650305_a15Jh. Apply (Apply Tuple2Sym0 x_a15Je) _z_1627650305_a15Jh ~ arg_1627648548_a15Jb =>
+                                              Sing x_a15Je
+                                              -> Sing _z_1627650305_a15Jh
+                                                  -> Sing (Case_1627650302_a15Jd p_a15IE xs_a15IF arg_1627648548_a15Jb (Apply (Apply Tuple2Sym0 x_a15Je) _z_1627650305_a15Jh))
+                                            lambda_a16l0 x_a16l1 _z_1627650305_a16l2
+                                              = applySing p_a16kO x_a16l1
+                                          in lambda_a16l0 sX _s_z_1627650305 } ::
+                                      Sing (Case_1627650302_a15Jd p_a15IE xs_a15IF arg_1627648548_a15Jb arg_1627648548_a15Jb)
+                              in lambda_a16kY sArg_1627648548)))
+                  (applySing
+                    (applySing (singFun2 (Proxy :: Proxy ZipSym0) sZip) xs_a16kP)
+                    (applySing
+                        (applySing
+                          (singFun2
+                              (Proxy :: Proxy (Let1627650270BuildListSym2 p_a15IE xs_a15IF))
+                              sBuildList)
+                          (sFromInteger (sing :: Sing 0)))
+                        xs_a16kP)))
+    in lambda_a16kN sP sXs
+sElemIndices sX sA_1627650331
+  = let
+      lambda_a16l3 ::
+        forall x_a15JH a_1627650331_a15JI. (t_a16cy ~ x_a15JH,
+                                            t_a16cz ~ a_1627650331_a15JI) =>
+        Sing x_a15JH
+        -> Sing a_1627650331_a15JI
+            -> Sing (Apply (Apply ElemIndicesSym0 x_a15JH) a_1627650331_a15JI :: [Nat])
+      lambda_a16l3 x_a16l4 a_1627650331_a16l5
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy FindIndicesSym0) sFindIndices)
+                (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) x_a16l4))
+            a_1627650331_a16l5
+    in lambda_a16l3 sX sA_1627650331
+sFindIndex sP sA_1627650344
+  = let
+      lambda_a16l6 ::
+        forall p_a15JU a_1627650344_a15JV. (t_a16cA ~ p_a15JU,
+                                            t_a16cB ~ a_1627650344_a15JV) =>
+        Sing p_a15JU
+        -> Sing a_1627650344_a15JV
+            -> Sing (Apply (Apply FindIndexSym0 p_a15JU) a_1627650344_a15JV :: Maybe Nat)
+      lambda_a16l6 p_a16l7 a_1627650344_a16l8
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy (:.$)) (%:.))
+                  (singFun1 (Proxy :: Proxy ListToMaybeSym0) sListToMaybe))
+                (applySing
+                  (singFun2 (Proxy :: Proxy FindIndicesSym0) sFindIndices) p_a16l7))
+            a_1627650344_a16l8
+    in lambda_a16l6 sP sA_1627650344
+sElemIndex sX sA_1627650357
+  = let
+      lambda_a16l9 ::
+        forall x_a15K7 a_1627650357_a15K8. (t_a16cC ~ x_a15K7,
+                                            t_a16cD ~ a_1627650357_a15K8) =>
+        Sing x_a15K7
+        -> Sing a_1627650357_a15K8
+            -> Sing (Apply (Apply ElemIndexSym0 x_a15K7) a_1627650357_a15K8 :: Maybe Nat)
+      lambda_a16l9 x_a16la a_1627650357_a16lb
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy FindIndexSym0) sFindIndex)
+                (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) x_a16la))
+            a_1627650357_a16lb
+    in lambda_a16l9 sX sA_1627650357
+sNotElem _s_z_1627650370 SNil
+  = let
+      lambda_a16lc ::
+        forall _z_1627650370_a15Kk. (t_a16cE ~ _z_1627650370_a15Kk,
+                                      t_a16cF ~ '[]) =>
+        Sing _z_1627650370_a15Kk
+        -> Sing (Apply (Apply NotElemSym0 _z_1627650370_a15Kk) '[] :: Bool)
+      lambda_a16lc _z_1627650370_a16ld = STrue
+    in lambda_a16lc _s_z_1627650370
+sNotElem sX (SCons sY sYs)
+  = let
+      lambda_a16le ::
+        forall x_a15Kl y_a15Km ys_a15Kn. (t_a16cE ~ x_a15Kl,
+                                          t_a16cF ~ Apply (Apply (:$) y_a15Km) ys_a15Kn) =>
+        Sing x_a15Kl
+        -> Sing y_a15Km
+            -> Sing ys_a15Kn
+              -> Sing (Apply (Apply NotElemSym0 x_a15Kl) (Apply (Apply (:$) y_a15Km) ys_a15Kn) :: Bool)
+      lambda_a16le x_a16lf y_a16lg ys_a16lh
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:&&$)) (%:&&))
+                (applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:/=$)) (%:/=)) x_a16lf)
+                  y_a16lg))
+            (applySing
+                (applySing
+                  (singFun2 (Proxy :: Proxy NotElemSym0) sNotElem) x_a16lf)
+                ys_a16lh)
+    in lambda_a16le sX sY sYs
+sElem _s_z_1627650385 SNil
+  = let
+      lambda_a16lm ::
+        forall _z_1627650385_a15Kz. (t_a16cG ~ _z_1627650385_a15Kz,
+                                      t_a16cH ~ '[]) =>
+        Sing _z_1627650385_a15Kz
+        -> Sing (Apply (Apply ElemSym0 _z_1627650385_a15Kz) '[] :: Bool)
+      lambda_a16lm _z_1627650385_a16ln = SFalse
+    in lambda_a16lm _s_z_1627650385
+sElem sX (SCons sY sYs)
+  = let
+      lambda_a16lo ::
+        forall x_a15KA y_a15KB ys_a15KC. (t_a16cG ~ x_a15KA,
+                                          t_a16cH ~ Apply (Apply (:$) y_a15KB) ys_a15KC) =>
+        Sing x_a15KA
+        -> Sing y_a15KB
+            -> Sing ys_a15KC
+              -> Sing (Apply (Apply ElemSym0 x_a15KA) (Apply (Apply (:$) y_a15KB) ys_a15KC) :: Bool)
+      lambda_a16lo x_a16lp y_a16lq ys_a16lr
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:||$)) (%:||))
+                (applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) x_a16lp)
+                  y_a16lq))
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy ElemSym0) sElem) x_a16lp)
+                ys_a16lr)
+    in lambda_a16lo sX sY sYs
+sNub sL
+  = let
+      lambda_a16ls ::
+        forall l_a15KH. t_a16cI ~ l_a15KH =>
+        Sing l_a15KH -> Sing (Apply NubSym0 l_a15KH :: [a_a156K])
+      lambda_a16ls l_a16lt
+        = let
+            sNub' ::
+              forall (t_a16lu :: [a_a156K]) (t_a16lv :: [a_a156K]).
+              Sing t_a16lu
+              -> Sing t_a16lv
+                  -> Sing (Apply (Apply (Let1627650396Nub'Sym1 l_a15KH) t_a16lu) t_a16lv :: [a_a156K])
+            sNub' SNil _s_z_1627650411
+              = let
+                  lambda_a16lw ::
+                    forall _z_1627650411_a15KZ. (t_a16lu ~ '[],
+                                                  t_a16lv ~ _z_1627650411_a15KZ) =>
+                    Sing _z_1627650411_a15KZ
+                    -> Sing (Apply (Apply (Let1627650396Nub'Sym1 l_a15KH) '[]) _z_1627650411_a15KZ :: [a_a156K])
+                  lambda_a16lw _z_1627650411_a16lx = SNil
+                in lambda_a16lw _s_z_1627650411
+            sNub' (SCons sX sXs) sLs
+              = let
+                  lambda_a16ly ::
+                    forall x_a15L0
+                            xs_a15L1
+                            ls_a15L2. (t_a16lu ~ Apply (Apply (:$) x_a15L0) xs_a15L1,
+                                      t_a16lv ~ ls_a15L2) =>
+                    Sing x_a15L0
+                    -> Sing xs_a15L1
+                        -> Sing ls_a15L2
+                          -> Sing (Apply (Apply (Let1627650396Nub'Sym1 l_a15KH) (Apply (Apply (:$) x_a15L0) xs_a15L1)) ls_a15L2 :: [a_a156K])
+                  lambda_a16ly x_a16lz xs_a16lA ls_a16lB
+                    = let
+                        sScrutinee_1627648588 ::
+                          Sing (Let1627650417Scrutinee_1627648588Sym4 l_a15KH x_a15L0 xs_a15L1 ls_a15L2)
+                        sScrutinee_1627648588
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy ElemSym0) sElem) x_a16lz)
+                              ls_a16lB
+                      in  case sScrutinee_1627648588 of {
+                            STrue
+                              -> let
+                                    lambda_a16lC ::
+                                      TrueSym0 ~ Let1627650417Scrutinee_1627648588Sym4 l_a15KH x_a15L0 xs_a15L1 ls_a15L2 =>
+                                      Sing (Case_1627650436_a15Ln l_a15KH x_a15L0 xs_a15L1 ls_a15L2 TrueSym0)
+                                    lambda_a16lC
+                                      = applySing
+                                          (applySing
+                                            (singFun2
+                                                (Proxy :: Proxy (Let1627650396Nub'Sym1 l_a15KH))
+                                                sNub')
+                                            xs_a16lA)
+                                          ls_a16lB
+                                  in lambda_a16lC;
+                            SFalse
+                              -> let
+                                    lambda_a16lD ::
+                                      FalseSym0 ~ Let1627650417Scrutinee_1627648588Sym4 l_a15KH x_a15L0 xs_a15L1 ls_a15L2 =>
+                                      Sing (Case_1627650436_a15Ln l_a15KH x_a15L0 xs_a15L1 ls_a15L2 FalseSym0)
+                                    lambda_a16lD
+                                      = applySing
+                                          (applySing
+                                            (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16lz)
+                                          (applySing
+                                            (applySing
+                                                (singFun2
+                                                  (Proxy ::
+                                                      Proxy (Let1627650396Nub'Sym1 l_a15KH))
+                                                  sNub')
+                                                xs_a16lA)
+                                            (applySing
+                                                (applySing
+                                                  (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                  x_a16lz)
+                                                ls_a16lB))
+                                  in lambda_a16lD } ::
+                            Sing (Case_1627650436_a15Ln l_a15KH x_a15L0 xs_a15L1 ls_a15L2 (Let1627650417Scrutinee_1627648588Sym4 l_a15KH x_a15L0 xs_a15L1 ls_a15L2))
+                in lambda_a16ly sX sXs sLs
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy (Let1627650396Nub'Sym1 l_a15KH)) sNub')
+                  l_a16lt)
+              SNil
+    in lambda_a16ls sL
+sIsPrefixOf SNil SNil
+  = let
+      lambda_a16lE ::
+        (t_a16cJ ~ '[], t_a16cK ~ '[]) =>
+        Sing (Apply (Apply IsPrefixOfSym0 '[]) '[] :: Bool)
+      lambda_a16lE = STrue
+    in lambda_a16lE
+sIsPrefixOf SNil (SCons _s_z_1627650448 _s_z_1627650451)
+  = let
+      lambda_a16lF ::
+        forall _z_1627650448_a15LA _z_1627650451_a15LD. (t_a16cJ ~ '[],
+                                                          t_a16cK ~ Apply (Apply (:$) _z_1627650448_a15LA) _z_1627650451_a15LD) =>
+        Sing _z_1627650448_a15LA
+        -> Sing _z_1627650451_a15LD
+            -> Sing (Apply (Apply IsPrefixOfSym0 '[]) (Apply (Apply (:$) _z_1627650448_a15LA) _z_1627650451_a15LD) :: Bool)
+      lambda_a16lF _z_1627650448_a16lG _z_1627650451_a16lH = STrue
+    in lambda_a16lF _s_z_1627650448 _s_z_1627650451
+sIsPrefixOf (SCons _s_z_1627650454 _s_z_1627650457) SNil
+  = let
+      lambda_a16lI ::
+        forall _z_1627650454_a15LG
+                _z_1627650457_a15LJ. (t_a16cJ ~ Apply (Apply (:$) _z_1627650454_a15LG) _z_1627650457_a15LJ,
+                                      t_a16cK ~ '[]) =>
+        Sing _z_1627650454_a15LG
+        -> Sing _z_1627650457_a15LJ
+            -> Sing (Apply (Apply IsPrefixOfSym0 (Apply (Apply (:$) _z_1627650454_a15LG) _z_1627650457_a15LJ)) '[] :: Bool)
+      lambda_a16lI _z_1627650454_a16lJ _z_1627650457_a16lK = SFalse
+    in lambda_a16lI _s_z_1627650454 _s_z_1627650457
+sIsPrefixOf (SCons sX sXs) (SCons sY sYs)
+  = let
+      lambda_a16lL ::
+        forall x_a15LK
+                xs_a15LL
+                y_a15LM
+                ys_a15LN. (t_a16cJ ~ Apply (Apply (:$) x_a15LK) xs_a15LL,
+                          t_a16cK ~ Apply (Apply (:$) y_a15LM) ys_a15LN) =>
+        Sing x_a15LK
+        -> Sing xs_a15LL
+            -> Sing y_a15LM
+              -> Sing ys_a15LN
+                  -> Sing (Apply (Apply IsPrefixOfSym0 (Apply (Apply (:$) x_a15LK) xs_a15LL)) (Apply (Apply (:$) y_a15LM) ys_a15LN) :: Bool)
+      lambda_a16lL x_a16lM xs_a16lN y_a16lO ys_a16lP
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:&&$)) (%:&&))
+                (applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) x_a16lM)
+                  y_a16lO))
+            (applySing
+                (applySing
+                  (singFun2 (Proxy :: Proxy IsPrefixOfSym0) sIsPrefixOf) xs_a16lN)
+                ys_a16lP)
+    in lambda_a16lL sX sXs sY sYs
+sTails sXs
+  = let
+      lambda_a16lQ ::
+        forall xs_a15LS. t_a16cL ~ xs_a15LS =>
+        Sing xs_a15LS -> Sing (Apply TailsSym0 xs_a15LS :: [[a_a15aO]])
+      lambda_a16lQ xs_a16lR
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) xs_a16lR)
+            (case xs_a16lR of {
+                SNil
+                  -> let
+                      lambda_a16lS ::
+                        '[] ~ xs_a15LS => Sing (Case_1627650469_a15LU xs_a15LS '[])
+                      lambda_a16lS = SNil
+                    in lambda_a16lS;
+                SCons _s_z_1627650471 sXs'
+                  -> let
+                      lambda_a16lT ::
+                        forall _z_1627650471_a15LX
+                                xs'_a15LY. Apply (Apply (:$) _z_1627650471_a15LX) xs'_a15LY ~ xs_a15LS =>
+                        Sing _z_1627650471_a15LX
+                        -> Sing xs'_a15LY
+                            -> Sing (Case_1627650469_a15LU xs_a15LS (Apply (Apply (:$) _z_1627650471_a15LX) xs'_a15LY))
+                      lambda_a16lT _z_1627650471_a16lU xs'_a16lV
+                        = applySing (singFun1 (Proxy :: Proxy TailsSym0) sTails) xs'_a16lV
+                    in lambda_a16lT _s_z_1627650471 sXs' } ::
+                Sing (Case_1627650469_a15LU xs_a15LS xs_a15LS))
+    in lambda_a16lQ sXs
+sIsInfixOf sNeedle sHaystack
+  = let
+      lambda_a16lW ::
+        forall needle_a15M9 haystack_a15Ma. (t_a16cM ~ needle_a15M9,
+                                              t_a16cN ~ haystack_a15Ma) =>
+        Sing needle_a15M9
+        -> Sing haystack_a15Ma
+            -> Sing (Apply (Apply IsInfixOfSym0 needle_a15M9) haystack_a15Ma :: Bool)
+      lambda_a16lW needle_a16lX haystack_a16lY
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy Any_Sym0) sAny_)
+                (applySing
+                  (singFun2 (Proxy :: Proxy IsPrefixOfSym0) sIsPrefixOf)
+                  needle_a16lX))
+            (applySing
+                (singFun1 (Proxy :: Proxy TailsSym0) sTails) haystack_a16lY)
+    in lambda_a16lW sNeedle sHaystack
+sInits sXs
+  = let
+      lambda_a16lZ ::
+        forall xs_a15Mf. t_a16cO ~ xs_a15Mf =>
+        Sing xs_a15Mf -> Sing (Apply InitsSym0 xs_a15Mf :: [[a_a15aK]])
+      lambda_a16lZ xs_a16m0
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) SNil)
+            (case xs_a16m0 of {
+                SNil
+                  -> let
+                      lambda_a16m1 ::
+                        '[] ~ xs_a15Mf => Sing (Case_1627650492_a15Mh xs_a15Mf '[])
+                      lambda_a16m1 = SNil
+                    in lambda_a16m1;
+                SCons sX sXs'
+                  -> let
+                      lambda_a16m2 ::
+                        forall x_a15Mi
+                                xs'_a15Mj. Apply (Apply (:$) x_a15Mi) xs'_a15Mj ~ xs_a15Mf =>
+                        Sing x_a15Mi
+                        -> Sing xs'_a15Mj
+                            -> Sing (Case_1627650492_a15Mh xs_a15Mf (Apply (Apply (:$) x_a15Mi) xs'_a15Mj))
+                      lambda_a16m2 x_a16m3 xs'_a16m4
+                        = applySing
+                            (applySing
+                                (singFun2 (Proxy :: Proxy MapSym0) sMap)
+                                (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16m3))
+                            (applySing (singFun1 (Proxy :: Proxy InitsSym0) sInits) xs'_a16m4)
+                    in lambda_a16m2 sX sXs' } ::
+                Sing (Case_1627650492_a15Mh xs_a15Mf xs_a15Mf))
+    in lambda_a16lZ sXs
+sUnfoldr sF sB
+  = let
+      lambda_a16m5 ::
+        forall f_a15Mu b_a15Mv. (t_a16cP ~ f_a15Mu, t_a16cQ ~ b_a15Mv) =>
+        Sing f_a15Mu
+        -> Sing b_a15Mv
+            -> Sing (Apply (Apply UnfoldrSym0 f_a15Mu) b_a15Mv :: [a_a15aF])
+      lambda_a16m5 f_a16m6 b_a16m7
+        = let
+            sScrutinee_1627648504 ::
+              Sing (Let1627650508Scrutinee_1627648504Sym2 f_a15Mu b_a15Mv)
+            sScrutinee_1627648504 = applySing f_a16m6 b_a16m7
+          in  case sScrutinee_1627648504 of {
+                SJust (STuple2 sA sNew_b)
+                  -> let
+                        lambda_a16m8 ::
+                          forall a_a15MG
+                                new_b_a15MH. Apply JustSym0 (Apply (Apply Tuple2Sym0 a_a15MG) new_b_a15MH) ~ Let1627650508Scrutinee_1627648504Sym2 f_a15Mu b_a15Mv =>
+                          Sing a_a15MG
+                          -> Sing new_b_a15MH
+                            -> Sing (Case_1627650516_a15MF f_a15Mu b_a15Mv (Apply JustSym0 (Apply (Apply Tuple2Sym0 a_a15MG) new_b_a15MH)))
+                        lambda_a16m8 a_a16m9 new_b_a16ma
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) a_a16m9)
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy UnfoldrSym0) sUnfoldr) f_a16m6)
+                                new_b_a16ma)
+                      in lambda_a16m8 sA sNew_b;
+                SNothing
+                  -> let
+                        lambda_a16mb ::
+                          NothingSym0 ~ Let1627650508Scrutinee_1627648504Sym2 f_a15Mu b_a15Mv =>
+                          Sing (Case_1627650516_a15MF f_a15Mu b_a15Mv NothingSym0)
+                        lambda_a16mb = SNil
+                      in lambda_a16mb } ::
+                Sing (Case_1627650516_a15MF f_a15Mu b_a15Mv (Let1627650508Scrutinee_1627648504Sym2 f_a15Mu b_a15Mv))
+    in lambda_a16m5 sF sB
+sMapAccumR _s_z_1627650536 sS SNil
+  = let
+      lambda_a16mc ::
+        forall _z_1627650536_a15N0 s_a15N1. (t_a16cR ~ _z_1627650536_a15N0,
+                                              t_a16cS ~ s_a15N1,
+                                              t_a16cT ~ '[]) =>
+        Sing _z_1627650536_a15N0
+        -> Sing s_a15N1
+            -> Sing (Apply (Apply (Apply MapAccumRSym0 _z_1627650536_a15N0) s_a15N1) '[] :: (acc_a15as,
+                                                                                            [y_a15au]))
+      lambda_a16mc _z_1627650536_a16md s_a16me
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) s_a16me)
+            SNil
+    in lambda_a16mc _s_z_1627650536 sS
+sMapAccumR sF sS (SCons sX sXs)
+  = let
+      lambda_a16mf ::
+        forall f_a15N2 s_a15N3 x_a15N4 xs_a15N5. (t_a16cR ~ f_a15N2,
+                                                  t_a16cS ~ s_a15N3,
+                                                  t_a16cT ~ Apply (Apply (:$) x_a15N4) xs_a15N5) =>
+        Sing f_a15N2
+        -> Sing s_a15N3
+            -> Sing x_a15N4
+              -> Sing xs_a15N5
+                  -> Sing (Apply (Apply (Apply MapAccumRSym0 f_a15N2) s_a15N3) (Apply (Apply (:$) x_a15N4) xs_a15N5) :: (acc_a15as,
+                                                                                                                        [y_a15au]))
+      lambda_a16mf f_a16mg s_a16mh x_a16mi xs_a16mj
+        = let
+            sS' :: Sing (Let1627650544S'Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+            sYs :: Sing (Let1627650544YsSym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+            sS'' ::
+              Sing (Let1627650544S''Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+            sY :: Sing (Let1627650544YSym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+            sX_1627650545 ::
+              Sing (Let1627650544X_1627650545Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+            sX_1627650551 ::
+              Sing (Let1627650544X_1627650551Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5)
+            sS'
+              = case sX_1627650551 of {
+                  STuple2 sY_1627650553 _s_z_1627650560
+                    -> let
+                          lambda_a16mk ::
+                            forall y_1627650553_a15Nl
+                                  _z_1627650560_a15No. Apply (Apply Tuple2Sym0 y_1627650553_a15Nl) _z_1627650560_a15No ~ Let1627650544X_1627650551Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 =>
+                            Sing y_1627650553_a15Nl
+                            -> Sing _z_1627650560_a15No
+                              -> Sing (Case_1627650557_a15Nk f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Apply (Apply Tuple2Sym0 y_1627650553_a15Nl) _z_1627650560_a15No))
+                          lambda_a16mk y_1627650553_a16ml _z_1627650560_a16mm
+                            = y_1627650553_a16ml
+                        in lambda_a16mk sY_1627650553 _s_z_1627650560 } ::
+                  Sing (Case_1627650557_a15Nk f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Let1627650544X_1627650551Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5))
+            sYs
+              = case sX_1627650551 of {
+                  STuple2 _s_z_1627650584 sY_1627650555
+                    -> let
+                          lambda_a16mn ::
+                            forall _z_1627650584_a15NM
+                                  y_1627650555_a15NN. Apply (Apply Tuple2Sym0 _z_1627650584_a15NM) y_1627650555_a15NN ~ Let1627650544X_1627650551Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 =>
+                            Sing _z_1627650584_a15NM
+                            -> Sing y_1627650555_a15NN
+                              -> Sing (Case_1627650582_a15NJ f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Apply (Apply Tuple2Sym0 _z_1627650584_a15NM) y_1627650555_a15NN))
+                          lambda_a16mn _z_1627650584_a16mo y_1627650555_a16mp
+                            = y_1627650555_a16mp
+                        in lambda_a16mn _s_z_1627650584 sY_1627650555 } ::
+                  Sing (Case_1627650582_a15NJ f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Let1627650544X_1627650551Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5))
+            sS''
+              = case sX_1627650545 of {
+                  STuple2 sY_1627650547 _s_z_1627650610
+                    -> let
+                          lambda_a16mq ::
+                            forall y_1627650547_a15O9
+                                  _z_1627650610_a15Oc. Apply (Apply Tuple2Sym0 y_1627650547_a15O9) _z_1627650610_a15Oc ~ Let1627650544X_1627650545Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 =>
+                            Sing y_1627650547_a15O9
+                            -> Sing _z_1627650610_a15Oc
+                              -> Sing (Case_1627650607_a15O8 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Apply (Apply Tuple2Sym0 y_1627650547_a15O9) _z_1627650610_a15Oc))
+                          lambda_a16mq y_1627650547_a16mr _z_1627650610_a16ms
+                            = y_1627650547_a16mr
+                        in lambda_a16mq sY_1627650547 _s_z_1627650610 } ::
+                  Sing (Case_1627650607_a15O8 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Let1627650544X_1627650545Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5))
+            sY
+              = case sX_1627650545 of {
+                  STuple2 _s_z_1627650634 sY_1627650549
+                    -> let
+                          lambda_a16mt ::
+                            forall _z_1627650634_a15OA
+                                  y_1627650549_a15OB. Apply (Apply Tuple2Sym0 _z_1627650634_a15OA) y_1627650549_a15OB ~ Let1627650544X_1627650545Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5 =>
+                            Sing _z_1627650634_a15OA
+                            -> Sing y_1627650549_a15OB
+                              -> Sing (Case_1627650632_a15Ox f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Apply (Apply Tuple2Sym0 _z_1627650634_a15OA) y_1627650549_a15OB))
+                          lambda_a16mt _z_1627650634_a16mu y_1627650549_a16mv
+                            = y_1627650549_a16mv
+                        in lambda_a16mt _s_z_1627650634 sY_1627650549 } ::
+                  Sing (Case_1627650632_a15Ox f_a15N2 s_a15N3 x_a15N4 xs_a15N5 (Let1627650544X_1627650545Sym4 f_a15N2 s_a15N3 x_a15N4 xs_a15N5))
+            sX_1627650545 = applySing (applySing f_a16mg sS') x_a16mi
+            sX_1627650551
+              = applySing
+                  (applySing
+                      (applySing
+                        (singFun3 (Proxy :: Proxy MapAccumRSym0) sMapAccumR) f_a16mg)
+                      s_a16mh)
+                  xs_a16mj
+          in
+            applySing
+              (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) sS'')
+              (applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) sY) sYs)
+    in lambda_a16mf sF sS sX sXs
+sMapAccumL _s_z_1627650708 sS SNil
+  = let
+      lambda_a16mw ::
+        forall _z_1627650708_a15PM s_a15PN. (t_a16cU ~ _z_1627650708_a15PM,
+                                              t_a16cV ~ s_a15PN,
+                                              t_a16cW ~ '[]) =>
+        Sing _z_1627650708_a15PM
+        -> Sing s_a15PN
+            -> Sing (Apply (Apply (Apply MapAccumLSym0 _z_1627650708_a15PM) s_a15PN) '[] :: (acc_a15ag,
+                                                                                            [y_a15ai]))
+      lambda_a16mw _z_1627650708_a16mx s_a16my
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) s_a16my)
+            SNil
+    in lambda_a16mw _s_z_1627650708 sS
+sMapAccumL sF sS (SCons sX sXs)
+  = let
+      lambda_a16mz ::
+        forall f_a15PO s_a15PP x_a15PQ xs_a15PR. (t_a16cU ~ f_a15PO,
+                                                  t_a16cV ~ s_a15PP,
+                                                  t_a16cW ~ Apply (Apply (:$) x_a15PQ) xs_a15PR) =>
+        Sing f_a15PO
+        -> Sing s_a15PP
+            -> Sing x_a15PQ
+              -> Sing xs_a15PR
+                  -> Sing (Apply (Apply (Apply MapAccumLSym0 f_a15PO) s_a15PP) (Apply (Apply (:$) x_a15PQ) xs_a15PR) :: (acc_a15ag,
+                                                                                                                        [y_a15ai]))
+      lambda_a16mz f_a16mA s_a16mB x_a16mC xs_a16mD
+        = let
+            sS' :: Sing (Let1627650716S'Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+            sY :: Sing (Let1627650716YSym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+            sS'' ::
+              Sing (Let1627650716S''Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+            sYs :: Sing (Let1627650716YsSym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+            sX_1627650717 ::
+              Sing (Let1627650716X_1627650717Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+            sX_1627650723 ::
+              Sing (Let1627650716X_1627650723Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR)
+            sS'
+              = case sX_1627650717 of {
+                  STuple2 sY_1627650719 _s_z_1627650732
+                    -> let
+                          lambda_a16mE ::
+                            forall y_1627650719_a15Q7
+                                  _z_1627650732_a15Qa. Apply (Apply Tuple2Sym0 y_1627650719_a15Q7) _z_1627650732_a15Qa ~ Let1627650716X_1627650717Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR =>
+                            Sing y_1627650719_a15Q7
+                            -> Sing _z_1627650732_a15Qa
+                              -> Sing (Case_1627650729_a15Q6 f_a15PO s_a15PP x_a15PQ xs_a15PR (Apply (Apply Tuple2Sym0 y_1627650719_a15Q7) _z_1627650732_a15Qa))
+                          lambda_a16mE y_1627650719_a16mF _z_1627650732_a16mG
+                            = y_1627650719_a16mF
+                        in lambda_a16mE sY_1627650719 _s_z_1627650732 } ::
+                  Sing (Case_1627650729_a15Q6 f_a15PO s_a15PP x_a15PQ xs_a15PR (Let1627650716X_1627650717Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR))
+            sY
+              = case sX_1627650717 of {
+                  STuple2 _s_z_1627650756 sY_1627650721
+                    -> let
+                          lambda_a16mH ::
+                            forall _z_1627650756_a15Qy
+                                  y_1627650721_a15Qz. Apply (Apply Tuple2Sym0 _z_1627650756_a15Qy) y_1627650721_a15Qz ~ Let1627650716X_1627650717Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR =>
+                            Sing _z_1627650756_a15Qy
+                            -> Sing y_1627650721_a15Qz
+                              -> Sing (Case_1627650754_a15Qv f_a15PO s_a15PP x_a15PQ xs_a15PR (Apply (Apply Tuple2Sym0 _z_1627650756_a15Qy) y_1627650721_a15Qz))
+                          lambda_a16mH _z_1627650756_a16mI y_1627650721_a16mJ
+                            = y_1627650721_a16mJ
+                        in lambda_a16mH _s_z_1627650756 sY_1627650721 } ::
+                  Sing (Case_1627650754_a15Qv f_a15PO s_a15PP x_a15PQ xs_a15PR (Let1627650716X_1627650717Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR))
+            sS''
+              = case sX_1627650723 of {
+                  STuple2 sY_1627650725 _s_z_1627650782
+                    -> let
+                          lambda_a16mK ::
+                            forall y_1627650725_a15QV
+                                  _z_1627650782_a15QY. Apply (Apply Tuple2Sym0 y_1627650725_a15QV) _z_1627650782_a15QY ~ Let1627650716X_1627650723Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR =>
+                            Sing y_1627650725_a15QV
+                            -> Sing _z_1627650782_a15QY
+                              -> Sing (Case_1627650779_a15QU f_a15PO s_a15PP x_a15PQ xs_a15PR (Apply (Apply Tuple2Sym0 y_1627650725_a15QV) _z_1627650782_a15QY))
+                          lambda_a16mK y_1627650725_a16mL _z_1627650782_a16mM
+                            = y_1627650725_a16mL
+                        in lambda_a16mK sY_1627650725 _s_z_1627650782 } ::
+                  Sing (Case_1627650779_a15QU f_a15PO s_a15PP x_a15PQ xs_a15PR (Let1627650716X_1627650723Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR))
+            sYs
+              = case sX_1627650723 of {
+                  STuple2 _s_z_1627650806 sY_1627650727
+                    -> let
+                          lambda_a16mN ::
+                            forall _z_1627650806_a15Rm
+                                  y_1627650727_a15Rn. Apply (Apply Tuple2Sym0 _z_1627650806_a15Rm) y_1627650727_a15Rn ~ Let1627650716X_1627650723Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR =>
+                            Sing _z_1627650806_a15Rm
+                            -> Sing y_1627650727_a15Rn
+                              -> Sing (Case_1627650804_a15Rj f_a15PO s_a15PP x_a15PQ xs_a15PR (Apply (Apply Tuple2Sym0 _z_1627650806_a15Rm) y_1627650727_a15Rn))
+                          lambda_a16mN _z_1627650806_a16mO y_1627650727_a16mP
+                            = y_1627650727_a16mP
+                        in lambda_a16mN _s_z_1627650806 sY_1627650727 } ::
+                  Sing (Case_1627650804_a15Rj f_a15PO s_a15PP x_a15PQ xs_a15PR (Let1627650716X_1627650723Sym4 f_a15PO s_a15PP x_a15PQ xs_a15PR))
+            sX_1627650717 = applySing (applySing f_a16mA s_a16mB) x_a16mC
+            sX_1627650723
+              = applySing
+                  (applySing
+                      (applySing
+                        (singFun3 (Proxy :: Proxy MapAccumLSym0) sMapAccumL) f_a16mA)
+                      sS')
+                  xs_a16mD
+          in
+            applySing
+              (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) sS'')
+              (applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) sY) sYs)
+    in lambda_a16mz sF sS sX sXs
+sScanr1 _s_z_1627650874 SNil
+  = let
+      lambda_a16mQ ::
+        forall _z_1627650874_a15Ss. (t_a16cX ~ _z_1627650874_a15Ss,
+                                      t_a16cY ~ '[]) =>
+        Sing _z_1627650874_a15Ss
+        -> Sing (Apply (Apply Scanr1Sym0 _z_1627650874_a15Ss) '[] :: [a_a15a9])
+      lambda_a16mQ _z_1627650874_a16mR = SNil
+    in lambda_a16mQ _s_z_1627650874
+sScanr1 _s_z_1627650877 (SCons sX SNil)
+  = let
+      lambda_a16mS ::
+        forall _z_1627650877_a15Sv x_a15Sw. (t_a16cX ~ _z_1627650877_a15Sv,
+                                              t_a16cY ~ Apply (Apply (:$) x_a15Sw) '[]) =>
+        Sing _z_1627650877_a15Sv
+        -> Sing x_a15Sw
+            -> Sing (Apply (Apply Scanr1Sym0 _z_1627650877_a15Sv) (Apply (Apply (:$) x_a15Sw) '[]) :: [a_a15a9])
+      lambda_a16mS _z_1627650877_a16mT x_a16mU
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16mU) SNil
+    in lambda_a16mS _s_z_1627650877 sX
+sScanr1 sF (SCons sX (SCons sWild_1627648500 sWild_1627648502))
+  = let
+      lambda_a16mV ::
+        forall f_a15Sx
+                x_a15Sy
+                wild_1627648500_a15Sz
+                wild_1627648502_a15SA. (t_a16cX ~ f_a15Sx,
+                                        t_a16cY ~ Apply (Apply (:$) x_a15Sy) (Apply (Apply (:$) wild_1627648500_a15Sz) wild_1627648502_a15SA)) =>
+        Sing f_a15Sx
+        -> Sing x_a15Sy
+            -> Sing wild_1627648500_a15Sz
+              -> Sing wild_1627648502_a15SA
+                  -> Sing (Apply (Apply Scanr1Sym0 f_a15Sx) (Apply (Apply (:$) x_a15Sy) (Apply (Apply (:$) wild_1627648500_a15Sz) wild_1627648502_a15SA)) :: [a_a15a9])
+      lambda_a16mV
+        f_a16mW
+        x_a16mX
+        wild_1627648500_a16mY
+        wild_1627648502_a16mZ
+        = let
+            sXs ::
+              Sing (Let1627650885XsSym4 f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA)
+            sXs
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy (:$)) SCons) wild_1627648500_a16mY)
+                  wild_1627648502_a16mZ in
+          let
+            sScrutinee_1627648498 ::
+              Sing (Let1627650904Scrutinee_1627648498Sym4 f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA)
+            sScrutinee_1627648498
+              = applySing
+                  (applySing (singFun2 (Proxy :: Proxy Scanr1Sym0) sScanr1) f_a16mW)
+                  sXs
+          in  case sScrutinee_1627648498 of {
+                SNil
+                  -> let
+                        lambda_a16n0 ::
+                          '[] ~ Let1627650904Scrutinee_1627648498Sym4 f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA =>
+                          Sing (Case_1627650923_a15Te f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA '[])
+                        lambda_a16n0
+                          = sError (sing :: Sing "Data.Singletons.List.scanr1: empty list")
+                      in lambda_a16n0;
+                SCons sQ sQs
+                  -> let
+                        lambda_a16n1 ::
+                          forall q_a15Tf
+                                qs_a15Tg. Apply (Apply (:$) q_a15Tf) qs_a15Tg ~ Let1627650904Scrutinee_1627648498Sym4 f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA =>
+                          Sing q_a15Tf
+                          -> Sing qs_a15Tg
+                            -> Sing (Case_1627650923_a15Te f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA (Apply (Apply (:$) q_a15Tf) qs_a15Tg))
+                        lambda_a16n1 q_a16n2 qs_a16n3
+                          = applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                (applySing (applySing f_a16mW x_a16mX) q_a16n2))
+                              (applySing
+                                (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) q_a16n2)
+                                qs_a16n3)
+                      in lambda_a16n1 sQ sQs } ::
+                Sing (Case_1627650923_a15Te f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA (Let1627650904Scrutinee_1627648498Sym4 f_a15Sx x_a15Sy wild_1627648500_a15Sz wild_1627648502_a15SA))
+    in lambda_a16mV sF sX sWild_1627648500 sWild_1627648502
+sScanr _s_z_1627650943 sQ0 SNil
+  = let
+      lambda_a16n4 ::
+        forall _z_1627650943_a15Tz
+                q0_a15TA. (t_a16cZ ~ _z_1627650943_a15Tz,
+                          t_a16d0 ~ q0_a15TA,
+                          t_a16d1 ~ '[]) =>
+        Sing _z_1627650943_a15Tz
+        -> Sing q0_a15TA
+            -> Sing (Apply (Apply (Apply ScanrSym0 _z_1627650943_a15Tz) q0_a15TA) '[] :: [b_a15a1])
+      lambda_a16n4 _z_1627650943_a16n5 q0_a16n6
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) q0_a16n6) SNil
+    in lambda_a16n4 _s_z_1627650943 sQ0
+sScanr sF sQ0 (SCons sX sXs)
+  = let
+      lambda_a16n7 ::
+        forall f_a15TB q0_a15TC x_a15TD xs_a15TE. (t_a16cZ ~ f_a15TB,
+                                                    t_a16d0 ~ q0_a15TC,
+                                                    t_a16d1 ~ Apply (Apply (:$) x_a15TD) xs_a15TE) =>
+        Sing f_a15TB
+        -> Sing q0_a15TC
+            -> Sing x_a15TD
+              -> Sing xs_a15TE
+                  -> Sing (Apply (Apply (Apply ScanrSym0 f_a15TB) q0_a15TC) (Apply (Apply (:$) x_a15TD) xs_a15TE) :: [b_a15a1])
+      lambda_a16n7 f_a16n8 q0_a16n9 x_a16na xs_a16nb
+        = let
+            sScrutinee_1627648496 ::
+              Sing (Let1627650951Scrutinee_1627648496Sym4 f_a15TB q0_a15TC x_a15TD xs_a15TE)
+            sScrutinee_1627648496
+              = applySing
+                  (applySing
+                      (applySing (singFun3 (Proxy :: Proxy ScanrSym0) sScanr) f_a16n8)
+                      q0_a16n9)
+                  xs_a16nb
+          in  case sScrutinee_1627648496 of {
+                SNil
+                  -> let
+                        lambda_a16nc ::
+                          '[] ~ Let1627650951Scrutinee_1627648496Sym4 f_a15TB q0_a15TC x_a15TD xs_a15TE =>
+                          Sing (Case_1627650970_a15TZ f_a15TB q0_a15TC x_a15TD xs_a15TE '[])
+                        lambda_a16nc
+                          = sError (sing :: Sing "Data.Singletons.List.scanr: empty list")
+                      in lambda_a16nc;
+                SCons sQ sQs
+                  -> let
+                        lambda_a16nd ::
+                          forall q_a15U0
+                                qs_a15U1. Apply (Apply (:$) q_a15U0) qs_a15U1 ~ Let1627650951Scrutinee_1627648496Sym4 f_a15TB q0_a15TC x_a15TD xs_a15TE =>
+                          Sing q_a15U0
+                          -> Sing qs_a15U1
+                            -> Sing (Case_1627650970_a15TZ f_a15TB q0_a15TC x_a15TD xs_a15TE (Apply (Apply (:$) q_a15U0) qs_a15U1))
+                        lambda_a16nd q_a16ne qs_a16nf
+                          = applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                (applySing (applySing f_a16n8 x_a16na) q_a16ne))
+                              (applySing
+                                (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) q_a16ne)
+                                qs_a16nf)
+                      in lambda_a16nd sQ sQs } ::
+                Sing (Case_1627650970_a15TZ f_a15TB q0_a15TC x_a15TD xs_a15TE (Let1627650951Scrutinee_1627648496Sym4 f_a15TB q0_a15TC x_a15TD xs_a15TE))
+    in lambda_a16n7 sF sQ0 sX sXs
+sScanl sF sQ sLs
+  = let
+      lambda_a16ng ::
+        forall f_a15Ui q_a15Uj ls_a15Uk. (t_a16d2 ~ f_a15Ui,
+                                          t_a16d3 ~ q_a15Uj,
+                                          t_a16d4 ~ ls_a15Uk) =>
+        Sing f_a15Ui
+        -> Sing q_a15Uj
+            -> Sing ls_a15Uk
+              -> Sing (Apply (Apply (Apply ScanlSym0 f_a15Ui) q_a15Uj) ls_a15Uk :: [b_a159P])
+      lambda_a16ng f_a16nh q_a16ni ls_a16nj
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) q_a16ni)
+            (case ls_a16nj of {
+                SNil
+                  -> let
+                      lambda_a16nk ::
+                        '[] ~ ls_a15Uk =>
+                        Sing (Case_1627650993_a15Um f_a15Ui q_a15Uj ls_a15Uk '[])
+                      lambda_a16nk = SNil
+                    in lambda_a16nk;
+                SCons sX sXs
+                  -> let
+                      lambda_a16nl ::
+                        forall x_a15Un
+                                xs_a15Uo. Apply (Apply (:$) x_a15Un) xs_a15Uo ~ ls_a15Uk =>
+                        Sing x_a15Un
+                        -> Sing xs_a15Uo
+                            -> Sing (Case_1627650993_a15Um f_a15Ui q_a15Uj ls_a15Uk (Apply (Apply (:$) x_a15Un) xs_a15Uo))
+                      lambda_a16nl x_a16nm xs_a16nn
+                        = applySing
+                            (applySing
+                                (applySing (singFun3 (Proxy :: Proxy ScanlSym0) sScanl) f_a16nh)
+                                (applySing (applySing f_a16nh q_a16ni) x_a16nm))
+                            xs_a16nn
+                    in lambda_a16nl sX sXs } ::
+                Sing (Case_1627650993_a15Um f_a15Ui q_a15Uj ls_a15Uk ls_a15Uk))
+    in lambda_a16ng sF sQ sLs
+sScanl1 sF (SCons sX sXs)
+  = let
+      lambda_a16no ::
+        forall f_a15Uz x_a15UA xs_a15UB. (t_a16d5 ~ f_a15Uz,
+                                          t_a16d6 ~ Apply (Apply (:$) x_a15UA) xs_a15UB) =>
+        Sing f_a15Uz
+        -> Sing x_a15UA
+            -> Sing xs_a15UB
+              -> Sing (Apply (Apply Scanl1Sym0 f_a15Uz) (Apply (Apply (:$) x_a15UA) xs_a15UB) :: [a_a159W])
+      lambda_a16no f_a16np x_a16nq xs_a16nr
+        = applySing
+            (applySing
+                (applySing (singFun3 (Proxy :: Proxy ScanlSym0) sScanl) f_a16np)
+                x_a16nq)
+            xs_a16nr
+    in lambda_a16no sF sX sXs
+sScanl1 _s_z_1627651010 SNil
+  = let
+      lambda_a16ns ::
+        forall _z_1627651010_a15UE. (t_a16d5 ~ _z_1627651010_a15UE,
+                                      t_a16d6 ~ '[]) =>
+        Sing _z_1627651010_a15UE
+        -> Sing (Apply (Apply Scanl1Sym0 _z_1627651010_a15UE) '[] :: [a_a159W])
+      lambda_a16ns _z_1627651010_a16nt = SNil
+    in lambda_a16ns _s_z_1627651010
+sAll _s_z_1627651022 SNil
+  = let
+      lambda_a16nu ::
+        forall _z_1627651022_a15UQ. (t_a16d7 ~ _z_1627651022_a15UQ,
+                                      t_a16d8 ~ '[]) =>
+        Sing _z_1627651022_a15UQ
+        -> Sing (Apply (Apply AllSym0 _z_1627651022_a15UQ) '[] :: Bool)
+      lambda_a16nu _z_1627651022_a16nv = STrue
+    in lambda_a16nu _s_z_1627651022
+sAll sP (SCons sX sXs)
+  = let
+      lambda_a16nw ::
+        forall p_a15UR x_a15US xs_a15UT. (t_a16d7 ~ p_a15UR,
+                                          t_a16d8 ~ Apply (Apply (:$) x_a15US) xs_a15UT) =>
+        Sing p_a15UR
+        -> Sing x_a15US
+            -> Sing xs_a15UT
+              -> Sing (Apply (Apply AllSym0 p_a15UR) (Apply (Apply (:$) x_a15US) xs_a15UT) :: Bool)
+      lambda_a16nw p_a16nx x_a16ny xs_a16nz
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:&&$)) (%:&&))
+                (applySing p_a16nx x_a16ny))
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy AllSym0) sAll) p_a16nx)
+                xs_a16nz)
+    in lambda_a16nw sP sX sXs
+sOr SNil
+  = let
+      lambda_a16nA :: t_a16d9 ~ '[] => Sing (Apply OrSym0 '[] :: Bool)
+      lambda_a16nA = SFalse
+    in lambda_a16nA
+sOr (SCons sX sXs)
+  = let
+      lambda_a16nB ::
+        forall x_a15UY
+                xs_a15UZ. t_a16d9 ~ Apply (Apply (:$) x_a15UY) xs_a15UZ =>
+        Sing x_a15UY
+        -> Sing xs_a15UZ
+            -> Sing (Apply OrSym0 (Apply (Apply (:$) x_a15UY) xs_a15UZ) :: Bool)
+      lambda_a16nB x_a16nC xs_a16nD
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:||$)) (%:||)) x_a16nC)
+            (applySing (singFun1 (Proxy :: Proxy OrSym0) sOr) xs_a16nD)
+    in lambda_a16nB sX sXs
+sAnd SNil
+  = let
+      lambda_a16nE :: t_a16da ~ '[] => Sing (Apply AndSym0 '[] :: Bool)
+      lambda_a16nE = STrue
+    in lambda_a16nE
+sAnd (SCons sX sXs)
+  = let
+      lambda_a16nF ::
+        forall x_a15V4
+                xs_a15V5. t_a16da ~ Apply (Apply (:$) x_a15V4) xs_a15V5 =>
+        Sing x_a15V4
+        -> Sing xs_a15V5
+            -> Sing (Apply AndSym0 (Apply (Apply (:$) x_a15V4) xs_a15V5) :: Bool)
+      lambda_a16nF x_a16nG xs_a16nH
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:&&$)) (%:&&)) x_a16nG)
+            (applySing (singFun1 (Proxy :: Proxy AndSym0) sAnd) xs_a16nH)
+    in lambda_a16nF sX sXs
+sConcatMap sF sA_1627651049
+  = let
+      lambda_a16nI ::
+        forall f_a15Vh a_1627651049_a15Vi. (t_a16db ~ f_a15Vh,
+                                            t_a16dc ~ a_1627651049_a15Vi) =>
+        Sing f_a15Vh
+        -> Sing a_1627651049_a15Vi
+            -> Sing (Apply (Apply ConcatMapSym0 f_a15Vh) a_1627651049_a15Vi :: [b_a159F])
+      lambda_a16nI f_a16nJ a_1627651049_a16nK
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (applySing
+                      (applySing
+                        (singFun3 (Proxy :: Proxy (:.$)) (%:.))
+                        (singFun2 (Proxy :: Proxy (:++$)) (%:++)))
+                      f_a16nJ))
+                SNil)
+            a_1627651049_a16nK
+    in lambda_a16nI sF sA_1627651049
+sConcat sA_1627651053
+  = let
+      lambda_a16nL ::
+        forall a_1627651053_a15Vp. t_a16dd ~ a_1627651053_a15Vp =>
+        Sing a_1627651053_a15Vp
+        -> Sing (Apply ConcatSym0 a_1627651053_a15Vp :: [a_a159D])
+      lambda_a16nL a_1627651053_a16nM
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (singFun2 (Proxy :: Proxy (:++$)) (%:++)))
+                SNil)
+            a_1627651053_a16nM
+    in lambda_a16nL sA_1627651053
+sFoldr1 _s_z_1627651069 (SCons sX SNil)
+  = let
+      lambda_a16nN ::
+        forall _z_1627651069_a15VB x_a15VC. (t_a16de ~ _z_1627651069_a15VB,
+                                              t_a16df ~ Apply (Apply (:$) x_a15VC) '[]) =>
+        Sing _z_1627651069_a15VB
+        -> Sing x_a15VC
+            -> Sing (Apply (Apply Foldr1Sym0 _z_1627651069_a15VB) (Apply (Apply (:$) x_a15VC) '[]) :: a_a159y)
+      lambda_a16nN _z_1627651069_a16nO x_a16nP = x_a16nP
+    in lambda_a16nN _s_z_1627651069 sX
+sFoldr1 sF (SCons sX (SCons sWild_1627648492 sWild_1627648494))
+  = let
+      lambda_a16nQ ::
+        forall f_a15VD
+                x_a15VE
+                wild_1627648492_a15VF
+                wild_1627648494_a15VG. (t_a16de ~ f_a15VD,
+                                        t_a16df ~ Apply (Apply (:$) x_a15VE) (Apply (Apply (:$) wild_1627648492_a15VF) wild_1627648494_a15VG)) =>
+        Sing f_a15VD
+        -> Sing x_a15VE
+            -> Sing wild_1627648492_a15VF
+              -> Sing wild_1627648494_a15VG
+                  -> Sing (Apply (Apply Foldr1Sym0 f_a15VD) (Apply (Apply (:$) x_a15VE) (Apply (Apply (:$) wild_1627648492_a15VF) wild_1627648494_a15VG)) :: a_a159y)
+      lambda_a16nQ
+        f_a16nR
+        x_a16nS
+        wild_1627648492_a16nT
+        wild_1627648494_a16nU
+        = let
+            sXs ::
+              Sing (Let1627651077XsSym4 f_a15VD x_a15VE wild_1627648492_a15VF wild_1627648494_a15VG)
+            sXs
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy (:$)) SCons) wild_1627648492_a16nT)
+                  wild_1627648494_a16nU
+          in
+            applySing
+              (applySing f_a16nR x_a16nS)
+              (applySing
+                  (applySing (singFun2 (Proxy :: Proxy Foldr1Sym0) sFoldr1) f_a16nR)
+                  sXs)
+    in lambda_a16nQ sF sX sWild_1627648492 sWild_1627648494
+sFoldr1 _s_z_1627651096 SNil
+  = let
+      lambda_a16nV ::
+        forall _z_1627651096_a15W2. (t_a16de ~ _z_1627651096_a15W2,
+                                      t_a16df ~ '[]) =>
+        Sing _z_1627651096_a15W2
+        -> Sing (Apply (Apply Foldr1Sym0 _z_1627651096_a15W2) '[] :: a_a159y)
+      lambda_a16nV _z_1627651096_a16nW
+        = sError (sing :: Sing "Data.Singletons.List.foldr1: empty list")
+    in lambda_a16nV _s_z_1627651096
+sFoldl1 sF (SCons sX sXs)
+  = let
+      lambda_a16nX ::
+        forall f_a15Wc x_a15Wd xs_a15We. (t_a16dg ~ f_a15Wc,
+                                          t_a16dh ~ Apply (Apply (:$) x_a15Wd) xs_a15We) =>
+        Sing f_a15Wc
+        -> Sing x_a15Wd
+            -> Sing xs_a15We
+              -> Sing (Apply (Apply Foldl1Sym0 f_a15Wc) (Apply (Apply (:$) x_a15Wd) xs_a15We) :: a_a159q)
+      lambda_a16nX f_a16nY x_a16nZ xs_a16o0
+        = applySing
+            (applySing
+                (applySing (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl) f_a16nY)
+                x_a16nZ)
+            xs_a16o0
+    in lambda_a16nX sF sX sXs
+sFoldl1 _s_z_1627651111 SNil
+  = let
+      lambda_a16o1 ::
+        forall _z_1627651111_a15Wh. (t_a16dg ~ _z_1627651111_a15Wh,
+                                      t_a16dh ~ '[]) =>
+        Sing _z_1627651111_a15Wh
+        -> Sing (Apply (Apply Foldl1Sym0 _z_1627651111_a15Wh) '[] :: a_a159q)
+      lambda_a16o1 _z_1627651111_a16o2
+        = sError (sing :: Sing "Data.Singletons.List.foldl1: empty list")
+    in lambda_a16o1 _s_z_1627651111
+sMaximumBy _s_z_1627651123 SNil
+  = let
+      lambda_a16o3 ::
+        forall _z_1627651123_a15Wt. (t_a16di ~ _z_1627651123_a15Wt,
+                                      t_a16dj ~ '[]) =>
+        Sing _z_1627651123_a15Wt
+        -> Sing (Apply (Apply MaximumBySym0 _z_1627651123_a15Wt) '[] :: a_a15dp)
+      lambda_a16o3 _z_1627651123_a16o4
+        = sError
+            (sing :: Sing "Data.Singletons.List.maximumBy: empty list")
+    in lambda_a16o3 _s_z_1627651123
+sMaximumBy sCmp (SCons sWild_1627648536 sWild_1627648538)
+  = let
+      lambda_a16o5 ::
+        forall cmp_a15Wu
+                wild_1627648536_a15Wv
+                wild_1627648538_a15Ww. (t_a16di ~ cmp_a15Wu,
+                                        t_a16dj ~ Apply (Apply (:$) wild_1627648536_a15Wv) wild_1627648538_a15Ww) =>
+        Sing cmp_a15Wu
+        -> Sing wild_1627648536_a15Wv
+            -> Sing wild_1627648538_a15Ww
+              -> Sing (Apply (Apply MaximumBySym0 cmp_a15Wu) (Apply (Apply (:$) wild_1627648536_a15Wv) wild_1627648538_a15Ww) :: a_a15dp)
+      lambda_a16o5 cmp_a16o6 wild_1627648536_a16o7 wild_1627648538_a16o8
+        = let
+            sXs ::
+              Sing (Let1627651129XsSym3 cmp_a15Wu wild_1627648536_a15Wv wild_1627648538_a15Ww)
+            sXs
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy (:$)) SCons) wild_1627648536_a16o7)
+                  wild_1627648538_a16o8 in
+          let
+            sMaxBy ::
+              forall arg_a16o9 arg_a16oa.
+              Sing arg_a16o9
+              -> Sing arg_a16oa
+                  -> Sing (Apply (Apply (Let1627651142MaxBySym3 cmp_a15Wu wild_1627648536_a15Wv wild_1627648538_a15Ww) arg_a16o9) arg_a16oa)
+            sMaxBy sX sY
+              = let
+                  lambda_a16ob ::
+                    forall x_a15Xc y_a15Xd. (arg_a16o9 ~ x_a15Xc,
+                                              arg_a16oa ~ y_a15Xd) =>
+                    Sing x_a15Xc
+                    -> Sing y_a15Xd
+                        -> Sing (Apply (Apply (Let1627651142MaxBySym3 cmp_a15Wu wild_1627648536_a15Wv wild_1627648538_a15Ww) x_a15Xc) y_a15Xd)
+                  lambda_a16ob x_a16oc y_a16od
+                    = let
+                        sScrutinee_1627648534 ::
+                          Sing (Let1627651172Scrutinee_1627648534Sym5 cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww)
+                        sScrutinee_1627648534
+                          = applySing (applySing cmp_a16o6 x_a16oc) y_a16od
+                      in  case sScrutinee_1627648534 of {
+                            SGT
+                              -> let
+                                    lambda_a16oe ::
+                                      GTSym0 ~ Let1627651172Scrutinee_1627648534Sym5 cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww =>
+                                      Sing (Case_1627651198_a15XF cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww GTSym0)
+                                    lambda_a16oe = x_a16oc
+                                  in lambda_a16oe;
+                            SEQ
+                              -> let
+                                    lambda_a16of ::
+                                      EQSym0 ~ Let1627651172Scrutinee_1627648534Sym5 cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww =>
+                                      Sing (Case_1627651198_a15XF cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww EQSym0)
+                                    lambda_a16of = y_a16od
+                                  in lambda_a16of;
+                            SLT
+                              -> let
+                                    lambda_a16og ::
+                                      LTSym0 ~ Let1627651172Scrutinee_1627648534Sym5 cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww =>
+                                      Sing (Case_1627651198_a15XF cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww LTSym0)
+                                    lambda_a16og = y_a16od
+                                  in lambda_a16og } ::
+                            Sing (Case_1627651198_a15XF cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww (Let1627651172Scrutinee_1627648534Sym5 cmp_a15Wu x_a15Xc y_a15Xd wild_1627648536_a15Wv wild_1627648538_a15Ww))
+                in lambda_a16ob sX sY
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy Foldl1Sym0) sFoldl1)
+                  (singFun2
+                    (Proxy ::
+                        Proxy (Let1627651142MaxBySym3 cmp_a15Wu wild_1627648536_a15Wv wild_1627648538_a15Ww))
+                    sMaxBy))
+              sXs
+    in lambda_a16o5 sCmp sWild_1627648536 sWild_1627648538
+sMinimumBy _s_z_1627651210 SNil
+  = let
+      lambda_a16oh ::
+        forall _z_1627651210_a15XS. (t_a16dk ~ _z_1627651210_a15XS,
+                                      t_a16dl ~ '[]) =>
+        Sing _z_1627651210_a15XS
+        -> Sing (Apply (Apply MinimumBySym0 _z_1627651210_a15XS) '[] :: a_a15dv)
+      lambda_a16oh _z_1627651210_a16oi
+        = sError
+            (sing :: Sing "Data.Singletons.List.minimumBy: empty list")
+    in lambda_a16oh _s_z_1627651210
+sMinimumBy sCmp (SCons sWild_1627648542 sWild_1627648544)
+  = let
+      lambda_a16oj ::
+        forall cmp_a15XT
+                wild_1627648542_a15XU
+                wild_1627648544_a15XV. (t_a16dk ~ cmp_a15XT,
+                                        t_a16dl ~ Apply (Apply (:$) wild_1627648542_a15XU) wild_1627648544_a15XV) =>
+        Sing cmp_a15XT
+        -> Sing wild_1627648542_a15XU
+            -> Sing wild_1627648544_a15XV
+              -> Sing (Apply (Apply MinimumBySym0 cmp_a15XT) (Apply (Apply (:$) wild_1627648542_a15XU) wild_1627648544_a15XV) :: a_a15dv)
+      lambda_a16oj cmp_a16ok wild_1627648542_a16ol wild_1627648544_a16om
+        = let
+            sXs ::
+              Sing (Let1627651216XsSym3 cmp_a15XT wild_1627648542_a15XU wild_1627648544_a15XV)
+            sXs
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy (:$)) SCons) wild_1627648542_a16ol)
+                  wild_1627648544_a16om in
+          let
+            sMinBy ::
+              forall arg_a16on arg_a16oo.
+              Sing arg_a16on
+              -> Sing arg_a16oo
+                  -> Sing (Apply (Apply (Let1627651229MinBySym3 cmp_a15XT wild_1627648542_a15XU wild_1627648544_a15XV) arg_a16on) arg_a16oo)
+            sMinBy sX sY
+              = let
+                  lambda_a16op ::
+                    forall x_a15YB y_a15YC. (arg_a16on ~ x_a15YB,
+                                              arg_a16oo ~ y_a15YC) =>
+                    Sing x_a15YB
+                    -> Sing y_a15YC
+                        -> Sing (Apply (Apply (Let1627651229MinBySym3 cmp_a15XT wild_1627648542_a15XU wild_1627648544_a15XV) x_a15YB) y_a15YC)
+                  lambda_a16op x_a16oq y_a16or
+                    = let
+                        sScrutinee_1627648540 ::
+                          Sing (Let1627651259Scrutinee_1627648540Sym5 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV)
+                        sScrutinee_1627648540
+                          = applySing (applySing cmp_a16ok x_a16oq) y_a16or
+                      in  case sScrutinee_1627648540 of {
+                            SGT
+                              -> let
+                                    lambda_a16os ::
+                                      GTSym0 ~ Let1627651259Scrutinee_1627648540Sym5 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV =>
+                                      Sing (Case_1627651285_a15Z4 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV GTSym0)
+                                    lambda_a16os = y_a16or
+                                  in lambda_a16os;
+                            SEQ
+                              -> let
+                                    lambda_a16ot ::
+                                      EQSym0 ~ Let1627651259Scrutinee_1627648540Sym5 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV =>
+                                      Sing (Case_1627651285_a15Z4 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV EQSym0)
+                                    lambda_a16ot = x_a16oq
+                                  in lambda_a16ot;
+                            SLT
+                              -> let
+                                    lambda_a16ou ::
+                                      LTSym0 ~ Let1627651259Scrutinee_1627648540Sym5 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV =>
+                                      Sing (Case_1627651285_a15Z4 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV LTSym0)
+                                    lambda_a16ou = x_a16oq
+                                  in lambda_a16ou } ::
+                            Sing (Case_1627651285_a15Z4 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV (Let1627651259Scrutinee_1627648540Sym5 cmp_a15XT x_a15YB y_a15YC wild_1627648542_a15XU wild_1627648544_a15XV))
+                in lambda_a16op sX sY
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy Foldl1Sym0) sFoldl1)
+                  (singFun2
+                    (Proxy ::
+                        Proxy (Let1627651229MinBySym3 cmp_a15XT wild_1627648542_a15XU wild_1627648544_a15XV))
+                    sMinBy))
+              sXs
+    in lambda_a16oj sCmp sWild_1627648542 sWild_1627648544
+sMaximum SNil
+  = let
+      lambda_a16ov ::
+        t_a16dm ~ '[] => Sing (Apply MaximumSym0 '[] :: a_a15eI)
+      lambda_a16ov
+        = sError (sing :: Sing "Data.Singletons.List.maximum: empty list")
+    in lambda_a16ov
+sMaximum (SCons sWild_1627648572 sWild_1627648574)
+  = let
+      lambda_a16ow ::
+        forall wild_1627648572_a15Za
+                wild_1627648574_a15Zb. t_a16dm ~ Apply (Apply (:$) wild_1627648572_a15Za) wild_1627648574_a15Zb =>
+        Sing wild_1627648572_a15Za
+        -> Sing wild_1627648574_a15Zb
+            -> Sing (Apply MaximumSym0 (Apply (Apply (:$) wild_1627648572_a15Za) wild_1627648574_a15Zb) :: a_a15eI)
+      lambda_a16ow wild_1627648572_a16ox wild_1627648574_a16oy
+        = let
+            sXs ::
+              Sing (Let1627651294XsSym2 wild_1627648572_a15Za wild_1627648574_a15Zb)
+            sXs
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy (:$)) SCons) wild_1627648572_a16ox)
+                  wild_1627648574_a16oy
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy Foldl1Sym0) sFoldl1)
+                  (singFun2 (Proxy :: Proxy MaxSym0) sMax))
+              sXs
+    in lambda_a16ow sWild_1627648572 sWild_1627648574
+sMinimum SNil
+  = let
+      lambda_a16oz ::
+        t_a16dn ~ '[] => Sing (Apply MinimumSym0 '[] :: a_a15eK)
+      lambda_a16oz
+        = sError (sing :: Sing "Data.Singletons.List.minimum: empty list")
+    in lambda_a16oz
+sMinimum (SCons sWild_1627648576 sWild_1627648578)
+  = let
+      lambda_a16oA ::
+        forall wild_1627648576_a15Zo
+                wild_1627648578_a15Zp. t_a16dn ~ Apply (Apply (:$) wild_1627648576_a15Zo) wild_1627648578_a15Zp =>
+        Sing wild_1627648576_a15Zo
+        -> Sing wild_1627648578_a15Zp
+            -> Sing (Apply MinimumSym0 (Apply (Apply (:$) wild_1627648576_a15Zo) wild_1627648578_a15Zp) :: a_a15eK)
+      lambda_a16oA wild_1627648576_a16oB wild_1627648578_a16oC
+        = let
+            sXs ::
+              Sing (Let1627651308XsSym2 wild_1627648576_a15Zo wild_1627648578_a15Zp)
+            sXs
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy (:$)) SCons) wild_1627648576_a16oB)
+                  wild_1627648578_a16oC
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy Foldl1Sym0) sFoldl1)
+                  (singFun2 (Proxy :: Proxy MinSym0) sMin))
+              sXs
+    in lambda_a16oA sWild_1627648576 sWild_1627648578
+sFoldl' sF sZ0 sXs0
+  = let
+      lambda_a16oD ::
+        forall f_a15ZN z0_a15ZO xs0_a15ZP. (t_a16do ~ f_a15ZN,
+                                            t_a16dp ~ z0_a15ZO,
+                                            t_a16dq ~ xs0_a15ZP) =>
+        Sing f_a15ZN
+        -> Sing z0_a15ZO
+            -> Sing xs0_a15ZP
+              -> Sing (Apply (Apply (Apply Foldl'Sym0 f_a15ZN) z0_a15ZO) xs0_a15ZP :: b_a156O)
+      lambda_a16oD f_a16oE z0_a16oF xs0_a16oG
+        = let
+            sLgo ::
+              forall (t_a16oH :: b_a156O) (t_a16oI :: [a_a156N]).
+              Sing t_a16oH
+              -> Sing t_a16oI
+                  -> Sing (Apply (Apply (Let1627651334LgoSym3 f_a15ZN z0_a15ZO xs0_a15ZP) t_a16oH) t_a16oI :: b_a156O)
+            sLgo sZ SNil
+              = let
+                  lambda_a16oJ ::
+                    forall z_a160i. (t_a16oH ~ z_a160i, t_a16oI ~ '[]) =>
+                    Sing z_a160i
+                    -> Sing (Apply (Apply (Let1627651334LgoSym3 f_a15ZN z0_a15ZO xs0_a15ZP) z_a160i) '[] :: b_a156O)
+                  lambda_a16oJ z_a16oK = z_a16oK
+                in lambda_a16oJ sZ
+            sLgo sZ (SCons sX sXs)
+              = let
+                  lambda_a16oL ::
+                    forall z_a160j x_a160k xs_a160l. (t_a16oH ~ z_a160j,
+                                                      t_a16oI ~ Apply (Apply (:$) x_a160k) xs_a160l) =>
+                    Sing z_a160j
+                    -> Sing x_a160k
+                        -> Sing xs_a160l
+                          -> Sing (Apply (Apply (Let1627651334LgoSym3 f_a15ZN z0_a15ZO xs0_a15ZP) z_a160j) (Apply (Apply (:$) x_a160k) xs_a160l) :: b_a156O)
+                  lambda_a16oL z_a16oM x_a16oN xs_a16oO
+                    = let
+                        sZ' ::
+                          Sing (Let1627651366Z'Sym6 f_a15ZN z0_a15ZO xs0_a15ZP z_a160j x_a160k xs_a160l)
+                        sZ' = applySing (applySing f_a16oE z_a16oM) x_a16oN
+                      in
+                        applySing
+                          (applySing (singFun2 (Proxy :: Proxy SeqSym0) sSeq) sZ')
+                          (applySing
+                              (applySing
+                                (singFun2
+                                    (Proxy ::
+                                      Proxy (Let1627651334LgoSym3 f_a15ZN z0_a15ZO xs0_a15ZP))
+                                    sLgo)
+                                sZ')
+                              xs_a16oO)
+                in lambda_a16oL sZ sX sXs
+          in
+            applySing
+              (applySing
+                  (singFun2
+                    (Proxy :: Proxy (Let1627651334LgoSym3 f_a15ZN z0_a15ZO xs0_a15ZP))
+                    sLgo)
+                  z0_a16oF)
+              xs0_a16oG
+    in lambda_a16oD sF sZ0 sXs0
+sFoldl1' sF (SCons sX sXs)
+  = let
+      lambda_a16oP ::
+        forall f_a1613 x_a1614 xs_a1615. (t_a16dr ~ f_a1613,
+                                          t_a16ds ~ Apply (Apply (:$) x_a1614) xs_a1615) =>
+        Sing f_a1613
+        -> Sing x_a1614
+            -> Sing xs_a1615
+              -> Sing (Apply (Apply Foldl1'Sym0 f_a1613) (Apply (Apply (:$) x_a1614) xs_a1615) :: a_a159u)
+      lambda_a16oP f_a16oQ x_a16oR xs_a16oS
+        = applySing
+            (applySing
+                (applySing (singFun3 (Proxy :: Proxy Foldl'Sym0) sFoldl') f_a16oQ)
+                x_a16oR)
+            xs_a16oS
+    in lambda_a16oP sF sX sXs
+sFoldl1' _s_z_1627651412 SNil
+  = let
+      lambda_a16oT ::
+        forall _z_1627651412_a1618. (t_a16dr ~ _z_1627651412_a1618,
+                                      t_a16ds ~ '[]) =>
+        Sing _z_1627651412_a1618
+        -> Sing (Apply (Apply Foldl1'Sym0 _z_1627651412_a1618) '[] :: a_a159u)
+      lambda_a16oT _z_1627651412_a16oU
+        = sError (sing :: Sing "Data.Singletons.List.foldl1': empty list")
+    in lambda_a16oT _s_z_1627651412
+sPermutations sXs0
+  = let
+      lambda_a16oV ::
+        forall xs0_a161d. t_a16dt ~ xs0_a161d =>
+        Sing xs0_a161d
+        -> Sing (Apply PermutationsSym0 xs0_a161d :: [[a_a158Z]])
+      lambda_a16oV xs0_a16oW
+        = let
+            sPerms ::
+              forall arg_a16oX arg_a16oY.
+              Sing arg_a16oX
+              -> Sing arg_a16oY
+                  -> Sing (Apply (Apply (Let1627651420PermsSym1 xs0_a161d) arg_a16oX) arg_a16oY)
+            sPerms SNil _s_z_1627651435
+              = let
+                  lambda_a16oZ ::
+                    forall _z_1627651435_a161v. (arg_a16oX ~ '[],
+                                                  arg_a16oY ~ _z_1627651435_a161v) =>
+                    Sing _z_1627651435_a161v
+                    -> Sing (Apply (Apply (Let1627651420PermsSym1 xs0_a161d) '[]) _z_1627651435_a161v)
+                  lambda_a16oZ _z_1627651435_a16p0 = SNil
+                in lambda_a16oZ _s_z_1627651435
+            sPerms (SCons sT sTs) sIs
+              = let
+                  lambda_a16p1 ::
+                    forall t_a161w
+                            ts_a161x
+                            is_a161y. (arg_a16oX ~ Apply (Apply (:$) t_a161w) ts_a161x,
+                                      arg_a16oY ~ is_a161y) =>
+                    Sing t_a161w
+                    -> Sing ts_a161x
+                        -> Sing is_a161y
+                          -> Sing (Apply (Apply (Let1627651420PermsSym1 xs0_a161d) (Apply (Apply (:$) t_a161w) ts_a161x)) is_a161y)
+                  lambda_a16p1 t_a16p2 ts_a16p3 is_a16p4
+                    = let
+                        sInterleave' ::
+                          forall arg_a16p5 arg_a16p6 arg_a16p7.
+                          Sing arg_a16p5
+                          -> Sing arg_a16p6
+                              -> Sing arg_a16p7
+                                -> Sing (Apply (Apply (Apply (Let1627651441Interleave'Sym4 xs0_a161d t_a161w ts_a161x is_a161y) arg_a16p5) arg_a16p6) arg_a16p7)
+                        sInterleave ::
+                          forall arg_a16p8 arg_a16p9.
+                          Sing arg_a16p8
+                          -> Sing arg_a16p9
+                              -> Sing (Apply (Apply (Let1627651441InterleaveSym4 xs0_a161d t_a161w ts_a161x is_a161y) arg_a16p8) arg_a16p9)
+                        sInterleave' _s_z_1627651487 SNil sR
+                          = let
+                              lambda_a16pa ::
+                                forall _z_1627651487_a162l
+                                        r_a162m. (arg_a16p5 ~ _z_1627651487_a162l,
+                                                  arg_a16p6 ~ '[],
+                                                  arg_a16p7 ~ r_a162m) =>
+                                Sing _z_1627651487_a162l
+                                -> Sing r_a162m
+                                    -> Sing (Apply (Apply (Apply (Let1627651441Interleave'Sym4 xs0_a161d t_a161w ts_a161x is_a161y) _z_1627651487_a162l) '[]) r_a162m)
+                              lambda_a16pa _z_1627651487_a16pb r_a16pc
+                                = applySing
+                                    (applySing
+                                        (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) ts_a16p3)
+                                    r_a16pc
+                            in lambda_a16pa _s_z_1627651487 sR
+                        sInterleave' sF (SCons sY sYs) sR
+                          = let
+                              lambda_a16pd ::
+                                forall f_a162n y_a162o ys_a162p r_a162q. (arg_a16p5 ~ f_a162n,
+                                                                          arg_a16p6 ~ Apply (Apply (:$) y_a162o) ys_a162p,
+                                                                          arg_a16p7 ~ r_a162q) =>
+                                Sing f_a162n
+                                -> Sing y_a162o
+                                    -> Sing ys_a162p
+                                      -> Sing r_a162q
+                                          -> Sing (Apply (Apply (Apply (Let1627651441Interleave'Sym4 xs0_a161d t_a161w ts_a161x is_a161y) f_a162n) (Apply (Apply (:$) y_a162o) ys_a162p)) r_a162q)
+                              lambda_a16pd f_a16pe y_a16pf ys_a16pg r_a16ph
+                                = let
+                                    sUs ::
+                                      Sing (Let1627651495UsSym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q)
+                                    sZs ::
+                                      Sing (Let1627651495ZsSym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q)
+                                    sX_1627651496 ::
+                                      Sing (Let1627651495X_1627651496Sym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q)
+                                    sUs
+                                      = case sX_1627651496 of {
+                                          STuple2 sY_1627651498 _s_z_1627651505
+                                            -> let
+                                                  lambda_a16pi ::
+                                                    forall y_1627651498_a162A
+                                                          _z_1627651505_a162D. Apply (Apply Tuple2Sym0 y_1627651498_a162A) _z_1627651505_a162D ~ Let1627651495X_1627651496Sym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q =>
+                                                    Sing y_1627651498_a162A
+                                                    -> Sing _z_1627651505_a162D
+                                                      -> Sing (Case_1627651502_a162z xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q (Apply (Apply Tuple2Sym0 y_1627651498_a162A) _z_1627651505_a162D))
+                                                  lambda_a16pi
+                                                    y_1627651498_a16pj
+                                                    _z_1627651505_a16pk
+                                                    = y_1627651498_a16pj
+                                                in
+                                                  lambda_a16pi sY_1627651498 _s_z_1627651505 } ::
+                                          Sing (Case_1627651502_a162z xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q (Let1627651495X_1627651496Sym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q))
+                                    sZs
+                                      = case sX_1627651496 of {
+                                          STuple2 _s_z_1627651563 sY_1627651500
+                                            -> let
+                                                  lambda_a16pl ::
+                                                    forall _z_1627651563_a163z
+                                                          y_1627651500_a163A. Apply (Apply Tuple2Sym0 _z_1627651563_a163z) y_1627651500_a163A ~ Let1627651495X_1627651496Sym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q =>
+                                                    Sing _z_1627651563_a163z
+                                                    -> Sing y_1627651500_a163A
+                                                      -> Sing (Case_1627651561_a163w xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q (Apply (Apply Tuple2Sym0 _z_1627651563_a163z) y_1627651500_a163A))
+                                                  lambda_a16pl
+                                                    _z_1627651563_a16pm
+                                                    y_1627651500_a16pn
+                                                    = y_1627651500_a16pn
+                                                in
+                                                  lambda_a16pl _s_z_1627651563 sY_1627651500 } ::
+                                          Sing (Case_1627651561_a163w xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q (Let1627651495X_1627651496Sym8 xs0_a161d t_a161w ts_a161x is_a161y f_a162n y_a162o ys_a162p r_a162q))
+                                    sX_1627651496
+                                      = applySing
+                                          (applySing
+                                              (applySing
+                                                (singFun3
+                                                    (Proxy ::
+                                                      Proxy (Let1627651441Interleave'Sym4 xs0_a161d t_a161w ts_a161x is_a161y))
+                                                    sInterleave')
+                                                (applySing
+                                                    (applySing
+                                                      (singFun3 (Proxy :: Proxy (:.$)) (%:.))
+                                                      f_a16pe)
+                                                    (applySing
+                                                      (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                      y_a16pf)))
+                                              ys_a16pg)
+                                          r_a16ph
+                                  in
+                                    applySing
+                                      (applySing
+                                          (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2)
+                                          (applySing
+                                            (applySing
+                                                (singFun2 (Proxy :: Proxy (:$)) SCons) y_a16pf)
+                                            sUs))
+                                      (applySing
+                                          (applySing
+                                            (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                            (applySing
+                                                f_a16pe
+                                                (applySing
+                                                  (applySing
+                                                      (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                      t_a16p2)
+                                                  (applySing
+                                                      (applySing
+                                                        (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                        y_a16pf)
+                                                      sUs))))
+                                          sZs)
+                            in lambda_a16pd sF sY sYs sR
+                        sInterleave sXs sR
+                          = let
+                              lambda_a16po ::
+                                forall xs_a165R r_a165S. (arg_a16p8 ~ xs_a165R,
+                                                          arg_a16p9 ~ r_a165S) =>
+                                Sing xs_a165R
+                                -> Sing r_a165S
+                                    -> Sing (Apply (Apply (Let1627651441InterleaveSym4 xs0_a161d t_a161w ts_a161x is_a161y) xs_a165R) r_a165S)
+                              lambda_a16po xs_a16pp r_a16pq
+                                = let
+                                    sZs ::
+                                      Sing (Let1627651709ZsSym6 xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S)
+                                    sX_1627651710 ::
+                                      Sing (Let1627651709X_1627651710Sym6 xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S)
+                                    sZs
+                                      = case sX_1627651710 of {
+                                          STuple2 _s_z_1627651716 sY_1627651712
+                                            -> let
+                                                  lambda_a16pr ::
+                                                    forall _z_1627651716_a1662
+                                                          y_1627651712_a1663. Apply (Apply Tuple2Sym0 _z_1627651716_a1662) y_1627651712_a1663 ~ Let1627651709X_1627651710Sym6 xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S =>
+                                                    Sing _z_1627651716_a1662
+                                                    -> Sing y_1627651712_a1663
+                                                      -> Sing (Case_1627651714_a165Z xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S (Apply (Apply Tuple2Sym0 _z_1627651716_a1662) y_1627651712_a1663))
+                                                  lambda_a16pr
+                                                    _z_1627651716_a16ps
+                                                    y_1627651712_a16pt
+                                                    = y_1627651712_a16pt
+                                                in
+                                                  lambda_a16pr _s_z_1627651716 sY_1627651712 } ::
+                                          Sing (Case_1627651714_a165Z xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S (Let1627651709X_1627651710Sym6 xs0_a161d t_a161w ts_a161x is_a161y xs_a165R r_a165S))
+                                    sX_1627651710
+                                      = applySing
+                                          (applySing
+                                              (applySing
+                                                (singFun3
+                                                    (Proxy ::
+                                                      Proxy (Let1627651441Interleave'Sym4 xs0_a161d t_a161w ts_a161x is_a161y))
+                                                    sInterleave')
+                                                (singFun1 (Proxy :: Proxy IdSym0) sId))
+                                              xs_a16pp)
+                                          r_a16pq
+                                  in sZs
+                            in lambda_a16po sXs sR
+                      in
+                        applySing
+                          (applySing
+                              (applySing
+                                (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                                (singFun2
+                                    (Proxy ::
+                                      Proxy (Let1627651441InterleaveSym4 xs0_a161d t_a161w ts_a161x is_a161y))
+                                    sInterleave))
+                              (applySing
+                                (applySing
+                                    (singFun2
+                                      (Proxy :: Proxy (Let1627651420PermsSym1 xs0_a161d))
+                                      sPerms)
+                                    ts_a16p3)
+                                (applySing
+                                    (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) t_a16p2)
+                                    is_a16p4)))
+                          (applySing
+                              (singFun1 (Proxy :: Proxy PermutationsSym0) sPermutations)
+                              is_a16p4)
+                in lambda_a16p1 sT sTs sIs
+          in
+            applySing
+              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) xs0_a16oW)
+              (applySing
+                  (applySing
+                    (singFun2
+                        (Proxy :: Proxy (Let1627651420PermsSym1 xs0_a161d)) sPerms)
+                    xs0_a16oW)
+                  SNil)
+    in lambda_a16oV sXs0
+sPrependToAll _s_z_1627651796 SNil
+  = let
+      lambda_a16pw ::
+        forall _z_1627651796_a167k. (t_a16du ~ _z_1627651796_a167k,
+                                      t_a16dv ~ '[]) =>
+        Sing _z_1627651796_a167k
+        -> Sing (Apply (Apply PrependToAllSym0 _z_1627651796_a167k) '[] :: [a_a158V])
+      lambda_a16pw _z_1627651796_a16px = SNil
+    in lambda_a16pw _s_z_1627651796
+sPrependToAll sSep (SCons sX sXs)
+  = let
+      lambda_a16py ::
+        forall sep_a167l x_a167m xs_a167n. (t_a16du ~ sep_a167l,
+                                            t_a16dv ~ Apply (Apply (:$) x_a167m) xs_a167n) =>
+        Sing sep_a167l
+        -> Sing x_a167m
+            -> Sing xs_a167n
+              -> Sing (Apply (Apply PrependToAllSym0 sep_a167l) (Apply (Apply (:$) x_a167m) xs_a167n) :: [a_a158V])
+      lambda_a16py sep_a16pz x_a16pA xs_a16pB
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) sep_a16pz)
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16pA)
+                (applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy PrependToAllSym0) sPrependToAll)
+                      sep_a16pz)
+                  xs_a16pB))
+    in lambda_a16py sSep sX sXs
+sNonEmptySubsequences SNil
+  = let
+      lambda_a16pC ::
+        t_a16dw ~ '[] =>
+        Sing (Apply NonEmptySubsequencesSym0 '[] :: [[a_a158P]])
+      lambda_a16pC = SNil
+    in lambda_a16pC
+sNonEmptySubsequences (SCons sX sXs)
+  = let
+      lambda_a16pD ::
+        forall x_a167s
+                xs_a167t. t_a16dw ~ Apply (Apply (:$) x_a167s) xs_a167t =>
+        Sing x_a167s
+        -> Sing xs_a167t
+            -> Sing (Apply NonEmptySubsequencesSym0 (Apply (Apply (:$) x_a167s) xs_a167t) :: [[a_a158P]])
+      lambda_a16pD x_a16pE xs_a16pF
+        = let
+            sF ::
+              forall arg_a16pG arg_a16pH.
+              Sing arg_a16pG
+              -> Sing arg_a16pH
+                  -> Sing (Apply (Apply (Let1627651808FSym2 x_a167s xs_a167t) arg_a16pG) arg_a16pH)
+            sF sYs sR
+              = let
+                  lambda_a16pI ::
+                    forall ys_a167P r_a167Q. (arg_a16pG ~ ys_a167P,
+                                              arg_a16pH ~ r_a167Q) =>
+                    Sing ys_a167P
+                    -> Sing r_a167Q
+                        -> Sing (Apply (Apply (Let1627651808FSym2 x_a167s xs_a167t) ys_a167P) r_a167Q)
+                  lambda_a16pI ys_a16pJ r_a16pK
+                    = applySing
+                        (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) ys_a16pJ)
+                        (applySing
+                            (applySing
+                              (singFun2 (Proxy :: Proxy (:$)) SCons)
+                              (applySing
+                                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16pE)
+                                  ys_a16pJ))
+                            r_a16pK)
+                in lambda_a16pI sYs sR
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy (:$)) SCons)
+                  (applySing
+                    (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16pE) SNil))
+              (applySing
+                  (applySing
+                    (applySing
+                        (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                        (singFun2
+                          (Proxy :: Proxy (Let1627651808FSym2 x_a167s xs_a167t)) sF))
+                    SNil)
+                  (applySing
+                    (singFun1
+                        (Proxy :: Proxy NonEmptySubsequencesSym0) sNonEmptySubsequences)
+                    xs_a16pF))
+    in lambda_a16pD sX sXs
+sSubsequences sXs
+  = let
+      lambda_a16pL ::
+        forall xs_a167V. t_a16dx ~ xs_a167V =>
+        Sing xs_a167V
+        -> Sing (Apply SubsequencesSym0 xs_a167V :: [[a_a158N]])
+      lambda_a16pL xs_a16pM
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) SNil)
+            (applySing
+                (singFun1
+                  (Proxy :: Proxy NonEmptySubsequencesSym0) sNonEmptySubsequences)
+                xs_a16pM)
+    in lambda_a16pL sXs
+sIntersperse _s_z_1627651845 SNil
+  = let
+      lambda_a16pN ::
+        forall _z_1627651845_a1687. (t_a16dy ~ _z_1627651845_a1687,
+                                      t_a16dz ~ '[]) =>
+        Sing _z_1627651845_a1687
+        -> Sing (Apply (Apply IntersperseSym0 _z_1627651845_a1687) '[] :: [a_a158G])
+      lambda_a16pN _z_1627651845_a16pO = SNil
+    in lambda_a16pN _s_z_1627651845
+sIntersperse sSep (SCons sX sXs)
+  = let
+      lambda_a16pP ::
+        forall sep_a1688 x_a1689 xs_a168a. (t_a16dy ~ sep_a1688,
+                                            t_a16dz ~ Apply (Apply (:$) x_a1689) xs_a168a) =>
+        Sing sep_a1688
+        -> Sing x_a1689
+            -> Sing xs_a168a
+              -> Sing (Apply (Apply IntersperseSym0 sep_a1688) (Apply (Apply (:$) x_a1689) xs_a168a) :: [a_a158G])
+      lambda_a16pP sep_a16pQ x_a16pR xs_a16pS
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16pR)
+            (applySing
+                (applySing
+                  (singFun2 (Proxy :: Proxy PrependToAllSym0) sPrependToAll)
+                  sep_a16pQ)
+                xs_a16pS)
+    in lambda_a16pP sSep sX sXs
+sIntercalate sXs sXss
+  = let
+      lambda_a16pT ::
+        forall xs_a168k xss_a168l. (t_a16dA ~ xs_a168k,
+                                    t_a16dB ~ xss_a168l) =>
+        Sing xs_a168k
+        -> Sing xss_a168l
+            -> Sing (Apply (Apply IntercalateSym0 xs_a168k) xss_a168l :: [a_a158K])
+      lambda_a16pT xs_a16pU xss_a16pV
+        = applySing
+            (singFun1 (Proxy :: Proxy ConcatSym0) sConcat)
+            (applySing
+                (applySing
+                  (singFun2 (Proxy :: Proxy IntersperseSym0) sIntersperse) xs_a16pU)
+                xss_a16pV)
+    in lambda_a16pT sXs sXss
+sReverse sL
+  = let
+      lambda_a16pW ::
+        forall l_a168q. t_a16dC ~ l_a168q =>
+        Sing l_a168q -> Sing (Apply ReverseSym0 l_a168q :: [a_a158y])
+      lambda_a16pW l_a16pX
+        = let
+            sRev ::
+              forall (t_a16pY :: [a_a158B]) (t_a16pZ :: [a_a158B]).
+              Sing t_a16pY
+              -> Sing t_a16pZ
+                  -> Sing (Apply (Apply (Let1627651867RevSym1 l_a168q) t_a16pY) t_a16pZ :: [a_a158B])
+            sRev SNil sA
+              = let
+                  lambda_a16q0 ::
+                    forall a_a168G. (t_a16pY ~ '[], t_a16pZ ~ a_a168G) =>
+                    Sing a_a168G
+                    -> Sing (Apply (Apply (Let1627651867RevSym1 l_a168q) '[]) a_a168G :: [a_a158B])
+                  lambda_a16q0 a_a16q1 = a_a16q1
+                in lambda_a16q0 sA
+            sRev (SCons sX sXs) sA
+              = let
+                  lambda_a16q2 ::
+                    forall x_a168H
+                            xs_a168I
+                            a_a168J. (t_a16pY ~ Apply (Apply (:$) x_a168H) xs_a168I,
+                                      t_a16pZ ~ a_a168J) =>
+                    Sing x_a168H
+                    -> Sing xs_a168I
+                        -> Sing a_a168J
+                          -> Sing (Apply (Apply (Let1627651867RevSym1 l_a168q) (Apply (Apply (:$) x_a168H) xs_a168I)) a_a168J :: [a_a158B])
+                  lambda_a16q2 x_a16q3 xs_a16q4 a_a16q5
+                    = applySing
+                        (applySing
+                            (singFun2 (Proxy :: Proxy (Let1627651867RevSym1 l_a168q)) sRev)
+                            xs_a16q4)
+                        (applySing
+                            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16q3) a_a16q5)
+                in lambda_a16q2 sX sXs sA
+          in
+            applySing
+              (applySing
+                  (singFun2 (Proxy :: Proxy (Let1627651867RevSym1 l_a168q)) sRev)
+                  l_a16pX)
+              SNil
+    in lambda_a16pW sL
+sIsSuffixOf sX sY
+  = let
+      lambda_a16q6 ::
+        forall x_a168T y_a168U. (t_a16dD ~ x_a168T, t_a16dE ~ y_a168U) =>
+        Sing x_a168T
+        -> Sing y_a168U
+            -> Sing (Apply (Apply IsSuffixOfSym0 x_a168T) y_a168U :: Bool)
+      lambda_a16q6 x_a16q7 y_a16q8
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy IsPrefixOfSym0) sIsPrefixOf)
+                (applySing
+                  (singFun1 (Proxy :: Proxy ReverseSym0) sReverse) x_a16q7))
+            (applySing
+                (singFun1 (Proxy :: Proxy ReverseSym0) sReverse) y_a16q8)
+    in lambda_a16q6 sX sY
+sNull SNil
+  = let
+      lambda_a16q9 :: t_a16dF ~ '[] => Sing (Apply NullSym0 '[] :: Bool)
+      lambda_a16q9 = STrue
+    in lambda_a16q9
+sNull (SCons _s_z_1627651901 _s_z_1627651904)
+  = let
+      lambda_a16qa ::
+        forall _z_1627651901_a1691
+                _z_1627651904_a1694. t_a16dF ~ Apply (Apply (:$) _z_1627651901_a1691) _z_1627651904_a1694 =>
+        Sing _z_1627651901_a1691
+        -> Sing _z_1627651904_a1694
+            -> Sing (Apply NullSym0 (Apply (Apply (:$) _z_1627651901_a1691) _z_1627651904_a1694) :: Bool)
+      lambda_a16qa _z_1627651901_a16qb _z_1627651904_a16qc = SFalse
+    in lambda_a16qa _s_z_1627651901 _s_z_1627651904
+sDropWhileEnd sP sA_1627651916
+  = let
+      lambda_a16qd ::
+        forall p_a169g a_1627651916_a169h. (t_a16dG ~ p_a169g,
+                                            t_a16dH ~ a_1627651916_a169h) =>
+        Sing p_a169g
+        -> Sing a_1627651916_a169h
+            -> Sing (Apply (Apply DropWhileEndSym0 p_a169g) a_1627651916_a169h :: [a_a15eb])
+      lambda_a16qd p_a16qe a_1627651916_a16qf
+        = applySing
+            (applySing
+                (applySing
+                  (singFun3 (Proxy :: Proxy FoldrSym0) sFoldr)
+                  (singFun2
+                      (Proxy ::
+                        Proxy (Apply (Apply Lambda_1627651920Sym0 p_a169g) a_1627651916_a169h))
+                      (\ sX sXs
+                        -> let
+                              lambda_a16qg ::
+                                forall x_a169k xs_a169l.
+                                Sing x_a169k
+                                -> Sing xs_a169l
+                                  -> Sing (Apply (Apply (Apply (Apply Lambda_1627651920Sym0 p_a169g) a_1627651916_a169h) x_a169k) xs_a169l)
+                              lambda_a16qg x_a16qh xs_a16qi
+                                = let
+                                    sScrutinee_1627648562 ::
+                                      Sing (Let1627651924Scrutinee_1627648562Sym4 p_a169g x_a169k xs_a169l a_1627651916_a169h)
+                                    sScrutinee_1627648562
+                                      = applySing
+                                          (applySing
+                                            (singFun2 (Proxy :: Proxy (:&&$)) (%:&&))
+                                            (applySing p_a16qe x_a16qh))
+                                          (applySing
+                                            (singFun1 (Proxy :: Proxy NullSym0) sNull) xs_a16qi)
+                                  in  case sScrutinee_1627648562 of {
+                                        STrue
+                                          -> let
+                                              lambda_a16qj ::
+                                                TrueSym0 ~ Let1627651924Scrutinee_1627648562Sym4 p_a169g x_a169k xs_a169l a_1627651916_a169h =>
+                                                Sing (Case_1627651943_a169G p_a169g x_a169k xs_a169l a_1627651916_a169h TrueSym0)
+                                              lambda_a16qj = SNil
+                                            in lambda_a16qj;
+                                        SFalse
+                                          -> let
+                                              lambda_a16qk ::
+                                                FalseSym0 ~ Let1627651924Scrutinee_1627648562Sym4 p_a169g x_a169k xs_a169l a_1627651916_a169h =>
+                                                Sing (Case_1627651943_a169G p_a169g x_a169k xs_a169l a_1627651916_a169h FalseSym0)
+                                              lambda_a16qk
+                                                = applySing
+                                                    (applySing
+                                                        (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                                        x_a16qh)
+                                                    xs_a16qi
+                                            in lambda_a16qk } ::
+                                        Sing (Case_1627651943_a169G p_a169g x_a169k xs_a169l a_1627651916_a169h (Let1627651924Scrutinee_1627648562Sym4 p_a169g x_a169k xs_a169l a_1627651916_a169h))
+                            in lambda_a16qg sX sXs)))
+                SNil)
+            a_1627651916_a16qf
+    in lambda_a16qd sP sA_1627651916
+sInit SNil
+  = let
+      lambda_a16ql ::
+        t_a16dI ~ '[] => Sing (Apply InitSym0 '[] :: [a_a158p])
+      lambda_a16ql
+        = sError (sing :: Sing "Data.Singletons.List.init: empty list")
+    in lambda_a16ql
+sInit (SCons sX sXs)
+  = let
+      lambda_a16qm ::
+        forall x_a16a6
+                xs_a16a7. t_a16dI ~ Apply (Apply (:$) x_a16a6) xs_a16a7 =>
+        Sing x_a16a6
+        -> Sing xs_a16a7
+            -> Sing (Apply InitSym0 (Apply (Apply (:$) x_a16a6) xs_a16a7) :: [a_a158p])
+      lambda_a16qm x_a16qn xs_a16qo
+        = let
+            sInit' ::
+              forall (t_a16qp :: a_a158t) (t_a16qq :: [a_a158t]).
+              Sing t_a16qp
+              -> Sing t_a16qq
+                  -> Sing (Apply (Apply (Let1627651972Init'Sym2 x_a16a6 xs_a16a7) t_a16qp) t_a16qq :: [a_a158t])
+            sInit' _s_z_1627651993 SNil
+              = let
+                  lambda_a16qr ::
+                    forall _z_1627651993_a16av. (t_a16qp ~ _z_1627651993_a16av,
+                                                  t_a16qq ~ '[]) =>
+                    Sing _z_1627651993_a16av
+                    -> Sing (Apply (Apply (Let1627651972Init'Sym2 x_a16a6 xs_a16a7) _z_1627651993_a16av) '[] :: [a_a158t])
+                  lambda_a16qr _z_1627651993_a16qs = SNil
+                in lambda_a16qr _s_z_1627651993
+            sInit' sY (SCons sZ sZs)
+              = let
+                  lambda_a16qt ::
+                    forall y_a16aw z_a16ax zs_a16ay. (t_a16qp ~ y_a16aw,
+                                                      t_a16qq ~ Apply (Apply (:$) z_a16ax) zs_a16ay) =>
+                    Sing y_a16aw
+                    -> Sing z_a16ax
+                        -> Sing zs_a16ay
+                          -> Sing (Apply (Apply (Let1627651972Init'Sym2 x_a16a6 xs_a16a7) y_a16aw) (Apply (Apply (:$) z_a16ax) zs_a16ay) :: [a_a158t])
+                  lambda_a16qt y_a16qu z_a16qv zs_a16qw
+                    = applySing
+                        (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) y_a16qu)
+                        (applySing
+                            (applySing
+                              (singFun2
+                                  (Proxy :: Proxy (Let1627651972Init'Sym2 x_a16a6 xs_a16a7))
+                                  sInit')
+                              z_a16qv)
+                            zs_a16qw)
+                in lambda_a16qt sY sZ sZs
+          in
+            applySing
+              (applySing
+                  (singFun2
+                    (Proxy :: Proxy (Let1627651972Init'Sym2 x_a16a6 xs_a16a7)) sInit')
+                  x_a16qn)
+              xs_a16qo
+    in lambda_a16qm sX sXs
+sTail (SCons _s_z_1627652003 sT)
+  = let
+      lambda_a16qx ::
+        forall _z_1627652003_a16aF
+                t_a16aG. t_a16dJ ~ Apply (Apply (:$) _z_1627652003_a16aF) t_a16aG =>
+        Sing _z_1627652003_a16aF
+        -> Sing t_a16aG
+            -> Sing (Apply TailSym0 (Apply (Apply (:$) _z_1627652003_a16aF) t_a16aG) :: [a_a158n])
+      lambda_a16qx _z_1627652003_a16qy t_a16qz = t_a16qz
+    in lambda_a16qx _s_z_1627652003 sT
+sTail SNil
+  = let
+      lambda_a16qA ::
+        t_a16dJ ~ '[] => Sing (Apply TailSym0 '[] :: [a_a158n])
+      lambda_a16qA
+        = sError (sing :: Sing "Data.Singletons.List.tail: empty list")
+    in lambda_a16qA
+sLast SNil
+  = let
+      lambda_a16qB ::
+        t_a16dK ~ '[] => Sing (Apply LastSym0 '[] :: a_a158j)
+      lambda_a16qB
+        = sError (sing :: Sing "Data.Singletons.List.last: empty list")
+    in lambda_a16qB
+sLast (SCons sX SNil)
+  = let
+      lambda_a16qC ::
+        forall x_a16aL. t_a16dK ~ Apply (Apply (:$) x_a16aL) '[] =>
+        Sing x_a16aL
+        -> Sing (Apply LastSym0 (Apply (Apply (:$) x_a16aL) '[]) :: a_a158j)
+      lambda_a16qC x_a16qD = x_a16qD
+    in lambda_a16qC sX
+sLast (SCons _s_z_1627652012 (SCons sX sXs))
+  = let
+      lambda_a16qE ::
+        forall _z_1627652012_a16aO
+                x_a16aP
+                xs_a16aQ. t_a16dK ~ Apply (Apply (:$) _z_1627652012_a16aO) (Apply (Apply (:$) x_a16aP) xs_a16aQ) =>
+        Sing _z_1627652012_a16aO
+        -> Sing x_a16aP
+            -> Sing xs_a16aQ
+              -> Sing (Apply LastSym0 (Apply (Apply (:$) _z_1627652012_a16aO) (Apply (Apply (:$) x_a16aP) xs_a16aQ)) :: a_a158j)
+      lambda_a16qE _z_1627652012_a16qF x_a16qG xs_a16qH
+        = applySing
+            (singFun1 (Proxy :: Proxy LastSym0) sLast)
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16qG)
+                xs_a16qH)
+    in lambda_a16qE _s_z_1627652012 sX sXs
+sHead (SCons sA _s_z_1627652022)
+  = let
+      lambda_a16qI ::
+        forall a_a16aV
+                _z_1627652022_a16aY. t_a16dL ~ Apply (Apply (:$) a_a16aV) _z_1627652022_a16aY =>
+        Sing a_a16aV
+        -> Sing _z_1627652022_a16aY
+            -> Sing (Apply HeadSym0 (Apply (Apply (:$) a_a16aV) _z_1627652022_a16aY) :: a_a158h)
+      lambda_a16qI a_a16qJ _z_1627652022_a16qK = a_a16qJ
+    in lambda_a16qI sA _s_z_1627652022
+sHead SNil
+  = let
+      lambda_a16qL ::
+        t_a16dL ~ '[] => Sing (Apply HeadSym0 '[] :: a_a158h)
+      lambda_a16qL
+        = sError (sing :: Sing "Data.Singletons.List.head: empty list")
+    in lambda_a16qL
+sTranspose SNil
+  = let
+      lambda_a16qM ::
+        t_a16dM ~ '[] => Sing (Apply TransposeSym0 '[] :: [[a_a15fs]])
+      lambda_a16qM = SNil
+    in lambda_a16qM
+sTranspose (SCons SNil sXss)
+  = let
+      lambda_a16qN ::
+        forall xss_a16b3. t_a16dM ~ Apply (Apply (:$) '[]) xss_a16b3 =>
+        Sing xss_a16b3
+        -> Sing (Apply TransposeSym0 (Apply (Apply (:$) '[]) xss_a16b3) :: [[a_a15fs]])
+      lambda_a16qN xss_a16qO
+        = applySing
+            (singFun1 (Proxy :: Proxy TransposeSym0) sTranspose) xss_a16qO
+    in lambda_a16qN sXss
+sTranspose (SCons (SCons sX sXs) sXss)
+  = let
+      lambda_a16qP ::
+        forall x_a16b4
+                xs_a16b5
+                xss_a16b6. t_a16dM ~ Apply (Apply (:$) (Apply (Apply (:$) x_a16b4) xs_a16b5)) xss_a16b6 =>
+        Sing x_a16b4
+        -> Sing xs_a16b5
+            -> Sing xss_a16b6
+              -> Sing (Apply TransposeSym0 (Apply (Apply (:$) (Apply (Apply (:$) x_a16b4) xs_a16b5)) xss_a16b6) :: [[a_a15fs]])
+      lambda_a16qP x_a16qQ xs_a16qR xss_a16qS
+        = applySing
+            (applySing
+                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                (applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_a16qQ)
+                  (applySing
+                      (applySing
+                        (singFun2 (Proxy :: Proxy MapSym0) sMap)
+                        (singFun1 (Proxy :: Proxy HeadSym0) sHead))
+                      xss_a16qS)))
+            (applySing
+                (singFun1 (Proxy :: Proxy TransposeSym0) sTranspose)
+                (applySing
+                  (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) xs_a16qR)
+                  (applySing
+                      (applySing
+                        (singFun2 (Proxy :: Proxy MapSym0) sMap)
+                        (singFun1 (Proxy :: Proxy TailSym0) sTail))
+                      xss_a16qS)))
+    in lambda_a16qP sX sXs sXss
\ No newline at end of file
diff --git a/src/Data/Singletons/Prelude/Maybe.hs b/src/Data/Singletons/Prelude/Maybe.hs
index 1ce2f3a..4567185 100644
--- a/src/Data/Singletons/Prelude/Maybe.hs
+++ b/src/Data/Singletons/Prelude/Maybe.hs
@@ -1,6 +1,6 @@
 {-# LANGUAGE TemplateHaskell, ScopedTypeVariables, TypeFamilies,
              DataKinds, PolyKinds, UndecidableInstances, GADTs,
-             RankNTypes #-}
+             RankNTypes, TypeOperators #-}
 
 -----------------------------------------------------------------------------
 -- |
@@ -56,76 +56,456 @@ module Data.Singletons.Prelude.Maybe (
   CatMaybesSym0, CatMaybesSym1, MapMaybeSym0, MapMaybeSym1, MapMaybeSym2
   ) where
 
-import Data.Singletons.Prelude.Instances
 import Data.Singletons
-import Data.Singletons.TH
+import Data.Singletons.Prelude.Instances
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.TypeLits
+import Data.Proxy
 
-$(singletons [d|
-  -- Renamed to avoid name clash
-  -- -| The 'maybe' function takes a default value, a function, and a 'Maybe'
-  -- value.  If the 'Maybe' value is 'Nothing', the function returns the
-  -- default value.  Otherwise, it applies the function to the value inside
-  -- the 'Just' and returns the result.
-  maybe_ :: b -> (a -> b) -> Maybe a -> b
-  maybe_ n _ Nothing  = n
-  maybe_ _ f (Just x) = f x
- |])
-
-$(singletonsOnly [d|
-  -- -| The 'isJust' function returns 'True' iff its argument is of the
-  -- form @Just _@.
-  isJust         :: Maybe a -> Bool
-  isJust Nothing  = False
-  isJust (Just _) = True
-
-  -- -| The 'isNothing' function returns 'True' iff its argument is 'Nothing'.
-  isNothing         :: Maybe a -> Bool
-  isNothing Nothing  = True
-  isNothing (Just _) = False
-
-  -- -| The 'fromJust' function extracts the element out of a 'Just' and
-  -- throws an error if its argument is 'Nothing'.
-  fromJust          :: Maybe a -> a
-  fromJust Nothing  = error "Maybe.fromJust: Nothing" -- yuck
-  fromJust (Just x) = x
-
-  -- -| The 'fromMaybe' function takes a default value and and 'Maybe'
-  -- value.  If the 'Maybe' is 'Nothing', it returns the default values;
-  -- otherwise, it returns the value contained in the 'Maybe'.
-  fromMaybe     :: a -> Maybe a -> a
-  fromMaybe d x = case x of {Nothing -> d;Just v  -> v}
-
-  -- -| The 'maybeToList' function returns an empty list when given
-  -- 'Nothing' or a singleton list when not given 'Nothing'.
-  maybeToList            :: Maybe a -> [a]
-  maybeToList  Nothing   = []
-  maybeToList  (Just x)  = [x]
-
-  -- -| The 'listToMaybe' function returns 'Nothing' on an empty list
-  -- or @'Just' a@ where @a@ is the first element of the list.
-  listToMaybe           :: [a] -> Maybe a
-  listToMaybe []        =  Nothing
-  listToMaybe (a:_)     =  Just a
-
-  -- Modified to avoid list comprehensions
-  -- -| The 'catMaybes' function takes a list of 'Maybe's and returns
-  -- a list of all the 'Just' values.
-  catMaybes              :: [Maybe a] -> [a]
-  catMaybes []             = []
-  catMaybes (Just x  : xs) = x : catMaybes xs
-  catMaybes (Nothing : xs) = catMaybes xs
+maybe_ ::
+  forall b_aIcY a_aIcZ.
+  b_aIcY -> (a_aIcZ -> b_aIcY) -> Maybe a_aIcZ -> b_aIcY
+maybe_ n_aId0 _ Nothing = n_aId0
+maybe_ _ f_aId1 (Just x_aId2) = f_aId1 x_aId2
+type Maybe_Sym3 (t_aId3 :: b_aIcY)
+                (t_aId4 :: TyFun a_aIcZ b_aIcY -> *)
+                (t_aId5 :: Maybe a_aIcZ) =
+    Maybe_ t_aId3 t_aId4 t_aId5
+instance SuppressUnusedWarnings Maybe_Sym2 where
+  suppressUnusedWarnings _ = snd ((,) Maybe_Sym2KindInference ())
+data Maybe_Sym2 (l_aIdc :: b_aIcY)
+                (l_aIdd :: TyFun a_aIcZ b_aIcY -> *)
+                (l_aIdb :: TyFun (Maybe a_aIcZ) b_aIcY)
+  = forall arg_aIde. KindOf (Apply (Maybe_Sym2 l_aIdc l_aIdd) arg_aIde) ~ KindOf (Maybe_Sym3 l_aIdc l_aIdd arg_aIde) =>
+    Maybe_Sym2KindInference
+type instance Apply (Maybe_Sym2 l_aIdc l_aIdd) l_aIdb = Maybe_Sym3 l_aIdc l_aIdd l_aIdb
+instance SuppressUnusedWarnings Maybe_Sym1 where
+  suppressUnusedWarnings _ = snd ((,) Maybe_Sym1KindInference ())
+data Maybe_Sym1 (l_aId9 :: b_aIcY)
+                (l_aId8 :: TyFun (TyFun a_aIcZ b_aIcY
+                                  -> *) (TyFun (Maybe a_aIcZ) b_aIcY -> *))
+  = forall arg_aIda. KindOf (Apply (Maybe_Sym1 l_aId9) arg_aIda) ~ KindOf (Maybe_Sym2 l_aId9 arg_aIda) =>
+    Maybe_Sym1KindInference
+type instance Apply (Maybe_Sym1 l_aId9) l_aId8 = Maybe_Sym2 l_aId9 l_aId8
+instance SuppressUnusedWarnings Maybe_Sym0 where
+  suppressUnusedWarnings _ = snd ((,) Maybe_Sym0KindInference ())
+data Maybe_Sym0 (l_aId6 :: TyFun b_aIcY (TyFun (TyFun a_aIcZ b_aIcY
+                                                -> *) (TyFun (Maybe a_aIcZ) b_aIcY -> *)
+                                          -> *))
+  = forall arg_aId7. KindOf (Apply Maybe_Sym0 arg_aId7) ~ KindOf (Maybe_Sym1 arg_aId7) =>
+    Maybe_Sym0KindInference
+type instance Apply Maybe_Sym0 l_aId6 = Maybe_Sym1 l_aId6
+type family Maybe_ (a_aIdf :: b_aIcY)
+                    (a_aIdg :: TyFun a_aIcZ b_aIcY -> *)
+                    (a_aIdh :: Maybe a_aIcZ) :: b_aIcY where
+  Maybe_ n_aIdi _z_1627559913_aIdl 'Nothing = n_aIdi
+  Maybe_ _z_1627559916_aIdo f_aIdp ('Just x_aIdq) = Apply f_aIdp x_aIdq
+sMaybe_ ::
+  forall (t_aIdr :: b_aIcY)
+          (t_aIds :: TyFun a_aIcZ b_aIcY -> *)
+          (t_aIdt :: Maybe a_aIcZ).
+  Sing t_aIdr
+  -> Sing t_aIds
+      -> Sing t_aIdt
+        -> Sing (Apply (Apply (Apply Maybe_Sym0 t_aIdr) t_aIds) t_aIdt :: b_aIcY)
+sMaybe_ sN _s_z_1627559913 SNothing
+  = let
+      lambda_aIdu ::
+        forall n_aIdi _z_1627559913_aIdl. (t_aIdr ~ n_aIdi,
+                                            t_aIds ~ _z_1627559913_aIdl,
+                                            t_aIdt ~ NothingSym0) =>
+        Sing n_aIdi
+        -> Sing _z_1627559913_aIdl
+            -> Sing (Apply (Apply (Apply Maybe_Sym0 n_aIdi) _z_1627559913_aIdl) NothingSym0 :: b_aIcY)
+      lambda_aIdu n_aIdv _z_1627559913_aIdw = n_aIdv
+    in lambda_aIdu sN _s_z_1627559913
+sMaybe_ _s_z_1627559916 sF (SJust sX)
+  = let
+      lambda_aIdx ::
+        forall _z_1627559916_aIdo
+                f_aIdp
+                x_aIdq. (t_aIdr ~ _z_1627559916_aIdo,
+                        t_aIds ~ f_aIdp,
+                        t_aIdt ~ Apply JustSym0 x_aIdq) =>
+        Sing _z_1627559916_aIdo
+        -> Sing f_aIdp
+            -> Sing x_aIdq
+              -> Sing (Apply (Apply (Apply Maybe_Sym0 _z_1627559916_aIdo) f_aIdp) (Apply JustSym0 x_aIdq) :: b_aIcY)
+      lambda_aIdx _z_1627559916_aIdy f_aIdz x_aIdA
+        = applySing f_aIdz x_aIdA
+    in lambda_aIdx _s_z_1627559916 sF sX
 
-  -- -| The 'mapMaybe' function is a version of 'map' which can throw
-  -- out elements.  In particular, the functional argument returns
-  -- something of type @'Maybe' b@.  If this is 'Nothing', no element
-  -- is added on to the result list.  If it just @'Just' b@, then @b@ is
-  -- included in the result list.
-  mapMaybe          :: (a -> Maybe b) -> [a] -> [b]
-  mapMaybe _ []     = []
-  mapMaybe f (x:xs) =
-   let rs = mapMaybe f xs in
-   case f x of
-    Nothing -> rs
-    Just r  -> r:rs
-  |])
+type Let1627561263RsSym3 t_aIz6 t_aIz7 t_aIz8 =
+    Let1627561263Rs t_aIz6 t_aIz7 t_aIz8
+instance SuppressUnusedWarnings Let1627561263RsSym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627561263RsSym2KindInference ())
+data Let1627561263RsSym2 l_aIzf l_aIzg l_aIze
+  = forall arg_aIzh. KindOf (Apply (Let1627561263RsSym2 l_aIzf l_aIzg) arg_aIzh) ~ KindOf (Let1627561263RsSym3 l_aIzf l_aIzg arg_aIzh) =>
+    Let1627561263RsSym2KindInference
+type instance Apply (Let1627561263RsSym2 l_aIzf l_aIzg) l_aIze = Let1627561263RsSym3 l_aIzf l_aIzg l_aIze
+instance SuppressUnusedWarnings Let1627561263RsSym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627561263RsSym1KindInference ())
+data Let1627561263RsSym1 l_aIzc l_aIzb
+  = forall arg_aIzd. KindOf (Apply (Let1627561263RsSym1 l_aIzc) arg_aIzd) ~ KindOf (Let1627561263RsSym2 l_aIzc arg_aIzd) =>
+    Let1627561263RsSym1KindInference
+type instance Apply (Let1627561263RsSym1 l_aIzc) l_aIzb = Let1627561263RsSym2 l_aIzc l_aIzb
+instance SuppressUnusedWarnings Let1627561263RsSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627561263RsSym0KindInference ())
+data Let1627561263RsSym0 l_aIz9
+  = forall arg_aIza. KindOf (Apply Let1627561263RsSym0 arg_aIza) ~ KindOf (Let1627561263RsSym1 arg_aIza) =>
+    Let1627561263RsSym0KindInference
+type instance Apply Let1627561263RsSym0 l_aIz9 = Let1627561263RsSym1 l_aIz9
+type family Let1627561263Rs f_aIz2 x_aIz3 xs_aIz4 where
+  Let1627561263Rs f_aIz2 x_aIz3 xs_aIz4 = Apply (Apply MapMaybeSym0 f_aIz2) xs_aIz4
+type Let1627561276Scrutinee_1627561246Sym3 t_aIzj t_aIzk t_aIzl =
+    Let1627561276Scrutinee_1627561246 t_aIzj t_aIzk t_aIzl
+instance SuppressUnusedWarnings Let1627561276Scrutinee_1627561246Sym2 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627561276Scrutinee_1627561246Sym2KindInference ())
+data Let1627561276Scrutinee_1627561246Sym2 l_aIzs l_aIzt l_aIzr
+  = forall arg_aIzu. KindOf (Apply (Let1627561276Scrutinee_1627561246Sym2 l_aIzs l_aIzt) arg_aIzu) ~ KindOf (Let1627561276Scrutinee_1627561246Sym3 l_aIzs l_aIzt arg_aIzu) =>
+    Let1627561276Scrutinee_1627561246Sym2KindInference
+type instance Apply (Let1627561276Scrutinee_1627561246Sym2 l_aIzs l_aIzt) l_aIzr = Let1627561276Scrutinee_1627561246Sym3 l_aIzs l_aIzt l_aIzr
+instance SuppressUnusedWarnings Let1627561276Scrutinee_1627561246Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627561276Scrutinee_1627561246Sym1KindInference ())
+data Let1627561276Scrutinee_1627561246Sym1 l_aIzp l_aIzo
+  = forall arg_aIzq. KindOf (Apply (Let1627561276Scrutinee_1627561246Sym1 l_aIzp) arg_aIzq) ~ KindOf (Let1627561276Scrutinee_1627561246Sym2 l_aIzp arg_aIzq) =>
+    Let1627561276Scrutinee_1627561246Sym1KindInference
+type instance Apply (Let1627561276Scrutinee_1627561246Sym1 l_aIzp) l_aIzo = Let1627561276Scrutinee_1627561246Sym2 l_aIzp l_aIzo
+instance SuppressUnusedWarnings Let1627561276Scrutinee_1627561246Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627561276Scrutinee_1627561246Sym0KindInference ())
+data Let1627561276Scrutinee_1627561246Sym0 l_aIzm
+  = forall arg_aIzn. KindOf (Apply Let1627561276Scrutinee_1627561246Sym0 arg_aIzn) ~ KindOf (Let1627561276Scrutinee_1627561246Sym1 arg_aIzn) =>
+    Let1627561276Scrutinee_1627561246Sym0KindInference
+type instance Apply Let1627561276Scrutinee_1627561246Sym0 l_aIzm = Let1627561276Scrutinee_1627561246Sym1 l_aIzm
+type family Let1627561276Scrutinee_1627561246 f_aIz2
+                                              x_aIz3
+                                              xs_aIz4 where
+  Let1627561276Scrutinee_1627561246 f_aIz2 x_aIz3 xs_aIz4 = Apply f_aIz2 x_aIz3
+type family Case_1627561289_aIzw f_aIz2 x_aIz3 xs_aIz4 t_aIzy where
+  Case_1627561289_aIzw f_aIz2 x_aIz3 xs_aIz4 'Nothing = Let1627561263RsSym3 f_aIz2 x_aIz3 xs_aIz4
+  Case_1627561289_aIzw f_aIz2 x_aIz3 xs_aIz4 ('Just r_aIzx) = Apply (Apply (:$) r_aIzx) (Let1627561263RsSym3 f_aIz2 x_aIz3 xs_aIz4)
+type family Case_1627561324_aIA5 d_aIA2 x_aIA3 t_aIA7 where
+  Case_1627561324_aIA5 d_aIA2 x_aIA3 'Nothing = d_aIA2
+  Case_1627561324_aIA5 d_aIA2 x_aIA3 ('Just v_aIA6) = v_aIA6
+type MapMaybeSym2 (t_aIyQ :: TyFun a_aIyH (Maybe b_aIyI) -> *)
+                  (t_aIyR :: [a_aIyH]) =
+    MapMaybe t_aIyQ t_aIyR
+instance SuppressUnusedWarnings MapMaybeSym1 where
+  suppressUnusedWarnings _ = snd ((,) MapMaybeSym1KindInference ())
+data MapMaybeSym1 (l_aIyV :: TyFun a_aIyH (Maybe b_aIyI) -> *)
+                  (l_aIyU :: TyFun [a_aIyH] [b_aIyI])
+  = forall arg_aIyW. KindOf (Apply (MapMaybeSym1 l_aIyV) arg_aIyW) ~ KindOf (MapMaybeSym2 l_aIyV arg_aIyW) =>
+    MapMaybeSym1KindInference
+type instance Apply (MapMaybeSym1 l_aIyV) l_aIyU = MapMaybeSym2 l_aIyV l_aIyU
+instance SuppressUnusedWarnings MapMaybeSym0 where
+  suppressUnusedWarnings _ = snd ((,) MapMaybeSym0KindInference ())
+data MapMaybeSym0 (l_aIyS :: TyFun (TyFun a_aIyH (Maybe b_aIyI)
+                                    -> *) (TyFun [a_aIyH] [b_aIyI] -> *))
+  = forall arg_aIyT. KindOf (Apply MapMaybeSym0 arg_aIyT) ~ KindOf (MapMaybeSym1 arg_aIyT) =>
+    MapMaybeSym0KindInference
+type instance Apply MapMaybeSym0 l_aIyS = MapMaybeSym1 l_aIyS
+type CatMaybesSym1 (t_aIzz :: [Maybe a_aIyD]) = CatMaybes t_aIzz
+instance SuppressUnusedWarnings CatMaybesSym0 where
+  suppressUnusedWarnings _ = snd ((,) CatMaybesSym0KindInference ())
+data CatMaybesSym0 (l_aIzA :: TyFun [Maybe a_aIyD] [a_aIyD])
+  = forall arg_aIzB. KindOf (Apply CatMaybesSym0 arg_aIzB) ~ KindOf (CatMaybesSym1 arg_aIzB) =>
+    CatMaybesSym0KindInference
+type instance Apply CatMaybesSym0 l_aIzA = CatMaybesSym1 l_aIzA
+type ListToMaybeSym1 (t_aIzG :: [a_aIyB]) = ListToMaybe t_aIzG
+instance SuppressUnusedWarnings ListToMaybeSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) ListToMaybeSym0KindInference ())
+data ListToMaybeSym0 (l_aIzH :: TyFun [a_aIyB] (Maybe a_aIyB))
+  = forall arg_aIzI. KindOf (Apply ListToMaybeSym0 arg_aIzI) ~ KindOf (ListToMaybeSym1 arg_aIzI) =>
+    ListToMaybeSym0KindInference
+type instance Apply ListToMaybeSym0 l_aIzH = ListToMaybeSym1 l_aIzH
+type MaybeToListSym1 (t_aIzO :: Maybe a_aIyz) = MaybeToList t_aIzO
+instance SuppressUnusedWarnings MaybeToListSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) MaybeToListSym0KindInference ())
+data MaybeToListSym0 (l_aIzP :: TyFun (Maybe a_aIyz) [a_aIyz])
+  = forall arg_aIzQ. KindOf (Apply MaybeToListSym0 arg_aIzQ) ~ KindOf (MaybeToListSym1 arg_aIzQ) =>
+    MaybeToListSym0KindInference
+type instance Apply MaybeToListSym0 l_aIzP = MaybeToListSym1 l_aIzP
+type FromMaybeSym2 (t_aIzT :: a_aIyv) (t_aIzU :: Maybe a_aIyv) =
+    FromMaybe t_aIzT t_aIzU
+instance SuppressUnusedWarnings FromMaybeSym1 where
+  suppressUnusedWarnings _ = snd ((,) FromMaybeSym1KindInference ())
+data FromMaybeSym1 (l_aIzY :: a_aIyv)
+                    (l_aIzX :: TyFun (Maybe a_aIyv) a_aIyv)
+  = forall arg_aIzZ. KindOf (Apply (FromMaybeSym1 l_aIzY) arg_aIzZ) ~ KindOf (FromMaybeSym2 l_aIzY arg_aIzZ) =>
+    FromMaybeSym1KindInference
+type instance Apply (FromMaybeSym1 l_aIzY) l_aIzX = FromMaybeSym2 l_aIzY l_aIzX
+instance SuppressUnusedWarnings FromMaybeSym0 where
+  suppressUnusedWarnings _ = snd ((,) FromMaybeSym0KindInference ())
+data FromMaybeSym0 (l_aIzV :: TyFun a_aIyv (TyFun (Maybe a_aIyv) a_aIyv
+                                            -> *))
+  = forall arg_aIzW. KindOf (Apply FromMaybeSym0 arg_aIzW) ~ KindOf (FromMaybeSym1 arg_aIzW) =>
+    FromMaybeSym0KindInference
+type instance Apply FromMaybeSym0 l_aIzV = FromMaybeSym1 l_aIzV
+type FromJustSym1 (t_aIA8 :: Maybe a_aIyt) = FromJust t_aIA8
+instance SuppressUnusedWarnings FromJustSym0 where
+  suppressUnusedWarnings _ = snd ((,) FromJustSym0KindInference ())
+data FromJustSym0 (l_aIA9 :: TyFun (Maybe a_aIyt) a_aIyt)
+  = forall arg_aIAa. KindOf (Apply FromJustSym0 arg_aIAa) ~ KindOf (FromJustSym1 arg_aIAa) =>
+    FromJustSym0KindInference
+type instance Apply FromJustSym0 l_aIA9 = FromJustSym1 l_aIA9
+type IsNothingSym1 (t_aIAd :: Maybe a_aIys) = IsNothing t_aIAd
+instance SuppressUnusedWarnings IsNothingSym0 where
+  suppressUnusedWarnings _ = snd ((,) IsNothingSym0KindInference ())
+data IsNothingSym0 (l_aIAe :: TyFun (Maybe a_aIys) Bool)
+  = forall arg_aIAf. KindOf (Apply IsNothingSym0 arg_aIAf) ~ KindOf (IsNothingSym1 arg_aIAf) =>
+    IsNothingSym0KindInference
+type instance Apply IsNothingSym0 l_aIAe = IsNothingSym1 l_aIAe
+type IsJustSym1 (t_aIAk :: Maybe a_aIyr) = IsJust t_aIAk
+instance SuppressUnusedWarnings IsJustSym0 where
+  suppressUnusedWarnings _ = snd ((,) IsJustSym0KindInference ())
+data IsJustSym0 (l_aIAl :: TyFun (Maybe a_aIyr) Bool)
+  = forall arg_aIAm. KindOf (Apply IsJustSym0 arg_aIAm) ~ KindOf (IsJustSym1 arg_aIAm) =>
+    IsJustSym0KindInference
+type instance Apply IsJustSym0 l_aIAl = IsJustSym1 l_aIAl
+type family MapMaybe (a_aIyX :: TyFun a_aIyH (Maybe b_aIyI) -> *)
+                      (a_aIyY :: [a_aIyH]) :: [b_aIyI] where
+  MapMaybe _z_1627561257_aIz1 '[] = '[]
+  MapMaybe f_aIz2 (x_aIz3 ': xs_aIz4) = Case_1627561289_aIzw f_aIz2 x_aIz3 xs_aIz4 (Let1627561276Scrutinee_1627561246Sym3 f_aIz2 x_aIz3 xs_aIz4)
+type family CatMaybes (a_aIzC :: [Maybe a_aIyD]) :: [a_aIyD] where
+  CatMaybes '[] = '[]
+  CatMaybes (('Just x_aIzD) ': xs_aIzE) = Apply (Apply (:$) x_aIzD) (Apply CatMaybesSym0 xs_aIzE)
+  CatMaybes ('Nothing ': xs_aIzF) = Apply CatMaybesSym0 xs_aIzF
+type family ListToMaybe (a_aIzJ :: [a_aIyB]) :: Maybe a_aIyB where
+  ListToMaybe '[] = NothingSym0
+  ListToMaybe (a_aIzK ': _z_1627561305_aIzN) = Apply JustSym0 a_aIzK
+type family MaybeToList (a_aIzR :: Maybe a_aIyz) :: [a_aIyz] where
+  MaybeToList 'Nothing = '[]
+  MaybeToList ('Just x_aIzS) = Apply (Apply (:$) x_aIzS) '[]
+type family FromMaybe (a_aIA0 :: a_aIyv)
+                      (a_aIA1 :: Maybe a_aIyv) :: a_aIyv where
+  FromMaybe d_aIA2 x_aIA3 = Case_1627561324_aIA5 d_aIA2 x_aIA3 x_aIA3
+type family FromJust (a_aIAb :: Maybe a_aIyt) :: a_aIyt where
+  FromJust 'Nothing = Apply ErrorSym0 "Maybe.fromJust: Nothing"
+  FromJust ('Just x_aIAc) = x_aIAc
+type family IsNothing (a_aIAg :: Maybe a_aIys) :: Bool where
+  IsNothing 'Nothing = TrueSym0
+  IsNothing ('Just _z_1627561337_aIAj) = FalseSym0
+type family IsJust (a_aIAn :: Maybe a_aIyr) :: Bool where
+  IsJust 'Nothing = FalseSym0
+  IsJust ('Just _z_1627561344_aIAq) = TrueSym0
+sMapMaybe ::
+  forall (t_aIAr :: TyFun a_aIyH (Maybe b_aIyI) -> *)
+          (t_aIAs :: [a_aIyH]).
+  Sing t_aIAr
+  -> Sing t_aIAs
+      -> Sing (Apply (Apply MapMaybeSym0 t_aIAr) t_aIAs :: [b_aIyI])
+sCatMaybes ::
+  forall (t_aIAt :: [Maybe a_aIyD]).
+  Sing t_aIAt -> Sing (Apply CatMaybesSym0 t_aIAt :: [a_aIyD])
+sListToMaybe ::
+  forall (t_aIAu :: [a_aIyB]).
+  Sing t_aIAu -> Sing (Apply ListToMaybeSym0 t_aIAu :: Maybe a_aIyB)
+sMaybeToList ::
+  forall (t_aIAv :: Maybe a_aIyz).
+  Sing t_aIAv -> Sing (Apply MaybeToListSym0 t_aIAv :: [a_aIyz])
+sFromMaybe ::
+  forall (t_aIAw :: a_aIyv) (t_aIAx :: Maybe a_aIyv).
+  Sing t_aIAw
+  -> Sing t_aIAx
+      -> Sing (Apply (Apply FromMaybeSym0 t_aIAw) t_aIAx :: a_aIyv)
+sFromJust ::
+  forall (t_aIAy :: Maybe a_aIyt).
+  Sing t_aIAy -> Sing (Apply FromJustSym0 t_aIAy :: a_aIyt)
+sIsNothing ::
+  forall (t_aIAz :: Maybe a_aIys).
+  Sing t_aIAz -> Sing (Apply IsNothingSym0 t_aIAz :: Bool)
+sIsJust ::
+  forall (t_aIAA :: Maybe a_aIyr).
+  Sing t_aIAA -> Sing (Apply IsJustSym0 t_aIAA :: Bool)
+sMapMaybe _s_z_1627561257 SNil
+  = let
+      lambda_aIAB ::
+        forall _z_1627561257_aIz1. (t_aIAr ~ _z_1627561257_aIz1,
+                                    t_aIAs ~ '[]) =>
+        Sing _z_1627561257_aIz1
+        -> Sing (Apply (Apply MapMaybeSym0 _z_1627561257_aIz1) '[] :: [b_aIyI])
+      lambda_aIAB _z_1627561257_aIAC = SNil
+    in lambda_aIAB _s_z_1627561257
+sMapMaybe sF (SCons sX sXs)
+  = let
+      lambda_aIAD ::
+        forall f_aIz2 x_aIz3 xs_aIz4. (t_aIAr ~ f_aIz2,
+                                        t_aIAs ~ Apply (Apply (:$) x_aIz3) xs_aIz4) =>
+        Sing f_aIz2
+        -> Sing x_aIz3
+            -> Sing xs_aIz4
+              -> Sing (Apply (Apply MapMaybeSym0 f_aIz2) (Apply (Apply (:$) x_aIz3) xs_aIz4) :: [b_aIyI])
+      lambda_aIAD f_aIAE x_aIAF xs_aIAG
+        = let
+            sRs :: Sing (Let1627561263RsSym3 f_aIz2 x_aIz3 xs_aIz4)
+            sRs
+              = applySing
+                  (applySing
+                      (singFun2 (Proxy :: Proxy MapMaybeSym0) sMapMaybe) f_aIAE)
+                  xs_aIAG in
+          let
+            sScrutinee_1627561246 ::
+              Sing (Let1627561276Scrutinee_1627561246Sym3 f_aIz2 x_aIz3 xs_aIz4)
+            sScrutinee_1627561246 = applySing f_aIAE x_aIAF
+          in  case sScrutinee_1627561246 of {
+                SNothing
+                  -> let
+                        lambda_aIAH ::
+                          NothingSym0 ~ Let1627561276Scrutinee_1627561246Sym3 f_aIz2 x_aIz3 xs_aIz4 =>
+                          Sing (Case_1627561289_aIzw f_aIz2 x_aIz3 xs_aIz4 NothingSym0)
+                        lambda_aIAH = sRs
+                      in lambda_aIAH;
+                SJust sR
+                  -> let
+                        lambda_aIAI ::
+                          forall r_aIzx. Apply JustSym0 r_aIzx ~ Let1627561276Scrutinee_1627561246Sym3 f_aIz2 x_aIz3 xs_aIz4 =>
+                          Sing r_aIzx
+                          -> Sing (Case_1627561289_aIzw f_aIz2 x_aIz3 xs_aIz4 (Apply JustSym0 r_aIzx))
+                        lambda_aIAI r_aIAJ
+                          = applySing
+                              (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) r_aIAJ) sRs
+                      in lambda_aIAI sR } ::
+                Sing (Case_1627561289_aIzw f_aIz2 x_aIz3 xs_aIz4 (Let1627561276Scrutinee_1627561246Sym3 f_aIz2 x_aIz3 xs_aIz4))
+    in lambda_aIAD sF sX sXs
+sCatMaybes SNil
+  = let
+      lambda_aIAK ::
+        t_aIAt ~ '[] => Sing (Apply CatMaybesSym0 '[] :: [a_aIyD])
+      lambda_aIAK = SNil
+    in lambda_aIAK
+sCatMaybes (SCons (SJust sX) sXs)
+  = let
+      lambda_aIAL ::
+        forall x_aIzD
+                xs_aIzE. t_aIAt ~ Apply (Apply (:$) (Apply JustSym0 x_aIzD)) xs_aIzE =>
+        Sing x_aIzD
+        -> Sing xs_aIzE
+            -> Sing (Apply CatMaybesSym0 (Apply (Apply (:$) (Apply JustSym0 x_aIzD)) xs_aIzE) :: [a_aIyD])
+      lambda_aIAL x_aIAM xs_aIAN
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_aIAM)
+            (applySing
+                (singFun1 (Proxy :: Proxy CatMaybesSym0) sCatMaybes) xs_aIAN)
+    in lambda_aIAL sX sXs
+sCatMaybes (SCons SNothing sXs)
+  = let
+      lambda_aIAO ::
+        forall xs_aIzF. t_aIAt ~ Apply (Apply (:$) NothingSym0) xs_aIzF =>
+        Sing xs_aIzF
+        -> Sing (Apply CatMaybesSym0 (Apply (Apply (:$) NothingSym0) xs_aIzF) :: [a_aIyD])
+      lambda_aIAO xs_aIAP
+        = applySing
+            (singFun1 (Proxy :: Proxy CatMaybesSym0) sCatMaybes) xs_aIAP
+    in lambda_aIAO sXs
+sListToMaybe SNil
+  = let
+      lambda_aIAQ ::
+        t_aIAu ~ '[] => Sing (Apply ListToMaybeSym0 '[] :: Maybe a_aIyB)
+      lambda_aIAQ = SNothing
+    in lambda_aIAQ
+sListToMaybe (SCons sA _s_z_1627561305)
+  = let
+      lambda_aIAR ::
+        forall a_aIzK
+                _z_1627561305_aIzN. t_aIAu ~ Apply (Apply (:$) a_aIzK) _z_1627561305_aIzN =>
+        Sing a_aIzK
+        -> Sing _z_1627561305_aIzN
+            -> Sing (Apply ListToMaybeSym0 (Apply (Apply (:$) a_aIzK) _z_1627561305_aIzN) :: Maybe a_aIyB)
+      lambda_aIAR a_aIAS _z_1627561305_aIAT
+        = applySing (singFun1 (Proxy :: Proxy JustSym0) SJust) a_aIAS
+    in lambda_aIAR sA _s_z_1627561305
+sMaybeToList SNothing
+  = let
+      lambda_aIAU ::
+        t_aIAv ~ NothingSym0 =>
+        Sing (Apply MaybeToListSym0 NothingSym0 :: [a_aIyz])
+      lambda_aIAU = SNil
+    in lambda_aIAU
+sMaybeToList (SJust sX)
+  = let
+      lambda_aIAV ::
+        forall x_aIzS. t_aIAv ~ Apply JustSym0 x_aIzS =>
+        Sing x_aIzS
+        -> Sing (Apply MaybeToListSym0 (Apply JustSym0 x_aIzS) :: [a_aIyz])
+      lambda_aIAV x_aIAW
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:$)) SCons) x_aIAW) SNil
+    in lambda_aIAV sX
+sFromMaybe sD sX
+  = let
+      lambda_aIAX ::
+        forall d_aIA2 x_aIA3. (t_aIAw ~ d_aIA2, t_aIAx ~ x_aIA3) =>
+        Sing d_aIA2
+        -> Sing x_aIA3
+            -> Sing (Apply (Apply FromMaybeSym0 d_aIA2) x_aIA3 :: a_aIyv)
+      lambda_aIAX d_aIAY x_aIAZ
+        = case x_aIAZ of {
+            SNothing
+              -> let
+                    lambda_aIB0 ::
+                      NothingSym0 ~ x_aIA3 =>
+                      Sing (Case_1627561324_aIA5 d_aIA2 x_aIA3 NothingSym0)
+                    lambda_aIB0 = d_aIAY
+                  in lambda_aIB0;
+            SJust sV
+              -> let
+                    lambda_aIB1 ::
+                      forall v_aIA6. Apply JustSym0 v_aIA6 ~ x_aIA3 =>
+                      Sing v_aIA6
+                      -> Sing (Case_1627561324_aIA5 d_aIA2 x_aIA3 (Apply JustSym0 v_aIA6))
+                    lambda_aIB1 v_aIB2 = v_aIB2
+                  in lambda_aIB1 sV } ::
+            Sing (Case_1627561324_aIA5 d_aIA2 x_aIA3 x_aIA3)
+    in lambda_aIAX sD sX
+sFromJust SNothing
+  = let
+      lambda_aIB3 ::
+        t_aIAy ~ NothingSym0 =>
+        Sing (Apply FromJustSym0 NothingSym0 :: a_aIyt)
+      lambda_aIB3 = sError (sing :: Sing "Maybe.fromJust: Nothing")
+    in lambda_aIB3
+sFromJust (SJust sX)
+  = let
+      lambda_aIB4 ::
+        forall x_aIAc. t_aIAy ~ Apply JustSym0 x_aIAc =>
+        Sing x_aIAc
+        -> Sing (Apply FromJustSym0 (Apply JustSym0 x_aIAc) :: a_aIyt)
+      lambda_aIB4 x_aIB5 = x_aIB5
+    in lambda_aIB4 sX
+sIsNothing SNothing
+  = let
+      lambda_aIB6 ::
+        t_aIAz ~ NothingSym0 =>
+        Sing (Apply IsNothingSym0 NothingSym0 :: Bool)
+      lambda_aIB6 = STrue
+    in lambda_aIB6
+sIsNothing (SJust _s_z_1627561337)
+  = let
+      lambda_aIB7 ::
+        forall _z_1627561337_aIAj. t_aIAz ~ Apply JustSym0 _z_1627561337_aIAj =>
+        Sing _z_1627561337_aIAj
+        -> Sing (Apply IsNothingSym0 (Apply JustSym0 _z_1627561337_aIAj) :: Bool)
+      lambda_aIB7 _z_1627561337_aIB8 = SFalse
+    in lambda_aIB7 _s_z_1627561337
+sIsJust SNothing
+  = let
+      lambda_aIB9 ::
+        t_aIAA ~ NothingSym0 => Sing (Apply IsJustSym0 NothingSym0 :: Bool)
+      lambda_aIB9 = SFalse
+    in lambda_aIB9
+sIsJust (SJust _s_z_1627561344)
+  = let
+      lambda_aIBa ::
+        forall _z_1627561344_aIAq. t_aIAA ~ Apply JustSym0 _z_1627561344_aIAq =>
+        Sing _z_1627561344_aIAq
+        -> Sing (Apply IsJustSym0 (Apply JustSym0 _z_1627561344_aIAq) :: Bool)
+      lambda_aIBa _z_1627561344_aIBb = STrue
+    in lambda_aIBa _s_z_1627561344
diff --git a/src/Data/Singletons/Prelude/Num.hs b/src/Data/Singletons/Prelude/Num.hs
index bf0f155..56ebb16 100644
--- a/src/Data/Singletons/Prelude/Num.hs
+++ b/src/Data/Singletons/Prelude/Num.hs
@@ -31,42 +31,199 @@ module Data.Singletons.Prelude.Num (
   SubtractSym0, SubtractSym1, SubtractSym2
   ) where
 
-import Data.Singletons.Single
 import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.TypeLits.Internal
 import Data.Singletons.Decide
 import GHC.TypeLits
 import Data.Proxy
 import Unsafe.Coerce
 
-$(singletonsOnly [d|
-  -- Basic numeric class.
-  --
-  -- Minimal complete definition: all except 'negate' or @(-)@
-  class  Num a  where
-      (+), (-), (*)       :: a -> a -> a
-      infixl 6 +
-      infixl 6 -
-      infixl 7 *
-      -- Unary negation.
-      negate              :: a -> a
-      -- Absolute value.
-      abs                 :: a -> a
-      -- Sign of a number.
-      -- The functions 'abs' and 'signum' should satisfy the law:
-      --
-      -- > abs x * signum x == x
-      --
-      -- For real numbers, the 'signum' is either @-1@ (negative), @0@ (zero)
-      -- or @1@ (positive).
-      signum              :: a -> a
-      -- Conversion from a 'Nat'.
-      fromInteger         :: Nat -> a
-
-      x - y               = x + negate y
-
-      negate x            = 0 - x
-  |])
+infixl 7 :*
+infixl 6 :-
+infixl 6 :+
+type (:+$$$) (t_aAiM :: a_aAiF) (t_aAiN :: a_aAiF) =
+    (:+) t_aAiM t_aAiN
+instance SuppressUnusedWarnings (:+$$) where
+  suppressUnusedWarnings _ = snd ((,) (:+$$###) ())
+data (:+$$) (l_aAiR :: a_aAiF) (l_aAiQ :: TyFun a_aAiF a_aAiF)
+  = forall arg_aAiS. KindOf (Apply ((:+$$) l_aAiR) arg_aAiS) ~ KindOf ((:+$$$) l_aAiR arg_aAiS) =>
+    (:+$$###)
+type instance Apply ((:+$$) l_aAiR) l_aAiQ = (:+$$$) l_aAiR l_aAiQ
+instance SuppressUnusedWarnings (:+$) where
+  suppressUnusedWarnings _ = snd ((,) (:+$###) ())
+data (:+$) (l_aAiO :: TyFun a_aAiF (TyFun a_aAiF a_aAiF -> *))
+  = forall arg_aAiP. KindOf (Apply (:+$) arg_aAiP) ~ KindOf ((:+$$) arg_aAiP) =>
+    (:+$###)
+type instance Apply (:+$) l_aAiO = (:+$$) l_aAiO
+type (:-$$$) (t_aAiV :: a_aAiF) (t_aAiW :: a_aAiF) =
+    (:-) t_aAiV t_aAiW
+instance SuppressUnusedWarnings (:-$$) where
+  suppressUnusedWarnings _ = snd ((,) (:-$$###) ())
+data (:-$$) (l_aAj0 :: a_aAiF) (l_aAiZ :: TyFun a_aAiF a_aAiF)
+  = forall arg_aAj1. KindOf (Apply ((:-$$) l_aAj0) arg_aAj1) ~ KindOf ((:-$$$) l_aAj0 arg_aAj1) =>
+    (:-$$###)
+type instance Apply ((:-$$) l_aAj0) l_aAiZ = (:-$$$) l_aAj0 l_aAiZ
+instance SuppressUnusedWarnings (:-$) where
+  suppressUnusedWarnings _ = snd ((,) (:-$###) ())
+data (:-$) (l_aAiX :: TyFun a_aAiF (TyFun a_aAiF a_aAiF -> *))
+  = forall arg_aAiY. KindOf (Apply (:-$) arg_aAiY) ~ KindOf ((:-$$) arg_aAiY) =>
+    (:-$###)
+type instance Apply (:-$) l_aAiX = (:-$$) l_aAiX
+type (:*$$$) (t_aAj4 :: a_aAiF) (t_aAj5 :: a_aAiF) =
+    (:*) t_aAj4 t_aAj5
+instance SuppressUnusedWarnings (:*$$) where
+  suppressUnusedWarnings _ = snd ((,) (:*$$###) ())
+data (:*$$) (l_aAj9 :: a_aAiF) (l_aAj8 :: TyFun a_aAiF a_aAiF)
+  = forall arg_aAja. KindOf (Apply ((:*$$) l_aAj9) arg_aAja) ~ KindOf ((:*$$$) l_aAj9 arg_aAja) =>
+    (:*$$###)
+type instance Apply ((:*$$) l_aAj9) l_aAj8 = (:*$$$) l_aAj9 l_aAj8
+instance SuppressUnusedWarnings (:*$) where
+  suppressUnusedWarnings _ = snd ((,) (:*$###) ())
+data (:*$) (l_aAj6 :: TyFun a_aAiF (TyFun a_aAiF a_aAiF -> *))
+  = forall arg_aAj7. KindOf (Apply (:*$) arg_aAj7) ~ KindOf ((:*$$) arg_aAj7) =>
+    (:*$###)
+type instance Apply (:*$) l_aAj6 = (:*$$) l_aAj6
+type NegateSym1 (t_aAjc :: a_aAiF) = Negate t_aAjc
+instance SuppressUnusedWarnings NegateSym0 where
+  suppressUnusedWarnings _ = snd ((,) NegateSym0KindInference ())
+data NegateSym0 (l_aAjd :: TyFun a_aAiF a_aAiF)
+  = forall arg_aAje. KindOf (Apply NegateSym0 arg_aAje) ~ KindOf (NegateSym1 arg_aAje) =>
+    NegateSym0KindInference
+type instance Apply NegateSym0 l_aAjd = NegateSym1 l_aAjd
+type AbsSym1 (t_aAjg :: a_aAiF) = Abs t_aAjg
+instance SuppressUnusedWarnings AbsSym0 where
+  suppressUnusedWarnings _ = snd ((,) AbsSym0KindInference ())
+data AbsSym0 (l_aAjh :: TyFun a_aAiF a_aAiF)
+  = forall arg_aAji. KindOf (Apply AbsSym0 arg_aAji) ~ KindOf (AbsSym1 arg_aAji) =>
+    AbsSym0KindInference
+type instance Apply AbsSym0 l_aAjh = AbsSym1 l_aAjh
+type SignumSym1 (t_aAjk :: a_aAiF) = Signum t_aAjk
+instance SuppressUnusedWarnings SignumSym0 where
+  suppressUnusedWarnings _ = snd ((,) SignumSym0KindInference ())
+data SignumSym0 (l_aAjl :: TyFun a_aAiF a_aAiF)
+  = forall arg_aAjm. KindOf (Apply SignumSym0 arg_aAjm) ~ KindOf (SignumSym1 arg_aAjm) =>
+    SignumSym0KindInference
+type instance Apply SignumSym0 l_aAjl = SignumSym1 l_aAjl
+type FromIntegerSym1 (t_aAjo :: Nat) = FromInteger t_aAjo
+instance SuppressUnusedWarnings FromIntegerSym0 where
+  suppressUnusedWarnings _
+    = snd ((,) FromIntegerSym0KindInference ())
+data FromIntegerSym0 (l_aAjp :: TyFun Nat a_aAiF)
+  = forall arg_aAjq. KindOf (Apply FromIntegerSym0 arg_aAjq) ~ KindOf (FromIntegerSym1 arg_aAjq) =>
+    FromIntegerSym0KindInference
+type instance Apply FromIntegerSym0 l_aAjp = FromIntegerSym1 l_aAjp
+type family TFHelper_1627529554_aAjF (a_aAjC :: a_aAiF)
+                                      (a_aAjD :: a_aAiF) :: a_aAiF where
+  TFHelper_1627529554_aAjF x_aAjA y_aAjB = Apply (Apply (:+$) x_aAjA) (Apply NegateSym0 y_aAjB)
+type TFHelper_1627529554Sym2 (t_aAjG :: a_aAiF)
+                              (t_aAjH :: a_aAiF) =
+    TFHelper_1627529554_aAjF t_aAjG t_aAjH
+instance SuppressUnusedWarnings TFHelper_1627529554Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627529554Sym1KindInference ())
+data TFHelper_1627529554Sym1 (l_aAjL :: a_aAiF)
+                              (l_aAjK :: TyFun a_aAiF a_aAiF)
+  = forall arg_aAjM. KindOf (Apply (TFHelper_1627529554Sym1 l_aAjL) arg_aAjM) ~ KindOf (TFHelper_1627529554Sym2 l_aAjL arg_aAjM) =>
+    TFHelper_1627529554Sym1KindInference
+type instance Apply (TFHelper_1627529554Sym1 l_aAjL) l_aAjK = TFHelper_1627529554Sym2 l_aAjL l_aAjK
+instance SuppressUnusedWarnings TFHelper_1627529554Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627529554Sym0KindInference ())
+data TFHelper_1627529554Sym0 (l_aAjI :: TyFun a_aAiF (TyFun a_aAiF a_aAiF
+                                                      -> *))
+  = forall arg_aAjJ. KindOf (Apply TFHelper_1627529554Sym0 arg_aAjJ) ~ KindOf (TFHelper_1627529554Sym1 arg_aAjJ) =>
+    TFHelper_1627529554Sym0KindInference
+type instance Apply TFHelper_1627529554Sym0 l_aAjI = TFHelper_1627529554Sym1 l_aAjI
+type family Negate_1627529569_aAjU (a_aAjS :: a_aAiF) :: a_aAiF where
+  Negate_1627529569_aAjU x_aAjR = Apply (Apply (:-$) (FromInteger 0)) x_aAjR
+type Negate_1627529569Sym1 (t_aAjV :: a_aAiF) =
+    Negate_1627529569_aAjU t_aAjV
+instance SuppressUnusedWarnings Negate_1627529569Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Negate_1627529569Sym0KindInference ())
+data Negate_1627529569Sym0 (l_aAjW :: TyFun a_aAiF a_aAiF)
+  = forall arg_aAjX. KindOf (Apply Negate_1627529569Sym0 arg_aAjX) ~ KindOf (Negate_1627529569Sym1 arg_aAjX) =>
+    Negate_1627529569Sym0KindInference
+type instance Apply Negate_1627529569Sym0 l_aAjW = Negate_1627529569Sym1 l_aAjW
+class kproxy_aAiJ ~ 'KProxy => PNum (kproxy_aAiJ :: KProxy a_aAiF) where
+  type family (:+) (arg_aAiK :: a_aAiF)
+                    (arg_aAiL :: a_aAiF) :: a_aAiF
+  type family (:-) (arg_aAiT :: a_aAiF)
+                    (arg_aAiU :: a_aAiF) :: a_aAiF
+  type family (:*) (arg_aAj2 :: a_aAiF)
+                    (arg_aAj3 :: a_aAiF) :: a_aAiF
+  type family Negate (arg_aAjb :: a_aAiF) :: a_aAiF
+  type family Abs (arg_aAjf :: a_aAiF) :: a_aAiF
+  type family Signum (arg_aAjj :: a_aAiF) :: a_aAiF
+  type family FromInteger (arg_aAjn :: Nat) :: a_aAiF
+  type instance (:-) (a_aAjC :: a_aAiF)
+        (a_aAjD :: a_aAiF) = Apply (Apply TFHelper_1627529554Sym0 a_aAjC) a_aAjD
+  type instance Negate (a_aAjS :: a_aAiF) = Apply Negate_1627529569Sym0 a_aAjS
+infixl 7 %:*
+infixl 6 %:-
+infixl 6 %:+
+class kproxy_aAkd ~ 'KProxy => SNum (kproxy_aAkd :: KProxy a_aAiF) where
+  (%:+) ::
+    forall (t_aAjY :: a_aAiF) (t_aAjZ :: a_aAiF).
+    Sing t_aAjY
+    -> Sing t_aAjZ
+        -> Sing (Apply (Apply (:+$) t_aAjY) t_aAjZ :: a_aAiF)
+  (%:-) ::
+    forall (t_aAk0 :: a_aAiF) (t_aAk1 :: a_aAiF).
+    Sing t_aAk0
+    -> Sing t_aAk1
+        -> Sing (Apply (Apply (:-$) t_aAk0) t_aAk1 :: a_aAiF)
+  (%:*) ::
+    forall (t_aAk2 :: a_aAiF) (t_aAk3 :: a_aAiF).
+    Sing t_aAk2
+    -> Sing t_aAk3
+        -> Sing (Apply (Apply (:*$) t_aAk2) t_aAk3 :: a_aAiF)
+  sNegate ::
+    forall (t_aAk4 :: a_aAiF).
+    Sing t_aAk4 -> Sing (Apply NegateSym0 t_aAk4 :: a_aAiF)
+  sAbs ::
+    forall (t_aAk5 :: a_aAiF).
+    Sing t_aAk5 -> Sing (Apply AbsSym0 t_aAk5 :: a_aAiF)
+  sSignum ::
+    forall (t_aAk6 :: a_aAiF).
+    Sing t_aAk6 -> Sing (Apply SignumSym0 t_aAk6 :: a_aAiF)
+  sFromInteger ::
+    forall (t_aAk7 :: Nat).
+    Sing t_aAk7 -> Sing (Apply FromIntegerSym0 t_aAk7 :: a_aAiF)
+  -- default (%:-) ::
+  --           forall (t_aAk0 :: a_aAiF)
+  --                   (t_aAk1 :: a_aAiF). Apply (Apply (:-$) t_aAk0) t_aAk1 ~ Apply (Apply TFHelper_1627529554Sym0 t_aAk0) t_aAk1 =>
+  --           Sing t_aAk0
+  --           -> Sing t_aAk1
+  --               -> Sing (Apply (Apply (:-$) t_aAk0) t_aAk1 :: a_aAiF)
+  -- default sNegate ::
+  --           forall (t_aAk4 :: a_aAiF). Apply NegateSym0 t_aAk4 ~ Apply Negate_1627529569Sym0 t_aAk4 =>
+  --           Sing t_aAk4 -> Sing (Apply NegateSym0 t_aAk4 :: a_aAiF)
+  -- (%:-) sX sY
+  --   = let
+  --       lambda_aAk8 ::
+  --         forall x_aAjA y_aAjB. (t_aAk0 ~ x_aAjA, t_aAk1 ~ y_aAjB) =>
+  --         Sing x_aAjA
+  --         -> Sing y_aAjB
+  --             -> Sing (Apply (Apply (:-$) x_aAjA) y_aAjB :: a_aAiF)
+  --       lambda_aAk8 x_aAk9 y_aAka
+  --         = applySing
+  --             (applySing (singFun2 (Proxy :: Proxy (:+$)) (%:+)) x_aAk9)
+  --             (applySing (singFun1 (Proxy :: Proxy NegateSym0) sNegate) y_aAka)
+  --     in lambda_aAk8 sX sY
+  -- sNegate sX
+  --   = let
+  --       lambda_aAkb ::
+  --         forall x_aAjR. t_aAk4 ~ x_aAjR =>
+  --         Sing x_aAjR -> Sing (Apply NegateSym0 x_aAjR :: a_aAiF)
+  --       lambda_aAkb x_aAkc
+  --         = applySing
+  --             (applySing
+  --                 (singFun2 (Proxy :: Proxy (:-$)) (%:-))
+  --                 (sFromInteger (sing :: Sing 0)))
+  --             x_aAkc
+  --     in lambda_aAkb sX
 
 -- PNum instance
 type family SignumNat (a :: Nat) :: Nat where
@@ -124,7 +281,39 @@ instance SNum ('KProxy :: KProxy Nat) where
 
   sFromInteger x = x
 
-$(singletonsOnly [d|
-  subtract :: Num a => a -> a -> a
-  subtract x y = y - x
-  |])
+type SubtractSym2 (t_aAYY :: a_aAXV) (t_aAYZ :: a_aAXV) =
+    Subtract t_aAYY t_aAYZ
+instance SuppressUnusedWarnings SubtractSym1 where
+  suppressUnusedWarnings _ = snd ((,) SubtractSym1KindInference ())
+data SubtractSym1 (l_aAZ3 :: a_aAXV)
+                  (l_aAZ2 :: TyFun a_aAXV a_aAXV)
+  = forall arg_aAZ4. KindOf (Apply (SubtractSym1 l_aAZ3) arg_aAZ4) ~ KindOf (SubtractSym2 l_aAZ3 arg_aAZ4) =>
+    SubtractSym1KindInference
+type instance Apply (SubtractSym1 l_aAZ3) l_aAZ2 = SubtractSym2 l_aAZ3 l_aAZ2
+instance SuppressUnusedWarnings SubtractSym0 where
+  suppressUnusedWarnings _ = snd ((,) SubtractSym0KindInference ())
+data SubtractSym0 (l_aAZ0 :: TyFun a_aAXV (TyFun a_aAXV a_aAXV
+                                            -> *))
+  = forall arg_aAZ1. KindOf (Apply SubtractSym0 arg_aAZ1) ~ KindOf (SubtractSym1 arg_aAZ1) =>
+    SubtractSym0KindInference
+type instance Apply SubtractSym0 l_aAZ0 = SubtractSym1 l_aAZ0
+type family Subtract (a_aAZ5 :: a_aAXV)
+                      (a_aAZ6 :: a_aAXV) :: a_aAXV where
+  Subtract x_aAZ7 y_aAZ8 = Apply (Apply (:-$) y_aAZ8) x_aAZ7
+sSubtract ::
+  forall (t_aAZ9 :: a_aAXV)
+          (t_aAZa :: a_aAXV). SNum ('KProxy :: KProxy a_aAXV) =>
+  Sing t_aAZ9
+  -> Sing t_aAZa
+      -> Sing (Apply (Apply SubtractSym0 t_aAZ9) t_aAZa :: a_aAXV)
+sSubtract sX sY
+  = let
+      lambda_aAZb ::
+        forall x_aAZ7 y_aAZ8. (t_aAZ9 ~ x_aAZ7, t_aAZa ~ y_aAZ8) =>
+        Sing x_aAZ7
+        -> Sing y_aAZ8
+            -> Sing (Apply (Apply SubtractSym0 x_aAZ7) y_aAZ8 :: a_aAXV)
+      lambda_aAZb x_aAZc y_aAZd
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy (:-$)) (%:-)) y_aAZd) x_aAZc
+    in lambda_aAZb sX sY
diff --git a/src/Data/Singletons/Prelude/Ord.hs b/src/Data/Singletons/Prelude/Ord.hs
index a2169fe..055cb25 100644
--- a/src/Data/Singletons/Prelude/Ord.hs
+++ b/src/Data/Singletons/Prelude/Ord.hs
@@ -37,47 +37,2462 @@ module Data.Singletons.Prelude.Ord (
   MinSym0, MinSym1, MinSym2
   ) where
 
-import Data.Singletons.Single
+import Data.Proxy
+import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.Prelude.Eq
 import Data.Singletons.Prelude.Instances
-import Data.Singletons.Prelude.Bool
-import Data.Singletons.Util
 
-$(singletonsOnly [d|
-  class  (Eq a) => Ord a  where
-    compare              :: a -> a -> Ordering
-    (<), (<=), (>), (>=) :: a -> a -> Bool
-    infix 4 <=
-    infix 4 <
-    infix 4 >
-    infix 4 >=
-    max, min             :: a -> a -> a
+infix 4 :>=
+infix 4 :>
+infix 4 :<
+infix 4 :<=
+type CompareSym2 (t_abnO :: a_aaXX) (t_abnP :: a_aaXX) =
+    Compare t_abnO t_abnP
+instance SuppressUnusedWarnings CompareSym1 where
+  suppressUnusedWarnings _ = snd ((,) CompareSym1KindInference ())
+data CompareSym1 (l_abnT :: a_aaXX)
+                  (l_abnS :: TyFun a_aaXX Ordering)
+  = forall arg_abnU. KindOf (Apply (CompareSym1 l_abnT) arg_abnU) ~ KindOf (CompareSym2 l_abnT arg_abnU) =>
+    CompareSym1KindInference
+type instance Apply (CompareSym1 l_abnT) l_abnS = CompareSym2 l_abnT l_abnS
+instance SuppressUnusedWarnings CompareSym0 where
+  suppressUnusedWarnings _ = snd ((,) CompareSym0KindInference ())
+data CompareSym0 (l_abnQ :: TyFun a_aaXX (TyFun a_aaXX Ordering
+                                          -> *))
+  = forall arg_abnR. KindOf (Apply CompareSym0 arg_abnR) ~ KindOf (CompareSym1 arg_abnR) =>
+    CompareSym0KindInference
+type instance Apply CompareSym0 l_abnQ = CompareSym1 l_abnQ
+type (:<$$$) (t_abnX :: a_aaXX) (t_abnY :: a_aaXX) =
+    (:<) t_abnX t_abnY
+instance SuppressUnusedWarnings (:<$$) where
+  suppressUnusedWarnings _ = snd ((,) (:<$$###) ())
+data (:<$$) (l_abo2 :: a_aaXX) (l_abo1 :: TyFun a_aaXX Bool)
+  = forall arg_abo3. KindOf (Apply ((:<$$) l_abo2) arg_abo3) ~ KindOf ((:<$$$) l_abo2 arg_abo3) =>
+    (:<$$###)
+type instance Apply ((:<$$) l_abo2) l_abo1 = (:<$$$) l_abo2 l_abo1
+instance SuppressUnusedWarnings (:<$) where
+  suppressUnusedWarnings _ = snd ((,) (:<$###) ())
+data (:<$) (l_abnZ :: TyFun a_aaXX (TyFun a_aaXX Bool -> *))
+  = forall arg_abo0. KindOf (Apply (:<$) arg_abo0) ~ KindOf ((:<$$) arg_abo0) =>
+    (:<$###)
+type instance Apply (:<$) l_abnZ = (:<$$) l_abnZ
+type (:<=$$$) (t_abo6 :: a_aaXX) (t_abo7 :: a_aaXX) =
+    (:<=) t_abo6 t_abo7
+instance SuppressUnusedWarnings (:<=$$) where
+  suppressUnusedWarnings _ = snd ((,) (:<=$$###) ())
+data (:<=$$) (l_abob :: a_aaXX) (l_aboa :: TyFun a_aaXX Bool)
+  = forall arg_aboc. KindOf (Apply ((:<=$$) l_abob) arg_aboc) ~ KindOf ((:<=$$$) l_abob arg_aboc) =>
+    (:<=$$###)
+type instance Apply ((:<=$$) l_abob) l_aboa = (:<=$$$) l_abob l_aboa
+instance SuppressUnusedWarnings (:<=$) where
+  suppressUnusedWarnings _ = snd ((,) (:<=$###) ())
+data (:<=$) (l_abo8 :: TyFun a_aaXX (TyFun a_aaXX Bool -> *))
+  = forall arg_abo9. KindOf (Apply (:<=$) arg_abo9) ~ KindOf ((:<=$$) arg_abo9) =>
+    (:<=$###)
+type instance Apply (:<=$) l_abo8 = (:<=$$) l_abo8
+type (:>$$$) (t_abof :: a_aaXX) (t_abog :: a_aaXX) =
+    (:>) t_abof t_abog
+instance SuppressUnusedWarnings (:>$$) where
+  suppressUnusedWarnings _ = snd ((,) (:>$$###) ())
+data (:>$$) (l_abok :: a_aaXX) (l_aboj :: TyFun a_aaXX Bool)
+  = forall arg_abol. KindOf (Apply ((:>$$) l_abok) arg_abol) ~ KindOf ((:>$$$) l_abok arg_abol) =>
+    (:>$$###)
+type instance Apply ((:>$$) l_abok) l_aboj = (:>$$$) l_abok l_aboj
+instance SuppressUnusedWarnings (:>$) where
+  suppressUnusedWarnings _ = snd ((,) (:>$###) ())
+data (:>$) (l_aboh :: TyFun a_aaXX (TyFun a_aaXX Bool -> *))
+  = forall arg_aboi. KindOf (Apply (:>$) arg_aboi) ~ KindOf ((:>$$) arg_aboi) =>
+    (:>$###)
+type instance Apply (:>$) l_aboh = (:>$$) l_aboh
+type (:>=$$$) (t_aboo :: a_aaXX) (t_abop :: a_aaXX) =
+    (:>=) t_aboo t_abop
+instance SuppressUnusedWarnings (:>=$$) where
+  suppressUnusedWarnings _ = snd ((,) (:>=$$###) ())
+data (:>=$$) (l_abot :: a_aaXX) (l_abos :: TyFun a_aaXX Bool)
+  = forall arg_abou. KindOf (Apply ((:>=$$) l_abot) arg_abou) ~ KindOf ((:>=$$$) l_abot arg_abou) =>
+    (:>=$$###)
+type instance Apply ((:>=$$) l_abot) l_abos = (:>=$$$) l_abot l_abos
+instance SuppressUnusedWarnings (:>=$) where
+  suppressUnusedWarnings _ = snd ((,) (:>=$###) ())
+data (:>=$) (l_aboq :: TyFun a_aaXX (TyFun a_aaXX Bool -> *))
+  = forall arg_abor. KindOf (Apply (:>=$) arg_abor) ~ KindOf ((:>=$$) arg_abor) =>
+    (:>=$###)
+type instance Apply (:>=$) l_aboq = (:>=$$) l_aboq
+type MaxSym2 (t_abox :: a_aaXX) (t_aboy :: a_aaXX) =
+    Max t_abox t_aboy
+instance SuppressUnusedWarnings MaxSym1 where
+  suppressUnusedWarnings _ = snd ((,) MaxSym1KindInference ())
+data MaxSym1 (l_aboC :: a_aaXX) (l_aboB :: TyFun a_aaXX a_aaXX)
+  = forall arg_aboD. KindOf (Apply (MaxSym1 l_aboC) arg_aboD) ~ KindOf (MaxSym2 l_aboC arg_aboD) =>
+    MaxSym1KindInference
+type instance Apply (MaxSym1 l_aboC) l_aboB = MaxSym2 l_aboC l_aboB
+instance SuppressUnusedWarnings MaxSym0 where
+  suppressUnusedWarnings _ = snd ((,) MaxSym0KindInference ())
+data MaxSym0 (l_aboz :: TyFun a_aaXX (TyFun a_aaXX a_aaXX -> *))
+  = forall arg_aboA. KindOf (Apply MaxSym0 arg_aboA) ~ KindOf (MaxSym1 arg_aboA) =>
+    MaxSym0KindInference
+type instance Apply MaxSym0 l_aboz = MaxSym1 l_aboz
+type MinSym2 (t_aboG :: a_aaXX) (t_aboH :: a_aaXX) =
+    Min t_aboG t_aboH
+instance SuppressUnusedWarnings MinSym1 where
+  suppressUnusedWarnings _ = snd ((,) MinSym1KindInference ())
+data MinSym1 (l_aboL :: a_aaXX) (l_aboK :: TyFun a_aaXX a_aaXX)
+  = forall arg_aboM. KindOf (Apply (MinSym1 l_aboL) arg_aboM) ~ KindOf (MinSym2 l_aboL arg_aboM) =>
+    MinSym1KindInference
+type instance Apply (MinSym1 l_aboL) l_aboK = MinSym2 l_aboL l_aboK
+instance SuppressUnusedWarnings MinSym0 where
+  suppressUnusedWarnings _ = snd ((,) MinSym0KindInference ())
+data MinSym0 (l_aboI :: TyFun a_aaXX (TyFun a_aaXX a_aaXX -> *))
+  = forall arg_aboJ. KindOf (Apply MinSym0 arg_aboJ) ~ KindOf (MinSym1 arg_aboJ) =>
+    MinSym0KindInference
+type instance Apply MinSym0 l_aboI = MinSym1 l_aboI
+type Let1627433784Scrutinee_1627432124Sym2 t_aboZ t_abp0 =
+    Let1627433784Scrutinee_1627432124 t_aboZ t_abp0
+instance SuppressUnusedWarnings Let1627433784Scrutinee_1627432124Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433784Scrutinee_1627432124Sym1KindInference ())
+data Let1627433784Scrutinee_1627432124Sym1 l_abp4 l_abp3
+  = forall arg_abp5. KindOf (Apply (Let1627433784Scrutinee_1627432124Sym1 l_abp4) arg_abp5) ~ KindOf (Let1627433784Scrutinee_1627432124Sym2 l_abp4 arg_abp5) =>
+    Let1627433784Scrutinee_1627432124Sym1KindInference
+type instance Apply (Let1627433784Scrutinee_1627432124Sym1 l_abp4) l_abp3 = Let1627433784Scrutinee_1627432124Sym2 l_abp4 l_abp3
+instance SuppressUnusedWarnings Let1627433784Scrutinee_1627432124Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433784Scrutinee_1627432124Sym0KindInference ())
+data Let1627433784Scrutinee_1627432124Sym0 l_abp1
+  = forall arg_abp2. KindOf (Apply Let1627433784Scrutinee_1627432124Sym0 arg_abp2) ~ KindOf (Let1627433784Scrutinee_1627432124Sym1 arg_abp2) =>
+    Let1627433784Scrutinee_1627432124Sym0KindInference
+type instance Apply Let1627433784Scrutinee_1627432124Sym0 l_abp1 = Let1627433784Scrutinee_1627432124Sym1 l_abp1
+type family Let1627433784Scrutinee_1627432124 x_aboW y_aboX where
+  Let1627433784Scrutinee_1627432124 x_aboW y_aboX = Apply (Apply (:==$) x_aboW) y_aboX
+type Let1627433794Scrutinee_1627432126Sym2 t_abp9 t_abpa =
+    Let1627433794Scrutinee_1627432126 t_abp9 t_abpa
+instance SuppressUnusedWarnings Let1627433794Scrutinee_1627432126Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433794Scrutinee_1627432126Sym1KindInference ())
+data Let1627433794Scrutinee_1627432126Sym1 l_abpe l_abpd
+  = forall arg_abpf. KindOf (Apply (Let1627433794Scrutinee_1627432126Sym1 l_abpe) arg_abpf) ~ KindOf (Let1627433794Scrutinee_1627432126Sym2 l_abpe arg_abpf) =>
+    Let1627433794Scrutinee_1627432126Sym1KindInference
+type instance Apply (Let1627433794Scrutinee_1627432126Sym1 l_abpe) l_abpd = Let1627433794Scrutinee_1627432126Sym2 l_abpe l_abpd
+instance SuppressUnusedWarnings Let1627433794Scrutinee_1627432126Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433794Scrutinee_1627432126Sym0KindInference ())
+data Let1627433794Scrutinee_1627432126Sym0 l_abpb
+  = forall arg_abpc. KindOf (Apply Let1627433794Scrutinee_1627432126Sym0 arg_abpc) ~ KindOf (Let1627433794Scrutinee_1627432126Sym1 arg_abpc) =>
+    Let1627433794Scrutinee_1627432126Sym0KindInference
+type instance Apply Let1627433794Scrutinee_1627432126Sym0 l_abpb = Let1627433794Scrutinee_1627432126Sym1 l_abpb
+type family Let1627433794Scrutinee_1627432126 x_aboW y_aboX where
+  Let1627433794Scrutinee_1627432126 x_aboW y_aboX = Apply (Apply (:<=$) x_aboW) y_aboX
+type family Case_1627433802_abph x_aboW y_aboX t_abpi where
+  Case_1627433802_abph x_aboW y_aboX 'True = LTSym0
+  Case_1627433802_abph x_aboW y_aboX 'False = GTSym0
+type family Case_1627433792_abp7 x_aboW y_aboX t_abpj where
+  Case_1627433792_abp7 x_aboW y_aboX 'True = EQSym0
+  Case_1627433792_abp7 x_aboW y_aboX 'False = Case_1627433802_abph x_aboW y_aboX (Let1627433794Scrutinee_1627432126Sym2 x_aboW y_aboX)
+type family Compare_1627433808_abpn (a_abpk :: a_aaXX)
+                                    (a_abpl :: a_aaXX) :: Ordering where
+  Compare_1627433808_abpn x_aboW y_aboX = Case_1627433792_abp7 x_aboW y_aboX (Let1627433784Scrutinee_1627432124Sym2 x_aboW y_aboX)
+type Compare_1627433808Sym2 (t_abpo :: a_aaXX) (t_abpp :: a_aaXX) =
+    Compare_1627433808_abpn t_abpo t_abpp
+instance SuppressUnusedWarnings Compare_1627433808Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627433808Sym1KindInference ())
+data Compare_1627433808Sym1 (l_abpt :: a_aaXX)
+                            (l_abps :: TyFun a_aaXX Ordering)
+  = forall arg_abpu. KindOf (Apply (Compare_1627433808Sym1 l_abpt) arg_abpu) ~ KindOf (Compare_1627433808Sym2 l_abpt arg_abpu) =>
+    Compare_1627433808Sym1KindInference
+type instance Apply (Compare_1627433808Sym1 l_abpt) l_abps = Compare_1627433808Sym2 l_abpt l_abps
+instance SuppressUnusedWarnings Compare_1627433808Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627433808Sym0KindInference ())
+data Compare_1627433808Sym0 (l_abpq :: TyFun a_aaXX (TyFun a_aaXX Ordering
+                                                      -> *))
+  = forall arg_abpr. KindOf (Apply Compare_1627433808Sym0 arg_abpr) ~ KindOf (Compare_1627433808Sym1 arg_abpr) =>
+    Compare_1627433808Sym0KindInference
+type instance Apply Compare_1627433808Sym0 l_abpq = Compare_1627433808Sym1 l_abpq
+type Let1627433828Scrutinee_1627432128Sym2 t_abpH t_abpI =
+    Let1627433828Scrutinee_1627432128 t_abpH t_abpI
+instance SuppressUnusedWarnings Let1627433828Scrutinee_1627432128Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433828Scrutinee_1627432128Sym1KindInference ())
+data Let1627433828Scrutinee_1627432128Sym1 l_abpM l_abpL
+  = forall arg_abpN. KindOf (Apply (Let1627433828Scrutinee_1627432128Sym1 l_abpM) arg_abpN) ~ KindOf (Let1627433828Scrutinee_1627432128Sym2 l_abpM arg_abpN) =>
+    Let1627433828Scrutinee_1627432128Sym1KindInference
+type instance Apply (Let1627433828Scrutinee_1627432128Sym1 l_abpM) l_abpL = Let1627433828Scrutinee_1627432128Sym2 l_abpM l_abpL
+instance SuppressUnusedWarnings Let1627433828Scrutinee_1627432128Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433828Scrutinee_1627432128Sym0KindInference ())
+data Let1627433828Scrutinee_1627432128Sym0 l_abpJ
+  = forall arg_abpK. KindOf (Apply Let1627433828Scrutinee_1627432128Sym0 arg_abpK) ~ KindOf (Let1627433828Scrutinee_1627432128Sym1 arg_abpK) =>
+    Let1627433828Scrutinee_1627432128Sym0KindInference
+type instance Apply Let1627433828Scrutinee_1627432128Sym0 l_abpJ = Let1627433828Scrutinee_1627432128Sym1 l_abpJ
+type family Let1627433828Scrutinee_1627432128 x_abpE y_abpF where
+  Let1627433828Scrutinee_1627432128 x_abpE y_abpF = Apply (Apply CompareSym0 x_abpE) y_abpF
+type family Case_1627433836_abpP x_abpE y_abpF t_abpQ where
+  Case_1627433836_abpP x_abpE y_abpF 'LT = TrueSym0
+  Case_1627433836_abpP x_abpE y_abpF 'EQ = FalseSym0
+  Case_1627433836_abpP x_abpE y_abpF 'GT = FalseSym0
+type family TFHelper_1627433841_abpU (a_abpR :: a_aaXX)
+                                      (a_abpS :: a_aaXX) :: Bool where
+  TFHelper_1627433841_abpU x_abpE y_abpF = Case_1627433836_abpP x_abpE y_abpF (Let1627433828Scrutinee_1627432128Sym2 x_abpE y_abpF)
+type TFHelper_1627433841Sym2 (t_abpV :: a_aaXX)
+                              (t_abpW :: a_aaXX) =
+    TFHelper_1627433841_abpU t_abpV t_abpW
+instance SuppressUnusedWarnings TFHelper_1627433841Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627433841Sym1KindInference ())
+data TFHelper_1627433841Sym1 (l_abq0 :: a_aaXX)
+                              (l_abpZ :: TyFun a_aaXX Bool)
+  = forall arg_abq1. KindOf (Apply (TFHelper_1627433841Sym1 l_abq0) arg_abq1) ~ KindOf (TFHelper_1627433841Sym2 l_abq0 arg_abq1) =>
+    TFHelper_1627433841Sym1KindInference
+type instance Apply (TFHelper_1627433841Sym1 l_abq0) l_abpZ = TFHelper_1627433841Sym2 l_abq0 l_abpZ
+instance SuppressUnusedWarnings TFHelper_1627433841Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627433841Sym0KindInference ())
+data TFHelper_1627433841Sym0 (l_abpX :: TyFun a_aaXX (TyFun a_aaXX Bool
+                                                      -> *))
+  = forall arg_abpY. KindOf (Apply TFHelper_1627433841Sym0 arg_abpY) ~ KindOf (TFHelper_1627433841Sym1 arg_abpY) =>
+    TFHelper_1627433841Sym0KindInference
+type instance Apply TFHelper_1627433841Sym0 l_abpX = TFHelper_1627433841Sym1 l_abpX
+type Let1627433861Scrutinee_1627432130Sym2 t_abqe t_abqf =
+    Let1627433861Scrutinee_1627432130 t_abqe t_abqf
+instance SuppressUnusedWarnings Let1627433861Scrutinee_1627432130Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433861Scrutinee_1627432130Sym1KindInference ())
+data Let1627433861Scrutinee_1627432130Sym1 l_abqj l_abqi
+  = forall arg_abqk. KindOf (Apply (Let1627433861Scrutinee_1627432130Sym1 l_abqj) arg_abqk) ~ KindOf (Let1627433861Scrutinee_1627432130Sym2 l_abqj arg_abqk) =>
+    Let1627433861Scrutinee_1627432130Sym1KindInference
+type instance Apply (Let1627433861Scrutinee_1627432130Sym1 l_abqj) l_abqi = Let1627433861Scrutinee_1627432130Sym2 l_abqj l_abqi
+instance SuppressUnusedWarnings Let1627433861Scrutinee_1627432130Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433861Scrutinee_1627432130Sym0KindInference ())
+data Let1627433861Scrutinee_1627432130Sym0 l_abqg
+  = forall arg_abqh. KindOf (Apply Let1627433861Scrutinee_1627432130Sym0 arg_abqh) ~ KindOf (Let1627433861Scrutinee_1627432130Sym1 arg_abqh) =>
+    Let1627433861Scrutinee_1627432130Sym0KindInference
+type instance Apply Let1627433861Scrutinee_1627432130Sym0 l_abqg = Let1627433861Scrutinee_1627432130Sym1 l_abqg
+type family Let1627433861Scrutinee_1627432130 x_abqb y_abqc where
+  Let1627433861Scrutinee_1627432130 x_abqb y_abqc = Apply (Apply CompareSym0 x_abqb) y_abqc
+type family Case_1627433869_abqm x_abqb y_abqc t_abqn where
+  Case_1627433869_abqm x_abqb y_abqc 'LT = TrueSym0
+  Case_1627433869_abqm x_abqb y_abqc 'EQ = TrueSym0
+  Case_1627433869_abqm x_abqb y_abqc 'GT = FalseSym0
+type family TFHelper_1627433874_abqr (a_abqo :: a_aaXX)
+                                      (a_abqp :: a_aaXX) :: Bool where
+  TFHelper_1627433874_abqr x_abqb y_abqc = Case_1627433869_abqm x_abqb y_abqc (Let1627433861Scrutinee_1627432130Sym2 x_abqb y_abqc)
+type TFHelper_1627433874Sym2 (t_abqs :: a_aaXX)
+                              (t_abqt :: a_aaXX) =
+    TFHelper_1627433874_abqr t_abqs t_abqt
+instance SuppressUnusedWarnings TFHelper_1627433874Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627433874Sym1KindInference ())
+data TFHelper_1627433874Sym1 (l_abqx :: a_aaXX)
+                              (l_abqw :: TyFun a_aaXX Bool)
+  = forall arg_abqy. KindOf (Apply (TFHelper_1627433874Sym1 l_abqx) arg_abqy) ~ KindOf (TFHelper_1627433874Sym2 l_abqx arg_abqy) =>
+    TFHelper_1627433874Sym1KindInference
+type instance Apply (TFHelper_1627433874Sym1 l_abqx) l_abqw = TFHelper_1627433874Sym2 l_abqx l_abqw
+instance SuppressUnusedWarnings TFHelper_1627433874Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627433874Sym0KindInference ())
+data TFHelper_1627433874Sym0 (l_abqu :: TyFun a_aaXX (TyFun a_aaXX Bool
+                                                      -> *))
+  = forall arg_abqv. KindOf (Apply TFHelper_1627433874Sym0 arg_abqv) ~ KindOf (TFHelper_1627433874Sym1 arg_abqv) =>
+    TFHelper_1627433874Sym0KindInference
+type instance Apply TFHelper_1627433874Sym0 l_abqu = TFHelper_1627433874Sym1 l_abqu
+type Let1627433894Scrutinee_1627432132Sym2 t_abqL t_abqM =
+    Let1627433894Scrutinee_1627432132 t_abqL t_abqM
+instance SuppressUnusedWarnings Let1627433894Scrutinee_1627432132Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433894Scrutinee_1627432132Sym1KindInference ())
+data Let1627433894Scrutinee_1627432132Sym1 l_abqQ l_abqP
+  = forall arg_abqR. KindOf (Apply (Let1627433894Scrutinee_1627432132Sym1 l_abqQ) arg_abqR) ~ KindOf (Let1627433894Scrutinee_1627432132Sym2 l_abqQ arg_abqR) =>
+    Let1627433894Scrutinee_1627432132Sym1KindInference
+type instance Apply (Let1627433894Scrutinee_1627432132Sym1 l_abqQ) l_abqP = Let1627433894Scrutinee_1627432132Sym2 l_abqQ l_abqP
+instance SuppressUnusedWarnings Let1627433894Scrutinee_1627432132Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433894Scrutinee_1627432132Sym0KindInference ())
+data Let1627433894Scrutinee_1627432132Sym0 l_abqN
+  = forall arg_abqO. KindOf (Apply Let1627433894Scrutinee_1627432132Sym0 arg_abqO) ~ KindOf (Let1627433894Scrutinee_1627432132Sym1 arg_abqO) =>
+    Let1627433894Scrutinee_1627432132Sym0KindInference
+type instance Apply Let1627433894Scrutinee_1627432132Sym0 l_abqN = Let1627433894Scrutinee_1627432132Sym1 l_abqN
+type family Let1627433894Scrutinee_1627432132 x_abqI y_abqJ where
+  Let1627433894Scrutinee_1627432132 x_abqI y_abqJ = Apply (Apply CompareSym0 x_abqI) y_abqJ
+type family Case_1627433902_abqT x_abqI y_abqJ t_abqU where
+  Case_1627433902_abqT x_abqI y_abqJ 'LT = FalseSym0
+  Case_1627433902_abqT x_abqI y_abqJ 'EQ = FalseSym0
+  Case_1627433902_abqT x_abqI y_abqJ 'GT = TrueSym0
+type family TFHelper_1627433907_abqY (a_abqV :: a_aaXX)
+                                      (a_abqW :: a_aaXX) :: Bool where
+  TFHelper_1627433907_abqY x_abqI y_abqJ = Case_1627433902_abqT x_abqI y_abqJ (Let1627433894Scrutinee_1627432132Sym2 x_abqI y_abqJ)
+type TFHelper_1627433907Sym2 (t_abqZ :: a_aaXX)
+                              (t_abr0 :: a_aaXX) =
+    TFHelper_1627433907_abqY t_abqZ t_abr0
+instance SuppressUnusedWarnings TFHelper_1627433907Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627433907Sym1KindInference ())
+data TFHelper_1627433907Sym1 (l_abr4 :: a_aaXX)
+                              (l_abr3 :: TyFun a_aaXX Bool)
+  = forall arg_abr5. KindOf (Apply (TFHelper_1627433907Sym1 l_abr4) arg_abr5) ~ KindOf (TFHelper_1627433907Sym2 l_abr4 arg_abr5) =>
+    TFHelper_1627433907Sym1KindInference
+type instance Apply (TFHelper_1627433907Sym1 l_abr4) l_abr3 = TFHelper_1627433907Sym2 l_abr4 l_abr3
+instance SuppressUnusedWarnings TFHelper_1627433907Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627433907Sym0KindInference ())
+data TFHelper_1627433907Sym0 (l_abr1 :: TyFun a_aaXX (TyFun a_aaXX Bool
+                                                      -> *))
+  = forall arg_abr2. KindOf (Apply TFHelper_1627433907Sym0 arg_abr2) ~ KindOf (TFHelper_1627433907Sym1 arg_abr2) =>
+    TFHelper_1627433907Sym0KindInference
+type instance Apply TFHelper_1627433907Sym0 l_abr1 = TFHelper_1627433907Sym1 l_abr1
+type Let1627433927Scrutinee_1627432134Sym2 t_abri t_abrj =
+    Let1627433927Scrutinee_1627432134 t_abri t_abrj
+instance SuppressUnusedWarnings Let1627433927Scrutinee_1627432134Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433927Scrutinee_1627432134Sym1KindInference ())
+data Let1627433927Scrutinee_1627432134Sym1 l_abrn l_abrm
+  = forall arg_abro. KindOf (Apply (Let1627433927Scrutinee_1627432134Sym1 l_abrn) arg_abro) ~ KindOf (Let1627433927Scrutinee_1627432134Sym2 l_abrn arg_abro) =>
+    Let1627433927Scrutinee_1627432134Sym1KindInference
+type instance Apply (Let1627433927Scrutinee_1627432134Sym1 l_abrn) l_abrm = Let1627433927Scrutinee_1627432134Sym2 l_abrn l_abrm
+instance SuppressUnusedWarnings Let1627433927Scrutinee_1627432134Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433927Scrutinee_1627432134Sym0KindInference ())
+data Let1627433927Scrutinee_1627432134Sym0 l_abrk
+  = forall arg_abrl. KindOf (Apply Let1627433927Scrutinee_1627432134Sym0 arg_abrl) ~ KindOf (Let1627433927Scrutinee_1627432134Sym1 arg_abrl) =>
+    Let1627433927Scrutinee_1627432134Sym0KindInference
+type instance Apply Let1627433927Scrutinee_1627432134Sym0 l_abrk = Let1627433927Scrutinee_1627432134Sym1 l_abrk
+type family Let1627433927Scrutinee_1627432134 x_abrf y_abrg where
+  Let1627433927Scrutinee_1627432134 x_abrf y_abrg = Apply (Apply CompareSym0 x_abrf) y_abrg
+type family Case_1627433935_abrq x_abrf y_abrg t_abrr where
+  Case_1627433935_abrq x_abrf y_abrg 'LT = FalseSym0
+  Case_1627433935_abrq x_abrf y_abrg 'EQ = TrueSym0
+  Case_1627433935_abrq x_abrf y_abrg 'GT = TrueSym0
+type family TFHelper_1627433940_abrv (a_abrs :: a_aaXX)
+                                      (a_abrt :: a_aaXX) :: Bool where
+  TFHelper_1627433940_abrv x_abrf y_abrg = Case_1627433935_abrq x_abrf y_abrg (Let1627433927Scrutinee_1627432134Sym2 x_abrf y_abrg)
+type TFHelper_1627433940Sym2 (t_abrw :: a_aaXX)
+                              (t_abrx :: a_aaXX) =
+    TFHelper_1627433940_abrv t_abrw t_abrx
+instance SuppressUnusedWarnings TFHelper_1627433940Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627433940Sym1KindInference ())
+data TFHelper_1627433940Sym1 (l_abrB :: a_aaXX)
+                              (l_abrA :: TyFun a_aaXX Bool)
+  = forall arg_abrC. KindOf (Apply (TFHelper_1627433940Sym1 l_abrB) arg_abrC) ~ KindOf (TFHelper_1627433940Sym2 l_abrB arg_abrC) =>
+    TFHelper_1627433940Sym1KindInference
+type instance Apply (TFHelper_1627433940Sym1 l_abrB) l_abrA = TFHelper_1627433940Sym2 l_abrB l_abrA
+instance SuppressUnusedWarnings TFHelper_1627433940Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) TFHelper_1627433940Sym0KindInference ())
+data TFHelper_1627433940Sym0 (l_abry :: TyFun a_aaXX (TyFun a_aaXX Bool
+                                                      -> *))
+  = forall arg_abrz. KindOf (Apply TFHelper_1627433940Sym0 arg_abrz) ~ KindOf (TFHelper_1627433940Sym1 arg_abrz) =>
+    TFHelper_1627433940Sym0KindInference
+type instance Apply TFHelper_1627433940Sym0 l_abry = TFHelper_1627433940Sym1 l_abry
+type Let1627433960Scrutinee_1627432136Sym2 t_abrP t_abrQ =
+    Let1627433960Scrutinee_1627432136 t_abrP t_abrQ
+instance SuppressUnusedWarnings Let1627433960Scrutinee_1627432136Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433960Scrutinee_1627432136Sym1KindInference ())
+data Let1627433960Scrutinee_1627432136Sym1 l_abrU l_abrT
+  = forall arg_abrV. KindOf (Apply (Let1627433960Scrutinee_1627432136Sym1 l_abrU) arg_abrV) ~ KindOf (Let1627433960Scrutinee_1627432136Sym2 l_abrU arg_abrV) =>
+    Let1627433960Scrutinee_1627432136Sym1KindInference
+type instance Apply (Let1627433960Scrutinee_1627432136Sym1 l_abrU) l_abrT = Let1627433960Scrutinee_1627432136Sym2 l_abrU l_abrT
+instance SuppressUnusedWarnings Let1627433960Scrutinee_1627432136Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433960Scrutinee_1627432136Sym0KindInference ())
+data Let1627433960Scrutinee_1627432136Sym0 l_abrR
+  = forall arg_abrS. KindOf (Apply Let1627433960Scrutinee_1627432136Sym0 arg_abrS) ~ KindOf (Let1627433960Scrutinee_1627432136Sym1 arg_abrS) =>
+    Let1627433960Scrutinee_1627432136Sym0KindInference
+type instance Apply Let1627433960Scrutinee_1627432136Sym0 l_abrR = Let1627433960Scrutinee_1627432136Sym1 l_abrR
+type family Let1627433960Scrutinee_1627432136 x_abrM y_abrN where
+  Let1627433960Scrutinee_1627432136 x_abrM y_abrN = Apply (Apply (:<=$) x_abrM) y_abrN
+type family Case_1627433968_abrX x_abrM y_abrN t_abrY where
+  Case_1627433968_abrX x_abrM y_abrN 'True = y_abrN
+  Case_1627433968_abrX x_abrM y_abrN 'False = x_abrM
+type family Max_1627433973_abs2 (a_abrZ :: a_aaXX)
+                                (a_abs0 :: a_aaXX) :: a_aaXX where
+  Max_1627433973_abs2 x_abrM y_abrN = Case_1627433968_abrX x_abrM y_abrN (Let1627433960Scrutinee_1627432136Sym2 x_abrM y_abrN)
+type Max_1627433973Sym2 (t_abs3 :: a_aaXX) (t_abs4 :: a_aaXX) =
+    Max_1627433973_abs2 t_abs3 t_abs4
+instance SuppressUnusedWarnings Max_1627433973Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Max_1627433973Sym1KindInference ())
+data Max_1627433973Sym1 (l_abs8 :: a_aaXX)
+                        (l_abs7 :: TyFun a_aaXX a_aaXX)
+  = forall arg_abs9. KindOf (Apply (Max_1627433973Sym1 l_abs8) arg_abs9) ~ KindOf (Max_1627433973Sym2 l_abs8 arg_abs9) =>
+    Max_1627433973Sym1KindInference
+type instance Apply (Max_1627433973Sym1 l_abs8) l_abs7 = Max_1627433973Sym2 l_abs8 l_abs7
+instance SuppressUnusedWarnings Max_1627433973Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Max_1627433973Sym0KindInference ())
+data Max_1627433973Sym0 (l_abs5 :: TyFun a_aaXX (TyFun a_aaXX a_aaXX
+                                                  -> *))
+  = forall arg_abs6. KindOf (Apply Max_1627433973Sym0 arg_abs6) ~ KindOf (Max_1627433973Sym1 arg_abs6) =>
+    Max_1627433973Sym0KindInference
+type instance Apply Max_1627433973Sym0 l_abs5 = Max_1627433973Sym1 l_abs5
+type Let1627433993Scrutinee_1627432138Sym2 t_absm t_absn =
+    Let1627433993Scrutinee_1627432138 t_absm t_absn
+instance SuppressUnusedWarnings Let1627433993Scrutinee_1627432138Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433993Scrutinee_1627432138Sym1KindInference ())
+data Let1627433993Scrutinee_1627432138Sym1 l_absr l_absq
+  = forall arg_abss. KindOf (Apply (Let1627433993Scrutinee_1627432138Sym1 l_absr) arg_abss) ~ KindOf (Let1627433993Scrutinee_1627432138Sym2 l_absr arg_abss) =>
+    Let1627433993Scrutinee_1627432138Sym1KindInference
+type instance Apply (Let1627433993Scrutinee_1627432138Sym1 l_absr) l_absq = Let1627433993Scrutinee_1627432138Sym2 l_absr l_absq
+instance SuppressUnusedWarnings Let1627433993Scrutinee_1627432138Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Let1627433993Scrutinee_1627432138Sym0KindInference ())
+data Let1627433993Scrutinee_1627432138Sym0 l_abso
+  = forall arg_absp. KindOf (Apply Let1627433993Scrutinee_1627432138Sym0 arg_absp) ~ KindOf (Let1627433993Scrutinee_1627432138Sym1 arg_absp) =>
+    Let1627433993Scrutinee_1627432138Sym0KindInference
+type instance Apply Let1627433993Scrutinee_1627432138Sym0 l_abso = Let1627433993Scrutinee_1627432138Sym1 l_abso
+type family Let1627433993Scrutinee_1627432138 x_absj y_absk where
+  Let1627433993Scrutinee_1627432138 x_absj y_absk = Apply (Apply (:<=$) x_absj) y_absk
+type family Case_1627434001_absu x_absj y_absk t_absv where
+  Case_1627434001_absu x_absj y_absk 'True = x_absj
+  Case_1627434001_absu x_absj y_absk 'False = y_absk
+type family Min_1627434006_absz (a_absw :: a_aaXX)
+                                (a_absx :: a_aaXX) :: a_aaXX where
+  Min_1627434006_absz x_absj y_absk = Case_1627434001_absu x_absj y_absk (Let1627433993Scrutinee_1627432138Sym2 x_absj y_absk)
+type Min_1627434006Sym2 (t_absA :: a_aaXX) (t_absB :: a_aaXX) =
+    Min_1627434006_absz t_absA t_absB
+instance SuppressUnusedWarnings Min_1627434006Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Min_1627434006Sym1KindInference ())
+data Min_1627434006Sym1 (l_absF :: a_aaXX)
+                        (l_absE :: TyFun a_aaXX a_aaXX)
+  = forall arg_absG. KindOf (Apply (Min_1627434006Sym1 l_absF) arg_absG) ~ KindOf (Min_1627434006Sym2 l_absF arg_absG) =>
+    Min_1627434006Sym1KindInference
+type instance Apply (Min_1627434006Sym1 l_absF) l_absE = Min_1627434006Sym2 l_absF l_absE
+instance SuppressUnusedWarnings Min_1627434006Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Min_1627434006Sym0KindInference ())
+data Min_1627434006Sym0 (l_absC :: TyFun a_aaXX (TyFun a_aaXX a_aaXX
+                                                  -> *))
+  = forall arg_absD. KindOf (Apply Min_1627434006Sym0 arg_absD) ~ KindOf (Min_1627434006Sym1 arg_absD) =>
+    Min_1627434006Sym0KindInference
+type instance Apply Min_1627434006Sym0 l_absC = Min_1627434006Sym1 l_absC
+class (PEq ('KProxy :: KProxy a_aaXX),
+        kproxy_abnL ~ 'KProxy) => POrd (kproxy_abnL :: KProxy a_aaXX) where
+  type family Compare (arg_abnM :: a_aaXX)
+                      (arg_abnN :: a_aaXX) :: Ordering
+  type family (:<) (arg_abnV :: a_aaXX) (arg_abnW :: a_aaXX) :: Bool
+  type family (:<=) (arg_abo4 :: a_aaXX) (arg_abo5 :: a_aaXX) :: Bool
+  type family (:>) (arg_abod :: a_aaXX) (arg_aboe :: a_aaXX) :: Bool
+  type family (:>=) (arg_abom :: a_aaXX) (arg_abon :: a_aaXX) :: Bool
+  type family Max (arg_abov :: a_aaXX) (arg_abow :: a_aaXX) :: a_aaXX
+  type family Min (arg_aboE :: a_aaXX) (arg_aboF :: a_aaXX) :: a_aaXX
+  type instance Compare (a_abpk :: a_aaXX)
+          (a_abpl :: a_aaXX) = Apply (Apply Compare_1627433808Sym0 a_abpk) a_abpl
+  type instance (:<) (a_abpR :: a_aaXX)
+        (a_abpS :: a_aaXX) = Apply (Apply TFHelper_1627433841Sym0 a_abpR) a_abpS
+  type instance (:<=) (a_abqo :: a_aaXX)
+        (a_abqp :: a_aaXX) = Apply (Apply TFHelper_1627433874Sym0 a_abqo) a_abqp
+  type instance (:>) (a_abqV :: a_aaXX)
+        (a_abqW :: a_aaXX) = Apply (Apply TFHelper_1627433907Sym0 a_abqV) a_abqW
+  type instance (:>=) (a_abrs :: a_aaXX)
+        (a_abrt :: a_aaXX) = Apply (Apply TFHelper_1627433940Sym0 a_abrs) a_abrt
+  type instance Max (a_abrZ :: a_aaXX)
+      (a_abs0 :: a_aaXX) = Apply (Apply Max_1627433973Sym0 a_abrZ) a_abs0
+  type instance Min (a_absw :: a_aaXX)
+      (a_absx :: a_aaXX) = Apply (Apply Min_1627434006Sym0 a_absw) a_absx
+infix 4 %:>=
+infix 4 %:>
+infix 4 %:<
+infix 4 %:<=
+class (SEq ('KProxy :: KProxy a_aaXX),
+        kproxy_abub ~ 'KProxy) => SOrd (kproxy_abub :: KProxy a_aaXX) where
+  sCompare ::
+    forall (t_absH :: a_aaXX) (t_absI :: a_aaXX).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply CompareSym0 t_absH) t_absI :: Ordering)
+  (%:<) ::
+    forall (t_absJ :: a_aaXX) (t_absK :: a_aaXX).
+    Sing t_absJ
+    -> Sing t_absK -> Sing (Apply (Apply (:<$) t_absJ) t_absK :: Bool)
+  (%:<=) ::
+    forall (t_absL :: a_aaXX) (t_absM :: a_aaXX).
+    Sing t_absL
+    -> Sing t_absM -> Sing (Apply (Apply (:<=$) t_absL) t_absM :: Bool)
+  (%:>) ::
+    forall (t_absN :: a_aaXX) (t_absO :: a_aaXX).
+    Sing t_absN
+    -> Sing t_absO -> Sing (Apply (Apply (:>$) t_absN) t_absO :: Bool)
+  (%:>=) ::
+    forall (t_absP :: a_aaXX) (t_absQ :: a_aaXX).
+    Sing t_absP
+    -> Sing t_absQ -> Sing (Apply (Apply (:>=$) t_absP) t_absQ :: Bool)
+  sMax ::
+    forall (t_absR :: a_aaXX) (t_absS :: a_aaXX).
+    Sing t_absR
+    -> Sing t_absS
+        -> Sing (Apply (Apply MaxSym0 t_absR) t_absS :: a_aaXX)
+  sMin ::
+    forall (t_absT :: a_aaXX) (t_absU :: a_aaXX).
+    Sing t_absT
+    -> Sing t_absU
+        -> Sing (Apply (Apply MinSym0 t_absT) t_absU :: a_aaXX)
+  -- default sCompare ::
+  --           forall (t_absH :: a_aaXX)
+  --                   (t_absI :: a_aaXX). Apply (Apply CompareSym0 t_absH) t_absI ~ Apply (Apply Compare_1627433808Sym0 t_absH) t_absI =>
+  --           Sing t_absH
+  --           -> Sing t_absI
+  --               -> Sing (Apply (Apply CompareSym0 t_absH) t_absI :: Ordering)
+  -- default (%:<) ::
+  --           forall (t_absJ :: a_aaXX)
+  --                   (t_absK :: a_aaXX). Apply (Apply (:<$) t_absJ) t_absK ~ Apply (Apply TFHelper_1627433841Sym0 t_absJ) t_absK =>
+  --           Sing t_absJ
+  --           -> Sing t_absK -> Sing (Apply (Apply (:<$) t_absJ) t_absK :: Bool)
+  -- default (%:<=) ::
+  --           forall (t_absL :: a_aaXX)
+  --                   (t_absM :: a_aaXX). Apply (Apply (:<=$) t_absL) t_absM ~ Apply (Apply TFHelper_1627433874Sym0 t_absL) t_absM =>
+  --           Sing t_absL
+  --           -> Sing t_absM -> Sing (Apply (Apply (:<=$) t_absL) t_absM :: Bool)
+  -- default (%:>) ::
+  --           forall (t_absN :: a_aaXX)
+  --                   (t_absO :: a_aaXX). Apply (Apply (:>$) t_absN) t_absO ~ Apply (Apply TFHelper_1627433907Sym0 t_absN) t_absO =>
+  --           Sing t_absN
+  --           -> Sing t_absO -> Sing (Apply (Apply (:>$) t_absN) t_absO :: Bool)
+  -- default (%:>=) ::
+  --           forall (t_absP :: a_aaXX)
+  --                   (t_absQ :: a_aaXX). Apply (Apply (:>=$) t_absP) t_absQ ~ Apply (Apply TFHelper_1627433940Sym0 t_absP) t_absQ =>
+  --           Sing t_absP
+  --           -> Sing t_absQ -> Sing (Apply (Apply (:>=$) t_absP) t_absQ :: Bool)
+  -- default sMax ::
+  --           forall (t_absR :: a_aaXX)
+  --                   (t_absS :: a_aaXX). Apply (Apply MaxSym0 t_absR) t_absS ~ Apply (Apply Max_1627433973Sym0 t_absR) t_absS =>
+  --           Sing t_absR
+  --           -> Sing t_absS
+  --               -> Sing (Apply (Apply MaxSym0 t_absR) t_absS :: a_aaXX)
+  -- default sMin ::
+  --           forall (t_absT :: a_aaXX)
+  --                   (t_absU :: a_aaXX). Apply (Apply MinSym0 t_absT) t_absU ~ Apply (Apply Min_1627434006Sym0 t_absT) t_absU =>
+  --           Sing t_absT
+  --           -> Sing t_absU
+  --               -> Sing (Apply (Apply MinSym0 t_absT) t_absU :: a_aaXX)
+  -- sCompare sX sY
+  --   = let
+  --       lambda_absV ::
+  --         forall x_aboW y_aboX. (t_absH ~ x_aboW, t_absI ~ y_aboX) =>
+  --         Sing x_aboW
+  --         -> Sing y_aboX
+  --             -> Sing (Apply (Apply CompareSym0 x_aboW) y_aboX :: Ordering)
+  --       lambda_absV x_absW y_absX
+  --         = let
+  --             sScrutinee_1627432124 ::
+  --               Sing (Let1627433784Scrutinee_1627432124Sym2 x_aboW y_aboX)
+  --             sScrutinee_1627432124
+  --               = applySing
+  --                   (applySing (singFun2 (Proxy :: Proxy (:==$)) (%:==)) x_absW) y_absX
+  --           in  case sScrutinee_1627432124 of {
+  --                 STrue
+  --                   -> let
+  --                         lambda_abt8 ::
+  --                           TrueSym0 ~ Let1627433784Scrutinee_1627432124Sym2 x_aboW y_aboX =>
+  --                           Sing (Case_1627433792_abp7 x_aboW y_aboX TrueSym0)
+  --                         lambda_abt8 = SEQ
+  --                       in lambda_abt8;
+  --                 SFalse
+  --                   -> let
+  --                         lambda_abtp ::
+  --                           FalseSym0 ~ Let1627433784Scrutinee_1627432124Sym2 x_aboW y_aboX =>
+  --                           Sing (Case_1627433792_abp7 x_aboW y_aboX FalseSym0)
+  --                         lambda_abtp
+  --                           = let
+  --                               sScrutinee_1627432126 ::
+  --                                 Sing (Let1627433794Scrutinee_1627432126Sym2 x_aboW y_aboX)
+  --                               sScrutinee_1627432126
+  --                                 = applySing
+  --                                     (applySing
+  --                                       (singFun2 (Proxy :: Proxy (:<=$)) (%:<=)) x_absW)
+  --                                     y_absX
+  --                             in  case sScrutinee_1627432126 of {
+  --                                   STrue
+  --                                     -> let
+  --                                         lambda_abtq ::
+  --                                           TrueSym0 ~ Let1627433794Scrutinee_1627432126Sym2 x_aboW y_aboX =>
+  --                                           Sing (Case_1627433802_abph x_aboW y_aboX TrueSym0)
+  --                                         lambda_abtq = SLT
+  --                                       in lambda_abtq;
+  --                                   SFalse
+  --                                     -> let
+  --                                         lambda_abtr ::
+  --                                           FalseSym0 ~ Let1627433794Scrutinee_1627432126Sym2 x_aboW y_aboX =>
+  --                                           Sing (Case_1627433802_abph x_aboW y_aboX FalseSym0)
+  --                                         lambda_abtr = SGT
+  --                                       in lambda_abtr } ::
+  --                                   Sing (Case_1627433802_abph x_aboW y_aboX (Let1627433794Scrutinee_1627432126Sym2 x_aboW y_aboX))
+  --                       in lambda_abtp } ::
+  --                 Sing (Case_1627433792_abp7 x_aboW y_aboX (Let1627433784Scrutinee_1627432124Sym2 x_aboW y_aboX))
+  --     in lambda_absV sX sY
+  -- (%:<) sX sY
+  --   = let
+  --       lambda_abts ::
+  --         forall x_abpE y_abpF. (t_absJ ~ x_abpE, t_absK ~ y_abpF) =>
+  --         Sing x_abpE
+  --         -> Sing y_abpF -> Sing (Apply (Apply (:<$) x_abpE) y_abpF :: Bool)
+  --       lambda_abts x_abtt y_abtu
+  --         = let
+  --             sScrutinee_1627432128 ::
+  --               Sing (Let1627433828Scrutinee_1627432128Sym2 x_abpE y_abpF)
+  --             sScrutinee_1627432128
+  --               = applySing
+  --                   (applySing (singFun2 (Proxy :: Proxy CompareSym0) sCompare) x_abtt)
+  --                   y_abtu
+  --           in  case sScrutinee_1627432128 of {
+  --                 SLT
+  --                   -> let
+  --                         lambda_abtv ::
+  --                           LTSym0 ~ Let1627433828Scrutinee_1627432128Sym2 x_abpE y_abpF =>
+  --                           Sing (Case_1627433836_abpP x_abpE y_abpF LTSym0)
+  --                         lambda_abtv = STrue
+  --                       in lambda_abtv;
+  --                 SEQ
+  --                   -> let
+  --                         lambda_abtH ::
+  --                           EQSym0 ~ Let1627433828Scrutinee_1627432128Sym2 x_abpE y_abpF =>
+  --                           Sing (Case_1627433836_abpP x_abpE y_abpF EQSym0)
+  --                         lambda_abtH = SFalse
+  --                       in lambda_abtH;
+  --                 SGT
+  --                   -> let
+  --                         lambda_abtI ::
+  --                           GTSym0 ~ Let1627433828Scrutinee_1627432128Sym2 x_abpE y_abpF =>
+  --                           Sing (Case_1627433836_abpP x_abpE y_abpF GTSym0)
+  --                         lambda_abtI = SFalse
+  --                       in lambda_abtI } ::
+  --                 Sing (Case_1627433836_abpP x_abpE y_abpF (Let1627433828Scrutinee_1627432128Sym2 x_abpE y_abpF))
+  --     in lambda_abts sX sY
+  -- (%:<=) sX sY
+  --   = let
+  --       lambda_abtJ ::
+  --         forall x_abqb y_abqc. (t_absL ~ x_abqb, t_absM ~ y_abqc) =>
+  --         Sing x_abqb
+  --         -> Sing y_abqc -> Sing (Apply (Apply (:<=$) x_abqb) y_abqc :: Bool)
+  --       lambda_abtJ x_abtK y_abtL
+  --         = let
+  --             sScrutinee_1627432130 ::
+  --               Sing (Let1627433861Scrutinee_1627432130Sym2 x_abqb y_abqc)
+  --             sScrutinee_1627432130
+  --               = applySing
+  --                   (applySing (singFun2 (Proxy :: Proxy CompareSym0) sCompare) x_abtK)
+  --                   y_abtL
+  --           in  case sScrutinee_1627432130 of {
+  --                 SLT
+  --                   -> let
+  --                         lambda_abtM ::
+  --                           LTSym0 ~ Let1627433861Scrutinee_1627432130Sym2 x_abqb y_abqc =>
+  --                           Sing (Case_1627433869_abqm x_abqb y_abqc LTSym0)
+  --                         lambda_abtM = STrue
+  --                       in lambda_abtM;
+  --                 SEQ
+  --                   -> let
+  --                         lambda_abtN ::
+  --                           EQSym0 ~ Let1627433861Scrutinee_1627432130Sym2 x_abqb y_abqc =>
+  --                           Sing (Case_1627433869_abqm x_abqb y_abqc EQSym0)
+  --                         lambda_abtN = STrue
+  --                       in lambda_abtN;
+  --                 SGT
+  --                   -> let
+  --                         lambda_abtO ::
+  --                           GTSym0 ~ Let1627433861Scrutinee_1627432130Sym2 x_abqb y_abqc =>
+  --                           Sing (Case_1627433869_abqm x_abqb y_abqc GTSym0)
+  --                         lambda_abtO = SFalse
+  --                       in lambda_abtO } ::
+  --                 Sing (Case_1627433869_abqm x_abqb y_abqc (Let1627433861Scrutinee_1627432130Sym2 x_abqb y_abqc))
+  --     in lambda_abtJ sX sY
+  -- (%:>) sX sY
+  --   = let
+  --       lambda_abtP ::
+  --         forall x_abqI y_abqJ. (t_absN ~ x_abqI, t_absO ~ y_abqJ) =>
+  --         Sing x_abqI
+  --         -> Sing y_abqJ -> Sing (Apply (Apply (:>$) x_abqI) y_abqJ :: Bool)
+  --       lambda_abtP x_abtQ y_abtR
+  --         = let
+  --             sScrutinee_1627432132 ::
+  --               Sing (Let1627433894Scrutinee_1627432132Sym2 x_abqI y_abqJ)
+  --             sScrutinee_1627432132
+  --               = applySing
+  --                   (applySing (singFun2 (Proxy :: Proxy CompareSym0) sCompare) x_abtQ)
+  --                   y_abtR
+  --           in  case sScrutinee_1627432132 of {
+  --                 SLT
+  --                   -> let
+  --                         lambda_abtS ::
+  --                           LTSym0 ~ Let1627433894Scrutinee_1627432132Sym2 x_abqI y_abqJ =>
+  --                           Sing (Case_1627433902_abqT x_abqI y_abqJ LTSym0)
+  --                         lambda_abtS = SFalse
+  --                       in lambda_abtS;
+  --                 SEQ
+  --                   -> let
+  --                         lambda_abtT ::
+  --                           EQSym0 ~ Let1627433894Scrutinee_1627432132Sym2 x_abqI y_abqJ =>
+  --                           Sing (Case_1627433902_abqT x_abqI y_abqJ EQSym0)
+  --                         lambda_abtT = SFalse
+  --                       in lambda_abtT;
+  --                 SGT
+  --                   -> let
+  --                         lambda_abtU ::
+  --                           GTSym0 ~ Let1627433894Scrutinee_1627432132Sym2 x_abqI y_abqJ =>
+  --                           Sing (Case_1627433902_abqT x_abqI y_abqJ GTSym0)
+  --                         lambda_abtU = STrue
+  --                       in lambda_abtU } ::
+  --                 Sing (Case_1627433902_abqT x_abqI y_abqJ (Let1627433894Scrutinee_1627432132Sym2 x_abqI y_abqJ))
+  --     in lambda_abtP sX sY
+  -- (%:>=) sX sY
+  --   = let
+  --       lambda_abtV ::
+  --         forall x_abrf y_abrg. (t_absP ~ x_abrf, t_absQ ~ y_abrg) =>
+  --         Sing x_abrf
+  --         -> Sing y_abrg -> Sing (Apply (Apply (:>=$) x_abrf) y_abrg :: Bool)
+  --       lambda_abtV x_abtW y_abtX
+  --         = let
+  --             sScrutinee_1627432134 ::
+  --               Sing (Let1627433927Scrutinee_1627432134Sym2 x_abrf y_abrg)
+  --             sScrutinee_1627432134
+  --               = applySing
+  --                   (applySing (singFun2 (Proxy :: Proxy CompareSym0) sCompare) x_abtW)
+  --                   y_abtX
+  --           in  case sScrutinee_1627432134 of {
+  --                 SLT
+  --                   -> let
+  --                         lambda_abtY ::
+  --                           LTSym0 ~ Let1627433927Scrutinee_1627432134Sym2 x_abrf y_abrg =>
+  --                           Sing (Case_1627433935_abrq x_abrf y_abrg LTSym0)
+  --                         lambda_abtY = SFalse
+  --                       in lambda_abtY;
+  --                 SEQ
+  --                   -> let
+  --                         lambda_abtZ ::
+  --                           EQSym0 ~ Let1627433927Scrutinee_1627432134Sym2 x_abrf y_abrg =>
+  --                           Sing (Case_1627433935_abrq x_abrf y_abrg EQSym0)
+  --                         lambda_abtZ = STrue
+  --                       in lambda_abtZ;
+  --                 SGT
+  --                   -> let
+  --                         lambda_abu0 ::
+  --                           GTSym0 ~ Let1627433927Scrutinee_1627432134Sym2 x_abrf y_abrg =>
+  --                           Sing (Case_1627433935_abrq x_abrf y_abrg GTSym0)
+  --                         lambda_abu0 = STrue
+  --                       in lambda_abu0 } ::
+  --                 Sing (Case_1627433935_abrq x_abrf y_abrg (Let1627433927Scrutinee_1627432134Sym2 x_abrf y_abrg))
+  --     in lambda_abtV sX sY
+  -- sMax sX sY
+  --   = let
+  --       lambda_abu1 ::
+  --         forall x_abrM y_abrN. (t_absR ~ x_abrM, t_absS ~ y_abrN) =>
+  --         Sing x_abrM
+  --         -> Sing y_abrN
+  --             -> Sing (Apply (Apply MaxSym0 x_abrM) y_abrN :: a_aaXX)
+  --       lambda_abu1 x_abu2 y_abu3
+  --         = let
+  --             sScrutinee_1627432136 ::
+  --               Sing (Let1627433960Scrutinee_1627432136Sym2 x_abrM y_abrN)
+  --             sScrutinee_1627432136
+  --               = applySing
+  --                   (applySing (singFun2 (Proxy :: Proxy (:<=$)) (%:<=)) x_abu2) y_abu3
+  --           in  case sScrutinee_1627432136 of {
+  --                 STrue
+  --                   -> let
+  --                         lambda_abu4 ::
+  --                           TrueSym0 ~ Let1627433960Scrutinee_1627432136Sym2 x_abrM y_abrN =>
+  --                           Sing (Case_1627433968_abrX x_abrM y_abrN TrueSym0)
+  --                         lambda_abu4 = y_abu3
+  --                       in lambda_abu4;
+  --                 SFalse
+  --                   -> let
+  --                         lambda_abu5 ::
+  --                           FalseSym0 ~ Let1627433960Scrutinee_1627432136Sym2 x_abrM y_abrN =>
+  --                           Sing (Case_1627433968_abrX x_abrM y_abrN FalseSym0)
+  --                         lambda_abu5 = x_abu2
+  --                       in lambda_abu5 } ::
+  --                 Sing (Case_1627433968_abrX x_abrM y_abrN (Let1627433960Scrutinee_1627432136Sym2 x_abrM y_abrN))
+  --     in lambda_abu1 sX sY
+  -- sMin sX sY
+  --   = let
+  --       lambda_abu6 ::
+  --         forall x_absj y_absk. (t_absT ~ x_absj, t_absU ~ y_absk) =>
+  --         Sing x_absj
+  --         -> Sing y_absk
+  --             -> Sing (Apply (Apply MinSym0 x_absj) y_absk :: a_aaXX)
+  --       lambda_abu6 x_abu7 y_abu8
+  --         = let
+  --             sScrutinee_1627432138 ::
+  --               Sing (Let1627433993Scrutinee_1627432138Sym2 x_absj y_absk)
+  --             sScrutinee_1627432138
+  --               = applySing
+  --                   (applySing (singFun2 (Proxy :: Proxy (:<=$)) (%:<=)) x_abu7) y_abu8
+  --           in  case sScrutinee_1627432138 of {
+  --                 STrue
+  --                   -> let
+  --                         lambda_abu9 ::
+  --                           TrueSym0 ~ Let1627433993Scrutinee_1627432138Sym2 x_absj y_absk =>
+  --                           Sing (Case_1627434001_absu x_absj y_absk TrueSym0)
+  --                         lambda_abu9 = x_abu7
+  --                       in lambda_abu9;
+  --                 SFalse
+  --                   -> let
+  --                         lambda_abua ::
+  --                           FalseSym0 ~ Let1627433993Scrutinee_1627432138Sym2 x_absj y_absk =>
+  --                           Sing (Case_1627434001_absu x_absj y_absk FalseSym0)
+  --                         lambda_abua = y_abu8
+  --                       in lambda_abua } ::
+  --                 Sing (Case_1627434001_absu x_absj y_absk (Let1627433993Scrutinee_1627432138Sym2 x_absj y_absk))
+  --     in lambda_abu6 sX sY
 
-    compare x y = if x == y then EQ
-                  -- NB: must be '<=' not '<' to validate the
-                  -- above claim about the minimal things that
-                  -- can be defined for an instance of Ord:
-                  else if x <= y then LT
-                  else GT
+thenCmp :: Ordering -> Ordering -> Ordering
+thenCmp EQ x_adO3 = x_adO3
+thenCmp LT _ = LT
+thenCmp GT _ = GT
+type ThenCmpSym2 (t_adO4 :: Ordering) (t_adO5 :: Ordering) =
+    ThenCmp t_adO4 t_adO5
+instance SuppressUnusedWarnings ThenCmpSym1 where
+  suppressUnusedWarnings _ = snd ((,) ThenCmpSym1KindInference ())
+data ThenCmpSym1 (l_adO9 :: Ordering)
+                  (l_adO8 :: TyFun Ordering Ordering)
+  = forall arg_adOa. KindOf (Apply (ThenCmpSym1 l_adO9) arg_adOa) ~ KindOf (ThenCmpSym2 l_adO9 arg_adOa) =>
+    ThenCmpSym1KindInference
+type instance Apply (ThenCmpSym1 l_adO9) l_adO8 = ThenCmpSym2 l_adO9 l_adO8
+instance SuppressUnusedWarnings ThenCmpSym0 where
+  suppressUnusedWarnings _ = snd ((,) ThenCmpSym0KindInference ())
+data ThenCmpSym0 (l_adO6 :: TyFun Ordering (TyFun Ordering Ordering
+                                            -> *))
+  = forall arg_adO7. KindOf (Apply ThenCmpSym0 arg_adO7) ~ KindOf (ThenCmpSym1 arg_adO7) =>
+    ThenCmpSym0KindInference
+type instance Apply ThenCmpSym0 l_adO6 = ThenCmpSym1 l_adO6
+type family ThenCmp (a_adOb :: Ordering)
+                    (a_adOc :: Ordering) :: Ordering where
+  ThenCmp 'EQ x_adOd = x_adOd
+  ThenCmp 'LT _z_1627443038_adOg = LTSym0
+  ThenCmp 'GT _z_1627443041_adOj = GTSym0
+sThenCmp ::
+  forall (t_adOk :: Ordering) (t_adOl :: Ordering).
+  Sing t_adOk
+  -> Sing t_adOl
+      -> Sing (Apply (Apply ThenCmpSym0 t_adOk) t_adOl :: Ordering)
+sThenCmp SEQ sX
+  = let
+      lambda_adOm ::
+        forall x_adOd. (t_adOk ~ EQSym0, t_adOl ~ x_adOd) =>
+        Sing x_adOd
+        -> Sing (Apply (Apply ThenCmpSym0 EQSym0) x_adOd :: Ordering)
+      lambda_adOm x_adOn = x_adOn
+    in lambda_adOm sX
+sThenCmp SLT _s_z_1627443038
+  = let
+      lambda_adOo ::
+        forall _z_1627443038_adOg. (t_adOk ~ LTSym0,
+                                    t_adOl ~ _z_1627443038_adOg) =>
+        Sing _z_1627443038_adOg
+        -> Sing (Apply (Apply ThenCmpSym0 LTSym0) _z_1627443038_adOg :: Ordering)
+      lambda_adOo _z_1627443038_adOp = SLT
+    in lambda_adOo _s_z_1627443038
+sThenCmp SGT _s_z_1627443041
+  = let
+      lambda_adOq ::
+        forall _z_1627443041_adOj. (t_adOk ~ GTSym0,
+                                    t_adOl ~ _z_1627443041_adOj) =>
+        Sing _z_1627443041_adOj
+        -> Sing (Apply (Apply ThenCmpSym0 GTSym0) _z_1627443041_adOj :: Ordering)
+      lambda_adOq _z_1627443041_adOr = SGT
+    in lambda_adOq _s_z_1627443041
 
-    x <  y = case compare x y of { LT -> True;  EQ -> False; GT -> False }
-    x <= y = case compare x y of { LT -> True;  EQ -> True;  GT -> False }
-    x >  y = case compare x y of { LT -> False; EQ -> False; GT -> True }
-    x >= y = case compare x y of { LT -> False; EQ -> True;  GT -> True }
-
-        -- These two default methods use '<=' rather than 'compare'
-        -- because the latter is often more expensive
-    max x y = if x <= y then y else x
-    min x y = if x <= y then x else y
-    -- Not handled by TH: {-# MINIMAL compare | (<=) #-}
-
-  |])
-
-$(singletons [d|
-  thenCmp :: Ordering -> Ordering -> Ordering
-  thenCmp EQ x = x
-  thenCmp LT _ = LT
-  thenCmp GT _ = GT
-  |])
-
-$(singOrdInstances basicTypes)
+type family Compare_1627443470_adVd (a_adVa :: Maybe a_i9l4)
+                                    (a_adVb :: Maybe a_i9l4) :: Ordering where
+  Compare_1627443470_adVd 'Nothing 'Nothing = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) '[]
+  Compare_1627443470_adVd ('Just a_1627443447_adV2) ('Just b_1627443449_adV3) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443447_adV2) b_1627443449_adV3)) '[])
+  Compare_1627443470_adVd 'Nothing ('Just _z_1627443462_adV6) = LTSym0
+  Compare_1627443470_adVd ('Just _z_1627443465_adV9) 'Nothing = GTSym0
+type Compare_1627443470Sym2 (t_adVe :: Maybe a_i9l4)
+                            (t_adVf :: Maybe a_i9l4) =
+    Compare_1627443470_adVd t_adVe t_adVf
+instance SuppressUnusedWarnings Compare_1627443470Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443470Sym1KindInference ())
+data Compare_1627443470Sym1 (l_adVj :: Maybe a_i9l4)
+                            (l_adVi :: TyFun (Maybe a_i9l4) Ordering)
+  = forall arg_adVk. KindOf (Apply (Compare_1627443470Sym1 l_adVj) arg_adVk) ~ KindOf (Compare_1627443470Sym2 l_adVj arg_adVk) =>
+    Compare_1627443470Sym1KindInference
+type instance Apply (Compare_1627443470Sym1 l_adVj) l_adVi = Compare_1627443470Sym2 l_adVj l_adVi
+instance SuppressUnusedWarnings Compare_1627443470Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443470Sym0KindInference ())
+data Compare_1627443470Sym0 (l_adVg :: TyFun (Maybe a_i9l4) (TyFun (Maybe a_i9l4) Ordering
+                                                              -> *))
+  = forall arg_adVh. KindOf (Apply Compare_1627443470Sym0 arg_adVh) ~ KindOf (Compare_1627443470Sym1 arg_adVh) =>
+    Compare_1627443470Sym0KindInference
+type instance Apply Compare_1627443470Sym0 l_adVg = Compare_1627443470Sym1 l_adVg
+instance POrd ('KProxy :: KProxy (Maybe a_i9l4)) where
+  type Compare (a_adVa :: Maybe a_i9l4) (a_adVb :: Maybe a_i9l4) = Apply (Apply Compare_1627443470Sym0 a_adVa) a_adVb
+instance SOrd ('KProxy :: KProxy a_i9l4) =>
+          SOrd ('KProxy :: KProxy (Maybe a_i9l4)) where
+  sCompare ::
+    forall (t_absH :: Maybe a_i9l4) (t_absI :: Maybe a_i9l4).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun (Maybe a_i9l4) (TyFun (Maybe a_i9l4) Ordering
+                                                                    -> *)
+                                              -> *) t_absH :: TyFun (Maybe a_i9l4) Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare SNothing SNothing
+    = let
+        lambda_adVl ::
+          (t_absH ~ NothingSym0, t_absI ~ NothingSym0) =>
+          Sing (Apply (Apply CompareSym0 NothingSym0) NothingSym0 :: Ordering)
+        lambda_adVl
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              SNil
+      in lambda_adVl
+  sCompare (SJust sA_1627443447) (SJust sB_1627443449)
+    = let
+        lambda_adW4 ::
+          forall a_1627443447_adV2
+                  b_1627443449_adV3. (t_absH ~ Apply JustSym0 a_1627443447_adV2,
+                                      t_absI ~ Apply JustSym0 b_1627443449_adV3) =>
+          Sing a_1627443447_adV2
+          -> Sing b_1627443449_adV3
+              -> Sing (Apply (Apply CompareSym0 (Apply JustSym0 a_1627443447_adV2)) (Apply JustSym0 b_1627443449_adV3) :: Ordering)
+        lambda_adW4 a_1627443447_adW5 b_1627443449_adW6
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443447_adW5)
+                        b_1627443449_adW6))
+                  SNil)
+      in lambda_adW4 sA_1627443447 sB_1627443449
+  sCompare SNothing (SJust _s_z_1627443462)
+    = let
+        lambda_adWj ::
+          forall _z_1627443462_adV6. (t_absH ~ NothingSym0,
+                                      t_absI ~ Apply JustSym0 _z_1627443462_adV6) =>
+          Sing _z_1627443462_adV6
+          -> Sing (Apply (Apply CompareSym0 NothingSym0) (Apply JustSym0 _z_1627443462_adV6) :: Ordering)
+        lambda_adWj _z_1627443462_adWk = SLT
+      in lambda_adWj _s_z_1627443462
+  sCompare (SJust _s_z_1627443465) SNothing
+    = let
+        lambda_adWl ::
+          forall _z_1627443465_adV9. (t_absH ~ Apply JustSym0 _z_1627443465_adV9,
+                                      t_absI ~ NothingSym0) =>
+          Sing _z_1627443465_adV9
+          -> Sing (Apply (Apply CompareSym0 (Apply JustSym0 _z_1627443465_adV9)) NothingSym0 :: Ordering)
+        lambda_adWl _z_1627443465_adWm = SGT
+      in lambda_adWl _s_z_1627443465
+type family Compare_1627443578_adWX (a_adWU :: [a_12])
+                                    (a_adWV :: [a_12]) :: Ordering where
+  Compare_1627443578_adWX '[] '[] = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) '[]
+  Compare_1627443578_adWX (a_1627443543_adWE ': a_1627443545_adWF) (b_1627443547_adWG ': b_1627443549_adWH) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443543_adWE) b_1627443547_adWG)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443545_adWF) b_1627443549_adWH)) '[]))
+  Compare_1627443578_adWX '[] (_z_1627443564_adWK ': _z_1627443567_adWN) = LTSym0
+  Compare_1627443578_adWX (_z_1627443570_adWQ ': _z_1627443573_adWT) '[] = GTSym0
+type Compare_1627443578Sym2 (t_adWY :: [a_12]) (t_adWZ :: [a_12]) =
+    Compare_1627443578_adWX t_adWY t_adWZ
+instance SuppressUnusedWarnings Compare_1627443578Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443578Sym1KindInference ())
+data Compare_1627443578Sym1 (l_adX3 :: [a_12])
+                            (l_adX2 :: TyFun [a_12] Ordering)
+  = forall arg_adX4. KindOf (Apply (Compare_1627443578Sym1 l_adX3) arg_adX4) ~ KindOf (Compare_1627443578Sym2 l_adX3 arg_adX4) =>
+    Compare_1627443578Sym1KindInference
+type instance Apply (Compare_1627443578Sym1 l_adX3) l_adX2 = Compare_1627443578Sym2 l_adX3 l_adX2
+instance SuppressUnusedWarnings Compare_1627443578Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443578Sym0KindInference ())
+data Compare_1627443578Sym0 (l_adX0 :: TyFun [a_12] (TyFun [a_12] Ordering
+                                                      -> *))
+  = forall arg_adX1. KindOf (Apply Compare_1627443578Sym0 arg_adX1) ~ KindOf (Compare_1627443578Sym1 arg_adX1) =>
+    Compare_1627443578Sym0KindInference
+type instance Apply Compare_1627443578Sym0 l_adX0 = Compare_1627443578Sym1 l_adX0
+instance POrd ('KProxy :: KProxy [a_12]) where
+  type Compare (a_adWU :: [a_12]) (a_adWV :: [a_12]) = Apply (Apply Compare_1627443578Sym0 a_adWU) a_adWV
+instance (SOrd ('KProxy :: KProxy a_12),
+          SOrd ('KProxy :: KProxy [a_12])) =>
+          SOrd ('KProxy :: KProxy [a_12]) where
+  sCompare ::
+    forall (t_absH :: [a_12]) (t_absI :: [a_12]).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun [a_12] (TyFun [a_12] Ordering
+                                                            -> *)
+                                              -> *) t_absH :: TyFun [a_12] Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare SNil SNil
+    = let
+        lambda_adX5 ::
+          (t_absH ~ '[], t_absI ~ '[]) =>
+          Sing (Apply (Apply CompareSym0 '[]) '[] :: Ordering)
+        lambda_adX5
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              SNil
+      in lambda_adX5
+  sCompare
+    (SCons sA_1627443543 sA_1627443545)
+    (SCons sB_1627443547 sB_1627443549)
+    = let
+        lambda_adX6 ::
+          forall a_1627443543_adWE
+                  a_1627443545_adWF
+                  b_1627443547_adWG
+                  b_1627443549_adWH. (t_absH ~ Apply (Apply (:$) a_1627443543_adWE) a_1627443545_adWF,
+                                      t_absI ~ Apply (Apply (:$) b_1627443547_adWG) b_1627443549_adWH) =>
+          Sing a_1627443543_adWE
+          -> Sing a_1627443545_adWF
+              -> Sing b_1627443547_adWG
+                -> Sing b_1627443549_adWH
+                    -> Sing (Apply (Apply CompareSym0 (Apply (Apply (:$) a_1627443543_adWE) a_1627443545_adWF)) (Apply (Apply (:$) b_1627443547_adWG) b_1627443549_adWH) :: Ordering)
+        lambda_adX6
+          a_1627443543_adX7
+          a_1627443545_adX8
+          b_1627443547_adX9
+          b_1627443549_adXa
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443543_adX7)
+                        b_1627443547_adX9))
+                  (applySing
+                    (applySing
+                        (singFun2 (Proxy :: Proxy (:$)) SCons)
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443545_adX8)
+                          b_1627443549_adXa))
+                    SNil))
+      in
+        lambda_adX6 sA_1627443543 sA_1627443545 sB_1627443547 sB_1627443549
+  sCompare SNil (SCons _s_z_1627443564 _s_z_1627443567)
+    = let
+        lambda_adXb ::
+          forall _z_1627443564_adWK _z_1627443567_adWN. (t_absH ~ '[],
+                                                          t_absI ~ Apply (Apply (:$) _z_1627443564_adWK) _z_1627443567_adWN) =>
+          Sing _z_1627443564_adWK
+          -> Sing _z_1627443567_adWN
+              -> Sing (Apply (Apply CompareSym0 '[]) (Apply (Apply (:$) _z_1627443564_adWK) _z_1627443567_adWN) :: Ordering)
+        lambda_adXb _z_1627443564_adXc _z_1627443567_adXd = SLT
+      in lambda_adXb _s_z_1627443564 _s_z_1627443567
+  sCompare (SCons _s_z_1627443570 _s_z_1627443573) SNil
+    = let
+        lambda_adXe ::
+          forall _z_1627443570_adWQ
+                  _z_1627443573_adWT. (t_absH ~ Apply (Apply (:$) _z_1627443570_adWQ) _z_1627443573_adWT,
+                                      t_absI ~ '[]) =>
+          Sing _z_1627443570_adWQ
+          -> Sing _z_1627443573_adWT
+              -> Sing (Apply (Apply CompareSym0 (Apply (Apply (:$) _z_1627443570_adWQ) _z_1627443573_adWT)) '[] :: Ordering)
+        lambda_adXe _z_1627443570_adXf _z_1627443573_adXg = SGT
+      in lambda_adXe _s_z_1627443570 _s_z_1627443573
+type family Compare_1627443634_adXR (a_adXO :: Either a_i9kO b_i9kP)
+                                    (a_adXP :: Either a_i9kO b_i9kP) :: Ordering where
+  Compare_1627443634_adXR ('Left a_1627443599_adXy) ('Left b_1627443601_adXz) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443599_adXy) b_1627443601_adXz)) '[])
+  Compare_1627443634_adXR ('Right a_1627443603_adXA) ('Right b_1627443605_adXB) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443603_adXA) b_1627443605_adXB)) '[])
+  Compare_1627443634_adXR ('Left _z_1627443620_adXE) ('Right _z_1627443623_adXH) = LTSym0
+  Compare_1627443634_adXR ('Right _z_1627443626_adXK) ('Left _z_1627443629_adXN) = GTSym0
+type Compare_1627443634Sym2 (t_adXS :: Either a_i9kO b_i9kP)
+                            (t_adXT :: Either a_i9kO b_i9kP) =
+    Compare_1627443634_adXR t_adXS t_adXT
+instance SuppressUnusedWarnings Compare_1627443634Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443634Sym1KindInference ())
+data Compare_1627443634Sym1 (l_adXX :: Either a_i9kO b_i9kP)
+                            (l_adXW :: TyFun (Either a_i9kO b_i9kP) Ordering)
+  = forall arg_adXY. KindOf (Apply (Compare_1627443634Sym1 l_adXX) arg_adXY) ~ KindOf (Compare_1627443634Sym2 l_adXX arg_adXY) =>
+    Compare_1627443634Sym1KindInference
+type instance Apply (Compare_1627443634Sym1 l_adXX) l_adXW = Compare_1627443634Sym2 l_adXX l_adXW
+instance SuppressUnusedWarnings Compare_1627443634Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443634Sym0KindInference ())
+data Compare_1627443634Sym0 (l_adXU :: TyFun (Either a_i9kO b_i9kP) (TyFun (Either a_i9kO b_i9kP) Ordering
+                                                                      -> *))
+  = forall arg_adXV. KindOf (Apply Compare_1627443634Sym0 arg_adXV) ~ KindOf (Compare_1627443634Sym1 arg_adXV) =>
+    Compare_1627443634Sym0KindInference
+type instance Apply Compare_1627443634Sym0 l_adXU = Compare_1627443634Sym1 l_adXU
+instance POrd ('KProxy :: KProxy (Either a_i9kO b_i9kP)) where
+  type Compare (a_adXO :: Either a_i9kO b_i9kP) (a_adXP :: Either a_i9kO b_i9kP) = Apply (Apply Compare_1627443634Sym0 a_adXO) a_adXP
+instance (SOrd ('KProxy :: KProxy a_i9kO),
+          SOrd ('KProxy :: KProxy b_i9kP)) =>
+          SOrd ('KProxy :: KProxy (Either a_i9kO b_i9kP)) where
+  sCompare ::
+    forall (t_absH :: Either a_i9kO b_i9kP)
+            (t_absI :: Either a_i9kO b_i9kP).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun (Either a_i9kO b_i9kP) (TyFun (Either a_i9kO b_i9kP) Ordering
+                                                                            -> *)
+                                              -> *) t_absH :: TyFun (Either a_i9kO b_i9kP) Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare (SLeft sA_1627443599) (SLeft sB_1627443601)
+    = let
+        lambda_adXZ ::
+          forall a_1627443599_adXy
+                  b_1627443601_adXz. (t_absH ~ Apply LeftSym0 a_1627443599_adXy,
+                                      t_absI ~ Apply LeftSym0 b_1627443601_adXz) =>
+          Sing a_1627443599_adXy
+          -> Sing b_1627443601_adXz
+              -> Sing (Apply (Apply CompareSym0 (Apply LeftSym0 a_1627443599_adXy)) (Apply LeftSym0 b_1627443601_adXz) :: Ordering)
+        lambda_adXZ a_1627443599_adY0 b_1627443601_adY1
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443599_adY0)
+                        b_1627443601_adY1))
+                  SNil)
+      in lambda_adXZ sA_1627443599 sB_1627443601
+  sCompare (SRight sA_1627443603) (SRight sB_1627443605)
+    = let
+        lambda_adY2 ::
+          forall a_1627443603_adXA
+                  b_1627443605_adXB. (t_absH ~ Apply RightSym0 a_1627443603_adXA,
+                                      t_absI ~ Apply RightSym0 b_1627443605_adXB) =>
+          Sing a_1627443603_adXA
+          -> Sing b_1627443605_adXB
+              -> Sing (Apply (Apply CompareSym0 (Apply RightSym0 a_1627443603_adXA)) (Apply RightSym0 b_1627443605_adXB) :: Ordering)
+        lambda_adY2 a_1627443603_adY3 b_1627443605_adY4
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443603_adY3)
+                        b_1627443605_adY4))
+                  SNil)
+      in lambda_adY2 sA_1627443603 sB_1627443605
+  sCompare (SLeft _s_z_1627443620) (SRight _s_z_1627443623)
+    = let
+        lambda_adY5 ::
+          forall _z_1627443620_adXE
+                  _z_1627443623_adXH. (t_absH ~ Apply LeftSym0 _z_1627443620_adXE,
+                                      t_absI ~ Apply RightSym0 _z_1627443623_adXH) =>
+          Sing _z_1627443620_adXE
+          -> Sing _z_1627443623_adXH
+              -> Sing (Apply (Apply CompareSym0 (Apply LeftSym0 _z_1627443620_adXE)) (Apply RightSym0 _z_1627443623_adXH) :: Ordering)
+        lambda_adY5 _z_1627443620_adY6 _z_1627443623_adY7 = SLT
+      in lambda_adY5 _s_z_1627443620 _s_z_1627443623
+  sCompare (SRight _s_z_1627443626) (SLeft _s_z_1627443629)
+    = let
+        lambda_adY8 ::
+          forall _z_1627443626_adXK
+                  _z_1627443629_adXN. (t_absH ~ Apply RightSym0 _z_1627443626_adXK,
+                                      t_absI ~ Apply LeftSym0 _z_1627443629_adXN) =>
+          Sing _z_1627443626_adXK
+          -> Sing _z_1627443629_adXN
+              -> Sing (Apply (Apply CompareSym0 (Apply RightSym0 _z_1627443626_adXK)) (Apply LeftSym0 _z_1627443629_adXN) :: Ordering)
+        lambda_adY8 _z_1627443626_adY9 _z_1627443629_adYa = SGT
+      in lambda_adY8 _s_z_1627443626 _s_z_1627443629
+type family Compare_1627443678_adYz (a_adYw :: (a_12, b_13))
+                                    (a_adYx :: (a_12, b_13)) :: Ordering where
+  Compare_1627443678_adYz '(a_1627443655_adYs,
+                            a_1627443657_adYt) '(b_1627443659_adYu,
+                                                  b_1627443661_adYv) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443655_adYs) b_1627443659_adYu)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443657_adYt) b_1627443661_adYv)) '[]))
+type Compare_1627443678Sym2 (t_adYA :: (a_12, b_13))
+                            (t_adYB :: (a_12, b_13)) =
+    Compare_1627443678_adYz t_adYA t_adYB
+instance SuppressUnusedWarnings Compare_1627443678Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443678Sym1KindInference ())
+data Compare_1627443678Sym1 (l_adYF :: (a_12, b_13))
+                            (l_adYE :: TyFun (a_12, b_13) Ordering)
+  = forall arg_adYG. KindOf (Apply (Compare_1627443678Sym1 l_adYF) arg_adYG) ~ KindOf (Compare_1627443678Sym2 l_adYF arg_adYG) =>
+    Compare_1627443678Sym1KindInference
+type instance Apply (Compare_1627443678Sym1 l_adYF) l_adYE = Compare_1627443678Sym2 l_adYF l_adYE
+instance SuppressUnusedWarnings Compare_1627443678Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443678Sym0KindInference ())
+data Compare_1627443678Sym0 (l_adYC :: TyFun (a_12,
+                                              b_13) (TyFun (a_12, b_13) Ordering -> *))
+  = forall arg_adYD. KindOf (Apply Compare_1627443678Sym0 arg_adYD) ~ KindOf (Compare_1627443678Sym1 arg_adYD) =>
+    Compare_1627443678Sym0KindInference
+type instance Apply Compare_1627443678Sym0 l_adYC = Compare_1627443678Sym1 l_adYC
+instance POrd ('KProxy :: KProxy (a_12, b_13)) where
+  type Compare (a_adYw :: (a_12, b_13)) (a_adYx :: (a_12,
+                                                    b_13)) = Apply (Apply Compare_1627443678Sym0 a_adYw) a_adYx
+instance (SOrd ('KProxy :: KProxy a_12),
+          SOrd ('KProxy :: KProxy b_13)) =>
+          SOrd ('KProxy :: KProxy (a_12, b_13)) where
+  sCompare ::
+    forall (t_absH :: (a_12, b_13)) (t_absI :: (a_12, b_13)).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun (a_12,
+                                                    b_13) (TyFun (a_12, b_13) Ordering -> *)
+                                              -> *) t_absH :: TyFun (a_12, b_13) Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare
+    (STuple2 sA_1627443655 sA_1627443657)
+    (STuple2 sB_1627443659 sB_1627443661)
+    = let
+        lambda_adYH ::
+          forall a_1627443655_adYs
+                  a_1627443657_adYt
+                  b_1627443659_adYu
+                  b_1627443661_adYv. (t_absH ~ Apply (Apply Tuple2Sym0 a_1627443655_adYs) a_1627443657_adYt,
+                                      t_absI ~ Apply (Apply Tuple2Sym0 b_1627443659_adYu) b_1627443661_adYv) =>
+          Sing a_1627443655_adYs
+          -> Sing a_1627443657_adYt
+              -> Sing b_1627443659_adYu
+                -> Sing b_1627443661_adYv
+                    -> Sing (Apply (Apply CompareSym0 (Apply (Apply Tuple2Sym0 a_1627443655_adYs) a_1627443657_adYt)) (Apply (Apply Tuple2Sym0 b_1627443659_adYu) b_1627443661_adYv) :: Ordering)
+        lambda_adYH
+          a_1627443655_adYI
+          a_1627443657_adYJ
+          b_1627443659_adYK
+          b_1627443661_adYL
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443655_adYI)
+                        b_1627443659_adYK))
+                  (applySing
+                    (applySing
+                        (singFun2 (Proxy :: Proxy (:$)) SCons)
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443657_adYJ)
+                          b_1627443661_adYL))
+                    SNil))
+      in
+        lambda_adYH sA_1627443655 sA_1627443657 sB_1627443659 sB_1627443661
+type family Compare_1627443721_adZg (a_adZd :: (a_12, b_13, c_14))
+                                    (a_adZe :: (a_12, b_13, c_14)) :: Ordering where
+  Compare_1627443721_adZg '(a_1627443692_adZ7,
+                            a_1627443694_adZ8,
+                            a_1627443696_adZ9) '(b_1627443698_adZa,
+                                                  b_1627443700_adZb,
+                                                  b_1627443702_adZc) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443692_adZ7) b_1627443698_adZa)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443694_adZ8) b_1627443700_adZb)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443696_adZ9) b_1627443702_adZc)) '[])))
+type Compare_1627443721Sym2 (t_adZh :: (a_12, b_13, c_14))
+                            (t_adZi :: (a_12, b_13, c_14)) =
+    Compare_1627443721_adZg t_adZh t_adZi
+instance SuppressUnusedWarnings Compare_1627443721Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443721Sym1KindInference ())
+data Compare_1627443721Sym1 (l_adZm :: (a_12, b_13, c_14))
+                            (l_adZl :: TyFun (a_12, b_13, c_14) Ordering)
+  = forall arg_adZn. KindOf (Apply (Compare_1627443721Sym1 l_adZm) arg_adZn) ~ KindOf (Compare_1627443721Sym2 l_adZm arg_adZn) =>
+    Compare_1627443721Sym1KindInference
+type instance Apply (Compare_1627443721Sym1 l_adZm) l_adZl = Compare_1627443721Sym2 l_adZm l_adZl
+instance SuppressUnusedWarnings Compare_1627443721Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443721Sym0KindInference ())
+data Compare_1627443721Sym0 (l_adZj :: TyFun (a_12,
+                                              b_13,
+                                              c_14) (TyFun (a_12, b_13, c_14) Ordering -> *))
+  = forall arg_adZk. KindOf (Apply Compare_1627443721Sym0 arg_adZk) ~ KindOf (Compare_1627443721Sym1 arg_adZk) =>
+    Compare_1627443721Sym0KindInference
+type instance Apply Compare_1627443721Sym0 l_adZj = Compare_1627443721Sym1 l_adZj
+instance POrd ('KProxy :: KProxy (a_12, b_13, c_14)) where
+  type Compare (a_adZd :: (a_12, b_13, c_14)) (a_adZe :: (a_12,
+                                                          b_13,
+                                                          c_14)) = Apply (Apply Compare_1627443721Sym0 a_adZd) a_adZe
+instance (SOrd ('KProxy :: KProxy a_12),
+          SOrd ('KProxy :: KProxy b_13),
+          SOrd ('KProxy :: KProxy c_14)) =>
+          SOrd ('KProxy :: KProxy (a_12, b_13, c_14)) where
+  sCompare ::
+    forall (t_absH :: (a_12, b_13, c_14))
+            (t_absI :: (a_12, b_13, c_14)).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun (a_12,
+                                                    b_13,
+                                                    c_14) (TyFun (a_12, b_13, c_14) Ordering
+                                                            -> *)
+                                              -> *) t_absH :: TyFun (a_12, b_13, c_14) Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare
+    (STuple3 sA_1627443692 sA_1627443694 sA_1627443696)
+    (STuple3 sB_1627443698 sB_1627443700 sB_1627443702)
+    = let
+        lambda_adZo ::
+          forall a_1627443692_adZ7
+                  a_1627443694_adZ8
+                  a_1627443696_adZ9
+                  b_1627443698_adZa
+                  b_1627443700_adZb
+                  b_1627443702_adZc. (t_absH ~ Apply (Apply (Apply Tuple3Sym0 a_1627443692_adZ7) a_1627443694_adZ8) a_1627443696_adZ9,
+                                      t_absI ~ Apply (Apply (Apply Tuple3Sym0 b_1627443698_adZa) b_1627443700_adZb) b_1627443702_adZc) =>
+          Sing a_1627443692_adZ7
+          -> Sing a_1627443694_adZ8
+              -> Sing a_1627443696_adZ9
+                -> Sing b_1627443698_adZa
+                    -> Sing b_1627443700_adZb
+                      -> Sing b_1627443702_adZc
+                          -> Sing (Apply (Apply CompareSym0 (Apply (Apply (Apply Tuple3Sym0 a_1627443692_adZ7) a_1627443694_adZ8) a_1627443696_adZ9)) (Apply (Apply (Apply Tuple3Sym0 b_1627443698_adZa) b_1627443700_adZb) b_1627443702_adZc) :: Ordering)
+        lambda_adZo
+          a_1627443692_adZp
+          a_1627443694_adZq
+          a_1627443696_adZr
+          b_1627443698_adZs
+          b_1627443700_adZt
+          b_1627443702_adZu
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443692_adZp)
+                        b_1627443698_adZs))
+                  (applySing
+                    (applySing
+                        (singFun2 (Proxy :: Proxy (:$)) SCons)
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443694_adZq)
+                          b_1627443700_adZt))
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                          (applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                a_1627443696_adZr)
+                              b_1627443702_adZu))
+                        SNil)))
+      in
+        lambda_adZo
+          sA_1627443692
+          sA_1627443694
+          sA_1627443696
+          sB_1627443698
+          sB_1627443700
+          sB_1627443702
+type family Compare_1627443772_ae05 (a_ae02 :: (a_12,
+                                                b_13,
+                                                c_14,
+                                                d_15))
+                                    (a_ae03 :: (a_12, b_13, c_14, d_15)) :: Ordering where
+  Compare_1627443772_ae05 '(a_1627443737_adZU,
+                            a_1627443739_adZV,
+                            a_1627443741_adZW,
+                            a_1627443743_adZX) '(b_1627443745_adZY,
+                                                  b_1627443747_adZZ,
+                                                  b_1627443749_ae00,
+                                                  b_1627443751_ae01) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443737_adZU) b_1627443745_adZY)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443739_adZV) b_1627443747_adZZ)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443741_adZW) b_1627443749_ae00)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443743_adZX) b_1627443751_ae01)) '[]))))
+type Compare_1627443772Sym2 (t_ae06 :: (a_12, b_13, c_14, d_15))
+                            (t_ae07 :: (a_12, b_13, c_14, d_15)) =
+    Compare_1627443772_ae05 t_ae06 t_ae07
+instance SuppressUnusedWarnings Compare_1627443772Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443772Sym1KindInference ())
+data Compare_1627443772Sym1 (l_ae0b :: (a_12, b_13, c_14, d_15))
+                            (l_ae0a :: TyFun (a_12, b_13, c_14, d_15) Ordering)
+  = forall arg_ae0c. KindOf (Apply (Compare_1627443772Sym1 l_ae0b) arg_ae0c) ~ KindOf (Compare_1627443772Sym2 l_ae0b arg_ae0c) =>
+    Compare_1627443772Sym1KindInference
+type instance Apply (Compare_1627443772Sym1 l_ae0b) l_ae0a = Compare_1627443772Sym2 l_ae0b l_ae0a
+instance SuppressUnusedWarnings Compare_1627443772Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443772Sym0KindInference ())
+data Compare_1627443772Sym0 (l_ae08 :: TyFun (a_12,
+                                              b_13,
+                                              c_14,
+                                              d_15) (TyFun (a_12, b_13, c_14, d_15) Ordering
+                                                      -> *))
+  = forall arg_ae09. KindOf (Apply Compare_1627443772Sym0 arg_ae09) ~ KindOf (Compare_1627443772Sym1 arg_ae09) =>
+    Compare_1627443772Sym0KindInference
+type instance Apply Compare_1627443772Sym0 l_ae08 = Compare_1627443772Sym1 l_ae08
+instance POrd ('KProxy :: KProxy (a_12, b_13, c_14, d_15)) where
+  type Compare (a_ae02 :: (a_12, b_13, c_14, d_15)) (a_ae03 :: (a_12,
+                                                                b_13,
+                                                                c_14,
+                                                                d_15)) = Apply (Apply Compare_1627443772Sym0 a_ae02) a_ae03
+instance (SOrd ('KProxy :: KProxy a_12),
+          SOrd ('KProxy :: KProxy b_13),
+          SOrd ('KProxy :: KProxy c_14),
+          SOrd ('KProxy :: KProxy d_15)) =>
+          SOrd ('KProxy :: KProxy (a_12, b_13, c_14, d_15)) where
+  sCompare ::
+    forall (t_absH :: (a_12, b_13, c_14, d_15))
+            (t_absI :: (a_12, b_13, c_14, d_15)).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun (a_12,
+                                                    b_13,
+                                                    c_14,
+                                                    d_15) (TyFun (a_12,
+                                                                  b_13,
+                                                                  c_14,
+                                                                  d_15) Ordering
+                                                            -> *)
+                                              -> *) t_absH :: TyFun (a_12,
+                                                                    b_13,
+                                                                    c_14,
+                                                                    d_15) Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare
+    (STuple4 sA_1627443737 sA_1627443739 sA_1627443741 sA_1627443743)
+    (STuple4 sB_1627443745 sB_1627443747 sB_1627443749 sB_1627443751)
+    = let
+        lambda_ae0d ::
+          forall a_1627443737_adZU
+                  a_1627443739_adZV
+                  a_1627443741_adZW
+                  a_1627443743_adZX
+                  b_1627443745_adZY
+                  b_1627443747_adZZ
+                  b_1627443749_ae00
+                  b_1627443751_ae01. (t_absH ~ Apply (Apply (Apply (Apply Tuple4Sym0 a_1627443737_adZU) a_1627443739_adZV) a_1627443741_adZW) a_1627443743_adZX,
+                                      t_absI ~ Apply (Apply (Apply (Apply Tuple4Sym0 b_1627443745_adZY) b_1627443747_adZZ) b_1627443749_ae00) b_1627443751_ae01) =>
+          Sing a_1627443737_adZU
+          -> Sing a_1627443739_adZV
+              -> Sing a_1627443741_adZW
+                -> Sing a_1627443743_adZX
+                    -> Sing b_1627443745_adZY
+                      -> Sing b_1627443747_adZZ
+                          -> Sing b_1627443749_ae00
+                            -> Sing b_1627443751_ae01
+                                -> Sing (Apply (Apply CompareSym0 (Apply (Apply (Apply (Apply Tuple4Sym0 a_1627443737_adZU) a_1627443739_adZV) a_1627443741_adZW) a_1627443743_adZX)) (Apply (Apply (Apply (Apply Tuple4Sym0 b_1627443745_adZY) b_1627443747_adZZ) b_1627443749_ae00) b_1627443751_ae01) :: Ordering)
+        lambda_ae0d
+          a_1627443737_ae0e
+          a_1627443739_ae0f
+          a_1627443741_ae0g
+          a_1627443743_ae0h
+          b_1627443745_ae0i
+          b_1627443747_ae0j
+          b_1627443749_ae0k
+          b_1627443751_ae0l
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443737_ae0e)
+                        b_1627443745_ae0i))
+                  (applySing
+                    (applySing
+                        (singFun2 (Proxy :: Proxy (:$)) SCons)
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443739_ae0f)
+                          b_1627443747_ae0j))
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                          (applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                a_1627443741_ae0g)
+                              b_1627443749_ae0k))
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy (:$)) SCons)
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                    a_1627443743_ae0h)
+                                b_1627443751_ae0l))
+                          SNil))))
+      in
+        lambda_ae0d
+          sA_1627443737
+          sA_1627443739
+          sA_1627443741
+          sA_1627443743
+          sB_1627443745
+          sB_1627443747
+          sB_1627443749
+          sB_1627443751
+type family Compare_1627443831_ae12 (a_ae0Z :: (a_12,
+                                                b_13,
+                                                c_14,
+                                                d_15,
+                                                e_16))
+                                    (a_ae10 :: (a_12, b_13, c_14, d_15, e_16)) :: Ordering where
+  Compare_1627443831_ae12 '(a_1627443790_ae0P,
+                            a_1627443792_ae0Q,
+                            a_1627443794_ae0R,
+                            a_1627443796_ae0S,
+                            a_1627443798_ae0T) '(b_1627443800_ae0U,
+                                                  b_1627443802_ae0V,
+                                                  b_1627443804_ae0W,
+                                                  b_1627443806_ae0X,
+                                                  b_1627443808_ae0Y) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443790_ae0P) b_1627443800_ae0U)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443792_ae0Q) b_1627443802_ae0V)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443794_ae0R) b_1627443804_ae0W)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443796_ae0S) b_1627443806_ae0X)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443798_ae0T) b_1627443808_ae0Y)) '[])))))
+type Compare_1627443831Sym2 (t_ae13 :: (a_12,
+                                        b_13,
+                                        c_14,
+                                        d_15,
+                                        e_16))
+                            (t_ae14 :: (a_12, b_13, c_14, d_15, e_16)) =
+    Compare_1627443831_ae12 t_ae13 t_ae14
+instance SuppressUnusedWarnings Compare_1627443831Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443831Sym1KindInference ())
+data Compare_1627443831Sym1 (l_ae18 :: (a_12,
+                                        b_13,
+                                        c_14,
+                                        d_15,
+                                        e_16))
+                            (l_ae17 :: TyFun (a_12, b_13, c_14, d_15, e_16) Ordering)
+  = forall arg_ae19. KindOf (Apply (Compare_1627443831Sym1 l_ae18) arg_ae19) ~ KindOf (Compare_1627443831Sym2 l_ae18 arg_ae19) =>
+    Compare_1627443831Sym1KindInference
+type instance Apply (Compare_1627443831Sym1 l_ae18) l_ae17 = Compare_1627443831Sym2 l_ae18 l_ae17
+instance SuppressUnusedWarnings Compare_1627443831Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443831Sym0KindInference ())
+data Compare_1627443831Sym0 (l_ae15 :: TyFun (a_12,
+                                              b_13,
+                                              c_14,
+                                              d_15,
+                                              e_16) (TyFun (a_12,
+                                                            b_13,
+                                                            c_14,
+                                                            d_15,
+                                                            e_16) Ordering
+                                                      -> *))
+  = forall arg_ae16. KindOf (Apply Compare_1627443831Sym0 arg_ae16) ~ KindOf (Compare_1627443831Sym1 arg_ae16) =>
+    Compare_1627443831Sym0KindInference
+type instance Apply Compare_1627443831Sym0 l_ae15 = Compare_1627443831Sym1 l_ae15
+instance POrd ('KProxy :: KProxy (a_12,
+                                  b_13,
+                                  c_14,
+                                  d_15,
+                                  e_16)) where
+  type Compare (a_ae0Z :: (a_12,
+                            b_13,
+                            c_14,
+                            d_15,
+                            e_16)) (a_ae10 :: (a_12,
+                                              b_13,
+                                              c_14,
+                                              d_15,
+                                              e_16)) = Apply (Apply Compare_1627443831Sym0 a_ae0Z) a_ae10
+instance (SOrd ('KProxy :: KProxy a_12),
+          SOrd ('KProxy :: KProxy b_13),
+          SOrd ('KProxy :: KProxy c_14),
+          SOrd ('KProxy :: KProxy d_15),
+          SOrd ('KProxy :: KProxy e_16)) =>
+          SOrd ('KProxy :: KProxy (a_12, b_13, c_14, d_15, e_16)) where
+  sCompare ::
+    forall (t_absH :: (a_12, b_13, c_14, d_15, e_16))
+            (t_absI :: (a_12, b_13, c_14, d_15, e_16)).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun (a_12,
+                                                    b_13,
+                                                    c_14,
+                                                    d_15,
+                                                    e_16) (TyFun (a_12,
+                                                                  b_13,
+                                                                  c_14,
+                                                                  d_15,
+                                                                  e_16) Ordering
+                                                            -> *)
+                                              -> *) t_absH :: TyFun (a_12,
+                                                                    b_13,
+                                                                    c_14,
+                                                                    d_15,
+                                                                    e_16) Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare
+    (STuple5 sA_1627443790
+              sA_1627443792
+              sA_1627443794
+              sA_1627443796
+              sA_1627443798)
+    (STuple5 sB_1627443800
+              sB_1627443802
+              sB_1627443804
+              sB_1627443806
+              sB_1627443808)
+    = let
+        lambda_ae1a ::
+          forall a_1627443790_ae0P
+                  a_1627443792_ae0Q
+                  a_1627443794_ae0R
+                  a_1627443796_ae0S
+                  a_1627443798_ae0T
+                  b_1627443800_ae0U
+                  b_1627443802_ae0V
+                  b_1627443804_ae0W
+                  b_1627443806_ae0X
+                  b_1627443808_ae0Y. (t_absH ~ Apply (Apply (Apply (Apply (Apply Tuple5Sym0 a_1627443790_ae0P) a_1627443792_ae0Q) a_1627443794_ae0R) a_1627443796_ae0S) a_1627443798_ae0T,
+                                      t_absI ~ Apply (Apply (Apply (Apply (Apply Tuple5Sym0 b_1627443800_ae0U) b_1627443802_ae0V) b_1627443804_ae0W) b_1627443806_ae0X) b_1627443808_ae0Y) =>
+          Sing a_1627443790_ae0P
+          -> Sing a_1627443792_ae0Q
+              -> Sing a_1627443794_ae0R
+                -> Sing a_1627443796_ae0S
+                    -> Sing a_1627443798_ae0T
+                      -> Sing b_1627443800_ae0U
+                          -> Sing b_1627443802_ae0V
+                            -> Sing b_1627443804_ae0W
+                                -> Sing b_1627443806_ae0X
+                                  -> Sing b_1627443808_ae0Y
+                                      -> Sing (Apply (Apply CompareSym0 (Apply (Apply (Apply (Apply (Apply Tuple5Sym0 a_1627443790_ae0P) a_1627443792_ae0Q) a_1627443794_ae0R) a_1627443796_ae0S) a_1627443798_ae0T)) (Apply (Apply (Apply (Apply (Apply Tuple5Sym0 b_1627443800_ae0U) b_1627443802_ae0V) b_1627443804_ae0W) b_1627443806_ae0X) b_1627443808_ae0Y) :: Ordering)
+        lambda_ae1a
+          a_1627443790_ae1b
+          a_1627443792_ae1c
+          a_1627443794_ae1d
+          a_1627443796_ae1e
+          a_1627443798_ae1f
+          b_1627443800_ae1g
+          b_1627443802_ae1h
+          b_1627443804_ae1i
+          b_1627443806_ae1j
+          b_1627443808_ae1k
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443790_ae1b)
+                        b_1627443800_ae1g))
+                  (applySing
+                    (applySing
+                        (singFun2 (Proxy :: Proxy (:$)) SCons)
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443792_ae1c)
+                          b_1627443802_ae1h))
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                          (applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                a_1627443794_ae1d)
+                              b_1627443804_ae1i))
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy (:$)) SCons)
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                    a_1627443796_ae1e)
+                                b_1627443806_ae1j))
+                          (applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                (applySing
+                                    (applySing
+                                      (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                      a_1627443798_ae1f)
+                                    b_1627443808_ae1k))
+                              SNil)))))
+      in
+        lambda_ae1a
+          sA_1627443790
+          sA_1627443792
+          sA_1627443794
+          sA_1627443796
+          sA_1627443798
+          sB_1627443800
+          sB_1627443802
+          sB_1627443804
+          sB_1627443806
+          sB_1627443808
+type family Compare_1627443898_ae27 (a_ae24 :: (a_12,
+                                                b_13,
+                                                c_14,
+                                                d_15,
+                                                e_16,
+                                                f_17))
+                                    (a_ae25 :: (a_12,
+                                                b_13,
+                                                c_14,
+                                                d_15,
+                                                e_16,
+                                                f_17)) :: Ordering where
+  Compare_1627443898_ae27 '(a_1627443851_ae1S,
+                            a_1627443853_ae1T,
+                            a_1627443855_ae1U,
+                            a_1627443857_ae1V,
+                            a_1627443859_ae1W,
+                            a_1627443861_ae1X) '(b_1627443863_ae1Y,
+                                                  b_1627443865_ae1Z,
+                                                  b_1627443867_ae20,
+                                                  b_1627443869_ae21,
+                                                  b_1627443871_ae22,
+                                                  b_1627443873_ae23) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443851_ae1S) b_1627443863_ae1Y)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443853_ae1T) b_1627443865_ae1Z)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443855_ae1U) b_1627443867_ae20)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443857_ae1V) b_1627443869_ae21)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443859_ae1W) b_1627443871_ae22)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443861_ae1X) b_1627443873_ae23)) '[]))))))
+type Compare_1627443898Sym2 (t_ae28 :: (a_12,
+                                        b_13,
+                                        c_14,
+                                        d_15,
+                                        e_16,
+                                        f_17))
+                            (t_ae29 :: (a_12, b_13, c_14, d_15, e_16, f_17)) =
+    Compare_1627443898_ae27 t_ae28 t_ae29
+instance SuppressUnusedWarnings Compare_1627443898Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443898Sym1KindInference ())
+data Compare_1627443898Sym1 (l_ae2d :: (a_12,
+                                        b_13,
+                                        c_14,
+                                        d_15,
+                                        e_16,
+                                        f_17))
+                            (l_ae2c :: TyFun (a_12, b_13, c_14, d_15, e_16, f_17) Ordering)
+  = forall arg_ae2e. KindOf (Apply (Compare_1627443898Sym1 l_ae2d) arg_ae2e) ~ KindOf (Compare_1627443898Sym2 l_ae2d arg_ae2e) =>
+    Compare_1627443898Sym1KindInference
+type instance Apply (Compare_1627443898Sym1 l_ae2d) l_ae2c = Compare_1627443898Sym2 l_ae2d l_ae2c
+instance SuppressUnusedWarnings Compare_1627443898Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443898Sym0KindInference ())
+data Compare_1627443898Sym0 (l_ae2a :: TyFun (a_12,
+                                              b_13,
+                                              c_14,
+                                              d_15,
+                                              e_16,
+                                              f_17) (TyFun (a_12,
+                                                            b_13,
+                                                            c_14,
+                                                            d_15,
+                                                            e_16,
+                                                            f_17) Ordering
+                                                      -> *))
+  = forall arg_ae2b. KindOf (Apply Compare_1627443898Sym0 arg_ae2b) ~ KindOf (Compare_1627443898Sym1 arg_ae2b) =>
+    Compare_1627443898Sym0KindInference
+type instance Apply Compare_1627443898Sym0 l_ae2a = Compare_1627443898Sym1 l_ae2a
+instance POrd ('KProxy :: KProxy (a_12,
+                                  b_13,
+                                  c_14,
+                                  d_15,
+                                  e_16,
+                                  f_17)) where
+  type Compare (a_ae24 :: (a_12,
+                            b_13,
+                            c_14,
+                            d_15,
+                            e_16,
+                            f_17)) (a_ae25 :: (a_12,
+                                              b_13,
+                                              c_14,
+                                              d_15,
+                                              e_16,
+                                              f_17)) = Apply (Apply Compare_1627443898Sym0 a_ae24) a_ae25
+instance (SOrd ('KProxy :: KProxy a_12),
+          SOrd ('KProxy :: KProxy b_13),
+          SOrd ('KProxy :: KProxy c_14),
+          SOrd ('KProxy :: KProxy d_15),
+          SOrd ('KProxy :: KProxy e_16),
+          SOrd ('KProxy :: KProxy f_17)) =>
+          SOrd ('KProxy :: KProxy (a_12, b_13, c_14, d_15, e_16, f_17)) where
+  sCompare ::
+    forall (t_absH :: (a_12, b_13, c_14, d_15, e_16, f_17))
+            (t_absI :: (a_12, b_13, c_14, d_15, e_16, f_17)).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun (a_12,
+                                                    b_13,
+                                                    c_14,
+                                                    d_15,
+                                                    e_16,
+                                                    f_17) (TyFun (a_12,
+                                                                  b_13,
+                                                                  c_14,
+                                                                  d_15,
+                                                                  e_16,
+                                                                  f_17) Ordering
+                                                            -> *)
+                                              -> *) t_absH :: TyFun (a_12,
+                                                                    b_13,
+                                                                    c_14,
+                                                                    d_15,
+                                                                    e_16,
+                                                                    f_17) Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare
+    (STuple6 sA_1627443851
+              sA_1627443853
+              sA_1627443855
+              sA_1627443857
+              sA_1627443859
+              sA_1627443861)
+    (STuple6 sB_1627443863
+              sB_1627443865
+              sB_1627443867
+              sB_1627443869
+              sB_1627443871
+              sB_1627443873)
+    = let
+        lambda_ae2f ::
+          forall a_1627443851_ae1S
+                  a_1627443853_ae1T
+                  a_1627443855_ae1U
+                  a_1627443857_ae1V
+                  a_1627443859_ae1W
+                  a_1627443861_ae1X
+                  b_1627443863_ae1Y
+                  b_1627443865_ae1Z
+                  b_1627443867_ae20
+                  b_1627443869_ae21
+                  b_1627443871_ae22
+                  b_1627443873_ae23. (t_absH ~ Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 a_1627443851_ae1S) a_1627443853_ae1T) a_1627443855_ae1U) a_1627443857_ae1V) a_1627443859_ae1W) a_1627443861_ae1X,
+                                      t_absI ~ Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 b_1627443863_ae1Y) b_1627443865_ae1Z) b_1627443867_ae20) b_1627443869_ae21) b_1627443871_ae22) b_1627443873_ae23) =>
+          Sing a_1627443851_ae1S
+          -> Sing a_1627443853_ae1T
+              -> Sing a_1627443855_ae1U
+                -> Sing a_1627443857_ae1V
+                    -> Sing a_1627443859_ae1W
+                      -> Sing a_1627443861_ae1X
+                          -> Sing b_1627443863_ae1Y
+                            -> Sing b_1627443865_ae1Z
+                                -> Sing b_1627443867_ae20
+                                  -> Sing b_1627443869_ae21
+                                      -> Sing b_1627443871_ae22
+                                        -> Sing b_1627443873_ae23
+                                            -> Sing (Apply (Apply CompareSym0 (Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 a_1627443851_ae1S) a_1627443853_ae1T) a_1627443855_ae1U) a_1627443857_ae1V) a_1627443859_ae1W) a_1627443861_ae1X)) (Apply (Apply (Apply (Apply (Apply (Apply Tuple6Sym0 b_1627443863_ae1Y) b_1627443865_ae1Z) b_1627443867_ae20) b_1627443869_ae21) b_1627443871_ae22) b_1627443873_ae23) :: Ordering)
+        lambda_ae2f
+          a_1627443851_ae2g
+          a_1627443853_ae2h
+          a_1627443855_ae2i
+          a_1627443857_ae2j
+          a_1627443859_ae2k
+          a_1627443861_ae2l
+          b_1627443863_ae2m
+          b_1627443865_ae2n
+          b_1627443867_ae2o
+          b_1627443869_ae2p
+          b_1627443871_ae2q
+          b_1627443873_ae2r
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443851_ae2g)
+                        b_1627443863_ae2m))
+                  (applySing
+                    (applySing
+                        (singFun2 (Proxy :: Proxy (:$)) SCons)
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443853_ae2h)
+                          b_1627443865_ae2n))
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                          (applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                a_1627443855_ae2i)
+                              b_1627443867_ae2o))
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy (:$)) SCons)
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                    a_1627443857_ae2j)
+                                b_1627443869_ae2p))
+                          (applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                (applySing
+                                    (applySing
+                                      (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                      a_1627443859_ae2k)
+                                    b_1627443871_ae2q))
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                    (applySing
+                                      (applySing
+                                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                          a_1627443861_ae2l)
+                                      b_1627443873_ae2r))
+                                SNil))))))
+      in
+        lambda_ae2f
+          sA_1627443851
+          sA_1627443853
+          sA_1627443855
+          sA_1627443857
+          sA_1627443859
+          sA_1627443861
+          sB_1627443863
+          sB_1627443865
+          sB_1627443867
+          sB_1627443869
+          sB_1627443871
+          sB_1627443873
+type family Compare_1627443973_ae3k (a_ae3h :: (a_12,
+                                                b_13,
+                                                c_14,
+                                                d_15,
+                                                e_16,
+                                                f_17,
+                                                g_18))
+                                    (a_ae3i :: (a_12,
+                                                b_13,
+                                                c_14,
+                                                d_15,
+                                                e_16,
+                                                f_17,
+                                                g_18)) :: Ordering where
+  Compare_1627443973_ae3k '(a_1627443920_ae33,
+                            a_1627443922_ae34,
+                            a_1627443924_ae35,
+                            a_1627443926_ae36,
+                            a_1627443928_ae37,
+                            a_1627443930_ae38,
+                            a_1627443932_ae39) '(b_1627443934_ae3a,
+                                                  b_1627443936_ae3b,
+                                                  b_1627443938_ae3c,
+                                                  b_1627443940_ae3d,
+                                                  b_1627443942_ae3e,
+                                                  b_1627443944_ae3f,
+                                                  b_1627443946_ae3g) = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443920_ae33) b_1627443934_ae3a)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443922_ae34) b_1627443936_ae3b)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443924_ae35) b_1627443938_ae3c)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443926_ae36) b_1627443940_ae3d)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443928_ae37) b_1627443942_ae3e)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443930_ae38) b_1627443944_ae3f)) (Apply (Apply (:$) (Apply (Apply CompareSym0 a_1627443932_ae39) b_1627443946_ae3g)) '[])))))))
+type Compare_1627443973Sym2 (t_ae3l :: (a_12,
+                                        b_13,
+                                        c_14,
+                                        d_15,
+                                        e_16,
+                                        f_17,
+                                        g_18))
+                            (t_ae3m :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18)) =
+    Compare_1627443973_ae3k t_ae3l t_ae3m
+instance SuppressUnusedWarnings Compare_1627443973Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443973Sym1KindInference ())
+data Compare_1627443973Sym1 (l_ae3q :: (a_12,
+                                        b_13,
+                                        c_14,
+                                        d_15,
+                                        e_16,
+                                        f_17,
+                                        g_18))
+                            (l_ae3p :: TyFun (a_12,
+                                              b_13,
+                                              c_14,
+                                              d_15,
+                                              e_16,
+                                              f_17,
+                                              g_18) Ordering)
+  = forall arg_ae3r. KindOf (Apply (Compare_1627443973Sym1 l_ae3q) arg_ae3r) ~ KindOf (Compare_1627443973Sym2 l_ae3q arg_ae3r) =>
+    Compare_1627443973Sym1KindInference
+type instance Apply (Compare_1627443973Sym1 l_ae3q) l_ae3p = Compare_1627443973Sym2 l_ae3q l_ae3p
+instance SuppressUnusedWarnings Compare_1627443973Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627443973Sym0KindInference ())
+data Compare_1627443973Sym0 (l_ae3n :: TyFun (a_12,
+                                              b_13,
+                                              c_14,
+                                              d_15,
+                                              e_16,
+                                              f_17,
+                                              g_18) (TyFun (a_12,
+                                                            b_13,
+                                                            c_14,
+                                                            d_15,
+                                                            e_16,
+                                                            f_17,
+                                                            g_18) Ordering
+                                                      -> *))
+  = forall arg_ae3o. KindOf (Apply Compare_1627443973Sym0 arg_ae3o) ~ KindOf (Compare_1627443973Sym1 arg_ae3o) =>
+    Compare_1627443973Sym0KindInference
+type instance Apply Compare_1627443973Sym0 l_ae3n = Compare_1627443973Sym1 l_ae3n
+instance POrd ('KProxy :: KProxy (a_12,
+                                  b_13,
+                                  c_14,
+                                  d_15,
+                                  e_16,
+                                  f_17,
+                                  g_18)) where
+  type Compare (a_ae3h :: (a_12,
+                            b_13,
+                            c_14,
+                            d_15,
+                            e_16,
+                            f_17,
+                            g_18)) (a_ae3i :: (a_12,
+                                              b_13,
+                                              c_14,
+                                              d_15,
+                                              e_16,
+                                              f_17,
+                                              g_18)) = Apply (Apply Compare_1627443973Sym0 a_ae3h) a_ae3i
+instance (SOrd ('KProxy :: KProxy a_12),
+          SOrd ('KProxy :: KProxy b_13),
+          SOrd ('KProxy :: KProxy c_14),
+          SOrd ('KProxy :: KProxy d_15),
+          SOrd ('KProxy :: KProxy e_16),
+          SOrd ('KProxy :: KProxy f_17),
+          SOrd ('KProxy :: KProxy g_18)) =>
+          SOrd ('KProxy :: KProxy (a_12,
+                                  b_13,
+                                  c_14,
+                                  d_15,
+                                  e_16,
+                                  f_17,
+                                  g_18)) where
+  sCompare ::
+    forall (t_absH :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18))
+            (t_absI :: (a_12, b_13, c_14, d_15, e_16, f_17, g_18)).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun (a_12,
+                                                    b_13,
+                                                    c_14,
+                                                    d_15,
+                                                    e_16,
+                                                    f_17,
+                                                    g_18) (TyFun (a_12,
+                                                                  b_13,
+                                                                  c_14,
+                                                                  d_15,
+                                                                  e_16,
+                                                                  f_17,
+                                                                  g_18) Ordering
+                                                            -> *)
+                                              -> *) t_absH :: TyFun (a_12,
+                                                                    b_13,
+                                                                    c_14,
+                                                                    d_15,
+                                                                    e_16,
+                                                                    f_17,
+                                                                    g_18) Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare
+    (STuple7 sA_1627443920
+              sA_1627443922
+              sA_1627443924
+              sA_1627443926
+              sA_1627443928
+              sA_1627443930
+              sA_1627443932)
+    (STuple7 sB_1627443934
+              sB_1627443936
+              sB_1627443938
+              sB_1627443940
+              sB_1627443942
+              sB_1627443944
+              sB_1627443946)
+    = let
+        lambda_ae3s ::
+          forall a_1627443920_ae33
+                  a_1627443922_ae34
+                  a_1627443924_ae35
+                  a_1627443926_ae36
+                  a_1627443928_ae37
+                  a_1627443930_ae38
+                  a_1627443932_ae39
+                  b_1627443934_ae3a
+                  b_1627443936_ae3b
+                  b_1627443938_ae3c
+                  b_1627443940_ae3d
+                  b_1627443942_ae3e
+                  b_1627443944_ae3f
+                  b_1627443946_ae3g. (t_absH ~ Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 a_1627443920_ae33) a_1627443922_ae34) a_1627443924_ae35) a_1627443926_ae36) a_1627443928_ae37) a_1627443930_ae38) a_1627443932_ae39,
+                                      t_absI ~ Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 b_1627443934_ae3a) b_1627443936_ae3b) b_1627443938_ae3c) b_1627443940_ae3d) b_1627443942_ae3e) b_1627443944_ae3f) b_1627443946_ae3g) =>
+          Sing a_1627443920_ae33
+          -> Sing a_1627443922_ae34
+              -> Sing a_1627443924_ae35
+                -> Sing a_1627443926_ae36
+                    -> Sing a_1627443928_ae37
+                      -> Sing a_1627443930_ae38
+                          -> Sing a_1627443932_ae39
+                            -> Sing b_1627443934_ae3a
+                                -> Sing b_1627443936_ae3b
+                                  -> Sing b_1627443938_ae3c
+                                      -> Sing b_1627443940_ae3d
+                                        -> Sing b_1627443942_ae3e
+                                            -> Sing b_1627443944_ae3f
+                                              -> Sing b_1627443946_ae3g
+                                                  -> Sing (Apply (Apply CompareSym0 (Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 a_1627443920_ae33) a_1627443922_ae34) a_1627443924_ae35) a_1627443926_ae36) a_1627443928_ae37) a_1627443930_ae38) a_1627443932_ae39)) (Apply (Apply (Apply (Apply (Apply (Apply (Apply Tuple7Sym0 b_1627443934_ae3a) b_1627443936_ae3b) b_1627443938_ae3c) b_1627443940_ae3d) b_1627443942_ae3e) b_1627443944_ae3f) b_1627443946_ae3g) :: Ordering)
+        lambda_ae3s
+          a_1627443920_ae3t
+          a_1627443922_ae3u
+          a_1627443924_ae3v
+          a_1627443926_ae3w
+          a_1627443928_ae3x
+          a_1627443930_ae3y
+          a_1627443932_ae3z
+          b_1627443934_ae3A
+          b_1627443936_ae3B
+          b_1627443938_ae3C
+          b_1627443940_ae3D
+          b_1627443942_ae3E
+          b_1627443944_ae3F
+          b_1627443946_ae3G
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              (applySing
+                  (applySing
+                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443920_ae3t)
+                        b_1627443934_ae3A))
+                  (applySing
+                    (applySing
+                        (singFun2 (Proxy :: Proxy (:$)) SCons)
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy CompareSym0) sCompare) a_1627443922_ae3u)
+                          b_1627443936_ae3B))
+                    (applySing
+                        (applySing
+                          (singFun2 (Proxy :: Proxy (:$)) SCons)
+                          (applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                a_1627443924_ae3v)
+                              b_1627443938_ae3C))
+                        (applySing
+                          (applySing
+                              (singFun2 (Proxy :: Proxy (:$)) SCons)
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                    a_1627443926_ae3w)
+                                b_1627443940_ae3D))
+                          (applySing
+                              (applySing
+                                (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                (applySing
+                                    (applySing
+                                      (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                      a_1627443928_ae3x)
+                                    b_1627443942_ae3E))
+                              (applySing
+                                (applySing
+                                    (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                    (applySing
+                                      (applySing
+                                          (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                          a_1627443930_ae3y)
+                                      b_1627443944_ae3F))
+                                (applySing
+                                    (applySing
+                                      (singFun2 (Proxy :: Proxy (:$)) SCons)
+                                      (applySing
+                                          (applySing
+                                            (singFun2 (Proxy :: Proxy CompareSym0) sCompare)
+                                            a_1627443932_ae3z)
+                                          b_1627443946_ae3G))
+                                    SNil)))))))
+      in
+        lambda_ae3s
+          sA_1627443920
+          sA_1627443922
+          sA_1627443924
+          sA_1627443926
+          sA_1627443928
+          sA_1627443930
+          sA_1627443932
+          sB_1627443934
+          sB_1627443936
+          sB_1627443938
+          sB_1627443940
+          sB_1627443942
+          sB_1627443944
+          sB_1627443946
+type family Compare_1627444008_ae3T (a_ae3Q :: Bool)
+                                    (a_ae3R :: Bool) :: Ordering where
+  Compare_1627444008_ae3T 'False 'False = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) '[]
+  Compare_1627444008_ae3T 'True 'True = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) '[]
+  Compare_1627444008_ae3T 'False 'True = LTSym0
+  Compare_1627444008_ae3T 'True 'False = GTSym0
+type Compare_1627444008Sym2 (t_ae3U :: Bool) (t_ae3V :: Bool) =
+    Compare_1627444008_ae3T t_ae3U t_ae3V
+instance SuppressUnusedWarnings Compare_1627444008Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627444008Sym1KindInference ())
+data Compare_1627444008Sym1 (l_ae3Z :: Bool)
+                            (l_ae3Y :: TyFun Bool Ordering)
+  = forall arg_ae40. KindOf (Apply (Compare_1627444008Sym1 l_ae3Z) arg_ae40) ~ KindOf (Compare_1627444008Sym2 l_ae3Z arg_ae40) =>
+    Compare_1627444008Sym1KindInference
+type instance Apply (Compare_1627444008Sym1 l_ae3Z) l_ae3Y = Compare_1627444008Sym2 l_ae3Z l_ae3Y
+instance SuppressUnusedWarnings Compare_1627444008Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627444008Sym0KindInference ())
+data Compare_1627444008Sym0 (l_ae3W :: TyFun Bool (TyFun Bool Ordering
+                                                    -> *))
+  = forall arg_ae3X. KindOf (Apply Compare_1627444008Sym0 arg_ae3X) ~ KindOf (Compare_1627444008Sym1 arg_ae3X) =>
+    Compare_1627444008Sym0KindInference
+type instance Apply Compare_1627444008Sym0 l_ae3W = Compare_1627444008Sym1 l_ae3W
+instance POrd ('KProxy :: KProxy Bool) where
+  type Compare (a_ae3Q :: Bool) (a_ae3R :: Bool) = Apply (Apply Compare_1627444008Sym0 a_ae3Q) a_ae3R
+instance SOrd ('KProxy :: KProxy Bool) where
+  sCompare ::
+    forall (t_absH :: Bool) (t_absI :: Bool).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun Bool (TyFun Bool Ordering
+                                                          -> *)
+                                              -> *) t_absH :: TyFun Bool Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare SFalse SFalse
+    = let
+        lambda_ae41 ::
+          (t_absH ~ FalseSym0, t_absI ~ FalseSym0) =>
+          Sing (Apply (Apply CompareSym0 FalseSym0) FalseSym0 :: Ordering)
+        lambda_ae41
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              SNil
+      in lambda_ae41
+  sCompare STrue STrue
+    = let
+        lambda_ae42 ::
+          (t_absH ~ TrueSym0, t_absI ~ TrueSym0) =>
+          Sing (Apply (Apply CompareSym0 TrueSym0) TrueSym0 :: Ordering)
+        lambda_ae42
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              SNil
+      in lambda_ae42
+  sCompare SFalse STrue
+    = let
+        lambda_ae43 ::
+          (t_absH ~ FalseSym0, t_absI ~ TrueSym0) =>
+          Sing (Apply (Apply CompareSym0 FalseSym0) TrueSym0 :: Ordering)
+        lambda_ae43 = SLT
+      in lambda_ae43
+  sCompare STrue SFalse
+    = let
+        lambda_ae44 ::
+          (t_absH ~ TrueSym0, t_absI ~ FalseSym0) =>
+          Sing (Apply (Apply CompareSym0 TrueSym0) FalseSym0 :: Ordering)
+        lambda_ae44 = SGT
+      in lambda_ae44
+type family Compare_1627444032_ae4h (a_ae4e :: Ordering)
+                                    (a_ae4f :: Ordering) :: Ordering where
+  Compare_1627444032_ae4h 'LT 'LT = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) '[]
+  Compare_1627444032_ae4h 'EQ 'EQ = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) '[]
+  Compare_1627444032_ae4h 'GT 'GT = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) '[]
+  Compare_1627444032_ae4h 'LT 'EQ = LTSym0
+  Compare_1627444032_ae4h 'LT 'GT = LTSym0
+  Compare_1627444032_ae4h 'EQ 'LT = GTSym0
+  Compare_1627444032_ae4h 'EQ 'GT = LTSym0
+  Compare_1627444032_ae4h 'GT 'LT = GTSym0
+  Compare_1627444032_ae4h 'GT 'EQ = GTSym0
+type Compare_1627444032Sym2 (t_ae4i :: Ordering)
+                            (t_ae4j :: Ordering) =
+    Compare_1627444032_ae4h t_ae4i t_ae4j
+instance SuppressUnusedWarnings Compare_1627444032Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627444032Sym1KindInference ())
+data Compare_1627444032Sym1 (l_ae4n :: Ordering)
+                            (l_ae4m :: TyFun Ordering Ordering)
+  = forall arg_ae4o. KindOf (Apply (Compare_1627444032Sym1 l_ae4n) arg_ae4o) ~ KindOf (Compare_1627444032Sym2 l_ae4n arg_ae4o) =>
+    Compare_1627444032Sym1KindInference
+type instance Apply (Compare_1627444032Sym1 l_ae4n) l_ae4m = Compare_1627444032Sym2 l_ae4n l_ae4m
+instance SuppressUnusedWarnings Compare_1627444032Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627444032Sym0KindInference ())
+data Compare_1627444032Sym0 (l_ae4k :: TyFun Ordering (TyFun Ordering Ordering
+                                                        -> *))
+  = forall arg_ae4l. KindOf (Apply Compare_1627444032Sym0 arg_ae4l) ~ KindOf (Compare_1627444032Sym1 arg_ae4l) =>
+    Compare_1627444032Sym0KindInference
+type instance Apply Compare_1627444032Sym0 l_ae4k = Compare_1627444032Sym1 l_ae4k
+instance POrd ('KProxy :: KProxy Ordering) where
+  type Compare (a_ae4e :: Ordering) (a_ae4f :: Ordering) = Apply (Apply Compare_1627444032Sym0 a_ae4e) a_ae4f
+instance SOrd ('KProxy :: KProxy Ordering) where
+  sCompare ::
+    forall (t_absH :: Ordering) (t_absI :: Ordering).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun Ordering (TyFun Ordering Ordering
+                                                              -> *)
+                                              -> *) t_absH :: TyFun Ordering Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare SLT SLT
+    = let
+        lambda_ae4p ::
+          (t_absH ~ LTSym0, t_absI ~ LTSym0) =>
+          Sing (Apply (Apply CompareSym0 LTSym0) LTSym0 :: Ordering)
+        lambda_ae4p
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              SNil
+      in lambda_ae4p
+  sCompare SEQ SEQ
+    = let
+        lambda_ae4q ::
+          (t_absH ~ EQSym0, t_absI ~ EQSym0) =>
+          Sing (Apply (Apply CompareSym0 EQSym0) EQSym0 :: Ordering)
+        lambda_ae4q
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              SNil
+      in lambda_ae4q
+  sCompare SGT SGT
+    = let
+        lambda_ae4r ::
+          (t_absH ~ GTSym0, t_absI ~ GTSym0) =>
+          Sing (Apply (Apply CompareSym0 GTSym0) GTSym0 :: Ordering)
+        lambda_ae4r
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              SNil
+      in lambda_ae4r
+  sCompare SLT SEQ
+    = let
+        lambda_ae4s ::
+          (t_absH ~ LTSym0, t_absI ~ EQSym0) =>
+          Sing (Apply (Apply CompareSym0 LTSym0) EQSym0 :: Ordering)
+        lambda_ae4s = SLT
+      in lambda_ae4s
+  sCompare SLT SGT
+    = let
+        lambda_ae4t ::
+          (t_absH ~ LTSym0, t_absI ~ GTSym0) =>
+          Sing (Apply (Apply CompareSym0 LTSym0) GTSym0 :: Ordering)
+        lambda_ae4t = SLT
+      in lambda_ae4t
+  sCompare SEQ SLT
+    = let
+        lambda_ae4u ::
+          (t_absH ~ EQSym0, t_absI ~ LTSym0) =>
+          Sing (Apply (Apply CompareSym0 EQSym0) LTSym0 :: Ordering)
+        lambda_ae4u = SGT
+      in lambda_ae4u
+  sCompare SEQ SGT
+    = let
+        lambda_ae4v ::
+          (t_absH ~ EQSym0, t_absI ~ GTSym0) =>
+          Sing (Apply (Apply CompareSym0 EQSym0) GTSym0 :: Ordering)
+        lambda_ae4v = SLT
+      in lambda_ae4v
+  sCompare SGT SLT
+    = let
+        lambda_ae4w ::
+          (t_absH ~ GTSym0, t_absI ~ LTSym0) =>
+          Sing (Apply (Apply CompareSym0 GTSym0) LTSym0 :: Ordering)
+        lambda_ae4w = SGT
+      in lambda_ae4w
+  sCompare SGT SEQ
+    = let
+        lambda_ae4x ::
+          (t_absH ~ GTSym0, t_absI ~ EQSym0) =>
+          Sing (Apply (Apply CompareSym0 GTSym0) EQSym0 :: Ordering)
+        lambda_ae4x = SGT
+      in lambda_ae4x
+type family Compare_1627444061_ae4K (a_ae4H :: ())
+                                    (a_ae4I :: ()) :: Ordering where
+  Compare_1627444061_ae4K '() '() = Apply (Apply (Apply FoldlSym0 ThenCmpSym0) EQSym0) '[]
+type Compare_1627444061Sym2 (t_ae4L :: ()) (t_ae4M :: ()) =
+    Compare_1627444061_ae4K t_ae4L t_ae4M
+instance SuppressUnusedWarnings Compare_1627444061Sym1 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627444061Sym1KindInference ())
+data Compare_1627444061Sym1 (l_ae4Q :: ())
+                            (l_ae4P :: TyFun () Ordering)
+  = forall arg_ae4R. KindOf (Apply (Compare_1627444061Sym1 l_ae4Q) arg_ae4R) ~ KindOf (Compare_1627444061Sym2 l_ae4Q arg_ae4R) =>
+    Compare_1627444061Sym1KindInference
+type instance Apply (Compare_1627444061Sym1 l_ae4Q) l_ae4P = Compare_1627444061Sym2 l_ae4Q l_ae4P
+instance SuppressUnusedWarnings Compare_1627444061Sym0 where
+  suppressUnusedWarnings _
+    = snd ((,) Compare_1627444061Sym0KindInference ())
+data Compare_1627444061Sym0 (l_ae4N :: TyFun () (TyFun () Ordering
+                                                  -> *))
+  = forall arg_ae4O. KindOf (Apply Compare_1627444061Sym0 arg_ae4O) ~ KindOf (Compare_1627444061Sym1 arg_ae4O) =>
+    Compare_1627444061Sym0KindInference
+type instance Apply Compare_1627444061Sym0 l_ae4N = Compare_1627444061Sym1 l_ae4N
+instance POrd ('KProxy :: KProxy ()) where
+  type Compare (a_ae4H :: ()) (a_ae4I :: ()) = Apply (Apply Compare_1627444061Sym0 a_ae4H) a_ae4I
+instance SOrd ('KProxy :: KProxy ()) where
+  sCompare ::
+    forall (t_absH :: ()) (t_absI :: ()).
+    Sing t_absH
+    -> Sing t_absI
+        -> Sing (Apply (Apply (CompareSym0 :: TyFun () (TyFun () Ordering
+                                                        -> *)
+                                              -> *) t_absH :: TyFun () Ordering
+                                                              -> *) t_absI :: Ordering)
+  sCompare STuple0 STuple0
+    = let
+        lambda_ae4S ::
+          (t_absH ~ Tuple0Sym0, t_absI ~ Tuple0Sym0) =>
+          Sing (Apply (Apply CompareSym0 Tuple0Sym0) Tuple0Sym0 :: Ordering)
+        lambda_ae4S
+          = applySing
+              (applySing
+                  (applySing
+                    (singFun3 (Proxy :: Proxy FoldlSym0) sFoldl)
+                    (singFun2 (Proxy :: Proxy ThenCmpSym0) sThenCmp))
+                  SEQ)
+              SNil
+      in lambda_ae4S
diff --git a/src/Data/Singletons/Prelude/Tuple.hs b/src/Data/Singletons/Prelude/Tuple.hs
index 18b5081..d76be00 100644
--- a/src/Data/Singletons/Prelude/Tuple.hs
+++ b/src/Data/Singletons/Prelude/Tuple.hs
@@ -46,27 +46,178 @@ module Data.Singletons.Prelude.Tuple (
   SwapSym0, SwapSym1
   ) where
 
+import Data.Proxy
+import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.Prelude.Instances
-import Data.Singletons.TH
 
-$(singletonsOnly [d|
-  -- -| Extract the first component of a pair.
-  fst                     :: (a,b) -> a
-  fst (x,_)               =  x
-
-  -- -| Extract the second component of a pair.
-  snd                     :: (a,b) -> b
-  snd (_,y)               =  y
-
-  -- -| 'curry' converts an uncurried function to a curried function.
-  curry                   :: ((a, b) -> c) -> a -> b -> c
-  curry f x y             =  f (x, y)
-
-  -- -| 'uncurry' converts a curried function to a function on pairs.
-  uncurry                 :: (a -> b -> c) -> ((a, b) -> c)
-  uncurry f p             =  f (fst p) (snd p)
-
-  -- -| Swap the components of a pair.
-  swap                    :: (a,b) -> (b,a)
-  swap (a,b)              = (b,a)
-  |])
+type SwapSym1 (t_awWr :: (a_awWn, b_awWo)) = Swap t_awWr
+instance SuppressUnusedWarnings SwapSym0 where
+  suppressUnusedWarnings _ = snd ((,) SwapSym0KindInference ())
+data SwapSym0 (l_awWs :: TyFun (a_awWn, b_awWo) (b_awWo, a_awWn))
+  = forall arg_awWt. KindOf (Apply SwapSym0 arg_awWt) ~ KindOf (SwapSym1 arg_awWt) =>
+    SwapSym0KindInference
+type instance Apply SwapSym0 l_awWs = SwapSym1 l_awWs
+type CurrySym3 (t_awWx :: TyFun (a_awWc, b_awWd) c_awWe -> *)
+                (t_awWy :: a_awWc)
+                (t_awWz :: b_awWd) =
+    Curry t_awWx t_awWy t_awWz
+instance SuppressUnusedWarnings CurrySym2 where
+  suppressUnusedWarnings _ = snd ((,) CurrySym2KindInference ())
+data CurrySym2 (l_awWG :: TyFun (a_awWc, b_awWd) c_awWe -> *)
+                (l_awWH :: a_awWc)
+                (l_awWF :: TyFun b_awWd c_awWe)
+  = forall arg_awWI. KindOf (Apply (CurrySym2 l_awWG l_awWH) arg_awWI) ~ KindOf (CurrySym3 l_awWG l_awWH arg_awWI) =>
+    CurrySym2KindInference
+type instance Apply (CurrySym2 l_awWG l_awWH) l_awWF = CurrySym3 l_awWG l_awWH l_awWF
+instance SuppressUnusedWarnings CurrySym1 where
+  suppressUnusedWarnings _ = snd ((,) CurrySym1KindInference ())
+data CurrySym1 (l_awWD :: TyFun (a_awWc, b_awWd) c_awWe -> *)
+                (l_awWC :: TyFun a_awWc (TyFun b_awWd c_awWe -> *))
+  = forall arg_awWE. KindOf (Apply (CurrySym1 l_awWD) arg_awWE) ~ KindOf (CurrySym2 l_awWD arg_awWE) =>
+    CurrySym1KindInference
+type instance Apply (CurrySym1 l_awWD) l_awWC = CurrySym2 l_awWD l_awWC
+instance SuppressUnusedWarnings CurrySym0 where
+  suppressUnusedWarnings _ = snd ((,) CurrySym0KindInference ())
+data CurrySym0 (l_awWA :: TyFun (TyFun (a_awWc, b_awWd) c_awWe
+                                  -> *) (TyFun a_awWc (TyFun b_awWd c_awWe -> *) -> *))
+  = forall arg_awWB. KindOf (Apply CurrySym0 arg_awWB) ~ KindOf (CurrySym1 arg_awWB) =>
+    CurrySym0KindInference
+type instance Apply CurrySym0 l_awWA = CurrySym1 l_awWA
+type SndSym1 (t_awWP :: (a_awW9, b_awWa)) = Snd t_awWP
+instance SuppressUnusedWarnings SndSym0 where
+  suppressUnusedWarnings _ = snd ((,) SndSym0KindInference ())
+data SndSym0 (l_awWQ :: TyFun (a_awW9, b_awWa) b_awWa)
+  = forall arg_awWR. KindOf (Apply SndSym0 arg_awWR) ~ KindOf (SndSym1 arg_awWR) =>
+    SndSym0KindInference
+type instance Apply SndSym0 l_awWQ = SndSym1 l_awWQ
+type FstSym1 (t_awWX :: (a_awW6, b_awW7)) = Fst t_awWX
+instance SuppressUnusedWarnings FstSym0 where
+  suppressUnusedWarnings _ = snd ((,) FstSym0KindInference ())
+data FstSym0 (l_awWY :: TyFun (a_awW6, b_awW7) a_awW6)
+  = forall arg_awWZ. KindOf (Apply FstSym0 arg_awWZ) ~ KindOf (FstSym1 arg_awWZ) =>
+    FstSym0KindInference
+type instance Apply FstSym0 l_awWY = FstSym1 l_awWY
+type UncurrySym2 (t_awX5 :: TyFun a_awWi (TyFun b_awWj c_awWk -> *)
+                            -> *)
+                  (t_awX6 :: (a_awWi, b_awWj)) =
+    Uncurry t_awX5 t_awX6
+instance SuppressUnusedWarnings UncurrySym1 where
+  suppressUnusedWarnings _ = snd ((,) UncurrySym1KindInference ())
+data UncurrySym1 (l_awXa :: TyFun a_awWi (TyFun b_awWj c_awWk -> *)
+                            -> *)
+                  (l_awX9 :: TyFun (a_awWi, b_awWj) c_awWk)
+  = forall arg_awXb. KindOf (Apply (UncurrySym1 l_awXa) arg_awXb) ~ KindOf (UncurrySym2 l_awXa arg_awXb) =>
+    UncurrySym1KindInference
+type instance Apply (UncurrySym1 l_awXa) l_awX9 = UncurrySym2 l_awXa l_awX9
+instance SuppressUnusedWarnings UncurrySym0 where
+  suppressUnusedWarnings _ = snd ((,) UncurrySym0KindInference ())
+data UncurrySym0 (l_awX7 :: TyFun (TyFun a_awWi (TyFun b_awWj c_awWk
+                                                  -> *)
+                                    -> *) (TyFun (a_awWi, b_awWj) c_awWk -> *))
+  = forall arg_awX8. KindOf (Apply UncurrySym0 arg_awX8) ~ KindOf (UncurrySym1 arg_awX8) =>
+    UncurrySym0KindInference
+type instance Apply UncurrySym0 l_awX7 = UncurrySym1 l_awX7
+type family Swap (a_awWu :: (a_awWn, b_awWo)) :: (b_awWo,
+                                                  a_awWn) where
+  Swap '(a_awWv, b_awWw) = Apply (Apply Tuple2Sym0 b_awWw) a_awWv
+type family Curry (a_awWJ :: TyFun (a_awWc, b_awWd) c_awWe -> *)
+                  (a_awWK :: a_awWc)
+                  (a_awWL :: b_awWd) :: c_awWe where
+  Curry f_awWM x_awWN y_awWO = Apply f_awWM (Apply (Apply Tuple2Sym0 x_awWN) y_awWO)
+type family Snd (a_awWS :: (a_awW9, b_awWa)) :: b_awWa where
+  Snd '(_z_1627516611_awWV, y_awWW) = y_awWW
+type family Fst (a_awX0 :: (a_awW6, b_awW7)) :: a_awW6 where
+  Fst '(x_awX1, _z_1627516620_awX4) = x_awX1
+type family Uncurry (a_awXc :: TyFun a_awWi (TyFun b_awWj c_awWk
+                                              -> *)
+                                -> *)
+                    (a_awXd :: (a_awWi, b_awWj)) :: c_awWk where
+  Uncurry f_awXe p_awXf = Apply (Apply f_awXe (Apply FstSym0 p_awXf)) (Apply SndSym0 p_awXf)
+sSwap ::
+  forall (t_awXg :: (a_awWn, b_awWo)).
+  Sing t_awXg -> Sing (Apply SwapSym0 t_awXg :: (b_awWo, a_awWn))
+sCurry ::
+  forall (t_awXh :: TyFun (a_awWc, b_awWd) c_awWe -> *)
+          (t_awXi :: a_awWc)
+          (t_awXj :: b_awWd).
+  Sing t_awXh
+  -> Sing t_awXi
+      -> Sing t_awXj
+        -> Sing (Apply (Apply (Apply CurrySym0 t_awXh) t_awXi) t_awXj :: c_awWe)
+sSnd ::
+  forall (t_awXk :: (a_awW9, b_awWa)).
+  Sing t_awXk -> Sing (Apply SndSym0 t_awXk :: b_awWa)
+sFst ::
+  forall (t_awXl :: (a_awW6, b_awW7)).
+  Sing t_awXl -> Sing (Apply FstSym0 t_awXl :: a_awW6)
+sUncurry ::
+  forall (t_awXm :: TyFun a_awWi (TyFun b_awWj c_awWk -> *) -> *)
+          (t_awXn :: (a_awWi, b_awWj)).
+  Sing t_awXm
+  -> Sing t_awXn
+      -> Sing (Apply (Apply UncurrySym0 t_awXm) t_awXn :: c_awWk)
+sSwap (STuple2 sA sB)
+  = let
+      lambda_awXo ::
+        forall a_awWv
+                b_awWw. t_awXg ~ Apply (Apply Tuple2Sym0 a_awWv) b_awWw =>
+        Sing a_awWv
+        -> Sing b_awWw
+            -> Sing (Apply SwapSym0 (Apply (Apply Tuple2Sym0 a_awWv) b_awWw) :: (b_awWo,
+                                                                                a_awWn))
+      lambda_awXo a_awXp b_awXq
+        = applySing
+            (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) b_awXq)
+            a_awXp
+    in lambda_awXo sA sB
+sCurry sF sX sY
+  = let
+      lambda_awXr ::
+        forall f_awWM x_awWN y_awWO. (t_awXh ~ f_awWM,
+                                      t_awXi ~ x_awWN,
+                                      t_awXj ~ y_awWO) =>
+        Sing f_awWM
+        -> Sing x_awWN
+            -> Sing y_awWO
+              -> Sing (Apply (Apply (Apply CurrySym0 f_awWM) x_awWN) y_awWO :: c_awWe)
+      lambda_awXr f_awXs x_awXt y_awXu
+        = applySing
+            f_awXs
+            (applySing
+                (applySing (singFun2 (Proxy :: Proxy Tuple2Sym0) STuple2) x_awXt)
+                y_awXu)
+    in lambda_awXr sF sX sY
+sSnd (STuple2 _s_z_1627516611 sY)
+  = let
+      lambda_awXv ::
+        forall _z_1627516611_awWV
+                y_awWW. t_awXk ~ Apply (Apply Tuple2Sym0 _z_1627516611_awWV) y_awWW =>
+        Sing _z_1627516611_awWV
+        -> Sing y_awWW
+            -> Sing (Apply SndSym0 (Apply (Apply Tuple2Sym0 _z_1627516611_awWV) y_awWW) :: b_awWa)
+      lambda_awXv _z_1627516611_awXw y_awXx = y_awXx
+    in lambda_awXv _s_z_1627516611 sY
+sFst (STuple2 sX _s_z_1627516620)
+  = let
+      lambda_awXy ::
+        forall x_awX1
+                _z_1627516620_awX4. t_awXl ~ Apply (Apply Tuple2Sym0 x_awX1) _z_1627516620_awX4 =>
+        Sing x_awX1
+        -> Sing _z_1627516620_awX4
+            -> Sing (Apply FstSym0 (Apply (Apply Tuple2Sym0 x_awX1) _z_1627516620_awX4) :: a_awW6)
+      lambda_awXy x_awXz _z_1627516620_awXA = x_awXz
+    in lambda_awXy sX _s_z_1627516620
+sUncurry sF sP
+  = let
+      lambda_awXB ::
+        forall f_awXe p_awXf. (t_awXm ~ f_awXe, t_awXn ~ p_awXf) =>
+        Sing f_awXe
+        -> Sing p_awXf
+            -> Sing (Apply (Apply UncurrySym0 f_awXe) p_awXf :: c_awWk)
+      lambda_awXB f_awXC p_awXD
+        = applySing
+            (applySing
+                f_awXC (applySing (singFun1 (Proxy :: Proxy FstSym0) sFst) p_awXD))
+            (applySing (singFun1 (Proxy :: Proxy SndSym0) sSnd) p_awXD)
+    in lambda_awXB sF sP
diff --git a/src/Data/Singletons/Promote.hs b/src/Data/Singletons/Promote.hs
deleted file mode 100644
index 71e1c63..0000000
--- a/src/Data/Singletons/Promote.hs
+++ /dev/null
@@ -1,591 +0,0 @@
-{- Data/Singletons/Promote.hs
-
-(c) Richard Eisenberg 2013
-eir@cis.upenn.edu
-
-This file contains functions to promote term-level constructs to the
-type level. It is an internal module to the singletons package.
--}
-
-{-# LANGUAGE TemplateHaskell, MultiWayIf, LambdaCase, TupleSections, CPP #-}
-
-module Data.Singletons.Promote where
-
-import Language.Haskell.TH hiding ( Q, cxt )
-import Language.Haskell.TH.Syntax ( Quasi(..) )
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Names
-import Data.Singletons.Promote.Monad
-import Data.Singletons.Promote.Eq
-import Data.Singletons.Promote.Defun
-import Data.Singletons.Promote.Type
-import Data.Singletons.Deriving.Ord
-import Data.Singletons.Deriving.Bounded
-import Data.Singletons.Deriving.Enum
-import Data.Singletons.Partition
-import Data.Singletons.Util
-import Data.Singletons.Syntax
-import Prelude hiding (exp)
-import Control.Monad
-import qualified Data.Map.Strict as Map
-import Data.Map.Strict ( Map )
-import Data.Maybe
-
--- | Generate promoted definitions from a type that is already defined.
--- This is generally only useful with classes.
-genPromotions :: DsMonad q => [Name] -> q [Dec]
-genPromotions names = do
-  checkForRep names
-  infos <- mapM reifyWithWarning names
-  dinfos <- mapM dsInfo infos
-  ddecs <- promoteM_ [] $ mapM_ promoteInfo dinfos
-  return $ decsToTH ddecs
-
--- | Promote every declaration given to the type level, retaining the originals.
-promote :: DsMonad q => q [Dec] -> q [Dec]
-promote qdec = do
-  decls <- qdec
-  ddecls <- withLocalDeclarations decls $ dsDecs decls
-  promDecls <- promoteM_ decls $ promoteDecs ddecls
-  return $ decls ++ decsToTH promDecls
-
--- | Promote each declaration, discarding the originals. Note that a promoted
--- datatype uses the same definition as an original datatype, so this will
--- not work with datatypes. Classes, instances, and functions are all fine.
-promoteOnly :: DsMonad q => q [Dec] -> q [Dec]
-promoteOnly qdec = do
-  decls  <- qdec
-  ddecls <- dsDecs decls
-  promDecls <- promoteM_ decls $ promoteDecs ddecls
-  return $ decsToTH promDecls
-
--- | Generate defunctionalization symbols for existing type family
-genDefunSymbols :: DsMonad q => [Name] -> q [Dec]
-genDefunSymbols names = do
-  checkForRep names
-  infos <- mapM (dsInfo <=< reifyWithWarning) names
-  decs <- promoteMDecs [] $ concatMapM defunInfo infos
-  return $ decsToTH decs
-
--- | Produce instances for '(:==)' (type-level equality) from the given types
-promoteEqInstances :: DsMonad q => [Name] -> q [Dec]
-promoteEqInstances = concatMapM promoteEqInstance
-
--- | Produce instances for 'POrd' from the given types
-promoteOrdInstances :: DsMonad q => [Name] -> q [Dec]
-promoteOrdInstances = concatMapM promoteOrdInstance
-
--- | Produce an instance for 'POrd' from the given type
-promoteOrdInstance :: DsMonad q => Name -> q [Dec]
-promoteOrdInstance = promoteInstance mkOrdInstance "Ord"
-
--- | Produce instances for 'PBounded' from the given types
-promoteBoundedInstances :: DsMonad q => [Name] -> q [Dec]
-promoteBoundedInstances = concatMapM promoteBoundedInstance
-
--- | Produce an instance for 'PBounded' from the given type
-promoteBoundedInstance :: DsMonad q => Name -> q [Dec]
-promoteBoundedInstance = promoteInstance mkBoundedInstance "Bounded"
-
--- | Produce instances for 'PEnum' from the given types
-promoteEnumInstances :: DsMonad q => [Name] -> q [Dec]
-promoteEnumInstances = concatMapM promoteEnumInstance
-
--- | Produce an instance for 'PEnum' from the given type
-promoteEnumInstance :: DsMonad q => Name -> q [Dec]
-promoteEnumInstance = promoteInstance mkEnumInstance "Enum"
-
--- | Produce an instance for '(:==)' (type-level equality) from the given type
-promoteEqInstance :: DsMonad q => Name -> q [Dec]
-promoteEqInstance name = do
-  (_tvbs, cons) <- getDataD "I cannot make an instance of (:==) for it." name
-  cons' <- mapM dsCon cons
-  vars <- replicateM (length _tvbs) (qNewName "k")
-  kind <- promoteType (foldType (DConT name) (map DVarT vars))
-  inst_decs <- mkEqTypeInstance kind cons'
-  return $ decsToTH inst_decs
-
-promoteInstance :: DsMonad q => (DType -> [DCon] -> q UInstDecl)
-                -> String -> Name -> q [Dec]
-promoteInstance mk_inst class_name name = do
-  (tvbs, cons) <- getDataD ("I cannot make an instance of " ++ class_name
-                            ++ " for it.") name
-  cons' <- mapM dsCon cons
-  tvbs' <- mapM dsTvb tvbs
-  raw_inst <- mk_inst (foldType (DConT name) (map tvbToType tvbs')) cons'
-  decs <- promoteM_ [] $ void $ promoteInstanceDec Map.empty raw_inst
-  return $ decsToTH decs
-
-promoteInfo :: DInfo -> PrM ()
-promoteInfo (DTyConI dec _instances) = promoteDecs [dec]
-promoteInfo (DPrimTyConI _name _numArgs _unlifted) =
-  fail "Promotion of primitive type constructors not supported"
-promoteInfo (DVarI _name _ty _mdec _fixity) =
-  fail "Promotion of individual values not supported"
-promoteInfo (DTyVarI _name _ty) =
-  fail "Promotion of individual type variables not supported"
-
--- Note [Promoting declarations in two stages]
--- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---
--- It is necessary to know the types of things when promoting. So,
--- we promote in two stages: first, we build a LetDecEnv, which allows
--- for easy lookup. Then, we go through the actual elements of the LetDecEnv,
--- performing the promotion.
---
--- Why do we need the types? For kind annotations on the type family. We also
--- need to have both the types and the actual function definition at the same
--- time, because the function definition tells us how many patterns are
--- matched. Note that an eta-contracted function needs to return a TyFun,
--- not a proper type-level function.
---
--- Consider this example:
---
---   foo :: Nat -> Bool -> Bool
---   foo Zero = id
---   foo _    = not
---
--- Here the first parameter to foo is non-uniform, because it is
--- inspected in a pattern and can be different in each defining
--- equation of foo. The second parameter to foo, specified in the type
--- signature as Bool, is a uniform parameter - it is not inspected and
--- each defining equation of foo uses it the same way. The foo
--- function will be promoted to a type familty Foo like this:
---
---   type family Foo (n :: Nat) :: TyFun Bool Bool -> * where
---      Foo Zero = Id
---      Foo a    = Not
---
--- To generate type signature for Foo type family we must first learn
--- what is the actual number of patterns used in defining cequations
--- of foo. In this case there is only one so we declare Foo to take
--- one argument and have return type of Bool -> Bool.
-
--- Promote a list of top-level declarations.
-promoteDecs :: [DDec] -> PrM ()
-promoteDecs raw_decls = do
-  decls <- expand raw_decls     -- expand type synonyms
-  checkForRepInDecls decls
-  PDecs { pd_let_decs              = let_decs
-        , pd_class_decs            = classes
-        , pd_instance_decs         = insts
-        , pd_data_decs             = datas }    <- partitionDecs decls
-
-    -- promoteLetDecs returns LetBinds, which we don't need at top level
-  _ <- promoteLetDecs noPrefix let_decs
-  mapM_ promoteClassDec classes
-  let all_meth_sigs = foldMap (lde_types . cd_lde) classes
-  mapM_ (promoteInstanceDec all_meth_sigs) insts
-  promoteDataDecs datas
-
-promoteDataDecs :: [DataDecl] -> PrM ()
-promoteDataDecs data_decs = do
-  rec_selectors <- concatMapM extract_rec_selectors data_decs
-  _ <- promoteLetDecs noPrefix rec_selectors
-  mapM_ promoteDataDec data_decs
-  where
-    extract_rec_selectors :: DataDecl -> PrM [DLetDec]
-    extract_rec_selectors (DataDecl _nd data_name tvbs cons _derivings) =
-      let arg_ty = foldType (DConT data_name)
-                            (map tvbToType tvbs)
-      in
-      concatMapM (getRecordSelectors arg_ty) cons
-
--- curious about ALetDecEnv? See the LetDecEnv module for an explanation.
-promoteLetDecs :: (String, String) -- (alpha, symb) prefixes to use
-               -> [DLetDec] -> PrM ([LetBind], ALetDecEnv)
-  -- See Note [Promoting declarations in two stages]
-promoteLetDecs prefixes decls = do
-  let_dec_env <- buildLetDecEnv decls
-  all_locals <- allLocals
-  let binds = [ (name, foldType (DConT sym) (map DVarT all_locals))
-              | name <- Map.keys $ lde_defns let_dec_env
-              , let proName = promoteValNameLhsPrefix prefixes name
-                    sym = promoteTySym proName (length all_locals) ]
-  (decs, let_dec_env') <- letBind binds $ promoteLetDecEnv prefixes let_dec_env
-  emitDecs decs
-  return (binds, let_dec_env' { lde_proms = Map.fromList binds })
-
--- Promotion of data types to kinds is automatic (see "Ginving Haskell a
--- Promotion" paper for more details). Here we "plug into" the promotion
--- mechanism to add some extra stuff to the promotion:
---
---  * if data type derives Eq we generate a type family that implements the
---    equality test for the data type.
---
---  * for each data constructor with arity greater than 0 we generate type level
---    symbols for use with Apply type family. In this way promoted data
---    constructors and promoted functions can be used in a uniform way at the
---    type level in the same way they can be used uniformly at the type level.
---
---  * for each nullary data constructor we generate a type synonym
-promoteDataDec :: DataDecl -> PrM ()
-promoteDataDec (DataDecl _nd name tvbs ctors derivings) = do
-  -- deriving Eq instance
-  kvs <- replicateM (length tvbs) (qNewName "k")
-  kind <- promoteType (foldType (DConT name) (map DVarT kvs))
-  when (elem eqName derivings) $ do
-    eq_decs <- mkEqTypeInstance kind ctors
-    emitDecs eq_decs
-
-  ctorSyms <- buildDefunSymsDataD name tvbs ctors
-  emitDecs ctorSyms
-
-promoteClassDec :: UClassDecl
-                -> PrM AClassDecl
-promoteClassDec decl@(ClassDecl { cd_cxt  = cxt
-                                , cd_name = cls_name
-                                , cd_tvbs = tvbs
-                                , cd_fds  = fundeps
-                                , cd_lde  = lde@LetDecEnv
-                                    { lde_defns = defaults
-                                    , lde_types = meth_sigs
-                                    , lde_infix = infix_decls } }) = do
-  let pClsName = promoteClassName cls_name
-  (ptvbs, proxyCxt) <- mkKProxies (map extractTvbName tvbs)
-  pCxt <- mapM promote_superclass_pred cxt
-  let cxt'  = pCxt ++ proxyCxt
-  sig_decs <- mapM (uncurry promote_sig) (Map.toList meth_sigs)
-     -- the first arg to promoteMethod is a kind subst. We actually don't
-     -- want to subst for default instances, so we pass Map.empty
-  let defaults_list  = Map.toList defaults
-      defaults_names = map fst defaults_list
-  (default_decs, ann_rhss, prom_rhss)
-    <- mapAndUnzip3M (promoteMethod Map.empty meth_sigs) defaults_list
-
-  let infix_decls' = catMaybes $ map (uncurry promoteInfixDecl) infix_decls
-
-  -- no need to do anything to the fundeps. They work as is!
-  emitDecs [DClassD cxt' pClsName ptvbs fundeps
-                    (sig_decs ++ default_decs ++ infix_decls')]
-  let defaults_list' = zip defaults_names ann_rhss
-      proms          = zip defaults_names prom_rhss
-  return (decl { cd_lde = lde { lde_defns = Map.fromList defaults_list'
-                              , lde_proms = Map.fromList proms } })
-  where
-    promote_sig :: Name -> DType -> PrM DDec
-    promote_sig name ty = do
-      let proName = promoteValNameLhs name
-      (argKs, resK) <- promoteUnraveled ty
-      args <- mapM (const $ qNewName "arg") argKs
-      emitDecsM $ defunctionalize proName (map Just argKs) (Just resK)
-
-      return $ DFamilyD TypeFam proName
-                        (zipWith DKindedTV args argKs)
-                        (Just resK)
-
-    promote_superclass_pred :: DPred -> PrM DPred
-    promote_superclass_pred = go
-      where
-      go (DAppPr pr ty) = DAppPr <$> go pr <*> fmap kindParam (promoteType ty)
-      go (DSigPr pr _k) = go pr    -- just ignore the kind; it can't matter
-      go (DVarPr name)  = fail $ "Cannot promote ConstraintKinds variables like "
-                              ++ show name
-      go (DConPr name)  = return $ DConPr (promoteClassName name)
-
--- returns (unpromoted method name, ALetDecRHS) pairs
-promoteInstanceDec :: Map Name DType -> UInstDecl -> PrM AInstDecl
-promoteInstanceDec meth_sigs
-                   decl@(InstDecl { id_name     = cls_name
-                                  , id_arg_tys  = inst_tys
-                                  , id_meths    = meths }) = do
-  cls_tvb_names <- lookup_cls_tvb_names
-  inst_kis <- mapM promoteType inst_tys
-  let subst = Map.fromList $ zip cls_tvb_names inst_kis
-  (meths', ann_rhss, _) <- mapAndUnzip3M (promoteMethod subst meth_sigs) meths
-  emitDecs [DInstanceD [] (foldType (DConT pClsName)
-                                    (map kindParam inst_kis)) meths']
-  return (decl { id_meths = zip (map fst meths) ann_rhss })
-  where
-    pClsName = promoteClassName cls_name
-
-    lookup_cls_tvb_names :: PrM [Name]
-    lookup_cls_tvb_names = do
-      mb_info <- dsReify pClsName
-      case mb_info of
-        Just (DTyConI (DClassD _ _ tvbs _ _) _) -> return (map extract_kv_name tvbs)
-        _ -> do
-          mb_info' <- dsReify cls_name
-          case mb_info' of
-            Just (DTyConI (DClassD _ _ tvbs _ _) _) -> return (map extractTvbName tvbs)
-            _ -> fail $ "Cannot find class declaration annotation for " ++ show cls_name
-
-    extract_kv_name :: DTyVarBndr -> Name
-    extract_kv_name (DKindedTV _ (DConK _kproxy [DVarK kv_name])) = kv_name
-    extract_kv_name tvb = error $ "Internal error: extract_kv_name\n" ++ show tvb
-
--- promoteMethod needs to substitute in a method's kind because GHC does not do
--- enough kind checking of associated types. See GHC#9063. When that bug is fixed,
--- the substitution code can be removed.
--- Bug is fixed, but only in HEAD, naturally. When we stop supporting 7.8,
--- this can be rewritten more cleanly, I imagine.
--- UPDATE: GHC 7.10.2 didn't fully solve GHC#9063. Urgh.
-
-promoteMethod :: Map Name DKind     -- instantiations for class tyvars
-              -> Map Name DType     -- method types
-              -> (Name, ULetDecRHS)
-              -> PrM (DDec, ALetDecRHS, DType)
-                 -- returns (type instance, ALetDecRHS, promoted RHS)
-promoteMethod subst sigs_map (meth_name, meth_rhs) = do
-  ((_, _, _, eqns), _defuns, ann_rhs)
-    <- promoteLetDecRHS sigs_map noPrefix meth_name meth_rhs
-  (arg_kis, res_ki) <- lookup_meth_ty
-  meth_arg_tvs <- mapM (const $ qNewName "a") arg_kis
-  let meth_arg_kis' = map (substKind subst) arg_kis
-      meth_res_ki'  = substKind subst res_ki
-      helperNameBase = case nameBase proName of
-                         first:_ | not (isHsLetter first) -> "TFHelper"
-                         alpha                            -> alpha
-  helperName <- newUniqueName helperNameBase
-  emitDecs [DClosedTypeFamilyD helperName
-                               (zipWith DKindedTV meth_arg_tvs meth_arg_kis')
-                               (Just meth_res_ki') eqns]
-  emitDecsM (defunctionalize helperName (map Just meth_arg_kis') (Just meth_res_ki'))
-  return ( DTySynInstD
-             proName
-             (DTySynEqn (zipWith (DSigT . DVarT) meth_arg_tvs meth_arg_kis')
-                        (foldApply (promoteValRhs helperName) (map DVarT meth_arg_tvs)))
-         , ann_rhs
-         , DConT (promoteTySym helperName 0) )
-  where
-    proName = promoteValNameLhs meth_name
-
-    lookup_meth_ty :: PrM ([DKind], DKind)
-    lookup_meth_ty = case Map.lookup meth_name sigs_map of
-      Nothing -> do
-        mb_info <- dsReify proName
-        case mb_info of
-          Just (DTyConI (DFamilyD _ _ tvbs mb_res_ki) _)
-            -> return ( map (default_to_star . extractTvbKind) tvbs
-                      , default_to_star mb_res_ki )
-          _ -> fail $ "Cannot find type annotation for " ++ show proName
-      Just ty -> promoteUnraveled ty
-
-    default_to_star Nothing  = DStarK
-    default_to_star (Just k) = k
-
-promoteLetDecEnv :: (String, String) -> ULetDecEnv -> PrM ([DDec], ALetDecEnv)
-promoteLetDecEnv prefixes (LetDecEnv { lde_defns = value_env
-                                     , lde_types = type_env
-                                     , lde_infix = infix_decls }) = do
-  let infix_decls'  = catMaybes $ map (uncurry promoteInfixDecl) infix_decls
-
-    -- promote all the declarations, producing annotated declarations
-  let (names, rhss) = unzip $ Map.toList value_env
-  (payloads, defun_decss, ann_rhss)
-    <- fmap unzip3 $ zipWithM (promoteLetDecRHS type_env prefixes) names rhss
-
-  emitDecs $ concat defun_decss
-  let decs = map payload_to_dec payloads ++ infix_decls'
-
-    -- build the ALetDecEnv
-  let let_dec_env' = LetDecEnv { lde_defns = Map.fromList $ zip names ann_rhss
-                               , lde_types = type_env
-                               , lde_infix = infix_decls
-                               , lde_proms = Map.empty }  -- filled in promoteLetDecs
-
-  return (decs, let_dec_env')
-  where
-    payload_to_dec (name, tvbs, m_ki, eqns) = DClosedTypeFamilyD name tvbs m_ki eqns
-
-promoteInfixDecl :: Fixity -> Name -> Maybe DDec
-promoteInfixDecl fixity name
- | isUpcase name = Nothing   -- no need to promote the decl
- | otherwise     = Just $ DLetDec $ DInfixD fixity (promoteValNameLhs name)
-
--- This function is used both to promote class method defaults and normal
--- let bindings. Thus, it can't quite do all the work locally and returns
--- an intermediate structure. Perhaps a better design is available.
-promoteLetDecRHS :: Map Name DType       -- local type env't
-                 -> (String, String)     -- let-binding prefixes
-                 -> Name                 -- name of the thing being promoted
-                 -> ULetDecRHS           -- body of the thing
-                 -> PrM ( (Name, [DTyVarBndr], Maybe DKind, [DTySynEqn]) -- "type family"
-                        , [DDec]        -- defunctionalization
-                        , ALetDecRHS )  -- annotated RHS
-promoteLetDecRHS type_env prefixes name (UValue exp) = do
-  (res_kind, num_arrows)
-    <- case Map.lookup name type_env of
-         Nothing -> return (Nothing, 0)
-         Just ty -> do
-           ki <- promoteType ty
-           return (Just ki, countArgs ty)
-  case num_arrows of
-    0 -> do
-      all_locals <- allLocals
-      (exp', ann_exp) <- promoteExp exp
-      let proName = promoteValNameLhsPrefix prefixes name
-      defuns <- defunctionalize proName (map (const Nothing) all_locals) res_kind
-      return ( ( proName, map DPlainTV all_locals, res_kind
-               , [DTySynEqn (map DVarT all_locals) exp'] )
-             , defuns
-             , AValue (foldType (DConT proName) (map DVarT all_locals))
-                      num_arrows ann_exp )
-    _ -> do
-      names <- replicateM num_arrows (newUniqueName "a")
-      let pats    = map DVarPa names
-          newArgs = map DVarE  names
-      promoteLetDecRHS type_env prefixes name
-                       (UFunction [DClause pats (foldExp exp newArgs)])
-
-promoteLetDecRHS type_env prefixes name (UFunction clauses) = do
-  numArgs <- count_args clauses
-  (m_argKs, m_resK, ty_num_args) <- case Map.lookup name type_env of
-    Nothing -> return (replicate numArgs Nothing, Nothing, numArgs)
-    Just ty -> do
-      -- promoteType turns arrows into TyFun. So, we unravel first to
-      -- avoid this behavior. Note the use of ravelTyFun in resultK
-      -- to make the return kind work out
-      (argKs, resultK) <- promoteUnraveled ty
-      -- invariant: countArgs ty == length argKs
-      return (map Just argKs, Just resultK, length argKs)
-
-  let proName = promoteValNameLhsPrefix prefixes name
-  all_locals <- allLocals
-  defun_decs <- defunctionalize proName
-                (map (const Nothing) all_locals ++ m_argKs) m_resK
-  let local_tvbs = map DPlainTV all_locals
-  tyvarNames <- mapM (const $ qNewName "a") m_argKs
-  expClauses <- mapM (etaExpand (ty_num_args - numArgs)) clauses
-  (eqns, ann_clauses) <- mapAndUnzipM promoteClause expClauses
-  prom_fun <- lookupVarE name
-  let args     = zipWith inferMaybeKindTV tyvarNames m_argKs
-      all_args = local_tvbs ++ args
-  return ( (proName, all_args, m_resK, eqns)
-         , defun_decs
-         , AFunction prom_fun ty_num_args ann_clauses )
-
-  where
-    etaExpand :: Int -> DClause -> PrM DClause
-    etaExpand n (DClause pats exp) = do
-      names <- replicateM n (newUniqueName "a")
-      let newPats = map DVarPa names
-          newArgs = map DVarE  names
-      return $ DClause (pats ++ newPats) (foldExp exp newArgs)
-
-    count_args (DClause pats _ : _) = return $ length pats
-    count_args _ = fail $ "Impossible! A function without clauses."
-
-promoteClause :: DClause -> PrM (DTySynEqn, ADClause)
-promoteClause (DClause pats exp) = do
-  -- promoting the patterns creates variable bindings. These are passed
-  -- to the function promoted the RHS
-  ((types, pats'), new_vars) <- evalForPair $ mapAndUnzipM promotePat pats
-  (ty, ann_exp) <- lambdaBind new_vars $ promoteExp exp
-  all_locals <- allLocals   -- these are bound *outside* of this clause
-  return ( DTySynEqn (map DVarT all_locals ++ types) ty
-         , ADClause new_vars pats' ann_exp )
-
-promoteMatch :: DType -> DMatch -> PrM (DTySynEqn, ADMatch)
-promoteMatch prom_case (DMatch pat exp) = do
-  -- promoting the patterns creates variable bindings. These are passed
-  -- to the function promoted the RHS
-  ((ty, pat'), new_vars) <- evalForPair $ promotePat pat
-  (rhs, ann_exp) <- lambdaBind new_vars $ promoteExp exp
-  all_locals <- allLocals
-  return $ ( DTySynEqn (map DVarT all_locals ++ [ty]) rhs
-           , ADMatch new_vars prom_case pat' ann_exp)
-
--- promotes a term pattern into a type pattern, accumulating bound variable names
--- See Note [No wildcards in singletons]
-promotePat :: DPat -> QWithAux VarPromotions PrM (DType, DPat)
-promotePat (DLitPa lit) = do
-  lit' <- promoteLitPat lit
-  return (lit', DLitPa lit)
-promotePat (DVarPa name) = do
-      -- term vars can be symbols... type vars can't!
-  tyName <- mkTyName name
-  addElement (name, tyName)
-  return (DVarT tyName, DVarPa name)
-promotePat (DConPa name pats) = do
-  (types, pats') <- mapAndUnzipM promotePat pats
-  let name' = unboxed_tuple_to_tuple name
-  return (foldType (DConT name') types, DConPa name pats')
-  where
-    unboxed_tuple_to_tuple n
-      | Just deg <- unboxedTupleNameDegree_maybe n = tupleDataName deg
-      | otherwise                                  = n
-promotePat (DTildePa pat) = do
-  qReportWarning "Lazy pattern converted into regular pattern in promotion"
-  (ty, pat') <- promotePat pat
-  return (ty, DTildePa pat')
-promotePat (DBangPa pat) = do
-  qReportWarning "Strict pattern converted into regular pattern in promotion"
-  (ty, pat') <- promotePat pat
-  return (ty, DBangPa pat')
-promotePat DWildPa = do
-  name <- newUniqueName "_z"
-  tyName <- mkTyName name
-  addElement (name, tyName)
-  return (DVarT tyName, DVarPa name)
-
-promoteExp :: DExp -> PrM (DType, ADExp)
-promoteExp (DVarE name) = fmap (, ADVarE name) $ lookupVarE name
-promoteExp (DConE name) = return $ (promoteValRhs name, ADConE name)
-promoteExp (DLitE lit)  = fmap (, ADLitE lit) $ promoteLitExp lit
-promoteExp (DAppE exp1 exp2) = do
-  (exp1', ann_exp1) <- promoteExp exp1
-  (exp2', ann_exp2) <- promoteExp exp2
-  return (apply exp1' exp2', ADAppE ann_exp1 ann_exp2)
-promoteExp (DLamE names exp) = do
-  lambdaName <- newUniqueName "Lambda"
-  tyNames <- mapM mkTyName names
-  let var_proms = zip names tyNames
-  (rhs, ann_exp) <- lambdaBind var_proms $ promoteExp exp
-  tyFamLamTypes <- mapM (const $ qNewName "t") names
-  all_locals <- allLocals
-  let all_args = all_locals ++ tyFamLamTypes
-      tvbs     = map DPlainTV all_args
-  emitDecs [DClosedTypeFamilyD lambdaName
-                               tvbs
-                               Nothing
-                               [DTySynEqn (map DVarT (all_locals ++ tyNames))
-                                          rhs]]
-  emitDecsM $ defunctionalize lambdaName (map (const Nothing) all_args) Nothing
-  let promLambda = foldl apply (DConT (promoteTySym lambdaName 0))
-                               (map DVarT all_locals)
-  return (promLambda, ADLamE var_proms promLambda names ann_exp)
-promoteExp (DCaseE exp matches) = do
-  caseTFName <- newUniqueName "Case"
-  all_locals <- allLocals
-  let prom_case = foldType (DConT caseTFName) (map DVarT all_locals)
-  (exp', ann_exp)     <- promoteExp exp
-  (eqns, ann_matches) <- mapAndUnzipM (promoteMatch prom_case) matches
-  tyvarName  <- qNewName "t"
-  let all_args = all_locals ++ [tyvarName]
-      tvbs     = map DPlainTV all_args
-  emitDecs [DClosedTypeFamilyD caseTFName tvbs Nothing eqns]
-    -- See Note [Annotate case return type] in Single
-  let applied_case = prom_case `DAppT` exp'
-  return ( applied_case
-         , ADCaseE ann_exp exp' ann_matches applied_case )
-promoteExp (DLetE decs exp) = do
-  unique <- qNewUnique
-  let letPrefixes = uniquePrefixes "Let" ":<<<" unique
-  (binds, ann_env) <- promoteLetDecs letPrefixes decs
-  (exp', ann_exp) <- letBind binds $ promoteExp exp
-  return (exp', ADLetE ann_env ann_exp)
-promoteExp (DSigE exp ty) = do
-  (exp', ann_exp) <- promoteExp exp
-  ty' <- promoteType ty
-  return (DSigT exp' ty', ADSigE ann_exp ty)
-promoteExp e@(DStaticE _) = fail ("Static expressions cannot be promoted: " ++ show e)
-
-promoteLitExp :: Monad m => Lit -> m DType
-promoteLitExp (IntegerL n)
-  | n >= 0    = return $ (DConT tyFromIntegerName `DAppT` DLitT (NumTyLit n))
-  | otherwise = return $ (DConT tyNegateName `DAppT`
-                          (DConT tyFromIntegerName `DAppT` DLitT (NumTyLit (-n))))
-promoteLitExp (StringL str) = return $ DLitT (StrTyLit str)
-promoteLitExp lit =
-  fail ("Only string and natural number literals can be promoted: " ++ show lit)
-
-promoteLitPat :: Monad m => Lit -> m DType
-promoteLitPat (IntegerL n)
-  | n >= 0    = return $ (DLitT (NumTyLit n))
-  | otherwise =
-    fail $ "Negative literal patterns are not allowed,\n" ++
-           "because literal patterns are promoted to natural numbers."
-promoteLitPat (StringL str) = return $ DLitT (StrTyLit str)
-promoteLitPat lit =
-  fail ("Only string and natural number literals can be promoted: " ++ show lit)
diff --git a/src/Data/Singletons/Promote/Defun.hs b/src/Data/Singletons/Promote/Defun.hs
deleted file mode 100644
index 154a90c..0000000
--- a/src/Data/Singletons/Promote/Defun.hs
+++ /dev/null
@@ -1,196 +0,0 @@
-{- Data/Singletons/Promote/Defun.hs
-
-(c) Richard Eisenberg, Jan Stolarek 2014
-eir@cis.upenn.edu
-
-This file creates defunctionalization symbols for types during promotion.
--}
-
-{-# LANGUAGE TemplateHaskell #-}
-
-module Data.Singletons.Promote.Defun where
-
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Promote.Monad
-import Data.Singletons.Promote.Type
-import Data.Singletons.Names
-import Language.Haskell.TH.Syntax
-import Data.Singletons.Util
-import Control.Monad
-
-defunInfo :: DInfo -> PrM [DDec]
-defunInfo (DTyConI dec _instances) = buildDefunSyms dec
-defunInfo (DPrimTyConI _name _numArgs _unlifted) =
-  fail $ "Building defunctionalization symbols of primitive " ++
-         "type constructors not supported"
-defunInfo (DVarI _name _ty _mdec _fixity) =
-  fail "Building defunctionalization symbols of values not supported"
-defunInfo (DTyVarI _name _ty) =
-  fail "Building defunctionalization symbols of type variables not supported"
-
-buildDefunSyms :: DDec -> PrM [DDec]
-buildDefunSyms (DDataD _new_or_data _cxt tyName tvbs ctors _derivings) =
-  buildDefunSymsDataD tyName tvbs ctors
-buildDefunSyms (DClosedTypeFamilyD name tvbs returnK_maybe _) = do
-  let arg_m_kinds = map extractTvbKind tvbs
-  defunctionalize name arg_m_kinds returnK_maybe
-buildDefunSyms (DFamilyD TypeFam name tvbs returnK_maybe) = do
-  let arg_kinds = map (default_to_star . extractTvbKind) tvbs
-      res_kind  = default_to_star returnK_maybe
-      default_to_star Nothing  = Just DStarK
-      default_to_star (Just k) = Just k
-  defunctionalize name arg_kinds res_kind
-buildDefunSyms (DTySynD name tvbs _type) = do
-  let arg_m_kinds = map extractTvbKind tvbs
-  defunctionalize name arg_m_kinds Nothing
-buildDefunSyms _ = fail $ "Defunctionalization symbols can only be built for " ++
-                          "type families and data declarations"
-
-buildDefunSymsDataD :: Name -> [DTyVarBndr] -> [DCon] -> PrM [DDec]
-buildDefunSymsDataD tyName tvbs ctors = do
-  let res_ty = foldType (DConT tyName) (map tvbToType tvbs)
-  res_ki <- promoteType res_ty
-  concatMapM (promoteCtor res_ki) ctors
-  where
-    promoteCtor :: DKind -> DCon -> PrM [DDec]
-    promoteCtor promotedKind ctor = do
-      let (name, arg_tys) = extractNameTypes ctor
-      arg_kis <- mapM promoteType arg_tys
-      defunctionalize name (map Just arg_kis) (Just promotedKind)
-
--- Generate data declarations and apply instances
--- required for defunctionalization.
--- For a type family:
---
--- type family Foo (m :: Nat) (n :: Nat) (l :: Nat) :: Nat
---
--- we generate data declarations that allow us to talk about partial
--- application at the type level:
---
--- type FooSym3 a b c = Foo a b c
--- data FooSym2 a b f where
---   FooSym2KindInference :: KindOf (Apply (FooSym2 a b) arg)
---                          ~ KindOf (FooSym3 a b arg)
---                        => FooSym2 a b f
--- type instance Apply (FooSym2 a b) c = FooSym3 a b c
--- data FooSym1 a f where
---   FooSym1KindInference :: KindOf (Apply (FooSym1 a) arg)
---                           ~ KindOf (FooSym2 a arg)
---                        => FooSym1 a f
--- type instance Apply (FooSym1 a) b = FooSym2 a b
--- data FooSym0 f where
---  FooSym0KindInference :: KindOf (Apply FooSym0 arg)
---                          ~ KindOf (FooSym1 arg)
---                       => FooSym0 f
--- type instance Apply FooSym0 a = FooSym1 a
---
--- What's up with all the "KindInference" stuff? In some scenarios, we don't
--- know the kinds that we should be using in these symbols. But, GHC can figure
--- it out using the types of the "KindInference" dummy data constructors. A
--- bit of a hack, but it works quite nicely. The only problem is that GHC will
--- warn about an unused data constructor. So, we use the data constructor in
--- an instance of a dummy class. (See Data.Singletons.Hidden for the class, which
--- should never be seen by anyone, ever.)
---
--- The defunctionalize function takes Maybe DKinds so that the caller can
--- indicate which kinds are known and which need to be inferred.
-defunctionalize :: Name -> [Maybe DKind] -> Maybe DKind -> PrM [DDec]
-defunctionalize name m_arg_kinds' m_res_kind' = do
-  let (m_arg_kinds, m_res_kind) = eta_expand m_arg_kinds' m_res_kind'
-      num_args = length m_arg_kinds
-      sat_name = promoteTySym name num_args
-  tvbNames <- replicateM num_args $ qNewName "t"
-  let sat_dec = DTySynD sat_name (zipWith mk_tvb tvbNames m_arg_kinds)
-                        (foldType (DConT name) (map DVarT tvbNames))
-  other_decs <- go (num_args - 1) (reverse m_arg_kinds) m_res_kind
-  return $ sat_dec : other_decs
-  where
-    mk_tvb :: Name -> Maybe DKind -> DTyVarBndr
-    mk_tvb tvb_name Nothing  = DPlainTV tvb_name
-    mk_tvb tvb_name (Just k) = DKindedTV tvb_name k
-
-    eta_expand :: [Maybe DKind] -> Maybe DKind -> ([Maybe DKind], Maybe DKind)
-    eta_expand m_arg_kinds Nothing = (m_arg_kinds, Nothing)
-    eta_expand m_arg_kinds (Just res_kind) =
-        let ks                 = unravelK res_kind
-            (argKs, [resultK]) =  splitAt (length ks - 1) ks
-        in (m_arg_kinds ++ (map Just argKs), Just resultK)
-
-    unravelK :: DKind -> [DKind]
-    unravelK (DForallK _name k) = unravelK k
-    unravelK (DArrowK (DConK _ ks) DStarK) =
-        concatMap unravelK ks
-    unravelK (DArrowK k1 k2) = k1 : unravelK k2
-    unravelK t = [t]
-
-    go :: Int -> [Maybe DKind] -> Maybe DKind -> PrM [DDec]
-    go _ [] _ = return []
-    go n (m_arg : m_args) m_result = do
-      decls <- go (n - 1) m_args (addStar_maybe (buildTyFun_maybe m_arg m_result))
-      fst_name : rest_names <- replicateM (n + 1) (qNewName "l")
-      extra_name <- qNewName "arg"
-      let data_name   = promoteTySym name n
-          next_name   = promoteTySym name (n+1)
-          con_name    = suffixName "KindInference" "###" data_name
-          m_tyfun     = buildTyFun_maybe m_arg m_result
-          arg_params  = zipWith mk_tvb rest_names (reverse m_args)
-          tyfun_param = mk_tvb fst_name m_tyfun
-          arg_names   = map extractTvbName arg_params
-          params      = arg_params ++ [tyfun_param]
-          con_eq_ct   = mkEqPred
-                          (DConT kindOfName `DAppT`
-                            (foldType (DConT data_name) (map DVarT arg_names)
-                             `apply`
-                             (DVarT extra_name)))
-                          (DConT kindOfName `DAppT`
-                           foldType (DConT next_name) (map DVarT (arg_names ++ [extra_name])))
-          con_decl    = DCon [DPlainTV extra_name]
-                             [con_eq_ct]
-                             con_name
-                             (DNormalC [])
-          data_decl   = DDataD Data [] data_name params [con_decl] []
-          app_eqn     = DTySynEqn [ foldType (DConT data_name)
-                                             (map DVarT rest_names)
-                                  , DVarT fst_name ]
-                                  (foldType (DConT (promoteTySym name (n+1)))
-                                            (map DVarT (rest_names ++ [fst_name])))
-          app_decl    = DTySynInstD applyName app_eqn
-          suppress    = DInstanceD [] (DConT suppressClassName `DAppT` DConT data_name)
-                          [DLetDec $ DFunD suppressMethodName
-                                           [DClause [DWildPa]
-                                                    ((DVarE 'snd) `DAppE`
-                                                     mkTupleDExp [DConE con_name,
-                                                                  mkTupleDExp []])]]
-      return $ suppress : data_decl : app_decl : decls
-
-buildTyFun :: DKind -> DKind -> DKind
-buildTyFun k1 k2 = DConK tyFunName [k1, k2]
-
-buildTyFun_maybe :: Maybe DKind -> Maybe DKind -> Maybe DKind
-buildTyFun_maybe m_k1 m_k2 = do
-  k1 <- m_k1
-  k2 <- m_k2
-  return $ DConK tyFunName [k1, k2]
-
--- Counts the arity of type level function represented with TyFun constructors
-tyFunArity :: DKind -> Int
-tyFunArity (DArrowK (DConK tyFunNm [_, b]) DStarK)
-  | tyFunName == tyFunNm
-  = 1 + tyFunArity b
-tyFunArity _ = 0
-
--- Checks if type is (TyFun a b -> *)
-isTyFun :: DKind -> Bool
-isTyFun (DArrowK (DConK tyFunNm [_,_]) DStarK)
-  | tyFunName == tyFunNm
-  = True
-isTyFun _ = False
-
--- Build TyFun kind from the list of kinds
-ravelTyFun :: [DKind] -> DKind
-ravelTyFun []    = error "Internal error: TyFun raveling nil"
-ravelTyFun [k]   = k
-ravelTyFun kinds = go tailK (buildTyFun k2 k1)
-    where (k1 : k2 : tailK) = reverse kinds
-          go []     acc = addStar acc
-          go (k:ks) acc = go ks (buildTyFun k (addStar acc))
diff --git a/src/Data/Singletons/Promote/Eq.hs b/src/Data/Singletons/Promote/Eq.hs
deleted file mode 100644
index fd011d4..0000000
--- a/src/Data/Singletons/Promote/Eq.hs
+++ /dev/null
@@ -1,65 +0,0 @@
-{- Data/Singletons/Promote/Eq.hs
-
-(c) Richard Eisenberg 2014
-eir@cis.upenn.edu
-
-This module defines the functions that generate type-level equality type
-family instances.
--}
-
-module Data.Singletons.Promote.Eq where
-
-import Language.Haskell.TH.Syntax
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Names
-import Data.Singletons.Util
-import Control.Monad
-
--- produce a closed type family helper and the instance
--- for (:==) over the given list of ctors
-mkEqTypeInstance :: Quasi q => DKind -> [DCon] -> q [DDec]
-mkEqTypeInstance kind cons = do
-  helperName <- newUniqueName "Equals"
-  aName <- qNewName "a"
-  bName <- qNewName "b"
-  true_branches <- mapM mk_branch cons
-  false_branch  <- false_case
-  let closedFam = DClosedTypeFamilyD helperName
-                                     [ DKindedTV aName kind
-                                     , DKindedTV bName kind ]
-                                     (Just boolKi)
-                                     (true_branches ++ [false_branch])
-      eqInst = DTySynInstD tyEqName (DTySynEqn [ DSigT (DVarT aName) kind
-                                               , DSigT (DVarT bName) kind ]
-                                             (foldType (DConT helperName)
-                                                       [DVarT aName, DVarT bName]))
-      inst = DInstanceD [] ((DConT $ promoteClassName eqName) `DAppT`
-                            kindParam kind) [eqInst]
-
-  return [closedFam, inst]
-
-  where mk_branch :: Quasi q => DCon -> q DTySynEqn
-        mk_branch con = do
-          let (name, numArgs) = extractNameArgs con
-          lnames <- replicateM numArgs (qNewName "a")
-          rnames <- replicateM numArgs (qNewName "b")
-          let lvars = map DVarT lnames
-              rvars = map DVarT rnames
-              ltype = foldType (DConT name) lvars
-              rtype = foldType (DConT name) rvars
-              results = zipWith (\l r -> foldType (DConT tyEqName) [l, r]) lvars rvars
-              result = tyAll results
-          return $ DTySynEqn [ltype, rtype] result
-
-        false_case :: Quasi q => q DTySynEqn
-        false_case = do
-          lvar <- qNewName "a"
-          rvar <- qNewName "b"
-          return $ DTySynEqn [DSigT (DVarT lvar) kind, DSigT (DVarT rvar) kind]
-                             (promoteValRhs falseName)
-
-        tyAll :: [DType] -> DType -- "all" at the type level
-        tyAll [] = (promoteValRhs trueName)
-        tyAll [one] = one
-        tyAll (h:t) = foldType (DConT $ promoteValNameLhs andName) [h, (tyAll t)]
-           -- I could use the Apply nonsense here, but there's no reason to
diff --git a/src/Data/Singletons/Promote/Monad.hs b/src/Data/Singletons/Promote/Monad.hs
deleted file mode 100644
index 0579471..0000000
--- a/src/Data/Singletons/Promote/Monad.hs
+++ /dev/null
@@ -1,111 +0,0 @@
-{- Data/Singletons/Promote/Monad.hs
-
-(c) Richard Eisenberg 2014
-eir@cis.upenn.edu
-
-This file defines the PrM monad and its operations, for use during promotion.
-
-The PrM monad allows reading from a PrEnv environment and writing to a list
-of DDec, and is wrapped around a Q.
--}
-
-{-# LANGUAGE GeneralizedNewtypeDeriving, StandaloneDeriving,
-             FlexibleContexts, TypeFamilies, KindSignatures, CPP #-}
-
-module Data.Singletons.Promote.Monad (
-  PrM, promoteM, promoteM_, promoteMDecs, VarPromotions,
-  allLocals, emitDecs, emitDecsM,
-  lambdaBind, LetBind, letBind, lookupVarE
-  ) where
-
-import Control.Monad.Reader
-import Control.Monad.Writer
-import qualified Data.Map.Strict as Map
-import Data.Map.Strict ( Map )
-import Language.Haskell.TH.Syntax hiding ( lift )
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Names
-import Data.Singletons.Syntax
-
-type LetExpansions = Map Name DType  -- from **term-level** name
-
--- environment during promotion
-data PrEnv =
-  PrEnv { pr_lambda_bound :: Map Name Name
-        , pr_let_bound    :: LetExpansions
-        , pr_local_decls  :: [Dec]
-        }
-
-emptyPrEnv :: PrEnv
-emptyPrEnv = PrEnv { pr_lambda_bound = Map.empty
-                   , pr_let_bound    = Map.empty
-                   , pr_local_decls  = [] }
-
--- the promotion monad
-newtype PrM a = PrM (ReaderT PrEnv (WriterT [DDec] Q) a)
-  deriving ( Functor, Applicative, Monad, Quasi
-           , MonadReader PrEnv, MonadWriter [DDec] )
-
-instance DsMonad PrM where
-  localDeclarations = asks pr_local_decls
-
--- return *type-level* names
-allLocals :: MonadReader PrEnv m => m [Name]
-allLocals = do
-  lambdas <- asks (Map.toList . pr_lambda_bound)
-  lets    <- asks pr_let_bound
-    -- filter out shadowed variables!
-  return [ typeName
-         | (termName, typeName) <- lambdas
-         , case Map.lookup termName lets of
-             Just (DVarT typeName') | typeName' == typeName -> True
-             _                                              -> False ]
-
-emitDecs :: MonadWriter [DDec] m => [DDec] -> m ()
-emitDecs = tell
-
-emitDecsM :: MonadWriter [DDec] m => m [DDec] -> m ()
-emitDecsM action = do
-  decs <- action
-  emitDecs decs
-
--- when lambda-binding variables, we still need to add the variables
--- to the let-expansion, because of shadowing. ugh.
-lambdaBind :: VarPromotions -> PrM a -> PrM a
-lambdaBind binds = local add_binds
-  where add_binds env@(PrEnv { pr_lambda_bound = lambdas
-                             , pr_let_bound    = lets }) =
-          let new_lets = Map.fromList [ (tmN, DVarT tyN) | (tmN, tyN) <- binds ] in
-          env { pr_lambda_bound = Map.union (Map.fromList binds) lambdas
-              , pr_let_bound    = Map.union new_lets lets }
-
-type LetBind = (Name, DType)
-letBind :: [LetBind] -> PrM a -> PrM a
-letBind binds = local add_binds
-  where add_binds env@(PrEnv { pr_let_bound = lets }) =
-          env { pr_let_bound = Map.union (Map.fromList binds) lets }
-
-lookupVarE :: Name -> PrM DType
-lookupVarE n = do
-  lets <- asks pr_let_bound
-  case Map.lookup n lets of
-    Just ty -> return ty
-    Nothing -> return $ promoteValRhs n
-
-promoteM :: DsMonad q => [Dec] -> PrM a -> q (a, [DDec])
-promoteM locals (PrM rdr) = do
-  other_locals <- localDeclarations
-  let wr = runReaderT rdr (emptyPrEnv { pr_local_decls = other_locals ++ locals })
-      q  = runWriterT wr
-  runQ q
-
-promoteM_ :: DsMonad q => [Dec] -> PrM () -> q [DDec]
-promoteM_ locals thing = do
-  ((), decs) <- promoteM locals thing
-  return decs
-
--- promoteM specialized to [DDec]
-promoteMDecs :: DsMonad q => [Dec] -> PrM [DDec] -> q [DDec]
-promoteMDecs locals thing = do
-  (decs1, decs2) <- promoteM locals thing
-  return $ decs1 ++ decs2
diff --git a/src/Data/Singletons/Promote/Type.hs b/src/Data/Singletons/Promote/Type.hs
deleted file mode 100644
index 8b94ebb..0000000
--- a/src/Data/Singletons/Promote/Type.hs
+++ /dev/null
@@ -1,58 +0,0 @@
-{- Data/Singletons/Type.hs
-
-(c) Richard Eisenberg 2013
-eir@cis.upenn.edu
-
-This file implements promotion of types into kinds.
--}
-
-module Data.Singletons.Promote.Type ( promoteType, promoteUnraveled ) where
-
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Names
-import Data.Singletons.Util
-import Language.Haskell.TH
-
--- the only monadic thing we do here is fail. This allows the function
--- to be used from the Singletons module
-promoteType :: Monad m => DType -> m DKind
-promoteType = go []
-  where
-    go :: Monad m => [DKind] -> DType -> m DKind
-    -- We don't need to worry about constraints: they are used to express
-    -- static guarantees at runtime. But, because we don't need to do
-    -- anything special to keep static guarantees at compile time, we don't
-    -- need to promote them.
-    go []       (DForallT _tvbs _cxt ty) = go [] ty
-    go []       (DAppT (DAppT DArrowT (DForallT (_:_) _ _)) _) =
-      fail "Cannot promote types of rank above 1."
-    go args     (DAppT t1 t2) = do
-      k2 <- go [] t2
-      go (k2 : args) t1
-    go args     (DSigT ty _) = go args ty  -- just ignore signatures
-    go []       (DVarT name) = return $ DVarK name
-    go _        (DVarT name) = fail $ "Cannot promote an applied type variable " ++
-                                      show name ++ "."
-    go []       (DConT name)
-      | name == typeRepName               = return DStarK
-      | name == stringName                = return $ DConK symbolName []
-      | nameBase name == nameBase repName = return DStarK
-    go args     (DConT name)
-      | Just n <- unboxedTupleNameDegree_maybe name
-      = return $ DConK (tupleTypeName n) args
-      | otherwise
-      = return $ DConK name args
-    go [k1, k2] DArrowT = return $ addStar (DConK tyFunName [k1, k2])
-    go _ (DLitT _) = fail "Cannot promote a type-level literal"
-
-    go args     hd = fail $ "Illegal Haskell construct encountered:\n" ++
-                            "headed by: " ++ show hd ++ "\n" ++
-                            "applied to: " ++ show args
-
-promoteUnraveled :: Monad m => DType -> m ([DKind], DKind)
-promoteUnraveled ty = do
-  arg_kis <- mapM promoteType arg_tys
-  res_ki  <- promoteType res_ty
-  return (arg_kis, res_ki)
-  where
-    (_, _, arg_tys, res_ty) = unravel ty
diff --git a/src/Data/Singletons/Single.hs b/src/Data/Singletons/Single.hs
deleted file mode 100644
index 27efba4..0000000
--- a/src/Data/Singletons/Single.hs
+++ /dev/null
@@ -1,594 +0,0 @@
-{- Data/Singletons/Single.hs
-
-(c) Richard Eisenberg 2013
-eir@cis.upenn.edu
-
-This file contains functions to refine constructs to work with singleton
-types. It is an internal module to the singletons package.
--}
-{-# LANGUAGE TemplateHaskell, TupleSections, ParallelListComp, CPP #-}
-
-module Data.Singletons.Single where
-
-import Prelude hiding ( exp )
-import Language.Haskell.TH hiding ( cxt )
-import Language.Haskell.TH.Syntax (Quasi(..))
-import Data.Singletons.Deriving.Ord
-import Data.Singletons.Deriving.Bounded
-import Data.Singletons.Deriving.Enum
-import Data.Singletons.Util
-import Data.Singletons.Promote
-import Data.Singletons.Promote.Monad ( promoteM )
-import Data.Singletons.Promote.Type
-import Data.Singletons.Names
-import Data.Singletons.Single.Monad
-import Data.Singletons.Single.Type
-import Data.Singletons.Single.Data
-import Data.Singletons.Single.Eq
-import Data.Singletons.Syntax
-import Data.Singletons.Partition
-import Language.Haskell.TH.Desugar
-import qualified Data.Map.Strict as Map
-import Data.Map.Strict ( Map )
-import Data.Maybe
-import Control.Monad
-import Data.List
-
-{-
-How singletons works
-~~~~~~~~~~~~~~~~~~~~
-
-Singling, on the surface, doesn't seem all that complicated. Promote the type,
-and singletonize all the terms. That's essentially what was done singletons < 1.0.
-But, now we want to deal with higher-order singletons. So, things are a little
-more complicated.
-
-The way to understand all of this is that *every* variable maps to something
-of type (Sing t), for an appropriately-kinded t. This includes functions, which
-use the "SLambda" instance of Sing. To apply singleton functions, we use the
-applySing function.
-
-That, in and of itself, wouldn't be too hard, but it's really annoying from
-the user standpoint. After dutifully singling `map`, a user doesn't want to
-have to use two `applySing`s to actually use it. So, any let-bound identifier
-is eta-expanded so that the singled type has the same number of arrows as
-the original type. (If there is no original type signature, then it has as
-many arrows as the original had patterns.) Then, we store a use of one of the
-singFunX functions in the SgM environment so that every use of a let-bound
-identifier has a proper type (Sing t).
-
-It would be consistent to avoid this eta-expansion for local lets (as opposed
-to top-level lets), but that seemed like more bother than it was worth. It
-may also be possible to be cleverer about nested eta-expansions and contractions,
-but that also seemed not to be worth it. Though I haven't tested it, my hope
-is that the eta-expansions and contractions have no runtime effect, especially
-because SLambda is a *newtype* instance, not a *data* instance.
-
-Note that to maintain the desired invariant, we must also be careful to eta-
-contract constructors. This is the point of buildDataLets.
--}
-
--- | Generate singleton definitions from a type that is already defined.
--- For example, the singletons package itself uses
---
--- > $(genSingletons [''Bool, ''Maybe, ''Either, ''[]])
---
--- to generate singletons for Prelude types.
-genSingletons :: DsMonad q => [Name] -> q [Dec]
-genSingletons names = do
-  checkForRep names
-  ddecs <- concatMapM (singInfo <=< dsInfo <=< reifyWithWarning) names
-  return $ decsToTH ddecs
-
--- | Make promoted and singleton versions of all declarations given, retaining
--- the original declarations.
--- See <http://www.cis.upenn.edu/~eir/packages/singletons/README.html> for
--- further explanation.
-singletons :: DsMonad q => q [Dec] -> q [Dec]
-singletons qdecs = do
-  decs <- qdecs
-  singDecs <- wrapDesugar singTopLevelDecs decs
-  return (decs ++ singDecs)
-
--- | Make promoted and singleton versions of all declarations given, discarding
--- the original declarations. Note that a singleton based on a datatype needs
--- the original datatype, so this will fail if it sees any datatype declarations.
--- Classes, instances, and functions are all fine.
-singletonsOnly :: DsMonad q => q [Dec] -> q [Dec]
-singletonsOnly = (>>= wrapDesugar singTopLevelDecs)
-
--- | Create instances of 'SEq' and type-level '(:==)' for each type in the list
-singEqInstances :: DsMonad q => [Name] -> q [Dec]
-singEqInstances = concatMapM singEqInstance
-
--- | Create instance of 'SEq' and type-level '(:==)' for the given type
-singEqInstance :: DsMonad q => Name -> q [Dec]
-singEqInstance name = do
-  promotion <- promoteEqInstance name
-  dec <- singEqualityInstance sEqClassDesc name
-  return $ dec ++ promotion
-
--- | Create instances of 'SEq' (only -- no instance for '(:==)', which 'SEq' generally
--- relies on) for each type in the list
-singEqInstancesOnly :: DsMonad q => [Name] -> q [Dec]
-singEqInstancesOnly = concatMapM singEqInstanceOnly
-
--- | Create instances of 'SEq' (only -- no instance for '(:==)', which 'SEq' generally
--- relies on) for the given type
-singEqInstanceOnly :: DsMonad q => Name -> q [Dec]
-singEqInstanceOnly name = singEqualityInstance sEqClassDesc name
-
--- | Create instances of 'SDecide' for each type in the list.
-singDecideInstances :: DsMonad q => [Name] -> q [Dec]
-singDecideInstances = concatMapM singDecideInstance
-
--- | Create instance of 'SDecide' for the given type.
-singDecideInstance :: DsMonad q => Name -> q [Dec]
-singDecideInstance name = singEqualityInstance sDecideClassDesc name
-
--- generalized function for creating equality instances
-singEqualityInstance :: DsMonad q => EqualityClassDesc q -> Name -> q [Dec]
-singEqualityInstance desc@(_, className, _) name = do
-  (tvbs, cons) <- getDataD ("I cannot make an instance of " ++
-                            show className ++ " for it.") name
-  dtvbs <- mapM dsTvb tvbs
-  dcons <- mapM dsCon cons
-  let tyvars = map (DVarK . extractTvbName) dtvbs
-      kind = DConK name tyvars
-  aName <- qNewName "a"
-  let aVar = DVarT aName
-  (scons, _) <- singM [] $ mapM (singCtor aVar) dcons
-  eqInstance <- mkEqualityInstance kind scons desc
-  return $ decToTH eqInstance
-
--- | Create instances of 'SOrd' for the given types
-singOrdInstances :: DsMonad q => [Name] -> q [Dec]
-singOrdInstances = concatMapM singOrdInstance
-
--- | Create instance of 'SOrd' for the given type
-singOrdInstance :: DsMonad q => Name -> q [Dec]
-singOrdInstance = singInstance mkOrdInstance "Ord"
-
--- | Create instances of 'SBounded' for the given types
-singBoundedInstances :: DsMonad q => [Name] -> q [Dec]
-singBoundedInstances = concatMapM singBoundedInstance
-
--- | Create instance of 'SBounded' for the given type
-singBoundedInstance :: DsMonad q => Name -> q [Dec]
-singBoundedInstance = singInstance mkBoundedInstance "Bounded"
-
--- | Create instances of 'SEnum' for the given types
-singEnumInstances :: DsMonad q => [Name] -> q [Dec]
-singEnumInstances = concatMapM singEnumInstance
-
--- | Create instance of 'SEnum' for the given type
-singEnumInstance :: DsMonad q => Name -> q [Dec]
-singEnumInstance = singInstance mkEnumInstance "Enum"
-
-singInstance :: DsMonad q
-             => (DType -> [DCon] -> q UInstDecl)
-             -> String -> Name -> q [Dec]
-singInstance mk_inst inst_name name = do
-  (tvbs, cons) <- getDataD ("I cannot make an instance of " ++ inst_name
-                            ++ " for it.") name
-  dtvbs <- mapM dsTvb tvbs
-  dcons <- mapM dsCon cons
-  raw_inst <- mk_inst (foldType (DConT name) (map tvbToType dtvbs)) dcons
-  (a_inst, decs) <- promoteM [] $
-                    promoteInstanceDec Map.empty raw_inst
-  decs' <- singDecsM [] $ (:[]) <$> singInstD a_inst
-  return $ decsToTH (decs ++ decs')
-
-singInfo :: DsMonad q => DInfo -> q [DDec]
-singInfo (DTyConI dec _) =
-  singTopLevelDecs [] [dec]
-singInfo (DPrimTyConI _name _numArgs _unlifted) =
-  fail "Singling of primitive type constructors not supported"
-singInfo (DVarI _name _ty _mdec _fixity) =
-  fail "Singling of value info not supported"
-singInfo (DTyVarI _name _ty) =
-  fail "Singling of type variable info not supported"
-
-singTopLevelDecs :: DsMonad q => [Dec] -> [DDec] -> q [DDec]
-singTopLevelDecs locals raw_decls = do
-  decls <- withLocalDeclarations locals $ expand raw_decls     -- expand type synonyms
-  PDecs { pd_let_decs              = letDecls
-        , pd_class_decs            = classes
-        , pd_instance_decs         = insts
-        , pd_data_decs             = datas }    <- partitionDecs decls
-
-  ((letDecEnv, classes', insts'), promDecls) <- promoteM locals $ do
-    promoteDataDecs datas
-    (_, letDecEnv) <- promoteLetDecs noPrefix letDecls
-    classes' <- mapM promoteClassDec classes
-    let meth_sigs = foldMap (lde_types . cd_lde) classes
-    insts' <- mapM (promoteInstanceDec meth_sigs) insts
-    return (letDecEnv, classes', insts')
-
-  singDecsM locals $ do
-    let letBinds = concatMap buildDataLets datas
-                ++ concatMap buildMethLets classes
-    (newLetDecls, newDecls) <- bindLets letBinds $
-                               singLetDecEnv letDecEnv $ do
-                                 newDataDecls <- concatMapM singDataD datas
-                                 newClassDecls <- mapM singClassD classes'
-                                 newInstDecls <- mapM singInstD insts'
-                                 return (newDataDecls ++ newClassDecls ++ newInstDecls)
-    return $ promDecls ++ (map DLetDec newLetDecls) ++ newDecls
-
--- see comment at top of file
-buildDataLets :: DataDecl -> [(Name, DExp)]
-buildDataLets (DataDecl _nd _name _tvbs cons _derivings) =
-  concatMap con_num_args cons
-  where
-    con_num_args :: DCon -> [(Name, DExp)]
-    con_num_args (DCon _tvbs _cxt name fields) =
-      (name, wrapSingFun (length (tysOfConFields fields))
-                         (promoteValRhs name) (DConE $ singDataConName name))
-      : rec_selectors fields
-
-    rec_selectors :: DConFields -> [(Name, DExp)]
-    rec_selectors (DNormalC {}) = []
-    rec_selectors (DRecC fields) =
-      let names = map fstOf3 fields in
-      [ (name, wrapSingFun 1 (promoteValRhs name) (DVarE $ singValName name))
-      | name <- names ]
-
--- see comment at top of file
-buildMethLets :: UClassDecl -> [(Name, DExp)]
-buildMethLets (ClassDecl { cd_lde = LetDecEnv { lde_types = meth_sigs } }) =
-  map mk_bind (Map.toList meth_sigs)
-  where
-    mk_bind (meth_name, meth_ty) =
-      ( meth_name
-      , wrapSingFun (countArgs meth_ty) (promoteValRhs meth_name)
-                                        (DVarE $ singValName meth_name) )
-
-singClassD :: AClassDecl -> SgM DDec
-singClassD (ClassDecl { cd_cxt  = cls_cxt
-                      , cd_name = cls_name
-                      , cd_tvbs = cls_tvbs
-                      , cd_fds  = cls_fundeps
-                      , cd_lde  = LetDecEnv { lde_defns = default_defns
-                                            , lde_types = meth_sigs
-                                            , lde_infix = fixities
-                                            , lde_proms = promoted_defaults } }) = do
-  (sing_sigs, _, tyvar_names, res_kis)
-    <- unzip4 <$> zipWithM (singTySig no_meth_defns meth_sigs)
-                           meth_names (map promoteValRhs meth_names)
-  let default_sigs = catMaybes $ zipWith mk_default_sig meth_names sing_sigs
-      res_ki_map   = Map.fromList (zip meth_names
-                                       (map (fromMaybe always_sig) res_kis))
-  sing_meths <- mapM (uncurry (singLetDecRHS (Map.fromList tyvar_names)
-                                             res_ki_map))
-                     (Map.toList default_defns)
-  let fixities' = map (uncurry singInfixDecl) fixities
-  cls_cxt' <- mapM singPred cls_cxt
-  (kproxies, kproxy_pred) <- mkKProxies (map extractTvbName cls_tvbs)
-
-  return $ DClassD (cls_cxt' ++ kproxy_pred)
-                   (singClassName cls_name) kproxies
-                   cls_fundeps   -- they are fine without modification
-                   (map DLetDec (sing_sigs ++ sing_meths ++ fixities') ++ default_sigs)
-  where
-    no_meth_defns = error "Internal error: can't find declared method type"
-    always_sig    = error "Internal error: no signature for default method"
-    meth_names    = Map.keys meth_sigs
-
-    mk_default_sig meth_name (DSigD s_name sty) =
-      DDefaultSigD s_name <$> add_constraints meth_name sty
-    mk_default_sig _ _ = error "Internal error: a singled signature isn't a signature."
-
-    add_constraints meth_name sty = do  -- Maybe monad
-      prom_dflt <- Map.lookup meth_name promoted_defaults
-      let default_pred = foldl DAppPr (DConPr equalityName)
-                               [ foldApply (promoteValRhs meth_name) tvs
-                               , foldApply prom_dflt tvs ]
-      return $ DForallT tvbs (default_pred : cxt) (ravel args res)
-      where
-        (tvbs, cxt, args, res) = unravel sty
-        tvs                    = map tvbToType tvbs
-
-
-singInstD :: AInstDecl -> SgM DDec
-singInstD (InstDecl { id_cxt = cxt, id_name = inst_name
-                    , id_arg_tys = inst_tys, id_meths = ann_meths }) = do
-  cxt' <- mapM singPred cxt
-  inst_kis <- mapM promoteType inst_tys
-  meths <- concatMapM (uncurry sing_meth) ann_meths
-  return (DInstanceD cxt'
-                     (foldl DAppT (DConT s_inst_name) (map kindParam inst_kis))
-                     meths)
-
-  where
-    s_inst_name = singClassName inst_name
-
-    sing_meth :: Name -> ALetDecRHS -> SgM [DDec]
-    sing_meth name rhs = do
-      mb_s_info <- dsReify (singValName name)
-      (s_ty, tyvar_names, m_res_ki) <- case mb_s_info of
-        Just (DVarI _ (DForallT cls_kproxy_tvbs _cls_pred s_ty) _ _) -> do
-          let class_kvs = map extract_kv cls_kproxy_tvbs
-              extract_kv (DKindedTV _kproxyVar (DConK _kproxyTy [DVarK kv])) = kv
-              extract_kv _ = error "sing_meth cannot extract a kind variable"
-
-              (sing_tvbs, _pred, _args, res_ty) = unravel s_ty
-
-          inst_kis <- mapM promoteType inst_tys
-          let subst    = Map.fromList (zip class_kvs inst_kis)
-              m_res_ki = case res_ty of
-                _sing `DAppT` (_prom_func `DSigT` res_ki) -> Just (substKind subst res_ki)
-                _                                         -> Nothing
-
-          return (substKindInType subst s_ty, map extractTvbName sing_tvbs, m_res_ki)
-        _ -> do
-          mb_info <- dsReify name
-          case mb_info of
-            Just (DVarI _ (DForallT cls_tvbs _cls_pred inner_ty) _ _) -> do
-              let subst = Map.fromList (zip (map extractTvbName cls_tvbs)
-                                            inst_tys)
-              (s_ty, _num_args, tyvar_names, res_ki) <- singType (promoteValRhs name)
-                                                                 (substType subst inner_ty)
-              return (s_ty, tyvar_names, Just res_ki)
-            _ -> fail $ "Cannot find type of method " ++ show name
-
-      let kind_map = maybe Map.empty (Map.singleton name) m_res_ki
-      meth' <- singLetDecRHS (Map.singleton name tyvar_names)
-                             kind_map name rhs
-      return $ map DLetDec [DSigD (singValName name) s_ty, meth']
-
-singLetDecEnv :: ALetDecEnv -> SgM a -> SgM ([DLetDec], a)
-singLetDecEnv (LetDecEnv { lde_defns = defns
-                         , lde_types = types
-                         , lde_infix = infix_decls
-                         , lde_proms = proms })
-              thing_inside = do
-  let prom_list = Map.toList proms
-  (typeSigs, letBinds, tyvarNames, res_kis)
-    <- unzip4 <$> mapM (uncurry (singTySig defns types)) prom_list
-  let infix_decls' = map (uncurry singInfixDecl) infix_decls
-      res_ki_map   = Map.fromList [ (name, res_ki) | ((name, _), Just res_ki)
-                                                       <- zip prom_list res_kis ]
-  bindLets letBinds $ do
-    let_decs <- mapM (uncurry (singLetDecRHS (Map.fromList tyvarNames) res_ki_map))
-                     (Map.toList defns)
-    thing <- thing_inside
-    return (infix_decls' ++ typeSigs ++ let_decs, thing)
-
-singInfixDecl :: Fixity -> Name -> DLetDec
-singInfixDecl fixity name
-  | isUpcase name =
-    -- is it a tycon name or a datacon name??
-    -- it *must* be a datacon name, because symbolic tycons
-    -- can't be promoted. This is terrible.
-    DInfixD fixity (singDataConName name)
-  | otherwise = DInfixD fixity (singValName name)
-
-singTySig :: Map Name ALetDecRHS  -- definitions
-          -> Map Name DType       -- type signatures
-          -> Name -> DType   -- the type is the promoted type, not the type sig!
-          -> SgM ( DLetDec               -- the new type signature
-                 , (Name, DExp)          -- the let-bind entry
-                 , (Name, [Name])        -- the scoped tyvar names in the tysig
-                 , Maybe DKind           -- the result kind in the tysig
-                 )
-singTySig defns types name prom_ty =
-  let sName = singValName name in
-  case Map.lookup name types of
-    Nothing -> do
-      num_args <- guess_num_args
-      (sty, tyvar_names) <- mk_sing_ty num_args
-      return ( DSigD sName sty
-             , (name, wrapSingFun num_args prom_ty (DVarE sName))
-             , (name, tyvar_names)
-             , Nothing )
-    Just ty -> do
-      (sty, num_args, tyvar_names, res_ki) <- singType prom_ty ty
-      return ( DSigD sName sty
-             , (name, wrapSingFun num_args prom_ty (DVarE sName))
-             , (name, tyvar_names)
-             , Just res_ki )
-  where
-    guess_num_args :: SgM Int
-    guess_num_args =
-      case Map.lookup name defns of
-        Nothing -> fail "Internal error: promotion known for something not let-bound."
-        Just (AValue _ n _) -> return n
-        Just (AFunction _ n _) -> return n
-
-      -- create a Sing t1 -> Sing t2 -> ... type of a given arity and result type
-    mk_sing_ty :: Int -> SgM (DType, [Name])
-    mk_sing_ty n = do
-      arg_names <- replicateM n (qNewName "arg")
-      return ( DForallT (map DPlainTV arg_names) []
-                        (ravel (map (\nm -> singFamily `DAppT` DVarT nm) arg_names)
-                               (singFamily `DAppT`
-                                    (foldl apply prom_ty (map DVarT arg_names))))
-             , arg_names )
-
-singLetDecRHS :: Map Name [Name]
-              -> Map Name DKind   -- result kind (might not be known)
-              -> Name -> ALetDecRHS -> SgM DLetDec
-singLetDecRHS _bound_names _res_kis name (AValue prom num_arrows exp) =
-  DValD (DVarPa (singValName name)) <$>
-  (wrapUnSingFun num_arrows prom <$> singExp exp)
-singLetDecRHS bound_names res_kis name (AFunction prom_fun num_arrows clauses) =
-  let tyvar_names = case Map.lookup name bound_names of
-                      Nothing -> []
-                      Just ns -> ns
-      res_ki = Map.lookup name res_kis
-  in
-  DFunD (singValName name) <$>
-        mapM (singClause prom_fun num_arrows tyvar_names res_ki) clauses
-
-singClause :: DType   -- the promoted function
-           -> Int     -- the number of arrows in the type. If this is more
-                      -- than the number of patterns, we need to eta-expand
-                      -- with unSingFun.
-           -> [Name]  -- the names of the forall'd vars in the type sig of this
-                      -- function. This list should have at least the length as the
-                      -- number of patterns in the clause
-           -> Maybe DKind   -- result kind, if known
-           -> ADClause -> SgM DClause
-singClause prom_fun num_arrows bound_names res_ki
-           (ADClause var_proms pats exp) = do
-  (sPats, prom_pats)
-    <- mapAndUnzipM (singPat (Map.fromList var_proms) Parameter) pats
-  let equalities = zip (map DVarT bound_names) prom_pats
-      -- This res_ki stuff is necessary when we need to propagate result-
-      -- based type-inference. It was inspired by toEnum. (If you remove
-      -- this, that should fail to compile.)
-      applied_ty = maybe id (\ki -> (`DSigT` ki)) res_ki $
-                   foldl apply prom_fun prom_pats
-  sBody <- bindTyVarsEq var_proms applied_ty equalities $ singExp exp
-    -- when calling unSingFun, the prom_pats aren't in scope, so we use the
-    -- bound_names instead
-  let pattern_bound_names = zipWith const bound_names pats
-       -- this does eta-expansion. See comment at top of file.
-      sBody' = wrapUnSingFun (num_arrows - length pats)
-                 (foldl apply prom_fun (map DVarT pattern_bound_names)) sBody
-  return $ DClause sPats sBody'
-
--- we need to know where a pattern is to anticipate when
--- GHC's brain might explode
-data PatternContext = LetBinding
-                    | CaseStatement
-                    | Parameter
-                    deriving Eq
-
-checkIfBrainWillExplode :: Monad m => PatternContext -> m ()
-checkIfBrainWillExplode CaseStatement = return ()
-checkIfBrainWillExplode Parameter = return ()
-checkIfBrainWillExplode _ =
-  fail $ "Can't use a singleton pattern outside of a case-statement or\n" ++
-         "do expression: GHC's brain will explode if you try. (Do try it!)"
-
--- Note [No wildcards in singletons]
--- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---
--- We forbid patterns with wildcards during singletonization. Why? Because
--- singletonizing a pattern also must produce a type expression equivalent
--- to the pattern, for use in bindTyVars. Wildcards get in the way of this.
--- Thus, we de-wild patterns during promotion, and put the de-wilded patterns
--- in the ADExp AST.
-
-singPat :: Map Name Name   -- from term-level names to type-level names
-        -> PatternContext
-        -> DPat
-        -> SgM (DPat, DType) -- the type form of the pat
-singPat _var_proms _patCxt (DLitPa _lit) =
-  fail "Singling of literal patterns not yet supported"
-singPat var_proms _patCxt (DVarPa name) = do
-  tyname <- case Map.lookup name var_proms of
-              Nothing     ->
-                fail "Internal error: unknown variable when singling pattern"
-              Just tyname -> return tyname
-  return (DVarPa (singValName name), DVarT tyname)
-singPat var_proms patCxt (DConPa name pats) = do
-  checkIfBrainWillExplode patCxt
-  (pats', tys) <- mapAndUnzipM (singPat var_proms patCxt) pats
-  return ( DConPa (singDataConName name) pats'
-         , foldl apply (promoteValRhs name) tys )
-singPat var_proms patCxt (DTildePa pat) = do
-  qReportWarning
-    "Lazy pattern converted into regular pattern during singleton generation."
-  singPat var_proms patCxt pat
-singPat var_proms patCxt (DBangPa pat) = do
-  (pat', ty) <- singPat var_proms patCxt pat
-  return (DBangPa pat', ty)
-singPat _var_proms _patCxt DWildPa =
-  -- See Note [No wildcards in singletons]
-  fail "Internal error: wildcard seen during singleton generation"
-
--- Note [Annotate case return type]
--- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---
--- We're straining GHC's type inference here. One particular trouble area
--- is determining the return type of a GADT pattern match. In general, GHC
--- cannot infer return types of GADT pattern matches because the return type
--- becomes "untouchable" in the case matches. See the OutsideIn paper. But,
--- during singletonization, we *know* the return type. So, just add a type
--- annotation. See #54.
-
--- Note [Why error is so special]
--- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--- Some of the transformations that happen before this point produce impossible
--- case matches. We must be careful when processing these so as not to make
--- an error GHC will complain about. When binding the case-match variables, we
--- normally include an equality constraint saying that the scrutinee is equal
--- to the matched pattern. But, we can't do this in inaccessible matches, because
--- equality is bogus, and GHC (rightly) complains. However, we then have another
--- problem, because GHC doesn't have enough information when type-checking the
--- RHS of the inaccessible match to deem it type-safe. The solution: treat error
--- as super-special, so that GHC doesn't look too hard at singletonized error
--- calls. Specifically, DON'T do the applySing stuff. Just use sError, which
--- has a custom type (Sing x -> a) anyway.
-
-singExp :: ADExp -> SgM DExp
-  -- See Note [Why error is so special]
-singExp (ADVarE err `ADAppE` arg)
-  | err == errorName = DAppE (DVarE (singValName err)) <$> singExp arg
-singExp (ADVarE name)  = lookupVarE name
-singExp (ADConE name)  = lookupConE name
-singExp (ADLitE lit)   = singLit lit
-singExp (ADAppE e1 e2) = do
-  e1' <- singExp e1
-  e2' <- singExp e2
-  -- `applySing undefined x` kills type inference, because GHC can't figure
-  -- out the type of `undefined`. So we don't emit that code.
-  if isException e1'
-  then return e1'
-  else return $ (DVarE applySingName) `DAppE` e1' `DAppE` e2'
-singExp (ADLamE var_proms prom_lam names exp) = do
-  let sNames = map singValName names
-  exp' <- bindTyVars var_proms (foldl apply prom_lam (map (DVarT . snd) var_proms)) $
-          singExp exp
-  return $ wrapSingFun (length names) prom_lam $ DLamE sNames exp'
-singExp (ADCaseE exp prom_exp matches ret_ty) =
-    -- See Note [Annotate case return type]
-  DSigE <$> (DCaseE <$> singExp exp <*> mapM (singMatch prom_exp) matches)
-        <*> pure (singFamily `DAppT` ret_ty)
-singExp (ADLetE env exp) =
-  uncurry DLetE <$> singLetDecEnv env (singExp exp)
-singExp (ADSigE {}) =
-  fail "Singling of explicit type annotations not yet supported."
-
-isException :: DExp -> Bool
-isException (DVarE n)             = n == undefinedName
-isException (DConE {})            = False
-isException (DLitE {})            = False
-isException (DAppE (DVarE fun) _) | nameBase fun == "sError" = True
-isException (DAppE fun _)         = isException fun
-isException (DLamE _ _)           = False
-isException (DCaseE e _)          = isException e
-isException (DLetE _ e)           = isException e
-isException (DSigE e _)           = isException e
-isException (DStaticE e)          = isException e
-
-singMatch :: DType  -- ^ the promoted scrutinee
-          -> ADMatch -> SgM DMatch
-singMatch prom_scrut (ADMatch var_proms prom_match pat exp) = do
-  (sPat, prom_pat)
-    <- singPat (Map.fromList var_proms) CaseStatement pat
-        -- why DAppT below? See comment near decl of ADMatch in LetDecEnv.
-  let equality
-        | DVarPa _ <- pat
-        , (ADVarE err) `ADAppE` _ <- exp
-        , err == errorName   -- See Note [Why error is so special]
-        = [] -- no equality from impossible case.
-        | otherwise      = [(prom_pat, prom_scrut)]
-  sExp <- bindTyVarsEq var_proms (prom_match `DAppT` prom_pat) equality $
-          singExp exp
-  return $ DMatch sPat sExp
-
-singLit :: Lit -> SgM DExp
-singLit (IntegerL n)
-  | n >= 0    = return $
-                DVarE sFromIntegerName `DAppE`
-                (DVarE singMethName `DSigE`
-                 (singFamily `DAppT` DLitT (NumTyLit n)))
-  | otherwise = do sLit <- singLit (IntegerL (-n))
-                   return $ DVarE sNegateName `DAppE` sLit
-singLit lit = do
-  prom_lit <- promoteLitExp lit
-  return $ DVarE singMethName `DSigE` (singFamily `DAppT` prom_lit)
diff --git a/src/Data/Singletons/Single/Data.hs b/src/Data/Singletons/Single/Data.hs
deleted file mode 100644
index c43efd6..0000000
--- a/src/Data/Singletons/Single/Data.hs
+++ /dev/null
@@ -1,148 +0,0 @@
-{- Data/Singletons/Single/Data.hs
-
-(c) Richard Eisenberg 2013
-eir@cis.upenn.edu
-
-Singletonizes constructors.
--}
-
-{-# LANGUAGE ParallelListComp, TupleSections #-}
-
-module Data.Singletons.Single.Data where
-
-import Language.Haskell.TH.Desugar
-import Language.Haskell.TH.Syntax
-import Data.Singletons.Single.Monad
-import Data.Singletons.Single.Type
-import Data.Singletons.Promote.Type
-import Data.Singletons.Single.Eq
-import Data.Singletons.Util
-import Data.Singletons.Names
-import Data.Singletons.Syntax
-import Control.Monad
-
--- We wish to consider the promotion of "Rep" to be *
--- not a promoted data constructor.
-singDataD :: DataDecl -> SgM [DDec]
-singDataD (DataDecl _nd name tvbs ctors derivings) = do
-  aName <- qNewName "z"
-  let a = DVarT aName
-  let tvbNames = map extractTvbName tvbs
-  k <- promoteType (foldType (DConT name) (map DVarT tvbNames))
-  ctors' <- mapM (singCtor a) ctors
-
-  -- instance for SingKind
-  fromSingClauses <- mapM mkFromSingClause ctors
-  toSingClauses   <- mapM mkToSingClause ctors
-  let singKindInst =
-        DInstanceD (map (singKindConstraint . DVarK) tvbNames)
-                   (DAppT (DConT singKindClassName)
-                          (kindParam k))
-                   [ DTySynInstD demoteRepName $ DTySynEqn
-                      [kindParam k]
-                      (foldType (DConT name)
-                        (map (DAppT demote . kindParam . DVarK) tvbNames))
-                   , DLetDec $ DFunD fromSingName (fromSingClauses `orIfEmpty` emptyMethod aName)
-                   , DLetDec $ DFunD toSingName   (toSingClauses   `orIfEmpty` emptyMethod aName) ]
-
-  -- SEq instance
-  sEqInsts <- if elem eqName derivings
-              then mapM (mkEqualityInstance k ctors') [sEqClassDesc, sDecideClassDesc]
-              else return []
-
-  -- e.g. type SNat = Sing :: Nat -> *
-  let kindedSynInst =
-        DTySynD (singTyConName name)
-                []
-                (singFamily `DSigT` (k `DArrowK` DStarK))
-
-  return $ (DDataInstD Data [] singFamilyName [DSigT a k] ctors' []) :
-           kindedSynInst :
-           singKindInst :
-           sEqInsts
-  where -- in the Rep case, the names of the constructors are in the wrong scope
-        -- (they're types, not datacons), so we have to reinterpret them.
-        mkConName :: Name -> SgM Name
-        mkConName
-          | nameBase name == nameBase repName = mkDataName . nameBase
-          | otherwise                         = return
-
-        mkFromSingClause :: DCon -> SgM DClause
-        mkFromSingClause c = do
-          let (cname, numArgs) = extractNameArgs c
-          cname' <- mkConName cname
-          varNames <- replicateM numArgs (qNewName "b")
-          return $ DClause [DConPa (singDataConName cname) (map DVarPa varNames)]
-                           (foldExp
-                              (DConE cname')
-                              (map (DAppE (DVarE fromSingName) . DVarE) varNames))
-
-        mkToSingClause :: DCon -> SgM DClause
-        mkToSingClause (DCon _tvbs _cxt cname fields) = do
-          let types = tysOfConFields fields
-          varNames  <- mapM (const $ qNewName "b") types
-          svarNames <- mapM (const $ qNewName "c") types
-          promoted  <- mapM promoteType types
-          cname' <- mkConName cname
-          let recursiveCalls = zipWith mkRecursiveCall varNames promoted
-          return $
-            DClause [DConPa cname' (map DVarPa varNames)]
-                    (multiCase recursiveCalls
-                               (map (DConPa someSingDataName . listify . DVarPa)
-                                    svarNames)
-                               (DAppE (DConE someSingDataName)
-                                         (foldExp (DConE (singDataConName cname))
-                                                  (map DVarE svarNames))))
-
-        mkRecursiveCall :: Name -> DKind -> DExp
-        mkRecursiveCall var_name ki =
-          DSigE (DAppE (DVarE toSingName) (DVarE var_name))
-                (DAppT (DConT someSingTypeName) (kindParam ki))
-
-        emptyMethod :: Name -> [DClause]
-        emptyMethod n = [DClause [DVarPa n] (DCaseE (DVarE n) emptyMatches)]
-
--- refine a constructor. the first parameter is the type variable that
--- the singleton GADT is parameterized by
-singCtor :: DType -> DCon -> SgM DCon
- -- polymorphic constructors are handled just
- -- like monomorphic ones -- the polymorphism in
- -- the kind is automatic
-singCtor a (DCon _tvbs cxt name fields)
-  | not (null cxt)
-  = fail "Singling of constrained constructors not yet supported"
-  | otherwise
-  = do
-  let types = tysOfConFields fields
-      sName = singDataConName name
-      sCon = DConE sName
-      pCon = DConT name
-  indexNames <- mapM (const $ qNewName "n") types
-  let indices = map DVarT indexNames
-  kinds <- mapM promoteType types
-  args <- zipWithM buildArgType types indices
-  let tvbs = zipWith DKindedTV indexNames kinds
-      kindedIndices = zipWith DSigT indices kinds
-
-  -- SingI instance
-  emitDecs
-    [DInstanceD (map (DAppPr (DConPr singIName)) indices)
-                (DAppT (DConT singIName)
-                       (foldType pCon kindedIndices))
-                [DLetDec $ DValD (DVarPa singMethName)
-                       (foldExp sCon (map (const $ DVarE singMethName) types))]]
-
-  let conFields = case fields of
-                    DNormalC _ -> DNormalC $ map (NotStrict,) args
-                    DRecC rec_fields ->
-                      DRecC [ (singValName field_name, NotStrict, arg)
-                            | (field_name, _, _) <- rec_fields
-                            | arg <- args ]
-  return $ DCon tvbs
-                [mkEqPred a (foldType pCon indices)]
-                sName
-                conFields
-  where buildArgType :: DType -> DType -> SgM DType
-        buildArgType ty index = do
-          (ty', _, _, _) <- singType index ty
-          return ty'
diff --git a/src/Data/Singletons/Single/Eq.hs b/src/Data/Singletons/Single/Eq.hs
deleted file mode 100644
index 78bbb6a..0000000
--- a/src/Data/Singletons/Single/Eq.hs
+++ /dev/null
@@ -1,119 +0,0 @@
-{- Data/Singletons/Single/Eq.hs
-
-(c) Richard Eisenberg 2014
-eir@cis.upenn.edu
-
-Defines functions to generate SEq and SDecide instances.
--}
-
-module Data.Singletons.Single.Eq where
-
-import Language.Haskell.TH.Syntax
-import Language.Haskell.TH.Desugar
-import Data.Singletons.Util
-import Data.Singletons.Names
-import Control.Monad
-
--- making the SEq instance and the SDecide instance are rather similar,
--- so we generalize
-type EqualityClassDesc q = ((DCon, DCon) -> q DClause, Name, Name)
-sEqClassDesc, sDecideClassDesc :: Quasi q => EqualityClassDesc q
-sEqClassDesc = (mkEqMethClause, sEqClassName, sEqMethName)
-sDecideClassDesc = (mkDecideMethClause, sDecideClassName, sDecideMethName)
-
--- pass the *singleton* constructors, not the originals
-mkEqualityInstance :: Quasi q => DKind -> [DCon]
-                   -> EqualityClassDesc q -> q DDec
-mkEqualityInstance k ctors (mkMeth, className, methName) = do
-  let ctorPairs = [ (c1, c2) | c1 <- ctors, c2 <- ctors ]
-  methClauses <- if null ctors
-                 then mkEmptyMethClauses
-                 else mapM mkMeth ctorPairs
-  return $ DInstanceD (map (\kvar -> (DConPr className) `DAppPr` kindParam kvar)
-                           (getKindVars k))
-                     (DAppT (DConT className)
-                            (kindParam k))
-                     [DLetDec $ DFunD methName methClauses]
-  where getKindVars :: DKind -> [DKind]
-        getKindVars (DVarK x)         = [DVarK x]
-        getKindVars (DConK _ args)    = concatMap getKindVars args
-        getKindVars DStarK            = []
-        getKindVars (DArrowK arg res) = concatMap getKindVars [arg, res]
-        getKindVars other             =
-          error ("getKindVars sees an unusual kind: " ++ show other)
-
-        mkEmptyMethClauses :: Quasi q => q [DClause]
-        mkEmptyMethClauses = do
-          a <- qNewName "a"
-          return [DClause [DVarPa a, DWildPa] (DCaseE (DVarE a) emptyMatches)]
-
-mkEqMethClause :: Quasi q => (DCon, DCon) -> q DClause
-mkEqMethClause (c1, c2)
-  | lname == rname = do
-    lnames <- replicateM lNumArgs (qNewName "a")
-    rnames <- replicateM lNumArgs (qNewName "b")
-    let lpats = map DVarPa lnames
-        rpats = map DVarPa rnames
-        lvars = map DVarE lnames
-        rvars = map DVarE rnames
-    return $ DClause
-      [DConPa lname lpats, DConPa rname rpats]
-      (allExp (zipWith (\l r -> foldExp (DVarE sEqMethName) [l, r])
-                        lvars rvars))
-  | otherwise =
-    return $ DClause
-      [DConPa lname (replicate lNumArgs DWildPa),
-       DConPa rname (replicate rNumArgs DWildPa)]
-      (DConE $ singDataConName falseName)
-  where allExp :: [DExp] -> DExp
-        allExp [] = DConE $ singDataConName trueName
-        allExp [one] = one
-        allExp (h:t) = DAppE (DAppE (DVarE $ singValName andName) h) (allExp t)
-
-        (lname, lNumArgs) = extractNameArgs c1
-        (rname, rNumArgs) = extractNameArgs c2
-
-mkDecideMethClause :: Quasi q => (DCon, DCon) -> q DClause
-mkDecideMethClause (c1, c2)
-  | lname == rname =
-    if lNumArgs == 0
-    then return $ DClause [DConPa lname [], DConPa rname []]
-                          (DAppE (DConE provedName) (DConE reflName))
-    else do
-      lnames <- replicateM lNumArgs (qNewName "a")
-      rnames <- replicateM lNumArgs (qNewName "b")
-      contra <- qNewName "contra"
-      let lpats = map DVarPa lnames
-          rpats = map DVarPa rnames
-          lvars = map DVarE lnames
-          rvars = map DVarE rnames
-      refl <- qNewName "refl"
-      return $ DClause
-        [DConPa lname lpats, DConPa rname rpats]
-        (DCaseE (mkTupleDExp $
-                 zipWith (\l r -> foldExp (DVarE sDecideMethName) [l, r])
-                         lvars rvars)
-                ((DMatch (mkTupleDPat (replicate lNumArgs
-                                        (DConPa provedName [DConPa reflName []])))
-                        (DAppE (DConE provedName) (DConE reflName))) :
-                 [DMatch (mkTupleDPat (replicate i DWildPa ++
-                                       DConPa disprovedName [DVarPa contra] :
-                                       replicate (lNumArgs - i - 1) DWildPa))
-                         (DAppE (DConE disprovedName)
-                                (DLamE [refl] $
-                                 DCaseE (DVarE refl)
-                                        [DMatch (DConPa reflName []) $
-                                         (DAppE (DVarE contra)
-                                                (DConE reflName))]))
-                 | i <- [0..lNumArgs-1] ]))
-
-  | otherwise = do
-    x <- qNewName "x"
-    return $ DClause
-      [DConPa lname (replicate lNumArgs DWildPa),
-       DConPa rname (replicate rNumArgs DWildPa)]
-      (DAppE (DConE disprovedName) (DLamE [x] (DCaseE (DVarE x) emptyMatches)))
-
-  where
-    (lname, lNumArgs) = extractNameArgs c1
-    (rname, rNumArgs) = extractNameArgs c2
diff --git a/src/Data/Singletons/Single/Monad.hs b/src/Data/Singletons/Single/Monad.hs
deleted file mode 100644
index 3a4efe4..0000000
--- a/src/Data/Singletons/Single/Monad.hs
+++ /dev/null
@@ -1,224 +0,0 @@
-{- Data/Singletons/Single/Monad.hs
-
-(c) Richard Eisenberg 2014
-eir@cis.upenn.edu
-
-This file defines the SgM monad and its operations, for use during singling.
-
-The SgM monad allows reading from a SgEnv environment and is wrapped around a Q.
--}
-
-{-# LANGUAGE GeneralizedNewtypeDeriving, ParallelListComp,
-             TemplateHaskell, CPP #-}
-
-module Data.Singletons.Single.Monad (
-  SgM, bindLets, bindTyVars, bindTyVarsEq, lookupVarE, lookupConE,
-  wrapSingFun, wrapUnSingFun,
-  singM, singDecsM,
-  emitDecs, emitDecsM
-  ) where
-
-import Prelude hiding ( exp )
-import Data.Map ( Map )
-import qualified Data.Map as Map
-import Data.Singletons.Promote.Monad ( emitDecs, emitDecsM, VarPromotions )
-import Data.Singletons.Names
-import Data.Singletons.Util
-import Data.Singletons
-import Language.Haskell.TH.Syntax hiding ( lift )
-import Language.Haskell.TH.Desugar
-import Control.Monad.Reader
-import Control.Monad.Writer
-import Control.Applicative
-
--- environment during singling
-data SgEnv =
-  SgEnv { sg_let_binds   :: Map Name DExp   -- from the *original* name
-        , sg_local_decls :: [Dec]
-        }
-
-emptySgEnv :: SgEnv
-emptySgEnv = SgEnv { sg_let_binds   = Map.empty
-                   , sg_local_decls = []
-                   }
-
--- the singling monad
-newtype SgM a = SgM (ReaderT SgEnv (WriterT [DDec] Q) a)
-  deriving ( Functor, Applicative, Monad
-           , MonadReader SgEnv, MonadWriter [DDec] )
-
-liftSgM :: Q a -> SgM a
-liftSgM = SgM . lift . lift
-
-instance Quasi SgM where
-  qNewName          = liftSgM `comp1` qNewName
-  qReport           = liftSgM `comp2` qReport
-  qLookupName       = liftSgM `comp2` qLookupName
-  qReify            = liftSgM `comp1` qReify
-  qReifyInstances   = liftSgM `comp2` qReifyInstances
-  qLocation         = liftSgM qLocation
-  qRunIO            = liftSgM `comp1` qRunIO
-  qAddDependentFile = liftSgM `comp1` qAddDependentFile
-  qReifyRoles       = liftSgM `comp1` qReifyRoles
-  qReifyAnnotations = liftSgM `comp1` qReifyAnnotations
-  qReifyModule      = liftSgM `comp1` qReifyModule
-  qAddTopDecls      = liftSgM `comp1` qAddTopDecls
-  qAddModFinalizer  = liftSgM `comp1` qAddModFinalizer
-  qGetQ             = liftSgM qGetQ
-  qPutQ             = liftSgM `comp1` qPutQ
-
-  qRecover (SgM handler) (SgM body) = do
-    env <- ask
-    (result, aux) <- liftSgM $
-                     qRecover (runWriterT $ runReaderT handler env)
-                              (runWriterT $ runReaderT body env)
-    tell aux
-    return result
-
-instance DsMonad SgM where
-  localDeclarations = asks sg_local_decls
-
-bindLets :: [(Name, DExp)] -> SgM a -> SgM a
-bindLets lets1 =
-  local (\env@(SgEnv { sg_let_binds = lets2 }) ->
-               env { sg_let_binds = (Map.fromList lets1) `Map.union` lets2 })
-
--- bindTyVarsEq
--- ~~~~~~~~~~~~~~~~
---
--- This function does some dirty business.
---
--- The problem is that, whenever we bind a term variable, we would also like
--- to bind a type variable, for use in promotions of any nested lambdas,
--- cases, and lets. The natural idea, something like `(\(foo :: Sing ty_foo)
--- (bar :: Sing ty_bar) -> ...)` doesn't work, because ScopedTypeVariables is
--- stupid (in RAE's opinon). The ScopedTypeVariables extension says that any
--- scoped type variable is a rigid skolem. This means that the types ty_foo
--- and ty_bar must be distinct! That's actually not the problem. The problem
--- is that the implicit kind variables used in ty_foo's and ty_bar's kinds are
--- also skolems, and this breaks the idea.
---
--- The solution? Use scoped type variables from a function signature, where
--- the bound variables' kinds are *inferred*, not skolem. This means that,
--- whenever we lambda-bind variables (that is, in lambdas, let-bound
--- functions, and case matches), we must then pass the variables immediately
--- to a function with an explicit type signature. Thus, something like
---
---   (\foo bar -> ...)
---
--- becomes
---
---   (\foo bar ->
---     let lambda :: forall ty_foo ty_bar. Sing ty_foo -> Sing ty_bar -> Sing ...
---         lambda foo' bar' = ... (with foo |-> foo' and bar |-> bar')
---     in lambda foo bar)
---
--- Getting the ... right in the type above is a major nuisance, and it
--- explains a bunch of the types stored in the ADExp AST. (See LetDecEnv.)
---
--- A further, unsolved problem with all of this is that the type signature
--- generated never has any constraints. Thus, if the body requires a
--- constraint somewhere, the code will fail to compile; we're not quite clever
--- enough to get everything to line up.
---
--- As a stop-gap measure to fix this, in the function clause case, we tie the
--- scoped type variables in this "lambda" to the outer scoped type variables.
--- This has the effect of making sure that the kinds of ty_foo and ty_bar
--- match that of the surrounding scope and makes sure that any constraint is
--- available from within the "lambda".
---
--- This means, though, that using constraints with case statements and lambdas
--- will likely not work. Ugh. UPDATE: This actually bit in practice! The
--- Enum class wants to define `succ = toEnum . (+1) . fromEnum`. But that
--- (+1) is a right-section, which desugars to a lambda. The Num constraint
--- couldn't get through. Changing (+1) to (1+) fixed the problem, as
--- left-sections don't need a lambda.
-
-bindTyVarsEq :: VarPromotions   -- the bindings we wish to effect
-             -> DType           -- the type of the thing_inside
-             -> [(DType, DType)]  -- and asserting these equalities
-             -> SgM DExp -> SgM DExp
-bindTyVarsEq var_proms prom_fun equalities thing_inside = do
-  lambda <- qNewName "lambda"
-  let (term_names, tyvar_names) = unzip var_proms
-      eq_ct  = [ mkEqPred t1 t2
-               | (t1, t2) <- equalities ]
-      ty_sig = DSigD lambda $
-               DForallT (map DPlainTV tyvar_names) eq_ct $
-                        ravel (map (\tv_name -> singFamily `DAppT` DVarT tv_name)
-                                    tyvar_names)
-                              (singFamily `DAppT` prom_fun)
-  arg_names <- mapM (qNewName . nameBase) term_names
-  body <- bindLets [ (term_name, DVarE arg_name)
-                   | term_name <- term_names
-                   | arg_name <- arg_names ] $ thing_inside
-  let fundef   = DFunD lambda [DClause (map DVarPa arg_names) body]
-      let_body = foldExp (DVarE lambda) (map (DVarE . singValName) term_names)
-  return $ DLetE [ty_sig, fundef] let_body
-
-bindTyVars :: VarPromotions -> DType -> SgM DExp -> SgM DExp
-bindTyVars var_proms prom_fun = bindTyVarsEq var_proms prom_fun []
-
-lookupVarE :: Name -> SgM DExp
-lookupVarE = lookup_var_con singValName (DVarE . singValName)
-
-lookupConE :: Name -> SgM DExp
-lookupConE = lookup_var_con singDataConName (DConE . singDataConName)
-
-lookup_var_con :: (Name -> Name) -> (Name -> DExp) -> Name -> SgM DExp
-lookup_var_con mk_sing_name mk_exp name = do
-  letExpansions <- asks sg_let_binds
-  sName <- mkDataName (nameBase (mk_sing_name name)) -- we want *term* names!
-  case Map.lookup name letExpansions of
-    Nothing -> do
-      -- try to get it from the global context
-      m_dinfo <- liftM2 (<|>) (dsReify sName) (dsReify name)
-        -- try the unrefined name too -- it's needed to bootstrap Enum
-      case m_dinfo of
-        Just (DVarI _ ty _ _) ->
-          let num_args = countArgs ty in
-          return $ wrapSingFun num_args (promoteValRhs name) (mk_exp name)
-        _ -> return $ mk_exp name   -- lambda-bound
-    Just exp -> return exp
-
-wrapSingFun :: Int -> DType -> DExp -> DExp
-wrapSingFun 0 _  = id
-wrapSingFun n ty =
-  let wrap_fun = DVarE $ case n of
-                           1 -> 'singFun1
-                           2 -> 'singFun2
-                           3 -> 'singFun3
-                           4 -> 'singFun4
-                           5 -> 'singFun5
-                           6 -> 'singFun6
-                           7 -> 'singFun7
-                           _ -> error "No support for functions of arity > 7."
-  in
-  (wrap_fun `DAppE` proxyFor ty `DAppE`)
-
-wrapUnSingFun :: Int -> DType -> DExp -> DExp
-wrapUnSingFun 0 _  = id
-wrapUnSingFun n ty =
-  let unwrap_fun = DVarE $ case n of
-                             1 -> 'unSingFun1
-                             2 -> 'unSingFun2
-                             3 -> 'unSingFun3
-                             4 -> 'unSingFun4
-                             5 -> 'unSingFun5
-                             6 -> 'unSingFun6
-                             7 -> 'unSingFun7
-                             _ -> error "No support for functions of arity > 7."
-  in
-  (unwrap_fun `DAppE` proxyFor ty `DAppE`)
-
-singM :: DsMonad q => [Dec] -> SgM a -> q (a, [DDec])
-singM locals (SgM rdr) = do
-  other_locals <- localDeclarations
-  let wr = runReaderT rdr (emptySgEnv { sg_local_decls = other_locals ++ locals })
-      q  = runWriterT wr
-  runQ q
-
-singDecsM :: DsMonad q => [Dec] -> SgM [DDec] -> q [DDec]
-singDecsM locals thing = do
-  (decs1, decs2) <- singM locals thing
-  return $ decs1 ++ decs2
diff --git a/src/Data/Singletons/Single/Type.hs b/src/Data/Singletons/Single/Type.hs
deleted file mode 100644
index b04b08e..0000000
--- a/src/Data/Singletons/Single/Type.hs
+++ /dev/null
@@ -1,54 +0,0 @@
-{- Data/Singletons/Single/Type.hs
-
-(c) Richard Eisenberg 2013
-eir@cis.upenn.edu
-
-Singletonizes types.
--}
-
-module Data.Singletons.Single.Type where
-
-import Language.Haskell.TH.Desugar
-import Language.Haskell.TH.Syntax
-import Data.Singletons.Names
-import Data.Singletons.Single.Monad
-import Data.Singletons.Promote.Type
-import Data.Singletons.Util
-import Control.Monad
-
-singType :: DType          -- the promoted version of the thing classified by...
-         -> DType          -- ... this type
-         -> SgM ( DType    -- the singletonized type
-                , Int      -- the number of arguments
-                , [Name]   -- the names of the tyvars used in the sing'd type
-                , DKind )  -- the kind of the result type
-singType prom ty = do
-  let (_, cxt, args, res) = unravel ty
-      num_args            = length args
-  cxt' <- mapM singPred cxt
-  arg_names <- replicateM num_args (qNewName "t")
-  prom_args <- mapM promoteType args
-  prom_res  <- promoteType res
-  let args' = map (\n -> singFamily `DAppT` (DVarT n)) arg_names
-      res'  = singFamily `DAppT` (foldl apply prom (map DVarT arg_names) `DSigT` prom_res)
-      tau   = ravel args' res'
-  let ty' = DForallT (zipWith DKindedTV arg_names prom_args)
-                     cxt' tau
-  return (ty', num_args, arg_names, prom_res)
-
-singPred :: DPred -> SgM DPred
-singPred = singPredRec []
-
-singPredRec :: [DType] -> DPred -> SgM DPred
-singPredRec ctx (DAppPr pr ty) = singPredRec (ty : ctx) pr
-singPredRec _ctx (DSigPr _pr _ki) =
-  fail "Singling of constraints with explicit kinds not yet supported"
-singPredRec _ctx (DVarPr _n) =
-  fail "Singling of contraint variables not yet supported"
-singPredRec ctx (DConPr n)
-  | n == equalityName
-  = fail "Singling of type equality constraints not yet supported"
-  | otherwise = do
-    kis <- mapM promoteType ctx
-    let sName = singClassName n
-    return $ foldl DAppPr (DConPr sName) (map kindParam kis)
diff --git a/src/Data/Singletons/Syntax.hs b/src/Data/Singletons/Syntax.hs
deleted file mode 100644
index 82a740a..0000000
--- a/src/Data/Singletons/Syntax.hs
+++ /dev/null
@@ -1,136 +0,0 @@
-{- Data/Singletons/Syntax.hs
-
-(c) Richard Eisenberg 2014
-eir@cis.upenn.edu
-
-Converts a list of DLetDecs into a LetDecEnv for easier processing,
-and contains various other AST definitions.
--}
-
-{-# LANGUAGE DataKinds, TypeFamilies, PolyKinds, DeriveDataTypeable,
-             StandaloneDeriving, FlexibleInstances #-}
-
-module Data.Singletons.Syntax where
-
-import Prelude hiding ( exp )
-import Data.Monoid
-import Language.Haskell.TH.Syntax
-import Language.Haskell.TH.Desugar
-import Data.Map.Strict ( Map )
-import qualified Data.Map.Strict as Map
-
-type VarPromotions = [(Name, Name)]  -- from term-level name to type-level name
-
-  -- the relevant part of declarations
-data DataDecl      = DataDecl NewOrData Name [DTyVarBndr] [DCon] [Name]
-
-data ClassDecl ann = ClassDecl { cd_cxt  :: DCxt
-                               , cd_name :: Name
-                               , cd_tvbs :: [DTyVarBndr]
-                               , cd_fds  :: [FunDep]
-                               , cd_lde  :: LetDecEnv ann }
-
-data InstDecl  ann = InstDecl { id_cxt     :: DCxt
-                              , id_name    :: Name
-                              , id_arg_tys :: [DType]
-                              , id_meths   :: [(Name, LetDecRHS ann)] }
-
-type UClassDecl = ClassDecl Unannotated
-type UInstDecl  = InstDecl Unannotated
-
-type AClassDecl = ClassDecl Annotated
-type AInstDecl  = InstDecl Annotated
-
-{-
-We see below several datatypes beginning with "A". These are annotated structures,
-necessary for Promote to communicate key things to Single. In particular, promotion
-of expressions is *not* deterministic, due to the necessity to create unique names
-for lets, cases, and lambdas. So, we put these promotions into an annotated AST
-so that Single can use the right promotions.
--}
-
--- A DExp with let and lambda nodes annotated with their type-level equivalents
-data ADExp = ADVarE Name
-           | ADConE Name
-           | ADLitE Lit
-           | ADAppE ADExp ADExp
-           | ADLamE VarPromotions  -- bind these type variables to these term vars
-                    DType          -- the promoted lambda
-                    [Name] ADExp
-           | ADCaseE ADExp DType [ADMatch] DType
-               -- the first type is the promoted scrutinee;
-               -- the second type is the return type
-           | ADLetE ALetDecEnv ADExp
-           | ADSigE ADExp DType
-
- -- unlike in other places, the DType in an ADMatch (the promoted "case" statement)
- -- should be used with DAppT, *not* apply! (Case statements are not defunctionalized.)
-data ADMatch = ADMatch VarPromotions DType DPat ADExp
-data ADClause = ADClause VarPromotions
-                         [DPat] ADExp
-
-data AnnotationFlag = Annotated | Unannotated
-
--- These are used at the type-level exclusively
-type Annotated   = 'Annotated
-type Unannotated = 'Unannotated
-
-type family IfAnn (ann :: AnnotationFlag) (yes :: k) (no :: k) :: k
-type instance IfAnn Annotated   yes no = yes
-type instance IfAnn Unannotated yes no = no
-
-data family LetDecRHS (ann :: AnnotationFlag)
-data instance LetDecRHS Annotated
-  = AFunction DType  -- promote function (unapplied)
-    Int    -- number of arrows in type
-    [ADClause]
-  | AValue DType -- promoted exp
-    Int   -- number of arrows in type
-    ADExp
-data instance LetDecRHS Unannotated = UFunction [DClause]
-                                    | UValue DExp
-
-type ALetDecRHS = LetDecRHS Annotated
-type ULetDecRHS = LetDecRHS Unannotated
-
-data LetDecEnv ann = LetDecEnv
-                   { lde_defns :: Map Name (LetDecRHS ann)
-                   , lde_types :: Map Name DType   -- type signatures
-                   , lde_infix :: [(Fixity, Name)] -- infix declarations
-                   , lde_proms :: IfAnn ann (Map Name DType) () -- possibly, promotions
-                   }
-type ALetDecEnv = LetDecEnv Annotated
-type ULetDecEnv = LetDecEnv Unannotated
-
-instance Monoid ULetDecEnv where
-  mempty = LetDecEnv Map.empty Map.empty [] ()
-  mappend (LetDecEnv defns1 types1 infx1 _) (LetDecEnv defns2 types2 infx2 _) =
-    LetDecEnv (defns1 <> defns2) (types1 <> types2) (infx1 <> infx2) ()
-
-valueBinding :: Name -> ULetDecRHS -> ULetDecEnv
-valueBinding n v = emptyLetDecEnv { lde_defns = Map.singleton n v }
-
-typeBinding :: Name -> DType -> ULetDecEnv
-typeBinding n t = emptyLetDecEnv { lde_types = Map.singleton n t }
-
-infixDecl :: Fixity -> Name -> ULetDecEnv
-infixDecl f n = emptyLetDecEnv { lde_infix = [(f,n)] }
-
-emptyLetDecEnv :: ULetDecEnv
-emptyLetDecEnv = mempty
-
-buildLetDecEnv :: Quasi q => [DLetDec] -> q ULetDecEnv
-buildLetDecEnv = go emptyLetDecEnv
-  where
-    go acc [] = return acc
-    go acc (DFunD name clauses : rest) =
-      go (valueBinding name (UFunction clauses) <> acc) rest
-    go acc (DValD (DVarPa name) exp : rest) =
-      go (valueBinding name (UValue exp) <> acc) rest
-    go acc (dec@(DValD {}) : rest) = do
-      flattened <- flattenDValD dec
-      go acc (flattened ++ rest)
-    go acc (DSigD name ty : rest) =
-      go (typeBinding name ty <> acc) rest
-    go acc (DInfixD f n : rest) =
-      go (infixDecl f n <> acc) rest
diff --git a/src/Data/Singletons/TH.hs b/src/Data/Singletons/TH.hs
deleted file mode 100644
index ffc7d67..0000000
--- a/src/Data/Singletons/TH.hs
+++ /dev/null
@@ -1,147 +0,0 @@
-{-# LANGUAGE ExplicitNamespaces, CPP #-}
-
------------------------------------------------------------------------------
--- |
--- Module      :  Data.Singletons.TH
--- Copyright   :  (C) 2013 Richard Eisenberg
--- License     :  BSD-style (see LICENSE)
--- Maintainer  :  Richard Eisenberg (eir@cis.upenn.edu)
--- Stability   :  experimental
--- Portability :  non-portable
---
--- This module contains everything you need to derive your own singletons via
--- Template Haskell.
---
--- TURN ON @-XScopedTypeVariables@ IN YOUR MODULE IF YOU WANT THIS TO WORK.
---
-----------------------------------------------------------------------------
-
-module Data.Singletons.TH (
-  -- * Primary Template Haskell generation functions
-  singletons, singletonsOnly, genSingletons,
-  promote, promoteOnly, genDefunSymbols, genPromotions,
-
-  -- ** Functions to generate equality instances
-  promoteEqInstances, promoteEqInstance,
-  singEqInstances, singEqInstance,
-  singEqInstancesOnly, singEqInstanceOnly,
-  singDecideInstances, singDecideInstance,
-
-  -- ** Functions to generate 'Ord' instances
-  promoteOrdInstances, promoteOrdInstance,
-  singOrdInstances, singOrdInstance,
-
-  -- ** Functions to generate 'Bounded' instances
-  promoteBoundedInstances, promoteBoundedInstance,
-  singBoundedInstances, singBoundedInstance,
-
-  -- ** Functions to generate 'Enum' instances
-  promoteEnumInstances, promoteEnumInstance,
-  singEnumInstances, singEnumInstance,
-
-  -- ** Utility functions
-  cases, sCases,
-
-  -- * Basic singleton definitions
-  Sing(SFalse, STrue, STuple0, STuple2, STuple3, STuple4, STuple5, STuple6, STuple7),
-  module Data.Singletons,
-
-  -- * Auxiliary definitions
-  -- | These definitions might be mentioned in code generated by Template Haskell,
-  -- so they must be in scope.
-
-  PEq(..), If, sIf, (:&&), SEq(..),
-  POrd(..), SOrd(..), ThenCmp, sThenCmp, Foldl, sFoldl,
-  Any,
-  SDecide(..), (:~:)(..), Void, Refuted, Decision(..),
-  Proxy(..), KProxy(..), SomeSing(..),
-
-  Error, ErrorSym0,
-  TrueSym0, FalseSym0,
-  LTSym0, EQSym0, GTSym0,
-  Tuple0Sym0,
-  Tuple2Sym0, Tuple2Sym1, Tuple2Sym2,
-  Tuple3Sym0, Tuple3Sym1, Tuple3Sym2, Tuple3Sym3,
-  Tuple4Sym0, Tuple4Sym1, Tuple4Sym2, Tuple4Sym3, Tuple4Sym4,
-  Tuple5Sym0, Tuple5Sym1, Tuple5Sym2, Tuple5Sym3, Tuple5Sym4, Tuple5Sym5,
-  Tuple6Sym0, Tuple6Sym1, Tuple6Sym2, Tuple6Sym3, Tuple6Sym4, Tuple6Sym5, Tuple6Sym6,
-  Tuple7Sym0, Tuple7Sym1, Tuple7Sym2, Tuple7Sym3, Tuple7Sym4, Tuple7Sym5, Tuple7Sym6, Tuple7Sym7,
-  CompareSym0, ThenCmpSym0, FoldlSym0,
-
-  SuppressUnusedWarnings(..)
-
- ) where
-
-import Data.Singletons
-import Data.Singletons.Single
-import Data.Singletons.Promote
-import Data.Singletons.Prelude.Instances
-import Data.Singletons.Prelude.Bool
-import Data.Singletons.Prelude.Eq
-import Data.Singletons.Prelude.Ord
-import Data.Singletons.Decide
-import Data.Singletons.TypeLits
-import Data.Singletons.SuppressUnusedWarnings
-import Data.Singletons.Names
-import Language.Haskell.TH.Desugar
-
-import GHC.Exts
-import Language.Haskell.TH
-import Data.Singletons.Util
-import Data.Proxy ( Proxy(..) )
-import Control.Arrow ( first )
-
--- | The function 'cases' generates a case expression where each right-hand side
--- is identical. This may be useful if the type-checker requires knowledge of which
--- constructor is used to satisfy equality or type-class constraints, but where
--- each constructor is treated the same.
-cases :: DsMonad q
-      => Name        -- ^ The head of the type of the scrutinee. (Like @''Maybe@ or @''Bool@.)
-      -> q Exp       -- ^ The scrutinee, in a Template Haskell quote
-      -> q Exp       -- ^ The body, in a Template Haskell quote
-      -> q Exp
-cases tyName expq bodyq = do
-  dinfo <- dsReify tyName
-  case dinfo of
-    Just (DTyConI (DDataD _ _ _ _ ctors _) _) ->
-      expToTH <$> buildCases (map extractNameArgs ctors) expq bodyq
-    Just _ ->
-      fail $ "Using <<cases>> with something other than a type constructor: "
-              ++ (show tyName)
-    _ -> fail $ "Cannot find " ++ show tyName
-
--- | The function 'sCases' generates a case expression where each right-hand side
--- is identical. This may be useful if the type-checker requires knowledge of which
--- constructor is used to satisfy equality or type-class constraints, but where
--- each constructor is treated the same. For 'sCases', unlike 'cases', the
--- scrutinee is a singleton. But make sure to pass in the name of the /original/
--- datatype, preferring @''Maybe@ over @''SMaybe@.
-sCases :: DsMonad q
-       => Name        -- ^ The head of the type the scrutinee's type is based on.
-                      -- (Like @''Maybe@ or @''Bool@.)
-       -> q Exp       -- ^ The scrutinee, in a Template Haskell quote
-       -> q Exp       -- ^ The body, in a Template Haskell quote
-       -> q Exp
-sCases tyName expq bodyq = do
-  dinfo <- dsReify tyName
-  case dinfo of
-    Just (DTyConI (DDataD _ _ _ _ ctors _) _) ->
-      let ctor_stuff = map (first singDataConName . extractNameArgs) ctors in
-      expToTH <$> buildCases ctor_stuff expq bodyq
-    Just _ ->
-      fail $ "Using <<cases>> with something other than a type constructor: "
-              ++ (show tyName)
-    _ -> fail $ "Cannot find " ++ show tyName
-
-buildCases :: DsMonad m
-           => [(Name, Int)]
-           -> m Exp  -- scrutinee
-           -> m Exp  -- body
-           -> m DExp
-buildCases ctor_infos expq bodyq =
-  DCaseE <$> (dsExp =<< expq) <*>
-             mapM (\con -> DMatch (conToPat con) <$> (dsExp =<< bodyq)) ctor_infos
-  where
-    conToPat :: (Name, Int) -> DPat
-    conToPat (name, num_fields) =
-      DConPa name (replicate num_fields DWildPa)
diff --git a/src/Data/Singletons/TypeLits.hs b/src/Data/Singletons/TypeLits.hs
index 35273d3..33a8786 100644
--- a/src/Data/Singletons/TypeLits.hs
+++ b/src/Data/Singletons/TypeLits.hs
@@ -17,6 +17,7 @@
 
 module Data.Singletons.TypeLits (
   Nat, Symbol,
+  Sing(SNat, SSym),
   SNat, SSymbol, withKnownNat, withKnownSymbol,
   Error, ErrorSym0, ErrorSym1, sError,
   KnownNat, natVal, KnownSymbol, symbolVal,
diff --git a/src/Data/Singletons/TypeLits/Internal.hs b/src/Data/Singletons/TypeLits/Internal.hs
index e167c55..a404d37 100644
--- a/src/Data/Singletons/TypeLits/Internal.hs
+++ b/src/Data/Singletons/TypeLits/Internal.hs
@@ -30,8 +30,8 @@ module Data.Singletons.TypeLits.Internal (
   (:^), (:^$), (:^$$), (:^$$$)
   ) where
 
-import Data.Singletons.Promote
 import Data.Singletons
+import Data.Singletons.SuppressUnusedWarnings
 import Data.Singletons.Prelude.Eq
 import Data.Singletons.Prelude.Ord
 import Data.Singletons.Decide
@@ -143,7 +143,13 @@ withKnownSymbol SSym f = f
 -- | The promotion of 'error'. This version is more poly-kinded for
 -- easier use.
 type family Error (str :: k0) :: k
-$(genDefunSymbols [''Error])
+
+type ErrorSym1 (t_ap3U :: k0_aot6) = Error t_ap3U
+instance SuppressUnusedWarnings ErrorSym0 where
+  suppressUnusedWarnings _ = snd ((,) ErrorSym0KindInference ())
+data ErrorSym0 (l_ap3V :: TyFun k0_aot6 k_aot5)
+  = forall arg_ap3W. KindOf (Apply ErrorSym0 arg_ap3W) ~ KindOf (ErrorSym1 arg_ap3W) =>
+    ErrorSym0KindInference
 
 -- | The singleton for 'error'
 sError :: Sing (str :: Symbol) -> a
@@ -152,4 +158,17 @@ sError sstr = error (fromSing sstr)
 -- TODO: move this to a better home:
 type a :^ b = a ^ b
 infixr 8 :^
-$(genDefunSymbols [''(:^)])
+
+type (:^$$$) (t_ap6L :: Nat) (t_ap6M :: Nat) = (:^) t_ap6L t_ap6M
+instance SuppressUnusedWarnings (:^$$) where
+  suppressUnusedWarnings _ = snd ((,) (:^$$###) ())
+data (:^$$) (l_ap6Q :: Nat) l_ap6P
+  = forall arg_ap6R. KindOf (Apply ((:^$$) l_ap6Q) arg_ap6R) ~ KindOf ((:^$$$) l_ap6Q arg_ap6R) =>
+    (:^$$###)
+type instance Apply ((:^$$) l_ap6Q) l_ap6P = (:^$$$) l_ap6Q l_ap6P
+instance SuppressUnusedWarnings (:^$) where
+  suppressUnusedWarnings _ = snd ((,) (:^$###) ())
+data (:^$) l_ap6N
+  = forall arg_ap6O. KindOf (Apply (:^$) arg_ap6O) ~ KindOf ((:^$$) arg_ap6O) =>
+    (:^$###)
+type instance Apply (:^$) l_ap6N = (:^$$) l_ap6N
diff --git a/src/Data/Singletons/TypeRepStar.hs b/src/Data/Singletons/TypeRepStar.hs
deleted file mode 100644
index 6eeccaa..0000000
--- a/src/Data/Singletons/TypeRepStar.hs
+++ /dev/null
@@ -1,85 +0,0 @@
-{-# LANGUAGE RankNTypes, TypeFamilies, KindSignatures, FlexibleInstances,
-             GADTs, UndecidableInstances, ScopedTypeVariables, DataKinds,
-             MagicHash, TypeOperators #-}
-{-# OPTIONS_GHC -fno-warn-orphans #-}
-
------------------------------------------------------------------------------
--- |
--- Module      :  Data.Singletons.TypeRepStar
--- Copyright   :  (C) 2013 Richard Eisenberg
--- License     :  BSD-style (see LICENSE)
--- Maintainer  :  Richard Eisenberg (eir@cis.upenn.edu)
--- Stability   :  experimental
--- Portability :  non-portable
---
--- This module defines singleton instances making 'Typeable' the singleton for
--- the kind @*@. The definitions don't fully line up with what is expected
--- within the singletons library, so expect unusual results!
---
-----------------------------------------------------------------------------
-
-module Data.Singletons.TypeRepStar (
-  Sing(STypeRep)
-  -- | Here is the definition of the singleton for @*@:
-  --
-  -- > data instance Sing (a :: *) where
-  -- >   STypeRep :: Typeable a => Sing a
-  --
-  -- Instances for 'SingI', 'SingKind', 'SEq', 'SDecide', and 'TestCoercion' are
-  -- also supplied.
-  ) where
-
-import Data.Singletons.Prelude.Instances
-import Data.Singletons
-import Data.Singletons.Prelude.Eq
-import Data.Typeable
-import Unsafe.Coerce
-import Data.Singletons.Decide
-
-import GHC.Exts ( Proxy# )
-import Data.Type.Coercion
-import Data.Type.Equality
-
-data instance Sing (a :: *) where
-  STypeRep :: Typeable a => Sing a
-
-instance Typeable a => SingI (a :: *) where
-  sing = STypeRep
-instance SingKind ('KProxy :: KProxy *) where
-  type DemoteRep ('KProxy :: KProxy *) = TypeRep
-  fromSing (STypeRep :: Sing a) = typeOf (undefined :: a)
-  toSing = dirty_mk_STypeRep
-
-instance PEq ('KProxy :: KProxy *) where
-  type (a :: *) :== (b :: *) = a == b
-
-instance SEq ('KProxy :: KProxy *) where
-  (STypeRep :: Sing a) %:== (STypeRep :: Sing b) =
-    case (eqT :: Maybe (a :~: b)) of
-      Just Refl -> STrue
-      Nothing   -> unsafeCoerce SFalse
-                    -- the Data.Typeable interface isn't strong enough
-                    -- to enable us to define this without unsafeCoerce
-
-instance SDecide ('KProxy :: KProxy *) where
-  (STypeRep :: Sing a) %~ (STypeRep :: Sing b) =
-    case (eqT :: Maybe (a :~: b)) of
-      Just Refl -> Proved Refl
-      Nothing   -> Disproved (\Refl -> error "Data.Typeable.eqT failed")
-
--- TestEquality instance already defined, but we need this one:
-instance TestCoercion Sing where
-  testCoercion (STypeRep :: Sing a) (STypeRep :: Sing b) =
-    case (eqT :: Maybe (a :~: b)) of
-      Just Refl -> Just Coercion
-      Nothing   -> Nothing
-
--- everything below here is private and dirty. Don't look!
-
-newtype DI = Don'tInstantiate (forall a. Typeable a => Sing a)
-dirty_mk_STypeRep :: TypeRep -> SomeSing ('KProxy :: KProxy *)
-dirty_mk_STypeRep rep =
-  let justLikeTypeable :: Proxy# a -> TypeRep
-      justLikeTypeable _ = rep
-  in
-  unsafeCoerce (Don'tInstantiate STypeRep) justLikeTypeable
diff --git a/src/Data/Singletons/Util.hs b/src/Data/Singletons/Util.hs
deleted file mode 100644
index 6454396..0000000
--- a/src/Data/Singletons/Util.hs
+++ /dev/null
@@ -1,450 +0,0 @@
-{- Data/Singletons/Util.hs
-
-(c) Richard Eisenberg 2013
-eir@cis.upenn.edu
-
-This file contains helper functions internal to the singletons package.
-Users of the package should not need to consult this file.
--}
-
-{-# LANGUAGE TypeSynonymInstances, FlexibleInstances, RankNTypes,
-             TemplateHaskell, GeneralizedNewtypeDeriving,
-             MultiParamTypeClasses, StandaloneDeriving,
-             UndecidableInstances, MagicHash, UnboxedTuples,
-             LambdaCase, CPP #-}
-
-module Data.Singletons.Util where
-
-import Prelude hiding ( exp, foldl, concat, mapM, any, pred )
-import Language.Haskell.TH.Syntax hiding ( lift )
-import Language.Haskell.TH.Desugar
-import Data.Char
-import Control.Monad hiding ( mapM )
-import Control.Monad.Writer hiding ( mapM )
-import Control.Monad.Reader hiding ( mapM )
-import qualified Data.Map as Map
-import Data.Map ( Map )
-import Data.Foldable
-import Data.Traversable
-
--- The list of types that singletons processes by default
-basicTypes :: [Name]
-basicTypes = [ ''Maybe
-             , ''[]
-             , ''Either
-             ] ++ boundedBasicTypes
-
-boundedBasicTypes :: [Name]
-boundedBasicTypes =
-            [  ''(,)
-            , ''(,,)
-            , ''(,,,)
-            , ''(,,,,)
-            , ''(,,,,,)
-            , ''(,,,,,,)
-            ] ++ enumBasicTypes
-
-enumBasicTypes :: [Name]
-enumBasicTypes = [ ''Bool, ''Ordering, ''() ]
-
--- like reportWarning, but generalized to any Quasi
-qReportWarning :: Quasi q => String -> q ()
-qReportWarning = qReport False
-
--- like reportError, but generalized to any Quasi
-qReportError :: Quasi q => String -> q ()
-qReportError = qReport True
-
--- | Generate a new Unique
-qNewUnique :: DsMonad q => q Int
-qNewUnique = do
-  Name _ flav <- qNewName "x"
-  case flav of
-    NameU n -> return n
-    _       -> error "Internal error: `qNewName` didn't return a NameU"
-
-checkForRep :: Quasi q => [Name] -> q ()
-checkForRep names =
-  when (any ((== "Rep") . nameBase) names)
-    (fail $ "A data type named <<Rep>> is a special case.\n" ++
-            "Promoting it will not work as expected.\n" ++
-            "Please choose another name for your data type.")
-
-checkForRepInDecls :: Quasi q => [DDec] -> q ()
-checkForRepInDecls decls =
-  checkForRep (allNamesIn decls)
-
-tysOfConFields :: DConFields -> [DType]
-tysOfConFields (DNormalC stys) = map snd stys
-tysOfConFields (DRecC vstys)   = map (\(_,_,ty) -> ty) vstys
-
--- extract the name and number of arguments to a constructor
-extractNameArgs :: DCon -> (Name, Int)
-extractNameArgs = liftSnd length . extractNameTypes
-
--- extract the name and types of constructor arguments
-extractNameTypes :: DCon -> (Name, [DType])
-extractNameTypes (DCon _ _ n fields) = (n, tysOfConFields fields)
-
-extractName :: DCon -> Name
-extractName (DCon _ _ n _) = n
-
--- is an identifier uppercase?
-isUpcase :: Name -> Bool
-isUpcase n = let first = head (nameBase n) in isUpper first || first == ':'
-
--- make an identifier uppercase
-upcase :: Name -> Name
-upcase = mkName . toUpcaseStr noPrefix
-
--- make an identifier uppercase and return it as a String
-toUpcaseStr :: (String, String)  -- (alpha, symb) prefixes to prepend
-            -> Name -> String
-toUpcaseStr (alpha, symb) n
-  | isHsLetter first
-  = upcase_alpha
-
-  | otherwise
-  = upcase_symb
-
-  where
-    str   = nameBase n
-    first = head str
-
-    upcase_alpha = alpha ++ (toUpper first) : tail str
-
-    upcase_symb
-      |  first == ':'
-      || first == '$' -- special case to avoid name clashes. See #29
-      = symb ++ str
-      | otherwise
-      = symb ++ ':' : str
-
-noPrefix :: (String, String)
-noPrefix = ("", "")
-
--- make an identifier lowercase
-locase :: Name -> Name
-locase n =
-  let str = nameBase n
-      first = head str in
-    if isHsLetter first
-     then mkName ((toLower first) : tail str)
-     else mkName (tail str) -- remove the ":"
-
--- put an uppercase prefix on a name. Takes two prefixes: one for identifiers
--- and one for symbols
-prefixUCName :: String -> String -> Name -> Name
-prefixUCName pre tyPre n = case (nameBase n) of
-    (':' : rest) -> mkName (tyPre ++ rest)
-    alpha -> mkName (pre ++ alpha)
-
--- put a lowercase prefix on a name. Takes two prefixes: one for identifiers
--- and one for symbols
-prefixLCName :: String -> String -> Name -> Name
-prefixLCName pre tyPre n =
-  let str = nameBase n
-      first = head str in
-    if isHsLetter first
-     then mkName (pre ++ str)
-     else mkName (tyPre ++ str)
-
-suffixName :: String -> String -> Name -> Name
-suffixName ident symb n =
-  let str = nameBase n
-      first = head str in
-  if isHsLetter first
-  then mkName (str ++ ident)
-  else mkName (str ++ symb)
-
--- convert a number into both alphanumeric and symoblic forms
-uniquePrefixes :: String   -- alphanumeric prefix
-               -> String   -- symbolic prefix
-               -> Int
-               -> (String, String)  -- (alphanum, symbolic)
-uniquePrefixes alpha symb n = (alpha ++ n_str, symb ++ convert n_str)
-  where
-    n_str = show n
-
-    convert [] = []
-    convert (d : ds) =
-      let d' = case d of
-                 '0' -> '!'
-                 '1' -> '#'
-                 '2' -> '$'
-                 '3' -> '%'
-                 '4' -> '&'
-                 '5' -> '*'
-                 '6' -> '+'
-                 '7' -> '.'
-                 '8' -> '/'
-                 '9' -> '>'
-                 _   -> error "non-digit in show #"
-      in d' : convert ds
-
--- extract the kind from a TyVarBndr
-extractTvbKind :: DTyVarBndr -> Maybe DKind
-extractTvbKind (DPlainTV _) = Nothing
-extractTvbKind (DKindedTV _ k) = Just k
-
--- extract the name from a TyVarBndr.
-extractTvbName :: DTyVarBndr -> Name
-extractTvbName (DPlainTV n) = n
-extractTvbName (DKindedTV n _) = n
-
-tvbToType :: DTyVarBndr -> DType
-tvbToType = DVarT . extractTvbName
-
-inferMaybeKindTV :: Name -> Maybe DKind -> DTyVarBndr
-inferMaybeKindTV n Nothing =  DPlainTV n
-inferMaybeKindTV n (Just k) = DKindedTV n k
-
--- Get argument types from an arrow type. Removing ForallT is an
--- important preprocessing step required by promoteType.
-unravel :: DType -> ([DTyVarBndr], [DPred], [DType], DType)
-unravel (DForallT tvbs cxt ty) =
-  let (tvbs', cxt', tys, res) = unravel ty in
-  (tvbs ++ tvbs', cxt ++ cxt', tys, res)
-unravel (DAppT (DAppT DArrowT t1) t2) =
-  let (tvbs, cxt, tys, res) = unravel t2 in
-  (tvbs, cxt, t1 : tys, res)
-unravel t = ([], [], [], t)
-
--- Reconstruct arrow kind from the list of kinds
-ravel :: [DType] -> DType -> DType
-ravel []    res  = res
-ravel (h:t) res = DAppT (DAppT DArrowT h) (ravel t res)
-
--- count the number of arguments in a type
-countArgs :: DType -> Int
-countArgs ty = length args
-  where (_, _, args, _) = unravel ty
-
-substKind :: Map Name DKind -> DKind -> DKind
-substKind _ (DForallK {}) =
-  error "Higher-rank kind encountered in instance method promotion."
-substKind subst (DVarK n) =
-  case Map.lookup n subst of
-    Just ki -> ki
-    Nothing -> DVarK n
-substKind subst (DConK con kis) = DConK con (map (substKind subst) kis)
-substKind subst (DArrowK k1 k2) = DArrowK (substKind subst k1) (substKind subst k2)
-substKind _ DStarK = DStarK
-
-substType :: Map Name DType -> DType -> DType
-substType subst ty | Map.null subst = ty
-substType subst (DForallT tvbs cxt inner_ty) =
-  let subst'    = foldr Map.delete subst (map extractTvbName tvbs)
-      cxt'      = map (substPred subst') cxt
-      inner_ty' = substType subst' inner_ty
-  in
-  DForallT tvbs cxt' inner_ty'
-substType subst (DAppT ty1 ty2) = substType subst ty1 `DAppT` substType subst ty2
-substType subst (DSigT ty ki) = substType subst ty `DSigT` ki
-substType subst (DVarT n) =
-  case Map.lookup n subst of
-    Just ki -> ki
-    Nothing -> DVarT n
-substType _ ty@(DConT {}) = ty
-substType _ ty@(DArrowT)  = ty
-substType _ ty@(DLitT {}) = ty
-
-substPred :: Map Name DType -> DPred -> DPred
-substPred subst pred | Map.null subst = pred
-substPred subst (DAppPr pred ty) =
-  DAppPr (substPred subst pred) (substType subst ty)
-substPred subst (DSigPr pred ki) = DSigPr (substPred subst pred) ki
-substPred _ pred@(DVarPr {}) = pred
-substPred _ pred@(DConPr {}) = pred
-
-substKindInType :: Map Name DKind -> DType -> DType
-substKindInType subst ty | Map.null subst = ty
-substKindInType subst (DForallT tvbs cxt inner_ty) =
-  let tvbs'     = map (substKindInTvb subst) tvbs
-      cxt'      = map (substKindInPred subst) cxt
-      inner_ty' = substKindInType subst inner_ty
-  in
-  DForallT tvbs' cxt' inner_ty'
-substKindInType subst (DAppT ty1 ty2)
-  = substKindInType subst ty1 `DAppT` substKindInType subst ty2
-substKindInType subst (DSigT ty ki) = substKindInType subst ty `DSigT` substKind subst ki
-substKindInType _ ty@(DVarT {}) = ty
-substKindInType _ ty@(DConT {}) = ty
-substKindInType _ ty@(DArrowT)  = ty
-substKindInType _ ty@(DLitT {}) = ty
-
-substKindInPred :: Map Name DKind -> DPred -> DPred
-substKindInPred subst pred | Map.null subst = pred
-substKindInPred subst (DAppPr pred ty) =
-  DAppPr (substKindInPred subst pred) (substKindInType subst ty)
-substKindInPred subst (DSigPr pred ki) = DSigPr (substKindInPred subst pred)
-                                                (substKind subst ki)
-substKindInPred _ pred@(DVarPr {}) = pred
-substKindInPred _ pred@(DConPr {}) = pred
-
-substKindInTvb :: Map Name DKind -> DTyVarBndr -> DTyVarBndr
-substKindInTvb _ tvb@(DPlainTV _) = tvb
-substKindInTvb subst (DKindedTV n ki) = DKindedTV n (substKind subst ki)
-
-addStar :: DKind -> DKind
-addStar t = DArrowK t DStarK
-
-addStar_maybe :: Maybe DKind -> Maybe DKind
-addStar_maybe t = DArrowK <$> t <*> pure DStarK
-
--- apply a type to a list of types
-foldType :: DType -> [DType] -> DType
-foldType = foldl DAppT
-
--- apply an expression to a list of expressions
-foldExp :: DExp -> [DExp] -> DExp
-foldExp = foldl DAppE
-
--- is a kind a variable?
-isVarK :: DKind -> Bool
-isVarK (DVarK _) = True
-isVarK _ = False
-
--- is a function type?
-isFunTy :: DType -> Bool
-isFunTy (DAppT (DAppT DArrowT _) _) = True
-isFunTy (DForallT _ _ _)            = True
-isFunTy _                           = False
-
--- choose the first non-empty list
-orIfEmpty :: [a] -> [a] -> [a]
-orIfEmpty [] x = x
-orIfEmpty x  _ = x
-
-emptyMatches :: [DMatch]
-emptyMatches = [DMatch DWildPa (DAppE (DVarE 'error) (DLitE (StringL errStr)))]
-  where errStr = "Empty case reached -- this should be impossible"
-
--- build a pattern match over several expressions, each with only one pattern
-multiCase :: [DExp] -> [DPat] -> DExp -> DExp
-multiCase [] [] body = body
-multiCase scruts pats body =
-  DCaseE (mkTupleDExp scruts) [DMatch (mkTupleDPat pats) body]
-
--- Make a desugar function into a TH function.
-wrapDesugar :: (Desugar th ds, DsMonad q) => (th -> ds -> q ds) -> th -> q th
-wrapDesugar f th = do
-  ds <- desugar th
-  fmap sweeten $ f th ds
-
--- a monad transformer for writing a monoid alongside returning a Q
-newtype QWithAux m q a = QWA { runQWA :: WriterT m q a }
-  deriving ( Functor, Applicative, Monad, MonadTrans
-           , MonadWriter m, MonadReader r )
-
--- make a Quasi instance for easy lifting
-instance (Quasi q, Monoid m) => Quasi (QWithAux m q) where
-  qNewName          = lift `comp1` qNewName
-  qReport           = lift `comp2` qReport
-  qLookupName       = lift `comp2` qLookupName
-  qReify            = lift `comp1` qReify
-  qReifyInstances   = lift `comp2` qReifyInstances
-  qLocation         = lift qLocation
-  qRunIO            = lift `comp1` qRunIO
-  qAddDependentFile = lift `comp1` qAddDependentFile
-  qReifyRoles       = lift `comp1` qReifyRoles
-  qReifyAnnotations = lift `comp1` qReifyAnnotations
-  qReifyModule      = lift `comp1` qReifyModule
-  qAddTopDecls      = lift `comp1` qAddTopDecls
-  qAddModFinalizer  = lift `comp1` qAddModFinalizer
-  qGetQ             = lift qGetQ
-  qPutQ             = lift `comp1` qPutQ
-
-  qRecover exp handler = do
-    (result, aux) <- lift $ qRecover (evalForPair exp) (evalForPair handler)
-    tell aux
-    return result
-
-instance (DsMonad q, Monoid m) => DsMonad (QWithAux m q) where
-  localDeclarations = lift localDeclarations
-
--- helper functions for composition
-comp1 :: (b -> c) -> (a -> b) -> a -> c
-comp1 = (.)
-
-comp2 :: (c -> d) -> (a -> b -> c) -> a -> b -> d
-comp2 f g a b = f (g a b)
-
--- run a computation with an auxiliary monoid, discarding the monoid result
-evalWithoutAux :: Quasi q => QWithAux m q a -> q a
-evalWithoutAux = liftM fst . runWriterT . runQWA
-
--- run a computation with an auxiliary monoid, returning only the monoid result
-evalForAux :: Quasi q => QWithAux m q a -> q m
-evalForAux = execWriterT . runQWA
-
--- run a computation with an auxiliary monoid, return both the result
--- of the computation and the monoid result
-evalForPair :: Quasi q => QWithAux m q a -> q (a, m)
-evalForPair = runWriterT . runQWA
-
--- in a computation with an auxiliary map, add a binding to the map
-addBinding :: (Quasi q, Ord k) => k -> v -> QWithAux (Map.Map k v) q ()
-addBinding k v = tell (Map.singleton k v)
-
--- in a computation with an auxiliar list, add an element to the list
-addElement :: Quasi q => elt -> QWithAux [elt] q ()
-addElement elt = tell [elt]
-
--- lift concatMap into a monad
--- could this be more efficient?
-concatMapM :: (Monad monad, Monoid monoid, Traversable t)
-           => (a -> monad monoid) -> t a -> monad monoid
-concatMapM fn list = do
-  bss <- mapM fn list
-  return $ fold bss
-
--- make a one-element list
-listify :: a -> [a]
-listify = (:[])
-
-fstOf3 :: (a,b,c) -> a
-fstOf3 (a,_,_) = a
-
-liftFst :: (a -> b) -> (a, c) -> (b, c)
-liftFst f (a, c) = (f a, c)
-
-liftSnd :: (a -> b) -> (c, a) -> (c, b)
-liftSnd f (c, a) = (c, f a)
-
-snocView :: [a] -> ([a], a)
-snocView [] = error "snocView nil"
-snocView [x] = ([], x)
-snocView (x : xs) = liftFst (x:) (snocView xs)
-
-partitionWith :: (a -> Either b c) -> [a] -> ([b], [c])
-partitionWith f = go [] []
-  where go bs cs []     = (reverse bs, reverse cs)
-        go bs cs (a:as) =
-          case f a of
-            Left b  -> go (b:bs) cs as
-            Right c -> go bs (c:cs) as
-
-partitionWithM :: Monad m => (a -> m (Either b c)) -> [a] -> m ([b], [c])
-partitionWithM f = go [] []
-  where go bs cs []     = return (reverse bs, reverse cs)
-        go bs cs (a:as) = do
-          fa <- f a
-          case fa of
-            Left b  -> go (b:bs) cs as
-            Right c -> go bs (c:cs) as
-
-partitionLetDecs :: [DDec] -> ([DLetDec], [DDec])
-partitionLetDecs = partitionWith (\case DLetDec ld -> Left ld
-                                        dec        -> Right dec)
-
-mapAndUnzip3M :: Monad m => (a -> m (b,c,d)) -> [a] -> m ([b],[c],[d])
-mapAndUnzip3M _ []     = return ([],[],[])
-mapAndUnzip3M f (x:xs) = do
-    (r1,  r2,  r3)  <- f x
-    (rs1, rs2, rs3) <- mapAndUnzip3M f xs
-    return (r1:rs1, r2:rs2, r3:rs3)
-
--- is it a letter or underscore?
-isHsLetter :: Char -> Bool
-isHsLetter c = isLetter c || c == '_'
-- 
2.7.4 (Apple Git-66)

