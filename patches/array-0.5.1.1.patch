From 8d73b19c725d2336b433fb5b539cd8c00960e910 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Fri, 16 Dec 2016 13:04:20 +0530
Subject: [PATCH] Patched

---
 Data/Array/Base.hs | 10 ++++++----
 Data/Array/IO.hs   |  4 ++--
 array.cabal        |  1 +
 java/Utils.java    | 29 +++++++++++++++++++++++++++++
 4 files changed, 38 insertions(+), 6 deletions(-)
 create mode 100644 java/Utils.java

diff --git a/Data/Array/Base.hs b/Data/Array/Base.hs
index 9908ad2..52d625d 100644
--- a/Data/Array/Base.hs
+++ b/Data/Array/Base.hs
@@ -46,8 +46,6 @@ import GHC.IOArray      ( IOArray(..),
                           newIOArray, unsafeReadIOArray, unsafeWriteIOArray )
 import Data.Typeable
 
-#include "MachDeps.h"
-
 -----------------------------------------------------------------------------
 -- Class of immutable arrays
 
@@ -1350,6 +1348,10 @@ instance MArray (STUArray s) Word64 (ST s) where
 -----------------------------------------------------------------------------
 -- Translation between elements and bytes
 
+#define SIZEOF_HSWORD 4
+#define SIZEOF_HSDOUBLE 8
+#define SIZEOF_HSFLOAT 4
+
 bOOL_SCALE, bOOL_WORD_SCALE,
   wORD_SCALE, dOUBLE_SCALE, fLOAT_SCALE :: Int# -> Int#
 bOOL_SCALE n# = (n# +# last#) `uncheckedIShiftRA#` 3#
@@ -1402,7 +1404,7 @@ freezeSTUArray (STUArray l u n marr#) = ST $ \s1# ->
     case unsafeFreezeByteArray# marr'# s3# of { (# s4#, arr# #) ->
     (# s4#, UArray l u n arr# #) }}}}}
 
-foreign import ccall unsafe "memcpy"
+foreign import java unsafe "@static eta.array.Utils.memcpy"
     memcpy_freeze :: MutableByteArray# s -> MutableByteArray# s -> CSize
            -> IO (Ptr a)
 
@@ -1480,7 +1482,7 @@ thawSTUArray (UArray l u n arr#) = ST $ \s1# ->
     case unsafeCoerce# m s2#            of { (# s3#, _ #) ->
     (# s3#, STUArray l u n marr# #) }}}}
 
-foreign import ccall unsafe "memcpy"
+foreign import java unsafe "@static eta.array.Utils.memcpy"
     memcpy_thaw :: MutableByteArray# s -> ByteArray# -> CSize
            -> IO (Ptr a)
 
diff --git a/Data/Array/IO.hs b/Data/Array/IO.hs
index f0a8f89..24f9dc6 100644
--- a/Data/Array/IO.hs
+++ b/Data/Array/IO.hs
@@ -67,7 +67,7 @@ hGetArray handle (IOUArray (STUArray _l _u n ptr)) count
         _ <- memcpy_ba_ptr ptr p (fromIntegral r)
         return r
 
-foreign import ccall unsafe "memcpy"
+foreign import java unsafe "@static eta.array.Utils.memcpy_ba_ptr"
    memcpy_ba_ptr :: MutableByteArray# RealWorld -> Ptr a -> CSize -> IO (Ptr ())
 
 -- ---------------------------------------------------------------------------
@@ -90,7 +90,7 @@ hPutArray handle (IOUArray (STUArray _l _u n raw)) count
        _ <- memcpy_ptr_ba p raw (fromIntegral count)
        hPutBuf handle p count
 
-foreign import ccall unsafe "memcpy"
+foreign import java unsafe "@static eta.array.Utils.memcpy_ptr_ba"
    memcpy_ptr_ba :: Ptr a -> MutableByteArray# RealWorld -> CSize -> IO (Ptr ())
 
 -- ---------------------------------------------------------------------------
diff --git a/array.cabal b/array.cabal
index d5dd036..72c4192 100644
--- a/array.cabal
+++ b/array.cabal
@@ -39,6 +39,7 @@ library
       UnliftedFFITypes
   build-depends: base >= 4.5 && < 4.10
   ghc-options: -Wall
+  java-sources: java/Utils.java
   exposed-modules:
       Data.Array
       Data.Array.Base
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..c07395b
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,29 @@
+package eta.array;
+
+import java.nio.ByteBuffer;
+import eta.runtime.io.StgByteArray;
+import eta.runtime.stg.StgClosure;
+
+public class Utils {
+    private static ByteBuffer memcpy_buf(ByteBuffer destBuffer, ByteBuffer srcBuffer, int size) {
+        ByteBuffer dest = destBuffer.duplicate();
+        ByteBuffer src = srcBuffer.duplicate();
+        int srcOffset = src.position();
+        src.limit(srcOffset + size);
+        dest.put(srcBuffer);
+        return dest;
+    }
+
+    public static ByteBuffer memcpy(StgByteArray destArray, StgByteArray srcArray, int size) {
+        return memcpy_buf(destArray.buf, srcArray.buf, size);
+    }
+
+    public static ByteBuffer memcpy_ba_ptr(StgByteArray destArray, ByteBuffer srcBuffer, int size) {
+
+        return memcpy_buf(destArray.buf, srcBuffer, size);
+    }
+
+    public static ByteBuffer memcpy_ptr_ba(ByteBuffer destBuffer, StgByteArray srcArray, int size) {
+        return memcpy_buf(destBuffer, srcArray.buf, size);
+    }
+}
--
2.7.4 (Apple Git-66)
